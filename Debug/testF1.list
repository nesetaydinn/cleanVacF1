
testF1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c274  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800c384  0800c384  0001c384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4b8  0800c4b8  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800c4b8  0800c4b8  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c4b8  0800c4b8  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4b8  0800c4b8  0001c4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c4bc  0800c4bc  0001c4bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800c4c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003fd4  20000180  0800c640  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004154  0800c640  00024154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002989d  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000583f  00000000  00000000  00049a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c50  00000000  00000000  0004f288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a08  00000000  00000000  00050ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8ae  00000000  00000000  000528e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021684  00000000  00000000  0007018e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a073  00000000  00000000  00091812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012b885  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000754c  00000000  00000000  0012b8d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c36c 	.word	0x0800c36c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	0800c36c 	.word	0x0800c36c

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__aeabi_f2iz>:
 800060c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000610:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000614:	d30f      	bcc.n	8000636 <__aeabi_f2iz+0x2a>
 8000616:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800061a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061e:	d90d      	bls.n	800063c <__aeabi_f2iz+0x30>
 8000620:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000628:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800062c:	fa23 f002 	lsr.w	r0, r3, r2
 8000630:	bf18      	it	ne
 8000632:	4240      	negne	r0, r0
 8000634:	4770      	bx	lr
 8000636:	f04f 0000 	mov.w	r0, #0
 800063a:	4770      	bx	lr
 800063c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000640:	d101      	bne.n	8000646 <__aeabi_f2iz+0x3a>
 8000642:	0242      	lsls	r2, r0, #9
 8000644:	d105      	bne.n	8000652 <__aeabi_f2iz+0x46>
 8000646:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800064a:	bf08      	it	eq
 800064c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000650:	4770      	bx	lr
 8000652:	f04f 0000 	mov.w	r0, #0
 8000656:	4770      	bx	lr

08000658 <CI_enableGetDataChannel>:
uint8_t  getTmpCH = 0;
/**
 * @brief set enable for MDI channel 1 receive
 * @return none
 */
void CI_enableGetDataChannel(void){
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&ComputerChannel,&getTmpCH,1);
 800065c:	2201      	movs	r2, #1
 800065e:	4903      	ldr	r1, [pc, #12]	; (800066c <CI_enableGetDataChannel+0x14>)
 8000660:	4803      	ldr	r0, [pc, #12]	; (8000670 <CI_enableGetDataChannel+0x18>)
 8000662:	f003 fce2 	bl	800402a <HAL_UART_Receive_IT>
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	2000019c 	.word	0x2000019c
 8000670:	200039bc 	.word	0x200039bc

08000674 <CI_getDataChannel_IT>:
static uint8_t tmpArr[13];
/**
 * @brief get to Motor Driver 1 values
 * @return none
 */
void CI_getDataChannel_IT(UART_HandleTypeDef *callBackHandle) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	volatile UART_HandleTypeDef *tmpHandle;
	tmpHandle = &ComputerChannel;
 800067c:	4b3a      	ldr	r3, [pc, #232]	; (8000768 <CI_getDataChannel_IT+0xf4>)
 800067e:	60fb      	str	r3, [r7, #12]
	if(callBackHandle->Instance == tmpHandle->Instance){
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	429a      	cmp	r2, r3
 800068a:	d168      	bne.n	800075e <CI_getDataChannel_IT+0xea>
		static uint8_t counter = 0, getTmpBeff = 0;
			if (0x64 == getTmpCH && 0x43 == getTmpBeff) {
 800068c:	4b37      	ldr	r3, [pc, #220]	; (800076c <CI_getDataChannel_IT+0xf8>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b64      	cmp	r3, #100	; 0x64
 8000692:	d10c      	bne.n	80006ae <CI_getDataChannel_IT+0x3a>
 8000694:	4b36      	ldr	r3, [pc, #216]	; (8000770 <CI_getDataChannel_IT+0xfc>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b43      	cmp	r3, #67	; 0x43
 800069a:	d108      	bne.n	80006ae <CI_getDataChannel_IT+0x3a>
				tmpArr[0] = 0x43;
 800069c:	4b35      	ldr	r3, [pc, #212]	; (8000774 <CI_getDataChannel_IT+0x100>)
 800069e:	2243      	movs	r2, #67	; 0x43
 80006a0:	701a      	strb	r2, [r3, #0]
				tmpArr[1] = 0x64;
 80006a2:	4b34      	ldr	r3, [pc, #208]	; (8000774 <CI_getDataChannel_IT+0x100>)
 80006a4:	2264      	movs	r2, #100	; 0x64
 80006a6:	705a      	strb	r2, [r3, #1]
					counter = 1;
 80006a8:	4b33      	ldr	r3, [pc, #204]	; (8000778 <CI_getDataChannel_IT+0x104>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	701a      	strb	r2, [r3, #0]
				}
			tmpArr[counter] = getTmpCH;
 80006ae:	4b32      	ldr	r3, [pc, #200]	; (8000778 <CI_getDataChannel_IT+0x104>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	4b2d      	ldr	r3, [pc, #180]	; (800076c <CI_getDataChannel_IT+0xf8>)
 80006b6:	7819      	ldrb	r1, [r3, #0]
 80006b8:	4b2e      	ldr	r3, [pc, #184]	; (8000774 <CI_getDataChannel_IT+0x100>)
 80006ba:	5499      	strb	r1, [r3, r2]
				getTmpBeff = getTmpCH;
 80006bc:	4b2b      	ldr	r3, [pc, #172]	; (800076c <CI_getDataChannel_IT+0xf8>)
 80006be:	781a      	ldrb	r2, [r3, #0]
 80006c0:	4b2b      	ldr	r3, [pc, #172]	; (8000770 <CI_getDataChannel_IT+0xfc>)
 80006c2:	701a      	strb	r2, [r3, #0]
				counter++;
 80006c4:	4b2c      	ldr	r3, [pc, #176]	; (8000778 <CI_getDataChannel_IT+0x104>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	3301      	adds	r3, #1
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	4b2a      	ldr	r3, [pc, #168]	; (8000778 <CI_getDataChannel_IT+0x104>)
 80006ce:	701a      	strb	r2, [r3, #0]
				if (counter > 12) {
 80006d0:	4b29      	ldr	r3, [pc, #164]	; (8000778 <CI_getDataChannel_IT+0x104>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b0c      	cmp	r3, #12
 80006d6:	d93d      	bls.n	8000754 <CI_getDataChannel_IT+0xe0>
					counter = 0;
 80006d8:	4b27      	ldr	r3, [pc, #156]	; (8000778 <CI_getDataChannel_IT+0x104>)
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]
					if (0x43 == tmpArr[0] && 0x64 == tmpArr[1]) {
 80006de:	4b25      	ldr	r3, [pc, #148]	; (8000774 <CI_getDataChannel_IT+0x100>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b43      	cmp	r3, #67	; 0x43
 80006e4:	d136      	bne.n	8000754 <CI_getDataChannel_IT+0xe0>
 80006e6:	4b23      	ldr	r3, [pc, #140]	; (8000774 <CI_getDataChannel_IT+0x100>)
 80006e8:	785b      	ldrb	r3, [r3, #1]
 80006ea:	2b64      	cmp	r3, #100	; 0x64
 80006ec:	d132      	bne.n	8000754 <CI_getDataChannel_IT+0xe0>
						getVals.size=(tmpArr[2] & 0xFF )| (tmpArr[3] << 8);
 80006ee:	4b21      	ldr	r3, [pc, #132]	; (8000774 <CI_getDataChannel_IT+0x100>)
 80006f0:	789b      	ldrb	r3, [r3, #2]
 80006f2:	b21a      	sxth	r2, r3
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <CI_getDataChannel_IT+0x100>)
 80006f6:	78db      	ldrb	r3, [r3, #3]
 80006f8:	021b      	lsls	r3, r3, #8
 80006fa:	b21b      	sxth	r3, r3
 80006fc:	4313      	orrs	r3, r2
 80006fe:	b21b      	sxth	r3, r3
 8000700:	b29a      	uxth	r2, r3
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <CI_getDataChannel_IT+0x108>)
 8000704:	801a      	strh	r2, [r3, #0]
						getVals.steer_pos=(tmpArr[4] & 0xFF )| (tmpArr[5] << 8) | (tmpArr[6] << 16) | (tmpArr[7] << 24);
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <CI_getDataChannel_IT+0x100>)
 8000708:	791b      	ldrb	r3, [r3, #4]
 800070a:	461a      	mov	r2, r3
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <CI_getDataChannel_IT+0x100>)
 800070e:	795b      	ldrb	r3, [r3, #5]
 8000710:	021b      	lsls	r3, r3, #8
 8000712:	431a      	orrs	r2, r3
 8000714:	4b17      	ldr	r3, [pc, #92]	; (8000774 <CI_getDataChannel_IT+0x100>)
 8000716:	799b      	ldrb	r3, [r3, #6]
 8000718:	041b      	lsls	r3, r3, #16
 800071a:	431a      	orrs	r2, r3
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <CI_getDataChannel_IT+0x100>)
 800071e:	79db      	ldrb	r3, [r3, #7]
 8000720:	061b      	lsls	r3, r3, #24
 8000722:	4313      	orrs	r3, r2
 8000724:	4a15      	ldr	r2, [pc, #84]	; (800077c <CI_getDataChannel_IT+0x108>)
 8000726:	6053      	str	r3, [r2, #4]
						getVals.drive_speed=(tmpArr[8] & 0xFF) | (tmpArr[9] << 8) | (tmpArr[10] << 16) | (tmpArr[11] << 24);
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <CI_getDataChannel_IT+0x100>)
 800072a:	7a1b      	ldrb	r3, [r3, #8]
 800072c:	461a      	mov	r2, r3
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <CI_getDataChannel_IT+0x100>)
 8000730:	7a5b      	ldrb	r3, [r3, #9]
 8000732:	021b      	lsls	r3, r3, #8
 8000734:	431a      	orrs	r2, r3
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <CI_getDataChannel_IT+0x100>)
 8000738:	7a9b      	ldrb	r3, [r3, #10]
 800073a:	041b      	lsls	r3, r3, #16
 800073c:	431a      	orrs	r2, r3
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <CI_getDataChannel_IT+0x100>)
 8000740:	7adb      	ldrb	r3, [r3, #11]
 8000742:	061b      	lsls	r3, r3, #24
 8000744:	4313      	orrs	r3, r2
 8000746:	4a0d      	ldr	r2, [pc, #52]	; (800077c <CI_getDataChannel_IT+0x108>)
 8000748:	6093      	str	r3, [r2, #8]
						IO_outputByteToBitsPackage(tmpArr[12]);
 800074a:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <CI_getDataChannel_IT+0x100>)
 800074c:	7b1b      	ldrb	r3, [r3, #12]
 800074e:	4618      	mov	r0, r3
 8000750:	f006 f920 	bl	8006994 <IO_outputByteToBitsPackage>

					}

				}
				HAL_UART_Receive_IT(callBackHandle, &getTmpCH, 1);
 8000754:	2201      	movs	r2, #1
 8000756:	4905      	ldr	r1, [pc, #20]	; (800076c <CI_getDataChannel_IT+0xf8>)
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f003 fc66 	bl	800402a <HAL_UART_Receive_IT>
	}
}
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200039bc 	.word	0x200039bc
 800076c:	2000019c 	.word	0x2000019c
 8000770:	200001bd 	.word	0x200001bd
 8000774:	200001a0 	.word	0x200001a0
 8000778:	200001be 	.word	0x200001be
 800077c:	20003920 	.word	0x20003920

08000780 <CI_getDataChannel_USB>:
static uint8_t tmpArrUSB[13];
/**
 * @brief get to Motor Driver 1 values
 * @return none
 */
void CI_getDataChannel_USB(uint8_t byte) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]

		static uint8_t counter = 0, getTmpBeff = 0;
			if (0x64 == byte && 0x43 == getTmpBeff) {
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b64      	cmp	r3, #100	; 0x64
 800078e:	d10c      	bne.n	80007aa <CI_getDataChannel_USB+0x2a>
 8000790:	4b30      	ldr	r3, [pc, #192]	; (8000854 <CI_getDataChannel_USB+0xd4>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b43      	cmp	r3, #67	; 0x43
 8000796:	d108      	bne.n	80007aa <CI_getDataChannel_USB+0x2a>
				tmpArrUSB[0] = 0x43;
 8000798:	4b2f      	ldr	r3, [pc, #188]	; (8000858 <CI_getDataChannel_USB+0xd8>)
 800079a:	2243      	movs	r2, #67	; 0x43
 800079c:	701a      	strb	r2, [r3, #0]
				tmpArrUSB[1] = 0x64;
 800079e:	4b2e      	ldr	r3, [pc, #184]	; (8000858 <CI_getDataChannel_USB+0xd8>)
 80007a0:	2264      	movs	r2, #100	; 0x64
 80007a2:	705a      	strb	r2, [r3, #1]
					counter = 1;
 80007a4:	4b2d      	ldr	r3, [pc, #180]	; (800085c <CI_getDataChannel_USB+0xdc>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	701a      	strb	r2, [r3, #0]
				}
			tmpArrUSB[counter] = byte;
 80007aa:	4b2c      	ldr	r3, [pc, #176]	; (800085c <CI_getDataChannel_USB+0xdc>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	4619      	mov	r1, r3
 80007b0:	4a29      	ldr	r2, [pc, #164]	; (8000858 <CI_getDataChannel_USB+0xd8>)
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	5453      	strb	r3, [r2, r1]
				getTmpBeff = byte;
 80007b6:	4a27      	ldr	r2, [pc, #156]	; (8000854 <CI_getDataChannel_USB+0xd4>)
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	7013      	strb	r3, [r2, #0]
				counter++;
 80007bc:	4b27      	ldr	r3, [pc, #156]	; (800085c <CI_getDataChannel_USB+0xdc>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	4b25      	ldr	r3, [pc, #148]	; (800085c <CI_getDataChannel_USB+0xdc>)
 80007c6:	701a      	strb	r2, [r3, #0]
				if (counter > 12) {
 80007c8:	4b24      	ldr	r3, [pc, #144]	; (800085c <CI_getDataChannel_USB+0xdc>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b0c      	cmp	r3, #12
 80007ce:	d93d      	bls.n	800084c <CI_getDataChannel_USB+0xcc>
					counter = 0;
 80007d0:	4b22      	ldr	r3, [pc, #136]	; (800085c <CI_getDataChannel_USB+0xdc>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
					if (0x43 == tmpArrUSB[0] && 0x64 == tmpArrUSB[1]) {
 80007d6:	4b20      	ldr	r3, [pc, #128]	; (8000858 <CI_getDataChannel_USB+0xd8>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b43      	cmp	r3, #67	; 0x43
 80007dc:	d136      	bne.n	800084c <CI_getDataChannel_USB+0xcc>
 80007de:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <CI_getDataChannel_USB+0xd8>)
 80007e0:	785b      	ldrb	r3, [r3, #1]
 80007e2:	2b64      	cmp	r3, #100	; 0x64
 80007e4:	d132      	bne.n	800084c <CI_getDataChannel_USB+0xcc>
						getVals.size=(tmpArrUSB[2] & 0xFF )| (tmpArrUSB[3] << 8);
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <CI_getDataChannel_USB+0xd8>)
 80007e8:	789b      	ldrb	r3, [r3, #2]
 80007ea:	b21a      	sxth	r2, r3
 80007ec:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <CI_getDataChannel_USB+0xd8>)
 80007ee:	78db      	ldrb	r3, [r3, #3]
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	b21b      	sxth	r3, r3
 80007f4:	4313      	orrs	r3, r2
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <CI_getDataChannel_USB+0xe0>)
 80007fc:	801a      	strh	r2, [r3, #0]
						getVals.steer_pos=(tmpArrUSB[4] & 0xFF )| (tmpArrUSB[5] << 8) | (tmpArrUSB[6] << 16) | (tmpArrUSB[7] << 24);
 80007fe:	4b16      	ldr	r3, [pc, #88]	; (8000858 <CI_getDataChannel_USB+0xd8>)
 8000800:	791b      	ldrb	r3, [r3, #4]
 8000802:	461a      	mov	r2, r3
 8000804:	4b14      	ldr	r3, [pc, #80]	; (8000858 <CI_getDataChannel_USB+0xd8>)
 8000806:	795b      	ldrb	r3, [r3, #5]
 8000808:	021b      	lsls	r3, r3, #8
 800080a:	431a      	orrs	r2, r3
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <CI_getDataChannel_USB+0xd8>)
 800080e:	799b      	ldrb	r3, [r3, #6]
 8000810:	041b      	lsls	r3, r3, #16
 8000812:	431a      	orrs	r2, r3
 8000814:	4b10      	ldr	r3, [pc, #64]	; (8000858 <CI_getDataChannel_USB+0xd8>)
 8000816:	79db      	ldrb	r3, [r3, #7]
 8000818:	061b      	lsls	r3, r3, #24
 800081a:	4313      	orrs	r3, r2
 800081c:	4a10      	ldr	r2, [pc, #64]	; (8000860 <CI_getDataChannel_USB+0xe0>)
 800081e:	6053      	str	r3, [r2, #4]
						getVals.drive_speed=(tmpArrUSB[8] & 0xFF) | (tmpArrUSB[9] << 8) | (tmpArrUSB[10] << 16) | (tmpArrUSB[11] << 24);
 8000820:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <CI_getDataChannel_USB+0xd8>)
 8000822:	7a1b      	ldrb	r3, [r3, #8]
 8000824:	461a      	mov	r2, r3
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <CI_getDataChannel_USB+0xd8>)
 8000828:	7a5b      	ldrb	r3, [r3, #9]
 800082a:	021b      	lsls	r3, r3, #8
 800082c:	431a      	orrs	r2, r3
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <CI_getDataChannel_USB+0xd8>)
 8000830:	7a9b      	ldrb	r3, [r3, #10]
 8000832:	041b      	lsls	r3, r3, #16
 8000834:	431a      	orrs	r2, r3
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <CI_getDataChannel_USB+0xd8>)
 8000838:	7adb      	ldrb	r3, [r3, #11]
 800083a:	061b      	lsls	r3, r3, #24
 800083c:	4313      	orrs	r3, r2
 800083e:	4a08      	ldr	r2, [pc, #32]	; (8000860 <CI_getDataChannel_USB+0xe0>)
 8000840:	6093      	str	r3, [r2, #8]
						IO_outputByteToBitsPackage(tmpArrUSB[12]);
 8000842:	4b05      	ldr	r3, [pc, #20]	; (8000858 <CI_getDataChannel_USB+0xd8>)
 8000844:	7b1b      	ldrb	r3, [r3, #12]
 8000846:	4618      	mov	r0, r3
 8000848:	f006 f8a4 	bl	8006994 <IO_outputByteToBitsPackage>

					}

				}

}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	200001bf 	.word	0x200001bf
 8000858:	200001b0 	.word	0x200001b0
 800085c:	200001c0 	.word	0x200001c0
 8000860:	20003920 	.word	0x20003920

08000864 <getComputerVals>:

Com_interface getComputerVals(void) {return getVals;}
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a04      	ldr	r2, [pc, #16]	; (8000880 <getComputerVals+0x1c>)
 8000870:	ca07      	ldmia	r2, {r0, r1, r2}
 8000872:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	20003920 	.word	0x20003920

08000884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000888:	f000 fbf2 	bl	8001070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088c:	f000 f820 	bl	80008d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000890:	f000 f914 	bl	8000abc <MX_GPIO_Init>
  MX_DMA_Init();
 8000894:	f000 f8f4 	bl	8000a80 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000898:	f000 f874 	bl	8000984 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800089c:	f000 f89c 	bl	80009d8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80008a0:	f000 f8c4 	bl	8000a2c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  tasks_init();
 80008a4:	f00b fa60 	bl	800bd68 <tasks_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008a8:	f007 fc24 	bl	80080f4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008ac:	4a05      	ldr	r2, [pc, #20]	; (80008c4 <main+0x40>)
 80008ae:	2100      	movs	r1, #0
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <main+0x44>)
 80008b2:	f007 fc85 	bl	80081c0 <osThreadNew>
 80008b6:	4603      	mov	r3, r0
 80008b8:	4a04      	ldr	r2, [pc, #16]	; (80008cc <main+0x48>)
 80008ba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008bc:	f007 fc4c 	bl	8008158 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <main+0x3c>
 80008c2:	bf00      	nop
 80008c4:	0800c47c 	.word	0x0800c47c
 80008c8:	08000c11 	.word	0x08000c11
 80008cc:	20003934 	.word	0x20003934

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b094      	sub	sp, #80	; 0x50
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008da:	2228      	movs	r2, #40	; 0x28
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f00b fd3c 	bl	800c35c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000900:	2301      	movs	r3, #1
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000904:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800090e:	2301      	movs	r3, #1
 8000910:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000912:	2302      	movs	r3, #2
 8000914:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000916:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800091a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800091c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000920:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000922:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000926:	4618      	mov	r0, r3
 8000928:	f002 fbe8 	bl	80030fc <HAL_RCC_OscConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000932:	f000 f989 	bl	8000c48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000936:	230f      	movs	r3, #15
 8000938:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093a:	2302      	movs	r3, #2
 800093c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000946:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	2102      	movs	r1, #2
 8000952:	4618      	mov	r0, r3
 8000954:	f002 fe52 	bl	80035fc <HAL_RCC_ClockConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800095e:	f000 f973 	bl	8000c48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000962:	2310      	movs	r3, #16
 8000964:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	4618      	mov	r0, r3
 800096e:	f003 f80f 	bl	8003990 <HAL_RCCEx_PeriphCLKConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000978:	f000 f966 	bl	8000c48 <Error_Handler>
  }
}
 800097c:	bf00      	nop
 800097e:	3750      	adds	r7, #80	; 0x50
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_USART1_UART_Init+0x4c>)
 800098a:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <MX_USART1_UART_Init+0x50>)
 800098c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <MX_USART1_UART_Init+0x4c>)
 8000990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000994:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_USART1_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_USART1_UART_Init+0x4c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_USART1_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_USART1_UART_Init+0x4c>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MX_USART1_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_USART1_UART_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_USART1_UART_Init+0x4c>)
 80009bc:	f003 fae8 	bl	8003f90 <HAL_UART_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009c6:	f000 f93f 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200039bc 	.word	0x200039bc
 80009d4:	40013800 	.word	0x40013800

080009d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009de:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <MX_USART2_UART_Init+0x50>)
 80009e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009e4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80009e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 8000a10:	f003 fabe 	bl	8003f90 <HAL_UART_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a1a:	f000 f915 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200039fc 	.word	0x200039fc
 8000a28:	40004400 	.word	0x40004400

08000a2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_USART3_UART_Init+0x4c>)
 8000a32:	4a12      	ldr	r2, [pc, #72]	; (8000a7c <MX_USART3_UART_Init+0x50>)
 8000a34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <MX_USART3_UART_Init+0x4c>)
 8000a38:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000a3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_USART3_UART_Init+0x4c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_USART3_UART_Init+0x4c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <MX_USART3_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_USART3_UART_Init+0x4c>)
 8000a52:	220c      	movs	r2, #12
 8000a54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <MX_USART3_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_USART3_UART_Init+0x4c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_USART3_UART_Init+0x4c>)
 8000a64:	f003 fa94 	bl	8003f90 <HAL_UART_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a6e:	f000 f8eb 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20003938 	.word	0x20003938
 8000a7c:	40004800 	.word	0x40004800

08000a80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_DMA_Init+0x38>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <MX_DMA_Init+0x38>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6153      	str	r3, [r2, #20]
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_DMA_Init+0x38>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2105      	movs	r1, #5
 8000aa2:	200e      	movs	r0, #14
 8000aa4:	f000 fbcb 	bl	800123e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000aa8:	200e      	movs	r0, #14
 8000aaa:	f000 fbe4 	bl	8001276 <HAL_NVIC_EnableIRQ>

}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000

08000abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	f107 0310 	add.w	r3, r7, #16
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad0:	4b4b      	ldr	r3, [pc, #300]	; (8000c00 <MX_GPIO_Init+0x144>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	4a4a      	ldr	r2, [pc, #296]	; (8000c00 <MX_GPIO_Init+0x144>)
 8000ad6:	f043 0310 	orr.w	r3, r3, #16
 8000ada:	6193      	str	r3, [r2, #24]
 8000adc:	4b48      	ldr	r3, [pc, #288]	; (8000c00 <MX_GPIO_Init+0x144>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f003 0310 	and.w	r3, r3, #16
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae8:	4b45      	ldr	r3, [pc, #276]	; (8000c00 <MX_GPIO_Init+0x144>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	4a44      	ldr	r2, [pc, #272]	; (8000c00 <MX_GPIO_Init+0x144>)
 8000aee:	f043 0320 	orr.w	r3, r3, #32
 8000af2:	6193      	str	r3, [r2, #24]
 8000af4:	4b42      	ldr	r3, [pc, #264]	; (8000c00 <MX_GPIO_Init+0x144>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f003 0320 	and.w	r3, r3, #32
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b00:	4b3f      	ldr	r3, [pc, #252]	; (8000c00 <MX_GPIO_Init+0x144>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a3e      	ldr	r2, [pc, #248]	; (8000c00 <MX_GPIO_Init+0x144>)
 8000b06:	f043 0304 	orr.w	r3, r3, #4
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b3c      	ldr	r3, [pc, #240]	; (8000c00 <MX_GPIO_Init+0x144>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f003 0304 	and.w	r3, r3, #4
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b18:	4b39      	ldr	r3, [pc, #228]	; (8000c00 <MX_GPIO_Init+0x144>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a38      	ldr	r2, [pc, #224]	; (8000c00 <MX_GPIO_Init+0x144>)
 8000b1e:	f043 0308 	orr.w	r3, r3, #8
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b36      	ldr	r3, [pc, #216]	; (8000c00 <MX_GPIO_Init+0x144>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0308 	and.w	r3, r3, #8
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b36:	4833      	ldr	r0, [pc, #204]	; (8000c04 <MX_GPIO_Init+0x148>)
 8000b38:	f000 ff1d 	bl	8001976 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, relay_1_Pin|relay_2_Pin|relay_3_Pin|relay_4_Pin, GPIO_PIN_SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000b42:	4831      	ldr	r0, [pc, #196]	; (8000c08 <MX_GPIO_Init+0x14c>)
 8000b44:	f000 ff17 	bl	8001976 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, relay_5_Pin|relay_8_Pin, GPIO_PIN_SET);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8000b4e:	482f      	ldr	r0, [pc, #188]	; (8000c0c <MX_GPIO_Init+0x150>)
 8000b50:	f000 ff11 	bl	8001976 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 8000b54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 0310 	add.w	r3, r7, #16
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4825      	ldr	r0, [pc, #148]	; (8000c04 <MX_GPIO_Init+0x148>)
 8000b6e:	f000 fd67 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pins : switch_7_Pin switch_6_Pin switch_5_Pin switch_3_Pin */
  GPIO_InitStruct.Pin = switch_7_Pin|switch_6_Pin|switch_5_Pin|switch_3_Pin;
 8000b72:	23b2      	movs	r3, #178	; 0xb2
 8000b74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	f107 0310 	add.w	r3, r7, #16
 8000b82:	4619      	mov	r1, r3
 8000b84:	4821      	ldr	r0, [pc, #132]	; (8000c0c <MX_GPIO_Init+0x150>)
 8000b86:	f000 fd5b 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pins : switch_2_Pin switch_1_Pin switch_8_Pin */
  GPIO_InitStruct.Pin = switch_2_Pin|switch_1_Pin|switch_8_Pin;
 8000b8a:	230b      	movs	r3, #11
 8000b8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b96:	f107 0310 	add.w	r3, r7, #16
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	481a      	ldr	r0, [pc, #104]	; (8000c08 <MX_GPIO_Init+0x14c>)
 8000b9e:	f000 fd4f 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pins : relay_1_Pin relay_2_Pin relay_3_Pin relay_4_Pin */
  GPIO_InitStruct.Pin = relay_1_Pin|relay_2_Pin|relay_3_Pin|relay_4_Pin;
 8000ba2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000ba6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4813      	ldr	r0, [pc, #76]	; (8000c08 <MX_GPIO_Init+0x14c>)
 8000bbc:	f000 fd40 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pins : relay_5_Pin relay_8_Pin */
  GPIO_InitStruct.Pin = relay_5_Pin|relay_8_Pin;
 8000bc0:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000bc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 0310 	add.w	r3, r7, #16
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480c      	ldr	r0, [pc, #48]	; (8000c0c <MX_GPIO_Init+0x150>)
 8000bda:	f000 fd31 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pin : switch_4_Pin */
  GPIO_InitStruct.Pin = switch_4_Pin;
 8000bde:	2310      	movs	r3, #16
 8000be0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(switch_4_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 0310 	add.w	r3, r7, #16
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_GPIO_Init+0x14c>)
 8000bf2:	f000 fd25 	bl	8001640 <HAL_GPIO_Init>

}
 8000bf6:	bf00      	nop
 8000bf8:	3720      	adds	r7, #32
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40011000 	.word	0x40011000
 8000c08:	40010c00 	.word	0x40010c00
 8000c0c:	40010800 	.word	0x40010800

08000c10 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000c18:	f00a f9b0 	bl	800af7c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f007 fb79 	bl	8008314 <osDelay>
 8000c22:	e7fb      	b.n	8000c1c <StartDefaultTask+0xc>

08000c24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d101      	bne.n	8000c3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c36:	f000 fa31 	bl	800109c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40012c00 	.word	0x40012c00

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4c:	b672      	cpsid	i
}
 8000c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <Error_Handler+0x8>
	...

08000c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <HAL_MspInit+0x68>)
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <HAL_MspInit+0x68>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6193      	str	r3, [r2, #24]
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <HAL_MspInit+0x68>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c72:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_MspInit+0x68>)
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	4a11      	ldr	r2, [pc, #68]	; (8000cbc <HAL_MspInit+0x68>)
 8000c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c7c:	61d3      	str	r3, [r2, #28]
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <HAL_MspInit+0x68>)
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	210f      	movs	r1, #15
 8000c8e:	f06f 0001 	mvn.w	r0, #1
 8000c92:	f000 fad4 	bl	800123e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c96:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <HAL_MspInit+0x6c>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <HAL_MspInit+0x6c>)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40010000 	.word	0x40010000

08000cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08c      	sub	sp, #48	; 0x30
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0320 	add.w	r3, r7, #32
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a72      	ldr	r2, [pc, #456]	; (8000ea8 <HAL_UART_MspInit+0x1e4>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d160      	bne.n	8000da6 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ce4:	4b71      	ldr	r3, [pc, #452]	; (8000eac <HAL_UART_MspInit+0x1e8>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a70      	ldr	r2, [pc, #448]	; (8000eac <HAL_UART_MspInit+0x1e8>)
 8000cea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b6e      	ldr	r3, [pc, #440]	; (8000eac <HAL_UART_MspInit+0x1e8>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf8:	61fb      	str	r3, [r7, #28]
 8000cfa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfc:	4b6b      	ldr	r3, [pc, #428]	; (8000eac <HAL_UART_MspInit+0x1e8>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a6a      	ldr	r2, [pc, #424]	; (8000eac <HAL_UART_MspInit+0x1e8>)
 8000d02:	f043 0304 	orr.w	r3, r3, #4
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b68      	ldr	r3, [pc, #416]	; (8000eac <HAL_UART_MspInit+0x1e8>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0304 	and.w	r3, r3, #4
 8000d10:	61bb      	str	r3, [r7, #24]
 8000d12:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0320 	add.w	r3, r7, #32
 8000d26:	4619      	mov	r1, r3
 8000d28:	4861      	ldr	r0, [pc, #388]	; (8000eb0 <HAL_UART_MspInit+0x1ec>)
 8000d2a:	f000 fc89 	bl	8001640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	f107 0320 	add.w	r3, r7, #32
 8000d40:	4619      	mov	r1, r3
 8000d42:	485b      	ldr	r0, [pc, #364]	; (8000eb0 <HAL_UART_MspInit+0x1ec>)
 8000d44:	f000 fc7c 	bl	8001640 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000d48:	4b5a      	ldr	r3, [pc, #360]	; (8000eb4 <HAL_UART_MspInit+0x1f0>)
 8000d4a:	4a5b      	ldr	r2, [pc, #364]	; (8000eb8 <HAL_UART_MspInit+0x1f4>)
 8000d4c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d4e:	4b59      	ldr	r3, [pc, #356]	; (8000eb4 <HAL_UART_MspInit+0x1f0>)
 8000d50:	2210      	movs	r2, #16
 8000d52:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d54:	4b57      	ldr	r3, [pc, #348]	; (8000eb4 <HAL_UART_MspInit+0x1f0>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d5a:	4b56      	ldr	r3, [pc, #344]	; (8000eb4 <HAL_UART_MspInit+0x1f0>)
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d60:	4b54      	ldr	r3, [pc, #336]	; (8000eb4 <HAL_UART_MspInit+0x1f0>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d66:	4b53      	ldr	r3, [pc, #332]	; (8000eb4 <HAL_UART_MspInit+0x1f0>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8000d6c:	4b51      	ldr	r3, [pc, #324]	; (8000eb4 <HAL_UART_MspInit+0x1f0>)
 8000d6e:	2220      	movs	r2, #32
 8000d70:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d72:	4b50      	ldr	r3, [pc, #320]	; (8000eb4 <HAL_UART_MspInit+0x1f0>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d78:	484e      	ldr	r0, [pc, #312]	; (8000eb4 <HAL_UART_MspInit+0x1f0>)
 8000d7a:	f000 fa8b 	bl	8001294 <HAL_DMA_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000d84:	f7ff ff60 	bl	8000c48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a4a      	ldr	r2, [pc, #296]	; (8000eb4 <HAL_UART_MspInit+0x1f0>)
 8000d8c:	631a      	str	r2, [r3, #48]	; 0x30
 8000d8e:	4a49      	ldr	r2, [pc, #292]	; (8000eb4 <HAL_UART_MspInit+0x1f0>)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2105      	movs	r1, #5
 8000d98:	2025      	movs	r0, #37	; 0x25
 8000d9a:	f000 fa50 	bl	800123e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d9e:	2025      	movs	r0, #37	; 0x25
 8000da0:	f000 fa69 	bl	8001276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000da4:	e07c      	b.n	8000ea0 <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART2)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a44      	ldr	r2, [pc, #272]	; (8000ebc <HAL_UART_MspInit+0x1f8>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d138      	bne.n	8000e22 <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000db0:	4b3e      	ldr	r3, [pc, #248]	; (8000eac <HAL_UART_MspInit+0x1e8>)
 8000db2:	69db      	ldr	r3, [r3, #28]
 8000db4:	4a3d      	ldr	r2, [pc, #244]	; (8000eac <HAL_UART_MspInit+0x1e8>)
 8000db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dba:	61d3      	str	r3, [r2, #28]
 8000dbc:	4b3b      	ldr	r3, [pc, #236]	; (8000eac <HAL_UART_MspInit+0x1e8>)
 8000dbe:	69db      	ldr	r3, [r3, #28]
 8000dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc8:	4b38      	ldr	r3, [pc, #224]	; (8000eac <HAL_UART_MspInit+0x1e8>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	4a37      	ldr	r2, [pc, #220]	; (8000eac <HAL_UART_MspInit+0x1e8>)
 8000dce:	f043 0304 	orr.w	r3, r3, #4
 8000dd2:	6193      	str	r3, [r2, #24]
 8000dd4:	4b35      	ldr	r3, [pc, #212]	; (8000eac <HAL_UART_MspInit+0x1e8>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000de0:	2304      	movs	r3, #4
 8000de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 0320 	add.w	r3, r7, #32
 8000df0:	4619      	mov	r1, r3
 8000df2:	482f      	ldr	r0, [pc, #188]	; (8000eb0 <HAL_UART_MspInit+0x1ec>)
 8000df4:	f000 fc24 	bl	8001640 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000df8:	2308      	movs	r3, #8
 8000dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	f107 0320 	add.w	r3, r7, #32
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4829      	ldr	r0, [pc, #164]	; (8000eb0 <HAL_UART_MspInit+0x1ec>)
 8000e0c:	f000 fc18 	bl	8001640 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2105      	movs	r1, #5
 8000e14:	2026      	movs	r0, #38	; 0x26
 8000e16:	f000 fa12 	bl	800123e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e1a:	2026      	movs	r0, #38	; 0x26
 8000e1c:	f000 fa2b 	bl	8001276 <HAL_NVIC_EnableIRQ>
}
 8000e20:	e03e      	b.n	8000ea0 <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART3)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a26      	ldr	r2, [pc, #152]	; (8000ec0 <HAL_UART_MspInit+0x1fc>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d139      	bne.n	8000ea0 <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <HAL_UART_MspInit+0x1e8>)
 8000e2e:	69db      	ldr	r3, [r3, #28]
 8000e30:	4a1e      	ldr	r2, [pc, #120]	; (8000eac <HAL_UART_MspInit+0x1e8>)
 8000e32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e36:	61d3      	str	r3, [r2, #28]
 8000e38:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <HAL_UART_MspInit+0x1e8>)
 8000e3a:	69db      	ldr	r3, [r3, #28]
 8000e3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e44:	4b19      	ldr	r3, [pc, #100]	; (8000eac <HAL_UART_MspInit+0x1e8>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a18      	ldr	r2, [pc, #96]	; (8000eac <HAL_UART_MspInit+0x1e8>)
 8000e4a:	f043 0308 	orr.w	r3, r3, #8
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b16      	ldr	r3, [pc, #88]	; (8000eac <HAL_UART_MspInit+0x1e8>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f003 0308 	and.w	r3, r3, #8
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6a:	f107 0320 	add.w	r3, r7, #32
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4814      	ldr	r0, [pc, #80]	; (8000ec4 <HAL_UART_MspInit+0x200>)
 8000e72:	f000 fbe5 	bl	8001640 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e84:	f107 0320 	add.w	r3, r7, #32
 8000e88:	4619      	mov	r1, r3
 8000e8a:	480e      	ldr	r0, [pc, #56]	; (8000ec4 <HAL_UART_MspInit+0x200>)
 8000e8c:	f000 fbd8 	bl	8001640 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2105      	movs	r1, #5
 8000e94:	2027      	movs	r0, #39	; 0x27
 8000e96:	f000 f9d2 	bl	800123e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e9a:	2027      	movs	r0, #39	; 0x27
 8000e9c:	f000 f9eb 	bl	8001276 <HAL_NVIC_EnableIRQ>
}
 8000ea0:	bf00      	nop
 8000ea2:	3730      	adds	r7, #48	; 0x30
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40013800 	.word	0x40013800
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40010800 	.word	0x40010800
 8000eb4:	20003978 	.word	0x20003978
 8000eb8:	40020044 	.word	0x40020044
 8000ebc:	40004400 	.word	0x40004400
 8000ec0:	40004800 	.word	0x40004800
 8000ec4:	40010c00 	.word	0x40010c00

08000ec8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08c      	sub	sp, #48	; 0x30
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	2019      	movs	r0, #25
 8000ede:	f000 f9ae 	bl	800123e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000ee2:	2019      	movs	r0, #25
 8000ee4:	f000 f9c7 	bl	8001276 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ee8:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <HAL_InitTick+0x9c>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a1d      	ldr	r2, [pc, #116]	; (8000f64 <HAL_InitTick+0x9c>)
 8000eee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <HAL_InitTick+0x9c>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f00:	f107 0210 	add.w	r2, r7, #16
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	4611      	mov	r1, r2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f002 fcf2 	bl	80038f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f10:	f002 fcdc 	bl	80038cc <HAL_RCC_GetPCLK2Freq>
 8000f14:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f18:	4a13      	ldr	r2, [pc, #76]	; (8000f68 <HAL_InitTick+0xa0>)
 8000f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1e:	0c9b      	lsrs	r3, r3, #18
 8000f20:	3b01      	subs	r3, #1
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <HAL_InitTick+0xa4>)
 8000f26:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <HAL_InitTick+0xa8>)
 8000f28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <HAL_InitTick+0xa4>)
 8000f2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f30:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f32:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <HAL_InitTick+0xa4>)
 8000f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f36:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <HAL_InitTick+0xa4>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <HAL_InitTick+0xa4>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f44:	4809      	ldr	r0, [pc, #36]	; (8000f6c <HAL_InitTick+0xa4>)
 8000f46:	f002 fdd9 	bl	8003afc <HAL_TIM_Base_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d104      	bne.n	8000f5a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f50:	4806      	ldr	r0, [pc, #24]	; (8000f6c <HAL_InitTick+0xa4>)
 8000f52:	f002 fe2b 	bl	8003bac <HAL_TIM_Base_Start_IT>
 8000f56:	4603      	mov	r3, r0
 8000f58:	e000      	b.n	8000f5c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3730      	adds	r7, #48	; 0x30
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40021000 	.word	0x40021000
 8000f68:	431bde83 	.word	0x431bde83
 8000f6c:	20003a3c 	.word	0x20003a3c
 8000f70:	40012c00 	.word	0x40012c00

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <NMI_Handler+0x4>

08000f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <HardFault_Handler+0x4>

08000f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <MemManage_Handler+0x4>

08000f86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <BusFault_Handler+0x4>

08000f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <UsageFault_Handler+0x4>

08000f92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr
	...

08000fa0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <DMA1_Channel4_IRQHandler+0x10>)
 8000fa6:	f000 fa45 	bl	8001434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20003978 	.word	0x20003978

08000fb4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000fba:	f000 fe3e 	bl	8001c3a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20003df8 	.word	0x20003df8

08000fc8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <TIM1_UP_IRQHandler+0x10>)
 8000fce:	f002 fe3f 	bl	8003c50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20003a3c 	.word	0x20003a3c

08000fdc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <USART1_IRQHandler+0x10>)
 8000fe2:	f003 f877 	bl	80040d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200039bc 	.word	0x200039bc

08000ff0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <USART2_IRQHandler+0x10>)
 8000ff6:	f003 f86d 	bl	80040d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200039fc 	.word	0x200039fc

08001004 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <USART3_IRQHandler+0x10>)
 800100a:	f003 f863 	bl	80040d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20003938 	.word	0x20003938

08001018 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001024:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001026:	e003      	b.n	8001030 <LoopCopyDataInit>

08001028 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800102a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800102c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800102e:	3104      	adds	r1, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001030:	480a      	ldr	r0, [pc, #40]	; (800105c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001034:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001036:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001038:	d3f6      	bcc.n	8001028 <CopyDataInit>
  ldr r2, =_sbss
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800103c:	e002      	b.n	8001044 <LoopFillZerobss>

0800103e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001040:	f842 3b04 	str.w	r3, [r2], #4

08001044 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001046:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001048:	d3f9      	bcc.n	800103e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800104a:	f7ff ffe5 	bl	8001018 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800104e:	f00b f953 	bl	800c2f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001052:	f7ff fc17 	bl	8000884 <main>
  bx lr
 8001056:	4770      	bx	lr
  ldr r3, =_sidata
 8001058:	0800c4c0 	.word	0x0800c4c0
  ldr r0, =_sdata
 800105c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001060:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 8001064:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 8001068:	20004154 	.word	0x20004154

0800106c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC1_2_IRQHandler>
	...

08001070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <HAL_Init+0x28>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a07      	ldr	r2, [pc, #28]	; (8001098 <HAL_Init+0x28>)
 800107a:	f043 0310 	orr.w	r3, r3, #16
 800107e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001080:	2003      	movs	r0, #3
 8001082:	f000 f8d1 	bl	8001228 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff ff1e 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800108c:	f7ff fde2 	bl	8000c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40022000 	.word	0x40022000

0800109c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <HAL_IncTick+0x1c>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <HAL_IncTick+0x20>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a03      	ldr	r2, [pc, #12]	; (80010bc <HAL_IncTick+0x20>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	20000008 	.word	0x20000008
 80010bc:	20003a84 	.word	0x20003a84

080010c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b02      	ldr	r3, [pc, #8]	; (80010d0 <HAL_GetTick+0x10>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	20003a84 	.word	0x20003a84

080010d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f0:	4013      	ands	r3, r2
 80010f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001106:	4a04      	ldr	r2, [pc, #16]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	60d3      	str	r3, [r2, #12]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <__NVIC_GetPriorityGrouping+0x18>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	f003 0307 	and.w	r3, r3, #7
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	2b00      	cmp	r3, #0
 8001148:	db0b      	blt.n	8001162 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	f003 021f 	and.w	r2, r3, #31
 8001150:	4906      	ldr	r1, [pc, #24]	; (800116c <__NVIC_EnableIRQ+0x34>)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	095b      	lsrs	r3, r3, #5
 8001158:	2001      	movs	r0, #1
 800115a:	fa00 f202 	lsl.w	r2, r0, r2
 800115e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
         );
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	; 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ff4f 	bl	80010d4 <__NVIC_SetPriorityGrouping>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800123e:	b580      	push	{r7, lr}
 8001240:	b086      	sub	sp, #24
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001250:	f7ff ff64 	bl	800111c <__NVIC_GetPriorityGrouping>
 8001254:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	6978      	ldr	r0, [r7, #20]
 800125c:	f7ff ffb2 	bl	80011c4 <NVIC_EncodePriority>
 8001260:	4602      	mov	r2, r0
 8001262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff81 	bl	8001170 <__NVIC_SetPriority>
}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff57 	bl	8001138 <__NVIC_EnableIRQ>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e043      	b.n	8001332 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b22      	ldr	r3, [pc, #136]	; (800133c <HAL_DMA_Init+0xa8>)
 80012b2:	4413      	add	r3, r2
 80012b4:	4a22      	ldr	r2, [pc, #136]	; (8001340 <HAL_DMA_Init+0xac>)
 80012b6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ba:	091b      	lsrs	r3, r3, #4
 80012bc:	009a      	lsls	r2, r3, #2
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a1f      	ldr	r2, [pc, #124]	; (8001344 <HAL_DMA_Init+0xb0>)
 80012c6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2202      	movs	r2, #2
 80012cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80012de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80012e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80012ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001304:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	4313      	orrs	r3, r2
 8001310:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	bffdfff8 	.word	0xbffdfff8
 8001340:	cccccccd 	.word	0xcccccccd
 8001344:	40020000 	.word	0x40020000

08001348 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800135a:	2b02      	cmp	r3, #2
 800135c:	d005      	beq.n	800136a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2204      	movs	r2, #4
 8001362:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	73fb      	strb	r3, [r7, #15]
 8001368:	e051      	b.n	800140e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 020e 	bic.w	r2, r2, #14
 8001378:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0201 	bic.w	r2, r2, #1
 8001388:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a22      	ldr	r2, [pc, #136]	; (8001418 <HAL_DMA_Abort_IT+0xd0>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d029      	beq.n	80013e8 <HAL_DMA_Abort_IT+0xa0>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a20      	ldr	r2, [pc, #128]	; (800141c <HAL_DMA_Abort_IT+0xd4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d022      	beq.n	80013e4 <HAL_DMA_Abort_IT+0x9c>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a1f      	ldr	r2, [pc, #124]	; (8001420 <HAL_DMA_Abort_IT+0xd8>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d01a      	beq.n	80013de <HAL_DMA_Abort_IT+0x96>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <HAL_DMA_Abort_IT+0xdc>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d012      	beq.n	80013d8 <HAL_DMA_Abort_IT+0x90>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a1c      	ldr	r2, [pc, #112]	; (8001428 <HAL_DMA_Abort_IT+0xe0>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d00a      	beq.n	80013d2 <HAL_DMA_Abort_IT+0x8a>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a1a      	ldr	r2, [pc, #104]	; (800142c <HAL_DMA_Abort_IT+0xe4>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d102      	bne.n	80013cc <HAL_DMA_Abort_IT+0x84>
 80013c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013ca:	e00e      	b.n	80013ea <HAL_DMA_Abort_IT+0xa2>
 80013cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013d0:	e00b      	b.n	80013ea <HAL_DMA_Abort_IT+0xa2>
 80013d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d6:	e008      	b.n	80013ea <HAL_DMA_Abort_IT+0xa2>
 80013d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013dc:	e005      	b.n	80013ea <HAL_DMA_Abort_IT+0xa2>
 80013de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013e2:	e002      	b.n	80013ea <HAL_DMA_Abort_IT+0xa2>
 80013e4:	2310      	movs	r3, #16
 80013e6:	e000      	b.n	80013ea <HAL_DMA_Abort_IT+0xa2>
 80013e8:	2301      	movs	r3, #1
 80013ea:	4a11      	ldr	r2, [pc, #68]	; (8001430 <HAL_DMA_Abort_IT+0xe8>)
 80013ec:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	4798      	blx	r3
    } 
  }
  return status;
 800140e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40020008 	.word	0x40020008
 800141c:	4002001c 	.word	0x4002001c
 8001420:	40020030 	.word	0x40020030
 8001424:	40020044 	.word	0x40020044
 8001428:	40020058 	.word	0x40020058
 800142c:	4002006c 	.word	0x4002006c
 8001430:	40020000 	.word	0x40020000

08001434 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	2204      	movs	r2, #4
 8001452:	409a      	lsls	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4013      	ands	r3, r2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d04f      	beq.n	80014fc <HAL_DMA_IRQHandler+0xc8>
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	2b00      	cmp	r3, #0
 8001464:	d04a      	beq.n	80014fc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0320 	and.w	r3, r3, #32
 8001470:	2b00      	cmp	r3, #0
 8001472:	d107      	bne.n	8001484 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0204 	bic.w	r2, r2, #4
 8001482:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a66      	ldr	r2, [pc, #408]	; (8001624 <HAL_DMA_IRQHandler+0x1f0>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d029      	beq.n	80014e2 <HAL_DMA_IRQHandler+0xae>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a65      	ldr	r2, [pc, #404]	; (8001628 <HAL_DMA_IRQHandler+0x1f4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d022      	beq.n	80014de <HAL_DMA_IRQHandler+0xaa>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a63      	ldr	r2, [pc, #396]	; (800162c <HAL_DMA_IRQHandler+0x1f8>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d01a      	beq.n	80014d8 <HAL_DMA_IRQHandler+0xa4>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a62      	ldr	r2, [pc, #392]	; (8001630 <HAL_DMA_IRQHandler+0x1fc>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d012      	beq.n	80014d2 <HAL_DMA_IRQHandler+0x9e>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a60      	ldr	r2, [pc, #384]	; (8001634 <HAL_DMA_IRQHandler+0x200>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d00a      	beq.n	80014cc <HAL_DMA_IRQHandler+0x98>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a5f      	ldr	r2, [pc, #380]	; (8001638 <HAL_DMA_IRQHandler+0x204>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d102      	bne.n	80014c6 <HAL_DMA_IRQHandler+0x92>
 80014c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014c4:	e00e      	b.n	80014e4 <HAL_DMA_IRQHandler+0xb0>
 80014c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80014ca:	e00b      	b.n	80014e4 <HAL_DMA_IRQHandler+0xb0>
 80014cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80014d0:	e008      	b.n	80014e4 <HAL_DMA_IRQHandler+0xb0>
 80014d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014d6:	e005      	b.n	80014e4 <HAL_DMA_IRQHandler+0xb0>
 80014d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014dc:	e002      	b.n	80014e4 <HAL_DMA_IRQHandler+0xb0>
 80014de:	2340      	movs	r3, #64	; 0x40
 80014e0:	e000      	b.n	80014e4 <HAL_DMA_IRQHandler+0xb0>
 80014e2:	2304      	movs	r3, #4
 80014e4:	4a55      	ldr	r2, [pc, #340]	; (800163c <HAL_DMA_IRQHandler+0x208>)
 80014e6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 8094 	beq.w	800161a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80014fa:	e08e      	b.n	800161a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	2202      	movs	r2, #2
 8001502:	409a      	lsls	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4013      	ands	r3, r2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d056      	beq.n	80015ba <HAL_DMA_IRQHandler+0x186>
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d051      	beq.n	80015ba <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0320 	and.w	r3, r3, #32
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10b      	bne.n	800153c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 020a 	bic.w	r2, r2, #10
 8001532:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a38      	ldr	r2, [pc, #224]	; (8001624 <HAL_DMA_IRQHandler+0x1f0>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d029      	beq.n	800159a <HAL_DMA_IRQHandler+0x166>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a37      	ldr	r2, [pc, #220]	; (8001628 <HAL_DMA_IRQHandler+0x1f4>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d022      	beq.n	8001596 <HAL_DMA_IRQHandler+0x162>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a35      	ldr	r2, [pc, #212]	; (800162c <HAL_DMA_IRQHandler+0x1f8>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d01a      	beq.n	8001590 <HAL_DMA_IRQHandler+0x15c>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a34      	ldr	r2, [pc, #208]	; (8001630 <HAL_DMA_IRQHandler+0x1fc>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d012      	beq.n	800158a <HAL_DMA_IRQHandler+0x156>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a32      	ldr	r2, [pc, #200]	; (8001634 <HAL_DMA_IRQHandler+0x200>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d00a      	beq.n	8001584 <HAL_DMA_IRQHandler+0x150>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a31      	ldr	r2, [pc, #196]	; (8001638 <HAL_DMA_IRQHandler+0x204>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d102      	bne.n	800157e <HAL_DMA_IRQHandler+0x14a>
 8001578:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800157c:	e00e      	b.n	800159c <HAL_DMA_IRQHandler+0x168>
 800157e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001582:	e00b      	b.n	800159c <HAL_DMA_IRQHandler+0x168>
 8001584:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001588:	e008      	b.n	800159c <HAL_DMA_IRQHandler+0x168>
 800158a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800158e:	e005      	b.n	800159c <HAL_DMA_IRQHandler+0x168>
 8001590:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001594:	e002      	b.n	800159c <HAL_DMA_IRQHandler+0x168>
 8001596:	2320      	movs	r3, #32
 8001598:	e000      	b.n	800159c <HAL_DMA_IRQHandler+0x168>
 800159a:	2302      	movs	r3, #2
 800159c:	4a27      	ldr	r2, [pc, #156]	; (800163c <HAL_DMA_IRQHandler+0x208>)
 800159e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d034      	beq.n	800161a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80015b8:	e02f      	b.n	800161a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	2208      	movs	r2, #8
 80015c0:	409a      	lsls	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4013      	ands	r3, r2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d028      	beq.n	800161c <HAL_DMA_IRQHandler+0x1e8>
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d023      	beq.n	800161c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 020e 	bic.w	r2, r2, #14
 80015e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ec:	2101      	movs	r1, #1
 80015ee:	fa01 f202 	lsl.w	r2, r1, r2
 80015f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	2b00      	cmp	r3, #0
 8001610:	d004      	beq.n	800161c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	4798      	blx	r3
    }
  }
  return;
 800161a:	bf00      	nop
 800161c:	bf00      	nop
}
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40020008 	.word	0x40020008
 8001628:	4002001c 	.word	0x4002001c
 800162c:	40020030 	.word	0x40020030
 8001630:	40020044 	.word	0x40020044
 8001634:	40020058 	.word	0x40020058
 8001638:	4002006c 	.word	0x4002006c
 800163c:	40020000 	.word	0x40020000

08001640 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001640:	b480      	push	{r7}
 8001642:	b08b      	sub	sp, #44	; 0x2c
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800164a:	2300      	movs	r3, #0
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800164e:	2300      	movs	r3, #0
 8001650:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001652:	e169      	b.n	8001928 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001654:	2201      	movs	r2, #1
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	429a      	cmp	r2, r3
 800166e:	f040 8158 	bne.w	8001922 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	4a9a      	ldr	r2, [pc, #616]	; (80018e0 <HAL_GPIO_Init+0x2a0>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d05e      	beq.n	800173a <HAL_GPIO_Init+0xfa>
 800167c:	4a98      	ldr	r2, [pc, #608]	; (80018e0 <HAL_GPIO_Init+0x2a0>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d875      	bhi.n	800176e <HAL_GPIO_Init+0x12e>
 8001682:	4a98      	ldr	r2, [pc, #608]	; (80018e4 <HAL_GPIO_Init+0x2a4>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d058      	beq.n	800173a <HAL_GPIO_Init+0xfa>
 8001688:	4a96      	ldr	r2, [pc, #600]	; (80018e4 <HAL_GPIO_Init+0x2a4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d86f      	bhi.n	800176e <HAL_GPIO_Init+0x12e>
 800168e:	4a96      	ldr	r2, [pc, #600]	; (80018e8 <HAL_GPIO_Init+0x2a8>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d052      	beq.n	800173a <HAL_GPIO_Init+0xfa>
 8001694:	4a94      	ldr	r2, [pc, #592]	; (80018e8 <HAL_GPIO_Init+0x2a8>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d869      	bhi.n	800176e <HAL_GPIO_Init+0x12e>
 800169a:	4a94      	ldr	r2, [pc, #592]	; (80018ec <HAL_GPIO_Init+0x2ac>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d04c      	beq.n	800173a <HAL_GPIO_Init+0xfa>
 80016a0:	4a92      	ldr	r2, [pc, #584]	; (80018ec <HAL_GPIO_Init+0x2ac>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d863      	bhi.n	800176e <HAL_GPIO_Init+0x12e>
 80016a6:	4a92      	ldr	r2, [pc, #584]	; (80018f0 <HAL_GPIO_Init+0x2b0>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d046      	beq.n	800173a <HAL_GPIO_Init+0xfa>
 80016ac:	4a90      	ldr	r2, [pc, #576]	; (80018f0 <HAL_GPIO_Init+0x2b0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d85d      	bhi.n	800176e <HAL_GPIO_Init+0x12e>
 80016b2:	2b12      	cmp	r3, #18
 80016b4:	d82a      	bhi.n	800170c <HAL_GPIO_Init+0xcc>
 80016b6:	2b12      	cmp	r3, #18
 80016b8:	d859      	bhi.n	800176e <HAL_GPIO_Init+0x12e>
 80016ba:	a201      	add	r2, pc, #4	; (adr r2, 80016c0 <HAL_GPIO_Init+0x80>)
 80016bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c0:	0800173b 	.word	0x0800173b
 80016c4:	08001715 	.word	0x08001715
 80016c8:	08001727 	.word	0x08001727
 80016cc:	08001769 	.word	0x08001769
 80016d0:	0800176f 	.word	0x0800176f
 80016d4:	0800176f 	.word	0x0800176f
 80016d8:	0800176f 	.word	0x0800176f
 80016dc:	0800176f 	.word	0x0800176f
 80016e0:	0800176f 	.word	0x0800176f
 80016e4:	0800176f 	.word	0x0800176f
 80016e8:	0800176f 	.word	0x0800176f
 80016ec:	0800176f 	.word	0x0800176f
 80016f0:	0800176f 	.word	0x0800176f
 80016f4:	0800176f 	.word	0x0800176f
 80016f8:	0800176f 	.word	0x0800176f
 80016fc:	0800176f 	.word	0x0800176f
 8001700:	0800176f 	.word	0x0800176f
 8001704:	0800171d 	.word	0x0800171d
 8001708:	08001731 	.word	0x08001731
 800170c:	4a79      	ldr	r2, [pc, #484]	; (80018f4 <HAL_GPIO_Init+0x2b4>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d013      	beq.n	800173a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001712:	e02c      	b.n	800176e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	623b      	str	r3, [r7, #32]
          break;
 800171a:	e029      	b.n	8001770 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	3304      	adds	r3, #4
 8001722:	623b      	str	r3, [r7, #32]
          break;
 8001724:	e024      	b.n	8001770 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	3308      	adds	r3, #8
 800172c:	623b      	str	r3, [r7, #32]
          break;
 800172e:	e01f      	b.n	8001770 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	330c      	adds	r3, #12
 8001736:	623b      	str	r3, [r7, #32]
          break;
 8001738:	e01a      	b.n	8001770 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d102      	bne.n	8001748 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001742:	2304      	movs	r3, #4
 8001744:	623b      	str	r3, [r7, #32]
          break;
 8001746:	e013      	b.n	8001770 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d105      	bne.n	800175c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001750:	2308      	movs	r3, #8
 8001752:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69fa      	ldr	r2, [r7, #28]
 8001758:	611a      	str	r2, [r3, #16]
          break;
 800175a:	e009      	b.n	8001770 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800175c:	2308      	movs	r3, #8
 800175e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	615a      	str	r2, [r3, #20]
          break;
 8001766:	e003      	b.n	8001770 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001768:	2300      	movs	r3, #0
 800176a:	623b      	str	r3, [r7, #32]
          break;
 800176c:	e000      	b.n	8001770 <HAL_GPIO_Init+0x130>
          break;
 800176e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	2bff      	cmp	r3, #255	; 0xff
 8001774:	d801      	bhi.n	800177a <HAL_GPIO_Init+0x13a>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	e001      	b.n	800177e <HAL_GPIO_Init+0x13e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3304      	adds	r3, #4
 800177e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	2bff      	cmp	r3, #255	; 0xff
 8001784:	d802      	bhi.n	800178c <HAL_GPIO_Init+0x14c>
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	e002      	b.n	8001792 <HAL_GPIO_Init+0x152>
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	3b08      	subs	r3, #8
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	210f      	movs	r1, #15
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	fa01 f303 	lsl.w	r3, r1, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	401a      	ands	r2, r3
 80017a4:	6a39      	ldr	r1, [r7, #32]
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	431a      	orrs	r2, r3
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 80b1 	beq.w	8001922 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017c0:	4b4d      	ldr	r3, [pc, #308]	; (80018f8 <HAL_GPIO_Init+0x2b8>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4a4c      	ldr	r2, [pc, #304]	; (80018f8 <HAL_GPIO_Init+0x2b8>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	6193      	str	r3, [r2, #24]
 80017cc:	4b4a      	ldr	r3, [pc, #296]	; (80018f8 <HAL_GPIO_Init+0x2b8>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017d8:	4a48      	ldr	r2, [pc, #288]	; (80018fc <HAL_GPIO_Init+0x2bc>)
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	089b      	lsrs	r3, r3, #2
 80017de:	3302      	adds	r3, #2
 80017e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	220f      	movs	r2, #15
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	4013      	ands	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a40      	ldr	r2, [pc, #256]	; (8001900 <HAL_GPIO_Init+0x2c0>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d013      	beq.n	800182c <HAL_GPIO_Init+0x1ec>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a3f      	ldr	r2, [pc, #252]	; (8001904 <HAL_GPIO_Init+0x2c4>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d00d      	beq.n	8001828 <HAL_GPIO_Init+0x1e8>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a3e      	ldr	r2, [pc, #248]	; (8001908 <HAL_GPIO_Init+0x2c8>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d007      	beq.n	8001824 <HAL_GPIO_Init+0x1e4>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a3d      	ldr	r2, [pc, #244]	; (800190c <HAL_GPIO_Init+0x2cc>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d101      	bne.n	8001820 <HAL_GPIO_Init+0x1e0>
 800181c:	2303      	movs	r3, #3
 800181e:	e006      	b.n	800182e <HAL_GPIO_Init+0x1ee>
 8001820:	2304      	movs	r3, #4
 8001822:	e004      	b.n	800182e <HAL_GPIO_Init+0x1ee>
 8001824:	2302      	movs	r3, #2
 8001826:	e002      	b.n	800182e <HAL_GPIO_Init+0x1ee>
 8001828:	2301      	movs	r3, #1
 800182a:	e000      	b.n	800182e <HAL_GPIO_Init+0x1ee>
 800182c:	2300      	movs	r3, #0
 800182e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001830:	f002 0203 	and.w	r2, r2, #3
 8001834:	0092      	lsls	r2, r2, #2
 8001836:	4093      	lsls	r3, r2
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	4313      	orrs	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800183e:	492f      	ldr	r1, [pc, #188]	; (80018fc <HAL_GPIO_Init+0x2bc>)
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	3302      	adds	r3, #2
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d006      	beq.n	8001866 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001858:	4b2d      	ldr	r3, [pc, #180]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	492c      	ldr	r1, [pc, #176]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	4313      	orrs	r3, r2
 8001862:	600b      	str	r3, [r1, #0]
 8001864:	e006      	b.n	8001874 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001866:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	43db      	mvns	r3, r3
 800186e:	4928      	ldr	r1, [pc, #160]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 8001870:	4013      	ands	r3, r2
 8001872:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d006      	beq.n	800188e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001880:	4b23      	ldr	r3, [pc, #140]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	4922      	ldr	r1, [pc, #136]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	4313      	orrs	r3, r2
 800188a:	604b      	str	r3, [r1, #4]
 800188c:	e006      	b.n	800189c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800188e:	4b20      	ldr	r3, [pc, #128]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	43db      	mvns	r3, r3
 8001896:	491e      	ldr	r1, [pc, #120]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 8001898:	4013      	ands	r3, r2
 800189a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d006      	beq.n	80018b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018a8:	4b19      	ldr	r3, [pc, #100]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	4918      	ldr	r1, [pc, #96]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	608b      	str	r3, [r1, #8]
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018b6:	4b16      	ldr	r3, [pc, #88]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	43db      	mvns	r3, r3
 80018be:	4914      	ldr	r1, [pc, #80]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d021      	beq.n	8001914 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 80018d2:	68da      	ldr	r2, [r3, #12]
 80018d4:	490e      	ldr	r1, [pc, #56]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	60cb      	str	r3, [r1, #12]
 80018dc:	e021      	b.n	8001922 <HAL_GPIO_Init+0x2e2>
 80018de:	bf00      	nop
 80018e0:	10320000 	.word	0x10320000
 80018e4:	10310000 	.word	0x10310000
 80018e8:	10220000 	.word	0x10220000
 80018ec:	10210000 	.word	0x10210000
 80018f0:	10120000 	.word	0x10120000
 80018f4:	10110000 	.word	0x10110000
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40010000 	.word	0x40010000
 8001900:	40010800 	.word	0x40010800
 8001904:	40010c00 	.word	0x40010c00
 8001908:	40011000 	.word	0x40011000
 800190c:	40011400 	.word	0x40011400
 8001910:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_GPIO_Init+0x304>)
 8001916:	68da      	ldr	r2, [r3, #12]
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	43db      	mvns	r3, r3
 800191c:	4909      	ldr	r1, [pc, #36]	; (8001944 <HAL_GPIO_Init+0x304>)
 800191e:	4013      	ands	r3, r2
 8001920:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	3301      	adds	r3, #1
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	fa22 f303 	lsr.w	r3, r2, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	f47f ae8e 	bne.w	8001654 <HAL_GPIO_Init+0x14>
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	372c      	adds	r7, #44	; 0x2c
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr
 8001944:	40010400 	.word	0x40010400

08001948 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	887b      	ldrh	r3, [r7, #2]
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d002      	beq.n	8001966 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001960:	2301      	movs	r3, #1
 8001962:	73fb      	strb	r3, [r7, #15]
 8001964:	e001      	b.n	800196a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001966:	2300      	movs	r3, #0
 8001968:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800196a:	7bfb      	ldrb	r3, [r7, #15]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	807b      	strh	r3, [r7, #2]
 8001982:	4613      	mov	r3, r2
 8001984:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001986:	787b      	ldrb	r3, [r7, #1]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800198c:	887a      	ldrh	r2, [r7, #2]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001992:	e003      	b.n	800199c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001994:	887b      	ldrh	r3, [r7, #2]
 8001996:	041a      	lsls	r2, r3, #16
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	611a      	str	r2, [r3, #16]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b085      	sub	sp, #20
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	460b      	mov	r3, r1
 80019b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019b8:	887a      	ldrh	r2, [r7, #2]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4013      	ands	r3, r2
 80019be:	041a      	lsls	r2, r3, #16
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	43d9      	mvns	r1, r3
 80019c4:	887b      	ldrh	r3, [r7, #2]
 80019c6:	400b      	ands	r3, r1
 80019c8:	431a      	orrs	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	611a      	str	r2, [r3, #16]
}
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019da:	b08b      	sub	sp, #44	; 0x2c
 80019dc:	af06      	add	r7, sp, #24
 80019de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e0fd      	b.n	8001be6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d106      	bne.n	8001a04 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f009 fc8c 	bl	800b31c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2203      	movs	r2, #3
 8001a08:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f002 fe3d 	bl	8004690 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	687e      	ldr	r6, [r7, #4]
 8001a1e:	466d      	mov	r5, sp
 8001a20:	f106 0410 	add.w	r4, r6, #16
 8001a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a28:	6823      	ldr	r3, [r4, #0]
 8001a2a:	602b      	str	r3, [r5, #0]
 8001a2c:	1d33      	adds	r3, r6, #4
 8001a2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a30:	6838      	ldr	r0, [r7, #0]
 8001a32:	f002 fe07 	bl	8004644 <USB_CoreInit>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e0ce      	b.n	8001be6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f002 fe38 	bl	80046c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a54:	2300      	movs	r3, #0
 8001a56:	73fb      	strb	r3, [r7, #15]
 8001a58:	e04c      	b.n	8001af4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	440b      	add	r3, r1
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	440b      	add	r3, r1
 8001a80:	7bfa      	ldrb	r2, [r7, #15]
 8001a82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a84:	7bfa      	ldrb	r2, [r7, #15]
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	b298      	uxth	r0, r3
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	440b      	add	r3, r1
 8001a96:	3336      	adds	r3, #54	; 0x36
 8001a98:	4602      	mov	r2, r0
 8001a9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	1c5a      	adds	r2, r3, #1
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	440b      	add	r3, r1
 8001aac:	3303      	adds	r3, #3
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ab2:	7bfa      	ldrb	r2, [r7, #15]
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	440b      	add	r3, r1
 8001ac0:	3338      	adds	r3, #56	; 0x38
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ac6:	7bfa      	ldrb	r2, [r7, #15]
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	440b      	add	r3, r1
 8001ad4:	333c      	adds	r3, #60	; 0x3c
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ada:	7bfa      	ldrb	r2, [r7, #15]
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	440b      	add	r3, r1
 8001ae8:	3340      	adds	r3, #64	; 0x40
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	3301      	adds	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
 8001af4:	7bfa      	ldrb	r2, [r7, #15]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d3ad      	bcc.n	8001a5a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	73fb      	strb	r3, [r7, #15]
 8001b02:	e044      	b.n	8001b8e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b04:	7bfa      	ldrb	r2, [r7, #15]
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	440b      	add	r3, r1
 8001b12:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b1a:	7bfa      	ldrb	r2, [r7, #15]
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	440b      	add	r3, r1
 8001b28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b2c:	7bfa      	ldrb	r2, [r7, #15]
 8001b2e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b30:	7bfa      	ldrb	r2, [r7, #15]
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	440b      	add	r3, r1
 8001b3e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001b42:	2200      	movs	r2, #0
 8001b44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b46:	7bfa      	ldrb	r2, [r7, #15]
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	440b      	add	r3, r1
 8001b54:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b5c:	7bfa      	ldrb	r2, [r7, #15]
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	440b      	add	r3, r1
 8001b6a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b72:	7bfa      	ldrb	r2, [r7, #15]
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	440b      	add	r3, r1
 8001b80:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	73fb      	strb	r3, [r7, #15]
 8001b8e:	7bfa      	ldrb	r2, [r7, #15]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d3b5      	bcc.n	8001b04 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	603b      	str	r3, [r7, #0]
 8001b9e:	687e      	ldr	r6, [r7, #4]
 8001ba0:	466d      	mov	r5, sp
 8001ba2:	f106 0410 	add.w	r4, r6, #16
 8001ba6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ba8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001baa:	6823      	ldr	r3, [r4, #0]
 8001bac:	602b      	str	r3, [r5, #0]
 8001bae:	1d33      	adds	r3, r6, #4
 8001bb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bb2:	6838      	ldr	r0, [r7, #0]
 8001bb4:	f002 fd92 	bl	80046dc <USB_DevInit>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d005      	beq.n	8001bca <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00d      	b.n	8001be6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f004 fd2c 	bl	800663c <USB_DevDisconnect>

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_PCD_Start+0x16>
 8001c00:	2302      	movs	r3, #2
 8001c02:	e016      	b.n	8001c32 <HAL_PCD_Start+0x44>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f002 fd27 	bl	8004664 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001c16:	2101      	movs	r1, #1
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f009 fdf2 	bl	800b802 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f004 fd00 	bl	8006628 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b088      	sub	sp, #32
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f004 fd02 	bl	8006650 <USB_ReadInterrupts>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c56:	d102      	bne.n	8001c5e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 fb61 	bl	8002320 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f004 fcf4 	bl	8006650 <USB_ReadInterrupts>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c72:	d112      	bne.n	8001c9a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c86:	b292      	uxth	r2, r2
 8001c88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f009 fbc0 	bl	800b412 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001c92:	2100      	movs	r1, #0
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f925 	bl	8001ee4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f004 fcd6 	bl	8006650 <USB_ReadInterrupts>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001caa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cae:	d10b      	bne.n	8001cc8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001cc2:	b292      	uxth	r2, r2
 8001cc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f004 fcbf 	bl	8006650 <USB_ReadInterrupts>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cdc:	d10b      	bne.n	8001cf6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cf0:	b292      	uxth	r2, r2
 8001cf2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f004 fca8 	bl	8006650 <USB_ReadInterrupts>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d0a:	d126      	bne.n	8001d5a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0204 	bic.w	r2, r2, #4
 8001d1e:	b292      	uxth	r2, r2
 8001d20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0208 	bic.w	r2, r2, #8
 8001d36:	b292      	uxth	r2, r2
 8001d38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f009 fba1 	bl	800b484 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d54:	b292      	uxth	r2, r2
 8001d56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f004 fc76 	bl	8006650 <USB_ReadInterrupts>
 8001d64:	4603      	mov	r3, r0
 8001d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d6e:	f040 8084 	bne.w	8001e7a <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001d72:	2300      	movs	r3, #0
 8001d74:	77fb      	strb	r3, [r7, #31]
 8001d76:	e011      	b.n	8001d9c <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	7ffb      	ldrb	r3, [r7, #31]
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	441a      	add	r2, r3
 8001d84:	7ffb      	ldrb	r3, [r7, #31]
 8001d86:	8812      	ldrh	r2, [r2, #0]
 8001d88:	b292      	uxth	r2, r2
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	f107 0120 	add.w	r1, r7, #32
 8001d90:	440b      	add	r3, r1
 8001d92:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001d96:	7ffb      	ldrb	r3, [r7, #31]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	77fb      	strb	r3, [r7, #31]
 8001d9c:	7ffb      	ldrb	r3, [r7, #31]
 8001d9e:	2b07      	cmp	r3, #7
 8001da0:	d9ea      	bls.n	8001d78 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0201 	orr.w	r2, r2, #1
 8001db4:	b292      	uxth	r2, r2
 8001db6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0201 	bic.w	r2, r2, #1
 8001dcc:	b292      	uxth	r2, r2
 8001dce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001dd2:	bf00      	nop
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f6      	beq.n	8001dd4 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001df8:	b292      	uxth	r2, r2
 8001dfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	77fb      	strb	r3, [r7, #31]
 8001e02:	e010      	b.n	8001e26 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001e04:	7ffb      	ldrb	r3, [r7, #31]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6812      	ldr	r2, [r2, #0]
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	7ffa      	ldrb	r2, [r7, #31]
 8001e0e:	0092      	lsls	r2, r2, #2
 8001e10:	440a      	add	r2, r1
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	f107 0120 	add.w	r1, r7, #32
 8001e18:	440b      	add	r3, r1
 8001e1a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001e1e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001e20:	7ffb      	ldrb	r3, [r7, #31]
 8001e22:	3301      	adds	r3, #1
 8001e24:	77fb      	strb	r3, [r7, #31]
 8001e26:	7ffb      	ldrb	r3, [r7, #31]
 8001e28:	2b07      	cmp	r3, #7
 8001e2a:	d9eb      	bls.n	8001e04 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0208 	orr.w	r2, r2, #8
 8001e3e:	b292      	uxth	r2, r2
 8001e40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e56:	b292      	uxth	r2, r2
 8001e58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0204 	orr.w	r2, r2, #4
 8001e6e:	b292      	uxth	r2, r2
 8001e70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f009 faeb 	bl	800b450 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f004 fbe6 	bl	8006650 <USB_ReadInterrupts>
 8001e84:	4603      	mov	r3, r0
 8001e86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e8e:	d10e      	bne.n	8001eae <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ea2:	b292      	uxth	r2, r2
 8001ea4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f009 faa4 	bl	800b3f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f004 fbcc 	bl	8006650 <USB_ReadInterrupts>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ec2:	d10b      	bne.n	8001edc <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ed6:	b292      	uxth	r2, r2
 8001ed8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001edc:	bf00      	nop
 8001ede:	3720      	adds	r7, #32
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <HAL_PCD_SetAddress+0x1a>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e013      	b.n	8001f26 <HAL_PCD_SetAddress+0x42>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	78fa      	ldrb	r2, [r7, #3]
 8001f0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	78fa      	ldrb	r2, [r7, #3]
 8001f14:	4611      	mov	r1, r2
 8001f16:	4618      	mov	r0, r3
 8001f18:	f004 fb73 	bl	8006602 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b084      	sub	sp, #16
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
 8001f36:	4608      	mov	r0, r1
 8001f38:	4611      	mov	r1, r2
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	70fb      	strb	r3, [r7, #3]
 8001f40:	460b      	mov	r3, r1
 8001f42:	803b      	strh	r3, [r7, #0]
 8001f44:	4613      	mov	r3, r2
 8001f46:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	da0e      	bge.n	8001f72 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	1c5a      	adds	r2, r3, #1
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	4413      	add	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	705a      	strb	r2, [r3, #1]
 8001f70:	e00e      	b.n	8001f90 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f72:	78fb      	ldrb	r3, [r7, #3]
 8001f74:	f003 0207 	and.w	r2, r3, #7
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	4413      	add	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f9c:	883a      	ldrh	r2, [r7, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	78ba      	ldrb	r2, [r7, #2]
 8001fa6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	785b      	ldrb	r3, [r3, #1]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d004      	beq.n	8001fba <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001fba:	78bb      	ldrb	r3, [r7, #2]
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d102      	bne.n	8001fc6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <HAL_PCD_EP_Open+0xa6>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e00e      	b.n	8001ff2 <HAL_PCD_EP_Open+0xc4>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68f9      	ldr	r1, [r7, #12]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f002 fb9a 	bl	800471c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001ff0:	7afb      	ldrb	r3, [r7, #11]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b084      	sub	sp, #16
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	460b      	mov	r3, r1
 8002004:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002006:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800200a:	2b00      	cmp	r3, #0
 800200c:	da0e      	bge.n	800202c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800200e:	78fb      	ldrb	r3, [r7, #3]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2201      	movs	r2, #1
 8002028:	705a      	strb	r2, [r3, #1]
 800202a:	e00e      	b.n	800204a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	f003 0207 	and.w	r2, r3, #7
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	b2da      	uxtb	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <HAL_PCD_EP_Close+0x6a>
 8002060:	2302      	movs	r3, #2
 8002062:	e00e      	b.n	8002082 <HAL_PCD_EP_Close+0x88>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68f9      	ldr	r1, [r7, #12]
 8002072:	4618      	mov	r0, r3
 8002074:	f002 febc 	bl	8004df0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b086      	sub	sp, #24
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	603b      	str	r3, [r7, #0]
 8002096:	460b      	mov	r3, r1
 8002098:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800209a:	7afb      	ldrb	r3, [r7, #11]
 800209c:	f003 0207 	and.w	r2, r3, #7
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4413      	add	r3, r2
 80020b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2200      	movs	r2, #0
 80020c2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	2200      	movs	r2, #0
 80020c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020ca:	7afb      	ldrb	r3, [r7, #11]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020d6:	7afb      	ldrb	r3, [r7, #11]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d106      	bne.n	80020ee <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6979      	ldr	r1, [r7, #20]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f003 f86e 	bl	80051c8 <USB_EPStartXfer>
 80020ec:	e005      	b.n	80020fa <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6979      	ldr	r1, [r7, #20]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f003 f867 	bl	80051c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	f003 0207 	and.w	r2, r3, #7
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	440b      	add	r3, r1
 8002122:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002126:	681b      	ldr	r3, [r3, #0]
}
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr

08002132 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b086      	sub	sp, #24
 8002136:	af00      	add	r7, sp, #0
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	603b      	str	r3, [r7, #0]
 800213e:	460b      	mov	r3, r1
 8002140:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002142:	7afb      	ldrb	r3, [r7, #11]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	4413      	add	r3, r2
 8002156:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2200      	movs	r2, #0
 8002176:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	2201      	movs	r2, #1
 800217c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800217e:	7afb      	ldrb	r3, [r7, #11]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	b2da      	uxtb	r2, r3
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800218a:	7afb      	ldrb	r3, [r7, #11]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	2b00      	cmp	r3, #0
 8002192:	d106      	bne.n	80021a2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6979      	ldr	r1, [r7, #20]
 800219a:	4618      	mov	r0, r3
 800219c:	f003 f814 	bl	80051c8 <USB_EPStartXfer>
 80021a0:	e005      	b.n	80021ae <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6979      	ldr	r1, [r7, #20]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f003 f80d 	bl	80051c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	f003 0207 	and.w	r2, r3, #7
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d901      	bls.n	80021d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e04c      	b.n	8002270 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	da0e      	bge.n	80021fc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021de:	78fb      	ldrb	r3, [r7, #3]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2201      	movs	r2, #1
 80021f8:	705a      	strb	r2, [r3, #1]
 80021fa:	e00c      	b.n	8002216 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2201      	movs	r2, #1
 800221a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	b2da      	uxtb	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <HAL_PCD_EP_SetStall+0x7e>
 8002232:	2302      	movs	r3, #2
 8002234:	e01c      	b.n	8002270 <HAL_PCD_EP_SetStall+0xb8>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68f9      	ldr	r1, [r7, #12]
 8002244:	4618      	mov	r0, r3
 8002246:	f004 f8df 	bl	8006408 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800224a:	78fb      	ldrb	r3, [r7, #3]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	2b00      	cmp	r3, #0
 8002252:	d108      	bne.n	8002266 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800225e:	4619      	mov	r1, r3
 8002260:	4610      	mov	r0, r2
 8002262:	f004 fa04 	bl	800666e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	f003 020f 	and.w	r2, r3, #15
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	429a      	cmp	r2, r3
 8002290:	d901      	bls.n	8002296 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e040      	b.n	8002318 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002296:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800229a:	2b00      	cmp	r3, #0
 800229c:	da0e      	bge.n	80022bc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800229e:	78fb      	ldrb	r3, [r7, #3]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2201      	movs	r2, #1
 80022b8:	705a      	strb	r2, [r3, #1]
 80022ba:	e00e      	b.n	80022da <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022bc:	78fb      	ldrb	r3, [r7, #3]
 80022be:	f003 0207 	and.w	r2, r3, #7
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	4413      	add	r3, r2
 80022d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022e0:	78fb      	ldrb	r3, [r7, #3]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_PCD_EP_ClrStall+0x82>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e00e      	b.n	8002318 <HAL_PCD_EP_ClrStall+0xa0>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68f9      	ldr	r1, [r7, #12]
 8002308:	4618      	mov	r0, r3
 800230a:	f004 f8cd 	bl	80064a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08e      	sub	sp, #56	; 0x38
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002328:	e2df      	b.n	80028ea <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002332:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002334:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002336:	b2db      	uxtb	r3, r3
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002340:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002344:	2b00      	cmp	r3, #0
 8002346:	f040 8158 	bne.w	80025fa <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800234a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b00      	cmp	r3, #0
 8002352:	d152      	bne.n	80023fa <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	b29b      	uxth	r3, r3
 800235c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002364:	81fb      	strh	r3, [r7, #14]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	89fb      	ldrh	r3, [r7, #14]
 800236c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002374:	b29b      	uxth	r3, r3
 8002376:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3328      	adds	r3, #40	; 0x28
 800237c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002386:	b29b      	uxth	r3, r3
 8002388:	461a      	mov	r2, r3
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4413      	add	r3, r2
 8002392:	3302      	adds	r3, #2
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	4413      	add	r3, r2
 800239c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	695a      	ldr	r2, [r3, #20]
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	441a      	add	r2, r3
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80023b8:	2100      	movs	r1, #0
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f009 f801 	bl	800b3c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 828e 	beq.w	80028ea <PCD_EP_ISR_Handler+0x5ca>
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f040 8289 	bne.w	80028ea <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	b292      	uxth	r2, r2
 80023ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023f8:	e277      	b.n	80028ea <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800240a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800240c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002410:	2b00      	cmp	r3, #0
 8002412:	d034      	beq.n	800247e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800241c:	b29b      	uxth	r3, r3
 800241e:	461a      	mov	r2, r3
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4413      	add	r3, r2
 8002428:	3306      	adds	r3, #6
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	4413      	add	r3, r2
 8002432:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6818      	ldr	r0, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002452:	b29b      	uxth	r3, r3
 8002454:	f004 f95b 	bl	800670e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	b29a      	uxth	r2, r3
 8002460:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002464:	4013      	ands	r3, r2
 8002466:	823b      	strh	r3, [r7, #16]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	8a3a      	ldrh	r2, [r7, #16]
 800246e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002472:	b292      	uxth	r2, r2
 8002474:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f008 ff76 	bl	800b368 <HAL_PCD_SetupStageCallback>
 800247c:	e235      	b.n	80028ea <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800247e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002482:	2b00      	cmp	r3, #0
 8002484:	f280 8231 	bge.w	80028ea <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	b29a      	uxth	r2, r3
 8002490:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002494:	4013      	ands	r3, r2
 8002496:	83bb      	strh	r3, [r7, #28]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	8bba      	ldrh	r2, [r7, #28]
 800249e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024a2:	b292      	uxth	r2, r2
 80024a4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	461a      	mov	r2, r3
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4413      	add	r3, r2
 80024ba:	3306      	adds	r3, #6
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	4413      	add	r3, r2
 80024c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d019      	beq.n	800250e <PCD_EP_ISR_Handler+0x1ee>
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d015      	beq.n	800250e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6818      	ldr	r0, [r3, #0]
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	6959      	ldr	r1, [r3, #20]
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	f004 f90b 	bl	800670e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	695a      	ldr	r2, [r3, #20]
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	441a      	add	r2, r3
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002506:	2100      	movs	r1, #0
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f008 ff3f 	bl	800b38c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	61bb      	str	r3, [r7, #24]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800251c:	b29b      	uxth	r3, r3
 800251e:	461a      	mov	r2, r3
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	4413      	add	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d112      	bne.n	800255c <PCD_EP_ISR_Handler+0x23c>
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	b29b      	uxth	r3, r3
 800253c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002540:	b29a      	uxth	r2, r3
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	801a      	strh	r2, [r3, #0]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	b29b      	uxth	r3, r3
 800254c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002550:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002554:	b29a      	uxth	r2, r3
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	801a      	strh	r2, [r3, #0]
 800255a:	e02f      	b.n	80025bc <PCD_EP_ISR_Handler+0x29c>
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	2b3e      	cmp	r3, #62	; 0x3e
 8002562:	d813      	bhi.n	800258c <PCD_EP_ISR_Handler+0x26c>
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	085b      	lsrs	r3, r3, #1
 800256a:	633b      	str	r3, [r7, #48]	; 0x30
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <PCD_EP_ISR_Handler+0x25e>
 8002578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257a:	3301      	adds	r3, #1
 800257c:	633b      	str	r3, [r7, #48]	; 0x30
 800257e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002580:	b29b      	uxth	r3, r3
 8002582:	029b      	lsls	r3, r3, #10
 8002584:	b29a      	uxth	r2, r3
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	801a      	strh	r2, [r3, #0]
 800258a:	e017      	b.n	80025bc <PCD_EP_ISR_Handler+0x29c>
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	095b      	lsrs	r3, r3, #5
 8002592:	633b      	str	r3, [r7, #48]	; 0x30
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	2b00      	cmp	r3, #0
 800259e:	d102      	bne.n	80025a6 <PCD_EP_ISR_Handler+0x286>
 80025a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a2:	3b01      	subs	r3, #1
 80025a4:	633b      	str	r3, [r7, #48]	; 0x30
 80025a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	029b      	lsls	r3, r3, #10
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025cc:	827b      	strh	r3, [r7, #18]
 80025ce:	8a7b      	ldrh	r3, [r7, #18]
 80025d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80025d4:	827b      	strh	r3, [r7, #18]
 80025d6:	8a7b      	ldrh	r3, [r7, #18]
 80025d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025dc:	827b      	strh	r3, [r7, #18]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	8a7b      	ldrh	r3, [r7, #18]
 80025e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	8013      	strh	r3, [r2, #0]
 80025f8:	e177      	b.n	80028ea <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800260c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002610:	2b00      	cmp	r3, #0
 8002612:	f280 80ea 	bge.w	80027ea <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	b29a      	uxth	r2, r3
 8002628:	f640 738f 	movw	r3, #3983	; 0xf8f
 800262c:	4013      	ands	r3, r2
 800262e:	853b      	strh	r3, [r7, #40]	; 0x28
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	461a      	mov	r2, r3
 8002636:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002640:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002644:	b292      	uxth	r2, r2
 8002646:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002648:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	4413      	add	r3, r2
 800265c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	7b1b      	ldrb	r3, [r3, #12]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d122      	bne.n	80026ac <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800266e:	b29b      	uxth	r3, r3
 8002670:	461a      	mov	r2, r3
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	4413      	add	r3, r2
 800267a:	3306      	adds	r3, #6
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	4413      	add	r3, r2
 8002684:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800268e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002690:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 8087 	beq.w	80027a6 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6818      	ldr	r0, [r3, #0]
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	6959      	ldr	r1, [r3, #20]
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	88da      	ldrh	r2, [r3, #6]
 80026a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026a6:	f004 f832 	bl	800670e <USB_ReadPMA>
 80026aa:	e07c      	b.n	80027a6 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	78db      	ldrb	r3, [r3, #3]
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d108      	bne.n	80026c6 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80026b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026b6:	461a      	mov	r2, r3
 80026b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f923 	bl	8002906 <HAL_PCD_EP_DB_Receive>
 80026c0:	4603      	mov	r3, r0
 80026c2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80026c4:	e06f      	b.n	80027a6 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e0:	847b      	strh	r3, [r7, #34]	; 0x22
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	441a      	add	r2, r3
 80026f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80026f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002702:	b29b      	uxth	r3, r3
 8002704:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	b29b      	uxth	r3, r3
 8002718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d021      	beq.n	8002764 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002728:	b29b      	uxth	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4413      	add	r3, r2
 8002734:	3302      	adds	r3, #2
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	4413      	add	r3, r2
 800273e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002748:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800274a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800274c:	2b00      	cmp	r3, #0
 800274e:	d02a      	beq.n	80027a6 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	6959      	ldr	r1, [r3, #20]
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	891a      	ldrh	r2, [r3, #8]
 800275c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800275e:	f003 ffd6 	bl	800670e <USB_ReadPMA>
 8002762:	e020      	b.n	80027a6 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800276c:	b29b      	uxth	r3, r3
 800276e:	461a      	mov	r2, r3
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4413      	add	r3, r2
 8002778:	3306      	adds	r3, #6
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6812      	ldr	r2, [r2, #0]
 8002780:	4413      	add	r3, r2
 8002782:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800278c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800278e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6818      	ldr	r0, [r3, #0]
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	6959      	ldr	r1, [r3, #20]
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	895a      	ldrh	r2, [r3, #10]
 80027a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027a2:	f003 ffb4 	bl	800670e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	69da      	ldr	r2, [r3, #28]
 80027aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027ac:	441a      	add	r2, r3
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	695a      	ldr	r2, [r3, #20]
 80027b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027b8:	441a      	add	r2, r3
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d004      	beq.n	80027d0 <PCD_EP_ISR_Handler+0x4b0>
 80027c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d206      	bcs.n	80027de <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	4619      	mov	r1, r3
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f008 fdd8 	bl	800b38c <HAL_PCD_DataOutStageCallback>
 80027dc:	e005      	b.n	80027ea <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027e4:	4618      	mov	r0, r3
 80027e6:	f002 fcef 	bl	80051c8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80027ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d07a      	beq.n	80028ea <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80027f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	4413      	add	r3, r2
 8002806:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	461a      	mov	r2, r3
 800280e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	b29b      	uxth	r3, r3
 800281a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800281e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002822:	843b      	strh	r3, [r7, #32]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	441a      	add	r2, r3
 8002832:	8c3b      	ldrh	r3, [r7, #32]
 8002834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800283c:	b29b      	uxth	r3, r3
 800283e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	78db      	ldrb	r3, [r3, #3]
 8002844:	2b02      	cmp	r3, #2
 8002846:	d108      	bne.n	800285a <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800284c:	2b02      	cmp	r3, #2
 800284e:	d146      	bne.n	80028de <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002850:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002856:	2b00      	cmp	r3, #0
 8002858:	d141      	bne.n	80028de <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002862:	b29b      	uxth	r3, r3
 8002864:	461a      	mov	r2, r3
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4413      	add	r3, r2
 800286e:	3302      	adds	r3, #2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	4413      	add	r3, r2
 8002878:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002882:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	699a      	ldr	r2, [r3, #24]
 8002888:	8bfb      	ldrh	r3, [r7, #30]
 800288a:	429a      	cmp	r2, r3
 800288c:	d906      	bls.n	800289c <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	699a      	ldr	r2, [r3, #24]
 8002892:	8bfb      	ldrh	r3, [r7, #30]
 8002894:	1ad2      	subs	r2, r2, r3
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	619a      	str	r2, [r3, #24]
 800289a:	e002      	b.n	80028a2 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	2200      	movs	r2, #0
 80028a0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d106      	bne.n	80028b8 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	4619      	mov	r1, r3
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f008 fd86 	bl	800b3c2 <HAL_PCD_DataInStageCallback>
 80028b6:	e018      	b.n	80028ea <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	695a      	ldr	r2, [r3, #20]
 80028bc:	8bfb      	ldrh	r3, [r7, #30]
 80028be:	441a      	add	r2, r3
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	69da      	ldr	r2, [r3, #28]
 80028c8:	8bfb      	ldrh	r3, [r7, #30]
 80028ca:	441a      	add	r2, r3
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028d6:	4618      	mov	r0, r3
 80028d8:	f002 fc76 	bl	80051c8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80028dc:	e005      	b.n	80028ea <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80028de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028e0:	461a      	mov	r2, r3
 80028e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f91b 	bl	8002b20 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	b21b      	sxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f6ff ad17 	blt.w	800232a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3738      	adds	r7, #56	; 0x38
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b088      	sub	sp, #32
 800290a:	af00      	add	r7, sp, #0
 800290c:	60f8      	str	r0, [r7, #12]
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	4613      	mov	r3, r2
 8002912:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d07e      	beq.n	8002a1c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002926:	b29b      	uxth	r3, r3
 8002928:	461a      	mov	r2, r3
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	4413      	add	r3, r2
 8002932:	3302      	adds	r3, #2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	4413      	add	r3, r2
 800293c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002946:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	699a      	ldr	r2, [r3, #24]
 800294c:	8b7b      	ldrh	r3, [r7, #26]
 800294e:	429a      	cmp	r2, r3
 8002950:	d306      	bcc.n	8002960 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	699a      	ldr	r2, [r3, #24]
 8002956:	8b7b      	ldrh	r3, [r7, #26]
 8002958:	1ad2      	subs	r2, r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	619a      	str	r2, [r3, #24]
 800295e:	e002      	b.n	8002966 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2200      	movs	r2, #0
 8002964:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d123      	bne.n	80029b6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	b29b      	uxth	r3, r3
 8002980:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002988:	833b      	strh	r3, [r7, #24]
 800298a:	8b3b      	ldrh	r3, [r7, #24]
 800298c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002990:	833b      	strh	r3, [r7, #24]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	441a      	add	r2, r3
 80029a0:	8b3b      	ldrh	r3, [r7, #24]
 80029a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d01f      	beq.n	8002a00 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	461a      	mov	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029da:	82fb      	strh	r3, [r7, #22]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	441a      	add	r2, r3
 80029ea:	8afb      	ldrh	r3, [r7, #22]
 80029ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a00:	8b7b      	ldrh	r3, [r7, #26]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 8087 	beq.w	8002b16 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	6959      	ldr	r1, [r3, #20]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	891a      	ldrh	r2, [r3, #8]
 8002a14:	8b7b      	ldrh	r3, [r7, #26]
 8002a16:	f003 fe7a 	bl	800670e <USB_ReadPMA>
 8002a1a:	e07c      	b.n	8002b16 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	461a      	mov	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	4413      	add	r3, r2
 8002a30:	3306      	adds	r3, #6
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	6812      	ldr	r2, [r2, #0]
 8002a38:	4413      	add	r3, r2
 8002a3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a44:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	699a      	ldr	r2, [r3, #24]
 8002a4a:	8b7b      	ldrh	r3, [r7, #26]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d306      	bcc.n	8002a5e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	699a      	ldr	r2, [r3, #24]
 8002a54:	8b7b      	ldrh	r3, [r7, #26]
 8002a56:	1ad2      	subs	r2, r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	619a      	str	r2, [r3, #24]
 8002a5c:	e002      	b.n	8002a64 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2200      	movs	r2, #0
 8002a62:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d123      	bne.n	8002ab4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a86:	83fb      	strh	r3, [r7, #30]
 8002a88:	8bfb      	ldrh	r3, [r7, #30]
 8002a8a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a8e:	83fb      	strh	r3, [r7, #30]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	461a      	mov	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	441a      	add	r2, r3
 8002a9e:	8bfb      	ldrh	r3, [r7, #30]
 8002aa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d11f      	bne.n	8002afe <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad8:	83bb      	strh	r3, [r7, #28]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	441a      	add	r2, r3
 8002ae8:	8bbb      	ldrh	r3, [r7, #28]
 8002aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002af6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002afe:	8b7b      	ldrh	r3, [r7, #26]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	6959      	ldr	r1, [r3, #20]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	895a      	ldrh	r2, [r3, #10]
 8002b10:	8b7b      	ldrh	r3, [r7, #26]
 8002b12:	f003 fdfc 	bl	800670e <USB_ReadPMA>
    }
  }

  return count;
 8002b16:	8b7b      	ldrh	r3, [r7, #26]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3720      	adds	r7, #32
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b094      	sub	sp, #80	; 0x50
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b2e:	88fb      	ldrh	r3, [r7, #6]
 8002b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 8138 	beq.w	8002daa <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	461a      	mov	r2, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3302      	adds	r3, #2
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	6812      	ldr	r2, [r2, #0]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b62:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	699a      	ldr	r2, [r3, #24]
 8002b6a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d907      	bls.n	8002b82 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	699a      	ldr	r2, [r3, #24]
 8002b76:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002b7a:	1ad2      	subs	r2, r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	619a      	str	r2, [r3, #24]
 8002b80:	e002      	b.n	8002b88 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2200      	movs	r2, #0
 8002b86:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d12c      	bne.n	8002bea <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	4619      	mov	r1, r3
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f008 fc13 	bl	800b3c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b9c:	88fb      	ldrh	r3, [r7, #6]
 8002b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 823a 	beq.w	800301c <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc2:	82fb      	strh	r3, [r7, #22]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	441a      	add	r2, r3
 8002bd2:	8afb      	ldrh	r3, [r7, #22]
 8002bd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	8013      	strh	r3, [r2, #0]
 8002be8:	e218      	b.n	800301c <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bea:	88fb      	ldrh	r3, [r7, #6]
 8002bec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d01f      	beq.n	8002c34 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c0e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	441a      	add	r2, r3
 8002c1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	f040 81ee 	bne.w	800301c <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	695a      	ldr	r2, [r3, #20]
 8002c44:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002c48:	441a      	add	r2, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	69da      	ldr	r2, [r3, #28]
 8002c52:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002c56:	441a      	add	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	6a1a      	ldr	r2, [r3, #32]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d309      	bcc.n	8002c7c <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	6a1a      	ldr	r2, [r3, #32]
 8002c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c74:	1ad2      	subs	r2, r2, r3
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	621a      	str	r2, [r3, #32]
 8002c7a:	e015      	b.n	8002ca8 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d107      	bne.n	8002c94 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8002c84:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002c88:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c92:	e009      	b.n	8002ca8 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	785b      	ldrb	r3, [r3, #1]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d155      	bne.n	8002d5c <HAL_PCD_EP_DB_Transmit+0x23c>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	61fb      	str	r3, [r7, #28]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	61fb      	str	r3, [r7, #28]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	011a      	lsls	r2, r3, #4
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cd6:	61bb      	str	r3, [r7, #24]
 8002cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d112      	bne.n	8002d04 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	801a      	strh	r2, [r3, #0]
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	801a      	strh	r2, [r3, #0]
 8002d02:	e047      	b.n	8002d94 <HAL_PCD_EP_DB_Transmit+0x274>
 8002d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d06:	2b3e      	cmp	r3, #62	; 0x3e
 8002d08:	d811      	bhi.n	8002d2e <HAL_PCD_EP_DB_Transmit+0x20e>
 8002d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d0c:	085b      	lsrs	r3, r3, #1
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d002      	beq.n	8002d20 <HAL_PCD_EP_DB_Transmit+0x200>
 8002d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	029b      	lsls	r3, r3, #10
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	801a      	strh	r2, [r3, #0]
 8002d2c:	e032      	b.n	8002d94 <HAL_PCD_EP_DB_Transmit+0x274>
 8002d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d30:	095b      	lsrs	r3, r3, #5
 8002d32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d36:	f003 031f 	and.w	r3, r3, #31
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d102      	bne.n	8002d44 <HAL_PCD_EP_DB_Transmit+0x224>
 8002d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d40:	3b01      	subs	r3, #1
 8002d42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	029b      	lsls	r3, r3, #10
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	801a      	strh	r2, [r3, #0]
 8002d5a:	e01b      	b.n	8002d94 <HAL_PCD_EP_DB_Transmit+0x274>
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	785b      	ldrb	r3, [r3, #1]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d117      	bne.n	8002d94 <HAL_PCD_EP_DB_Transmit+0x274>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	461a      	mov	r2, r3
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	4413      	add	r3, r2
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	011a      	lsls	r2, r3, #4
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	4413      	add	r3, r2
 8002d86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d8a:	623b      	str	r3, [r7, #32]
 8002d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6818      	ldr	r0, [r3, #0]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	6959      	ldr	r1, [r3, #20]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	891a      	ldrh	r2, [r3, #8]
 8002da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	f003 fc6e 	bl	8006684 <USB_WritePMA>
 8002da8:	e138      	b.n	800301c <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	461a      	mov	r2, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3306      	adds	r3, #6
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dd2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	699a      	ldr	r2, [r3, #24]
 8002dda:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d307      	bcc.n	8002df2 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	699a      	ldr	r2, [r3, #24]
 8002de6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002dea:	1ad2      	subs	r2, r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	619a      	str	r2, [r3, #24]
 8002df0:	e002      	b.n	8002df8 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2200      	movs	r2, #0
 8002df6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d12e      	bne.n	8002e5e <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	4619      	mov	r1, r3
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f008 fadb 	bl	800b3c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e0c:	88fb      	ldrh	r3, [r7, #6]
 8002e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f040 8102 	bne.w	800301c <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e32:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	441a      	add	r2, r3
 8002e44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002e48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	8013      	strh	r3, [r2, #0]
 8002e5c:	e0de      	b.n	800301c <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e5e:	88fb      	ldrh	r3, [r7, #6]
 8002e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d11f      	bne.n	8002ea8 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e82:	867b      	strh	r3, [r7, #50]	; 0x32
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	441a      	add	r2, r3
 8002e92:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002e94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	f040 80b4 	bne.w	800301c <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	695a      	ldr	r2, [r3, #20]
 8002eb8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ebc:	441a      	add	r2, r3
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	69da      	ldr	r2, [r3, #28]
 8002ec6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002eca:	441a      	add	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	6a1a      	ldr	r2, [r3, #32]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d309      	bcc.n	8002ef0 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	6a1a      	ldr	r2, [r3, #32]
 8002ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ee8:	1ad2      	subs	r2, r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	621a      	str	r2, [r3, #32]
 8002eee:	e015      	b.n	8002f1c <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d107      	bne.n	8002f08 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8002ef8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002efc:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f06:	e009      	b.n	8002f1c <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2200      	movs	r2, #0
 8002f12:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	643b      	str	r3, [r7, #64]	; 0x40
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	785b      	ldrb	r3, [r3, #1]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d155      	bne.n	8002fd6 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3e:	4413      	add	r3, r2
 8002f40:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	011a      	lsls	r2, r3, #4
 8002f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f50:	637b      	str	r3, [r7, #52]	; 0x34
 8002f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d112      	bne.n	8002f7e <HAL_PCD_EP_DB_Transmit+0x45e>
 8002f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f66:	801a      	strh	r2, [r3, #0]
 8002f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f7a:	801a      	strh	r2, [r3, #0]
 8002f7c:	e044      	b.n	8003008 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f80:	2b3e      	cmp	r3, #62	; 0x3e
 8002f82:	d811      	bhi.n	8002fa8 <HAL_PCD_EP_DB_Transmit+0x488>
 8002f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f86:	085b      	lsrs	r3, r3, #1
 8002f88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <HAL_PCD_EP_DB_Transmit+0x47a>
 8002f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f96:	3301      	adds	r3, #1
 8002f98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	029b      	lsls	r3, r3, #10
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa4:	801a      	strh	r2, [r3, #0]
 8002fa6:	e02f      	b.n	8003008 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fb0:	f003 031f 	and.w	r3, r3, #31
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d102      	bne.n	8002fbe <HAL_PCD_EP_DB_Transmit+0x49e>
 8002fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	029b      	lsls	r3, r3, #10
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd2:	801a      	strh	r2, [r3, #0]
 8002fd4:	e018      	b.n	8003008 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	785b      	ldrb	r3, [r3, #1]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d114      	bne.n	8003008 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	461a      	mov	r2, r3
 8002fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fec:	4413      	add	r3, r2
 8002fee:	643b      	str	r3, [r7, #64]	; 0x40
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	011a      	lsls	r2, r3, #4
 8002ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003002:	b29a      	uxth	r2, r3
 8003004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003006:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6818      	ldr	r0, [r3, #0]
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	6959      	ldr	r1, [r3, #20]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	895a      	ldrh	r2, [r3, #10]
 8003014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003016:	b29b      	uxth	r3, r3
 8003018:	f003 fb34 	bl	8006684 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	b29b      	uxth	r3, r3
 800302e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003032:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003036:	82bb      	strh	r3, [r7, #20]
 8003038:	8abb      	ldrh	r3, [r7, #20]
 800303a:	f083 0310 	eor.w	r3, r3, #16
 800303e:	82bb      	strh	r3, [r7, #20]
 8003040:	8abb      	ldrh	r3, [r7, #20]
 8003042:	f083 0320 	eor.w	r3, r3, #32
 8003046:	82bb      	strh	r3, [r7, #20]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	461a      	mov	r2, r3
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	441a      	add	r2, r3
 8003056:	8abb      	ldrh	r3, [r7, #20]
 8003058:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800305c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003068:	b29b      	uxth	r3, r3
 800306a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3750      	adds	r7, #80	; 0x50
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003076:	b480      	push	{r7}
 8003078:	b087      	sub	sp, #28
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	607b      	str	r3, [r7, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	817b      	strh	r3, [r7, #10]
 8003084:	4613      	mov	r3, r2
 8003086:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003088:	897b      	ldrh	r3, [r7, #10]
 800308a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800308e:	b29b      	uxth	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00b      	beq.n	80030ac <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003094:	897b      	ldrh	r3, [r7, #10]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	4613      	mov	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4413      	add	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	e009      	b.n	80030c0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030ac:	897a      	ldrh	r2, [r7, #10]
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4413      	add	r3, r2
 80030be:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80030c0:	893b      	ldrh	r3, [r7, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d107      	bne.n	80030d6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2200      	movs	r2, #0
 80030ca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	80da      	strh	r2, [r3, #6]
 80030d4:	e00b      	b.n	80030ee <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2201      	movs	r2, #1
 80030da:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	b29a      	uxth	r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	0c1b      	lsrs	r3, r3, #16
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	371c      	adds	r7, #28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr
	...

080030fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e26c      	b.n	80035e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 8087 	beq.w	800322a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800311c:	4b92      	ldr	r3, [pc, #584]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 030c 	and.w	r3, r3, #12
 8003124:	2b04      	cmp	r3, #4
 8003126:	d00c      	beq.n	8003142 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003128:	4b8f      	ldr	r3, [pc, #572]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 030c 	and.w	r3, r3, #12
 8003130:	2b08      	cmp	r3, #8
 8003132:	d112      	bne.n	800315a <HAL_RCC_OscConfig+0x5e>
 8003134:	4b8c      	ldr	r3, [pc, #560]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800313c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003140:	d10b      	bne.n	800315a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003142:	4b89      	ldr	r3, [pc, #548]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d06c      	beq.n	8003228 <HAL_RCC_OscConfig+0x12c>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d168      	bne.n	8003228 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e246      	b.n	80035e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003162:	d106      	bne.n	8003172 <HAL_RCC_OscConfig+0x76>
 8003164:	4b80      	ldr	r3, [pc, #512]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a7f      	ldr	r2, [pc, #508]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 800316a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	e02e      	b.n	80031d0 <HAL_RCC_OscConfig+0xd4>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10c      	bne.n	8003194 <HAL_RCC_OscConfig+0x98>
 800317a:	4b7b      	ldr	r3, [pc, #492]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a7a      	ldr	r2, [pc, #488]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 8003180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	4b78      	ldr	r3, [pc, #480]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a77      	ldr	r2, [pc, #476]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 800318c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	e01d      	b.n	80031d0 <HAL_RCC_OscConfig+0xd4>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800319c:	d10c      	bne.n	80031b8 <HAL_RCC_OscConfig+0xbc>
 800319e:	4b72      	ldr	r3, [pc, #456]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a71      	ldr	r2, [pc, #452]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 80031a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	4b6f      	ldr	r3, [pc, #444]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a6e      	ldr	r2, [pc, #440]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	e00b      	b.n	80031d0 <HAL_RCC_OscConfig+0xd4>
 80031b8:	4b6b      	ldr	r3, [pc, #428]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a6a      	ldr	r2, [pc, #424]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 80031be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c2:	6013      	str	r3, [r2, #0]
 80031c4:	4b68      	ldr	r3, [pc, #416]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a67      	ldr	r2, [pc, #412]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 80031ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d013      	beq.n	8003200 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d8:	f7fd ff72 	bl	80010c0 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e0:	f7fd ff6e 	bl	80010c0 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b64      	cmp	r3, #100	; 0x64
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e1fa      	b.n	80035e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f2:	4b5d      	ldr	r3, [pc, #372]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0f0      	beq.n	80031e0 <HAL_RCC_OscConfig+0xe4>
 80031fe:	e014      	b.n	800322a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7fd ff5e 	bl	80010c0 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003208:	f7fd ff5a 	bl	80010c0 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b64      	cmp	r3, #100	; 0x64
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e1e6      	b.n	80035e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321a:	4b53      	ldr	r3, [pc, #332]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x10c>
 8003226:	e000      	b.n	800322a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d063      	beq.n	80032fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003236:	4b4c      	ldr	r3, [pc, #304]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f003 030c 	and.w	r3, r3, #12
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00b      	beq.n	800325a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003242:	4b49      	ldr	r3, [pc, #292]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 030c 	and.w	r3, r3, #12
 800324a:	2b08      	cmp	r3, #8
 800324c:	d11c      	bne.n	8003288 <HAL_RCC_OscConfig+0x18c>
 800324e:	4b46      	ldr	r3, [pc, #280]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d116      	bne.n	8003288 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800325a:	4b43      	ldr	r3, [pc, #268]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d005      	beq.n	8003272 <HAL_RCC_OscConfig+0x176>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d001      	beq.n	8003272 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e1ba      	b.n	80035e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003272:	4b3d      	ldr	r3, [pc, #244]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4939      	ldr	r1, [pc, #228]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 8003282:	4313      	orrs	r3, r2
 8003284:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003286:	e03a      	b.n	80032fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d020      	beq.n	80032d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003290:	4b36      	ldr	r3, [pc, #216]	; (800336c <HAL_RCC_OscConfig+0x270>)
 8003292:	2201      	movs	r2, #1
 8003294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003296:	f7fd ff13 	bl	80010c0 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800329e:	f7fd ff0f 	bl	80010c0 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e19b      	b.n	80035e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b0:	4b2d      	ldr	r3, [pc, #180]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0f0      	beq.n	800329e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032bc:	4b2a      	ldr	r3, [pc, #168]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	4927      	ldr	r1, [pc, #156]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	600b      	str	r3, [r1, #0]
 80032d0:	e015      	b.n	80032fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032d2:	4b26      	ldr	r3, [pc, #152]	; (800336c <HAL_RCC_OscConfig+0x270>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d8:	f7fd fef2 	bl	80010c0 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e0:	f7fd feee 	bl	80010c0 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e17a      	b.n	80035e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f2:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f0      	bne.n	80032e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d03a      	beq.n	8003380 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d019      	beq.n	8003346 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003312:	4b17      	ldr	r3, [pc, #92]	; (8003370 <HAL_RCC_OscConfig+0x274>)
 8003314:	2201      	movs	r2, #1
 8003316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003318:	f7fd fed2 	bl	80010c0 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003320:	f7fd fece 	bl	80010c0 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e15a      	b.n	80035e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003332:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <HAL_RCC_OscConfig+0x26c>)
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0f0      	beq.n	8003320 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800333e:	2001      	movs	r0, #1
 8003340:	f000 fb08 	bl	8003954 <RCC_Delay>
 8003344:	e01c      	b.n	8003380 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003346:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <HAL_RCC_OscConfig+0x274>)
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800334c:	f7fd feb8 	bl	80010c0 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003352:	e00f      	b.n	8003374 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003354:	f7fd feb4 	bl	80010c0 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d908      	bls.n	8003374 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e140      	b.n	80035e8 <HAL_RCC_OscConfig+0x4ec>
 8003366:	bf00      	nop
 8003368:	40021000 	.word	0x40021000
 800336c:	42420000 	.word	0x42420000
 8003370:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003374:	4b9e      	ldr	r3, [pc, #632]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1e9      	bne.n	8003354 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80a6 	beq.w	80034da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800338e:	2300      	movs	r3, #0
 8003390:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003392:	4b97      	ldr	r3, [pc, #604]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10d      	bne.n	80033ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800339e:	4b94      	ldr	r3, [pc, #592]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	4a93      	ldr	r2, [pc, #588]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 80033a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a8:	61d3      	str	r3, [r2, #28]
 80033aa:	4b91      	ldr	r3, [pc, #580]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033b6:	2301      	movs	r3, #1
 80033b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ba:	4b8e      	ldr	r3, [pc, #568]	; (80035f4 <HAL_RCC_OscConfig+0x4f8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d118      	bne.n	80033f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033c6:	4b8b      	ldr	r3, [pc, #556]	; (80035f4 <HAL_RCC_OscConfig+0x4f8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a8a      	ldr	r2, [pc, #552]	; (80035f4 <HAL_RCC_OscConfig+0x4f8>)
 80033cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033d2:	f7fd fe75 	bl	80010c0 <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033da:	f7fd fe71 	bl	80010c0 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b64      	cmp	r3, #100	; 0x64
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e0fd      	b.n	80035e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ec:	4b81      	ldr	r3, [pc, #516]	; (80035f4 <HAL_RCC_OscConfig+0x4f8>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0f0      	beq.n	80033da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d106      	bne.n	800340e <HAL_RCC_OscConfig+0x312>
 8003400:	4b7b      	ldr	r3, [pc, #492]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	4a7a      	ldr	r2, [pc, #488]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 8003406:	f043 0301 	orr.w	r3, r3, #1
 800340a:	6213      	str	r3, [r2, #32]
 800340c:	e02d      	b.n	800346a <HAL_RCC_OscConfig+0x36e>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10c      	bne.n	8003430 <HAL_RCC_OscConfig+0x334>
 8003416:	4b76      	ldr	r3, [pc, #472]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	4a75      	ldr	r2, [pc, #468]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 800341c:	f023 0301 	bic.w	r3, r3, #1
 8003420:	6213      	str	r3, [r2, #32]
 8003422:	4b73      	ldr	r3, [pc, #460]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	4a72      	ldr	r2, [pc, #456]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 8003428:	f023 0304 	bic.w	r3, r3, #4
 800342c:	6213      	str	r3, [r2, #32]
 800342e:	e01c      	b.n	800346a <HAL_RCC_OscConfig+0x36e>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	2b05      	cmp	r3, #5
 8003436:	d10c      	bne.n	8003452 <HAL_RCC_OscConfig+0x356>
 8003438:	4b6d      	ldr	r3, [pc, #436]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	4a6c      	ldr	r2, [pc, #432]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 800343e:	f043 0304 	orr.w	r3, r3, #4
 8003442:	6213      	str	r3, [r2, #32]
 8003444:	4b6a      	ldr	r3, [pc, #424]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	4a69      	ldr	r2, [pc, #420]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	6213      	str	r3, [r2, #32]
 8003450:	e00b      	b.n	800346a <HAL_RCC_OscConfig+0x36e>
 8003452:	4b67      	ldr	r3, [pc, #412]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	4a66      	ldr	r2, [pc, #408]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 8003458:	f023 0301 	bic.w	r3, r3, #1
 800345c:	6213      	str	r3, [r2, #32]
 800345e:	4b64      	ldr	r3, [pc, #400]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	4a63      	ldr	r2, [pc, #396]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 8003464:	f023 0304 	bic.w	r3, r3, #4
 8003468:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d015      	beq.n	800349e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003472:	f7fd fe25 	bl	80010c0 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003478:	e00a      	b.n	8003490 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347a:	f7fd fe21 	bl	80010c0 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	f241 3288 	movw	r2, #5000	; 0x1388
 8003488:	4293      	cmp	r3, r2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e0ab      	b.n	80035e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003490:	4b57      	ldr	r3, [pc, #348]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0ee      	beq.n	800347a <HAL_RCC_OscConfig+0x37e>
 800349c:	e014      	b.n	80034c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800349e:	f7fd fe0f 	bl	80010c0 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a4:	e00a      	b.n	80034bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a6:	f7fd fe0b 	bl	80010c0 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e095      	b.n	80035e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034bc:	4b4c      	ldr	r3, [pc, #304]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1ee      	bne.n	80034a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034c8:	7dfb      	ldrb	r3, [r7, #23]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d105      	bne.n	80034da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ce:	4b48      	ldr	r3, [pc, #288]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	4a47      	ldr	r2, [pc, #284]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 80034d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 8081 	beq.w	80035e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034e4:	4b42      	ldr	r3, [pc, #264]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 030c 	and.w	r3, r3, #12
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d061      	beq.n	80035b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d146      	bne.n	8003586 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f8:	4b3f      	ldr	r3, [pc, #252]	; (80035f8 <HAL_RCC_OscConfig+0x4fc>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fe:	f7fd fddf 	bl	80010c0 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003506:	f7fd fddb 	bl	80010c0 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e067      	b.n	80035e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003518:	4b35      	ldr	r3, [pc, #212]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1f0      	bne.n	8003506 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352c:	d108      	bne.n	8003540 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800352e:	4b30      	ldr	r3, [pc, #192]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	492d      	ldr	r1, [pc, #180]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 800353c:	4313      	orrs	r3, r2
 800353e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003540:	4b2b      	ldr	r3, [pc, #172]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a19      	ldr	r1, [r3, #32]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	430b      	orrs	r3, r1
 8003552:	4927      	ldr	r1, [pc, #156]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 8003554:	4313      	orrs	r3, r2
 8003556:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003558:	4b27      	ldr	r3, [pc, #156]	; (80035f8 <HAL_RCC_OscConfig+0x4fc>)
 800355a:	2201      	movs	r2, #1
 800355c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355e:	f7fd fdaf 	bl	80010c0 <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003566:	f7fd fdab 	bl	80010c0 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e037      	b.n	80035e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003578:	4b1d      	ldr	r3, [pc, #116]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0f0      	beq.n	8003566 <HAL_RCC_OscConfig+0x46a>
 8003584:	e02f      	b.n	80035e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003586:	4b1c      	ldr	r3, [pc, #112]	; (80035f8 <HAL_RCC_OscConfig+0x4fc>)
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358c:	f7fd fd98 	bl	80010c0 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003594:	f7fd fd94 	bl	80010c0 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e020      	b.n	80035e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a6:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f0      	bne.n	8003594 <HAL_RCC_OscConfig+0x498>
 80035b2:	e018      	b.n	80035e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e013      	b.n	80035e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035c0:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <HAL_RCC_OscConfig+0x4f4>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d106      	bne.n	80035e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035de:	429a      	cmp	r2, r3
 80035e0:	d001      	beq.n	80035e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40007000 	.word	0x40007000
 80035f8:	42420060 	.word	0x42420060

080035fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e0d0      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003610:	4b6a      	ldr	r3, [pc, #424]	; (80037bc <HAL_RCC_ClockConfig+0x1c0>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d910      	bls.n	8003640 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361e:	4b67      	ldr	r3, [pc, #412]	; (80037bc <HAL_RCC_ClockConfig+0x1c0>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 0207 	bic.w	r2, r3, #7
 8003626:	4965      	ldr	r1, [pc, #404]	; (80037bc <HAL_RCC_ClockConfig+0x1c0>)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	4313      	orrs	r3, r2
 800362c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800362e:	4b63      	ldr	r3, [pc, #396]	; (80037bc <HAL_RCC_ClockConfig+0x1c0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d001      	beq.n	8003640 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0b8      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d020      	beq.n	800368e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003658:	4b59      	ldr	r3, [pc, #356]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	4a58      	ldr	r2, [pc, #352]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 800365e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003662:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b00      	cmp	r3, #0
 800366e:	d005      	beq.n	800367c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003670:	4b53      	ldr	r3, [pc, #332]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	4a52      	ldr	r2, [pc, #328]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003676:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800367a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800367c:	4b50      	ldr	r3, [pc, #320]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	494d      	ldr	r1, [pc, #308]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 800368a:	4313      	orrs	r3, r2
 800368c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d040      	beq.n	800371c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d107      	bne.n	80036b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a2:	4b47      	ldr	r3, [pc, #284]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d115      	bne.n	80036da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e07f      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d107      	bne.n	80036ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ba:	4b41      	ldr	r3, [pc, #260]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d109      	bne.n	80036da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e073      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ca:	4b3d      	ldr	r3, [pc, #244]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e06b      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036da:	4b39      	ldr	r3, [pc, #228]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f023 0203 	bic.w	r2, r3, #3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	4936      	ldr	r1, [pc, #216]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036ec:	f7fd fce8 	bl	80010c0 <HAL_GetTick>
 80036f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f2:	e00a      	b.n	800370a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f4:	f7fd fce4 	bl	80010c0 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003702:	4293      	cmp	r3, r2
 8003704:	d901      	bls.n	800370a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e053      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370a:	4b2d      	ldr	r3, [pc, #180]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f003 020c 	and.w	r2, r3, #12
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	429a      	cmp	r2, r3
 800371a:	d1eb      	bne.n	80036f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800371c:	4b27      	ldr	r3, [pc, #156]	; (80037bc <HAL_RCC_ClockConfig+0x1c0>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d210      	bcs.n	800374c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372a:	4b24      	ldr	r3, [pc, #144]	; (80037bc <HAL_RCC_ClockConfig+0x1c0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f023 0207 	bic.w	r2, r3, #7
 8003732:	4922      	ldr	r1, [pc, #136]	; (80037bc <HAL_RCC_ClockConfig+0x1c0>)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	4313      	orrs	r3, r2
 8003738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800373a:	4b20      	ldr	r3, [pc, #128]	; (80037bc <HAL_RCC_ClockConfig+0x1c0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d001      	beq.n	800374c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e032      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003758:	4b19      	ldr	r3, [pc, #100]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	4916      	ldr	r1, [pc, #88]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003766:	4313      	orrs	r3, r2
 8003768:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d009      	beq.n	800378a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003776:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	490e      	ldr	r1, [pc, #56]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003786:	4313      	orrs	r3, r2
 8003788:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800378a:	f000 f821 	bl	80037d0 <HAL_RCC_GetSysClockFreq>
 800378e:	4602      	mov	r2, r0
 8003790:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	091b      	lsrs	r3, r3, #4
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	490a      	ldr	r1, [pc, #40]	; (80037c4 <HAL_RCC_ClockConfig+0x1c8>)
 800379c:	5ccb      	ldrb	r3, [r1, r3]
 800379e:	fa22 f303 	lsr.w	r3, r2, r3
 80037a2:	4a09      	ldr	r2, [pc, #36]	; (80037c8 <HAL_RCC_ClockConfig+0x1cc>)
 80037a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037a6:	4b09      	ldr	r3, [pc, #36]	; (80037cc <HAL_RCC_ClockConfig+0x1d0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fd fb8c 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40022000 	.word	0x40022000
 80037c0:	40021000 	.word	0x40021000
 80037c4:	0800c4a0 	.word	0x0800c4a0
 80037c8:	20000000 	.word	0x20000000
 80037cc:	20000004 	.word	0x20000004

080037d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d0:	b490      	push	{r4, r7}
 80037d2:	b08a      	sub	sp, #40	; 0x28
 80037d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037d6:	4b2a      	ldr	r3, [pc, #168]	; (8003880 <HAL_RCC_GetSysClockFreq+0xb0>)
 80037d8:	1d3c      	adds	r4, r7, #4
 80037da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037e0:	f240 2301 	movw	r3, #513	; 0x201
 80037e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61fb      	str	r3, [r7, #28]
 80037ea:	2300      	movs	r3, #0
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	2300      	movs	r3, #0
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037fa:	4b22      	ldr	r3, [pc, #136]	; (8003884 <HAL_RCC_GetSysClockFreq+0xb4>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f003 030c 	and.w	r3, r3, #12
 8003806:	2b04      	cmp	r3, #4
 8003808:	d002      	beq.n	8003810 <HAL_RCC_GetSysClockFreq+0x40>
 800380a:	2b08      	cmp	r3, #8
 800380c:	d003      	beq.n	8003816 <HAL_RCC_GetSysClockFreq+0x46>
 800380e:	e02d      	b.n	800386c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003810:	4b1d      	ldr	r3, [pc, #116]	; (8003888 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003812:	623b      	str	r3, [r7, #32]
      break;
 8003814:	e02d      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	0c9b      	lsrs	r3, r3, #18
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003822:	4413      	add	r3, r2
 8003824:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003828:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d013      	beq.n	800385c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003834:	4b13      	ldr	r3, [pc, #76]	; (8003884 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	0c5b      	lsrs	r3, r3, #17
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003842:	4413      	add	r3, r2
 8003844:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003848:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	4a0e      	ldr	r2, [pc, #56]	; (8003888 <HAL_RCC_GetSysClockFreq+0xb8>)
 800384e:	fb02 f203 	mul.w	r2, r2, r3
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	fbb2 f3f3 	udiv	r3, r2, r3
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
 800385a:	e004      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	4a0b      	ldr	r2, [pc, #44]	; (800388c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003860:	fb02 f303 	mul.w	r3, r2, r3
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	623b      	str	r3, [r7, #32]
      break;
 800386a:	e002      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800386c:	4b06      	ldr	r3, [pc, #24]	; (8003888 <HAL_RCC_GetSysClockFreq+0xb8>)
 800386e:	623b      	str	r3, [r7, #32]
      break;
 8003870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003872:	6a3b      	ldr	r3, [r7, #32]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3728      	adds	r7, #40	; 0x28
 8003878:	46bd      	mov	sp, r7
 800387a:	bc90      	pop	{r4, r7}
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	0800c390 	.word	0x0800c390
 8003884:	40021000 	.word	0x40021000
 8003888:	007a1200 	.word	0x007a1200
 800388c:	003d0900 	.word	0x003d0900

08003890 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003894:	4b02      	ldr	r3, [pc, #8]	; (80038a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003896:	681b      	ldr	r3, [r3, #0]
}
 8003898:	4618      	mov	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr
 80038a0:	20000000 	.word	0x20000000

080038a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038a8:	f7ff fff2 	bl	8003890 <HAL_RCC_GetHCLKFreq>
 80038ac:	4602      	mov	r2, r0
 80038ae:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	0a1b      	lsrs	r3, r3, #8
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	4903      	ldr	r1, [pc, #12]	; (80038c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ba:	5ccb      	ldrb	r3, [r1, r3]
 80038bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40021000 	.word	0x40021000
 80038c8:	0800c4b0 	.word	0x0800c4b0

080038cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038d0:	f7ff ffde 	bl	8003890 <HAL_RCC_GetHCLKFreq>
 80038d4:	4602      	mov	r2, r0
 80038d6:	4b05      	ldr	r3, [pc, #20]	; (80038ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	0adb      	lsrs	r3, r3, #11
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	4903      	ldr	r1, [pc, #12]	; (80038f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038e2:	5ccb      	ldrb	r3, [r1, r3]
 80038e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40021000 	.word	0x40021000
 80038f0:	0800c4b0 	.word	0x0800c4b0

080038f4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	220f      	movs	r2, #15
 8003902:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003904:	4b11      	ldr	r3, [pc, #68]	; (800394c <HAL_RCC_GetClockConfig+0x58>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f003 0203 	and.w	r2, r3, #3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003910:	4b0e      	ldr	r3, [pc, #56]	; (800394c <HAL_RCC_GetClockConfig+0x58>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_RCC_GetClockConfig+0x58>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003928:	4b08      	ldr	r3, [pc, #32]	; (800394c <HAL_RCC_GetClockConfig+0x58>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	08db      	lsrs	r3, r3, #3
 800392e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003936:	4b06      	ldr	r3, [pc, #24]	; (8003950 <HAL_RCC_GetClockConfig+0x5c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0207 	and.w	r2, r3, #7
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr
 800394c:	40021000 	.word	0x40021000
 8003950:	40022000 	.word	0x40022000

08003954 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800395c:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <RCC_Delay+0x34>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a0a      	ldr	r2, [pc, #40]	; (800398c <RCC_Delay+0x38>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	0a5b      	lsrs	r3, r3, #9
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	fb02 f303 	mul.w	r3, r2, r3
 800396e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003970:	bf00      	nop
  }
  while (Delay --);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1e5a      	subs	r2, r3, #1
 8003976:	60fa      	str	r2, [r7, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1f9      	bne.n	8003970 <RCC_Delay+0x1c>
}
 800397c:	bf00      	nop
 800397e:	bf00      	nop
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr
 8003988:	20000000 	.word	0x20000000
 800398c:	10624dd3 	.word	0x10624dd3

08003990 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	613b      	str	r3, [r7, #16]
 800399c:	2300      	movs	r3, #0
 800399e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d07d      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80039ac:	2300      	movs	r3, #0
 80039ae:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039b0:	4b4f      	ldr	r3, [pc, #316]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10d      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039bc:	4b4c      	ldr	r3, [pc, #304]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	4a4b      	ldr	r2, [pc, #300]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c6:	61d3      	str	r3, [r2, #28]
 80039c8:	4b49      	ldr	r3, [pc, #292]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039d4:	2301      	movs	r3, #1
 80039d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d8:	4b46      	ldr	r3, [pc, #280]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d118      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039e4:	4b43      	ldr	r3, [pc, #268]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a42      	ldr	r2, [pc, #264]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039f0:	f7fd fb66 	bl	80010c0 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f6:	e008      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f8:	f7fd fb62 	bl	80010c0 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b64      	cmp	r3, #100	; 0x64
 8003a04:	d901      	bls.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e06d      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0a:	4b3a      	ldr	r3, [pc, #232]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0f0      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a16:	4b36      	ldr	r3, [pc, #216]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a1e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d02e      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d027      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a34:	4b2e      	ldr	r3, [pc, #184]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a3c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a3e:	4b2e      	ldr	r3, [pc, #184]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a40:	2201      	movs	r2, #1
 8003a42:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a44:	4b2c      	ldr	r3, [pc, #176]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a4a:	4a29      	ldr	r2, [pc, #164]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d014      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5a:	f7fd fb31 	bl	80010c0 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a60:	e00a      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a62:	f7fd fb2d 	bl	80010c0 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e036      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a78:	4b1d      	ldr	r3, [pc, #116]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0ee      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a84:	4b1a      	ldr	r3, [pc, #104]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	4917      	ldr	r1, [pc, #92]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a96:	7dfb      	ldrb	r3, [r7, #23]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d105      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a9c:	4b14      	ldr	r3, [pc, #80]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	4a13      	ldr	r2, [pc, #76]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aa6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d008      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ab4:	4b0e      	ldr	r3, [pc, #56]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	490b      	ldr	r1, [pc, #44]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0310 	and.w	r3, r3, #16
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d008      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ad2:	4b07      	ldr	r3, [pc, #28]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	4904      	ldr	r1, [pc, #16]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40021000 	.word	0x40021000
 8003af4:	40007000 	.word	0x40007000
 8003af8:	42420440 	.word	0x42420440

08003afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e041      	b.n	8003b92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f839 	bl	8003b9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3304      	adds	r3, #4
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	f000 f9b4 	bl	8003ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr

08003bac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d001      	beq.n	8003bc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e03a      	b.n	8003c3a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a18      	ldr	r2, [pc, #96]	; (8003c44 <HAL_TIM_Base_Start_IT+0x98>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00e      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x58>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bee:	d009      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x58>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a14      	ldr	r2, [pc, #80]	; (8003c48 <HAL_TIM_Base_Start_IT+0x9c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d004      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x58>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a13      	ldr	r2, [pc, #76]	; (8003c4c <HAL_TIM_Base_Start_IT+0xa0>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d111      	bne.n	8003c28 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b06      	cmp	r3, #6
 8003c14:	d010      	beq.n	8003c38 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0201 	orr.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c26:	e007      	b.n	8003c38 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0201 	orr.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr
 8003c44:	40012c00 	.word	0x40012c00
 8003c48:	40000400 	.word	0x40000400
 8003c4c:	40000800 	.word	0x40000800

08003c50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d122      	bne.n	8003cac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d11b      	bne.n	8003cac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0202 	mvn.w	r2, #2
 8003c7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f8ed 	bl	8003e72 <HAL_TIM_IC_CaptureCallback>
 8003c98:	e005      	b.n	8003ca6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f8e0 	bl	8003e60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f8ef 	bl	8003e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d122      	bne.n	8003d00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b04      	cmp	r3, #4
 8003cc6:	d11b      	bne.n	8003d00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f06f 0204 	mvn.w	r2, #4
 8003cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f8c3 	bl	8003e72 <HAL_TIM_IC_CaptureCallback>
 8003cec:	e005      	b.n	8003cfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f8b6 	bl	8003e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f8c5 	bl	8003e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d122      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d11b      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f06f 0208 	mvn.w	r2, #8
 8003d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2204      	movs	r2, #4
 8003d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f899 	bl	8003e72 <HAL_TIM_IC_CaptureCallback>
 8003d40:	e005      	b.n	8003d4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f88c 	bl	8003e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f89b 	bl	8003e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f003 0310 	and.w	r3, r3, #16
 8003d5e:	2b10      	cmp	r3, #16
 8003d60:	d122      	bne.n	8003da8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f003 0310 	and.w	r3, r3, #16
 8003d6c:	2b10      	cmp	r3, #16
 8003d6e:	d11b      	bne.n	8003da8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f06f 0210 	mvn.w	r2, #16
 8003d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2208      	movs	r2, #8
 8003d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f86f 	bl	8003e72 <HAL_TIM_IC_CaptureCallback>
 8003d94:	e005      	b.n	8003da2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f862 	bl	8003e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f871 	bl	8003e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d10e      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d107      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f06f 0201 	mvn.w	r2, #1
 8003dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7fc ff28 	bl	8000c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dde:	2b80      	cmp	r3, #128	; 0x80
 8003de0:	d10e      	bne.n	8003e00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dec:	2b80      	cmp	r3, #128	; 0x80
 8003dee:	d107      	bne.n	8003e00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f8bf 	bl	8003f7e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0a:	2b40      	cmp	r3, #64	; 0x40
 8003e0c:	d10e      	bne.n	8003e2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e18:	2b40      	cmp	r3, #64	; 0x40
 8003e1a:	d107      	bne.n	8003e2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f835 	bl	8003e96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	f003 0320 	and.w	r3, r3, #32
 8003e36:	2b20      	cmp	r3, #32
 8003e38:	d10e      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f003 0320 	and.w	r3, r3, #32
 8003e44:	2b20      	cmp	r3, #32
 8003e46:	d107      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f06f 0220 	mvn.w	r2, #32
 8003e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f88a 	bl	8003f6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e58:	bf00      	nop
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr

08003e72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr

08003e84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc80      	pop	{r7}
 8003e94:	4770      	bx	lr

08003e96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr

08003ea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a29      	ldr	r2, [pc, #164]	; (8003f60 <TIM_Base_SetConfig+0xb8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00b      	beq.n	8003ed8 <TIM_Base_SetConfig+0x30>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec6:	d007      	beq.n	8003ed8 <TIM_Base_SetConfig+0x30>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a26      	ldr	r2, [pc, #152]	; (8003f64 <TIM_Base_SetConfig+0xbc>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d003      	beq.n	8003ed8 <TIM_Base_SetConfig+0x30>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a25      	ldr	r2, [pc, #148]	; (8003f68 <TIM_Base_SetConfig+0xc0>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d108      	bne.n	8003eea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a1c      	ldr	r2, [pc, #112]	; (8003f60 <TIM_Base_SetConfig+0xb8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00b      	beq.n	8003f0a <TIM_Base_SetConfig+0x62>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef8:	d007      	beq.n	8003f0a <TIM_Base_SetConfig+0x62>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a19      	ldr	r2, [pc, #100]	; (8003f64 <TIM_Base_SetConfig+0xbc>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d003      	beq.n	8003f0a <TIM_Base_SetConfig+0x62>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a18      	ldr	r2, [pc, #96]	; (8003f68 <TIM_Base_SetConfig+0xc0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d108      	bne.n	8003f1c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a07      	ldr	r2, [pc, #28]	; (8003f60 <TIM_Base_SetConfig+0xb8>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d103      	bne.n	8003f50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	615a      	str	r2, [r3, #20]
}
 8003f56:	bf00      	nop
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr
 8003f60:	40012c00 	.word	0x40012c00
 8003f64:	40000400 	.word	0x40000400
 8003f68:	40000800 	.word	0x40000800

08003f6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bc80      	pop	{r7}
 8003f7c:	4770      	bx	lr

08003f7e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bc80      	pop	{r7}
 8003f8e:	4770      	bx	lr

08003f90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e03f      	b.n	8004022 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d106      	bne.n	8003fbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fc fe84 	bl	8000cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2224      	movs	r2, #36	; 0x24
 8003fc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 faa7 	bl	8004528 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	691a      	ldr	r2, [r3, #16]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fe8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	695a      	ldr	r2, [r3, #20]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ff8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004008:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800402a:	b480      	push	{r7}
 800402c:	b085      	sub	sp, #20
 800402e:	af00      	add	r7, sp, #0
 8004030:	60f8      	str	r0, [r7, #12]
 8004032:	60b9      	str	r1, [r7, #8]
 8004034:	4613      	mov	r3, r2
 8004036:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b20      	cmp	r3, #32
 8004042:	d140      	bne.n	80040c6 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_UART_Receive_IT+0x26>
 800404a:	88fb      	ldrh	r3, [r7, #6]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e039      	b.n	80040c8 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800405a:	2b01      	cmp	r3, #1
 800405c:	d101      	bne.n	8004062 <HAL_UART_Receive_IT+0x38>
 800405e:	2302      	movs	r3, #2
 8004060:	e032      	b.n	80040c8 <HAL_UART_Receive_IT+0x9e>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	88fa      	ldrh	r2, [r7, #6]
 8004074:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	88fa      	ldrh	r2, [r7, #6]
 800407a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2222      	movs	r2, #34	; 0x22
 8004086:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040a0:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695a      	ldr	r2, [r3, #20]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f042 0201 	orr.w	r2, r2, #1
 80040b0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f042 0220 	orr.w	r2, r2, #32
 80040c0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	e000      	b.n	80040c8 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80040c6:	2302      	movs	r3, #2
  }
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bc80      	pop	{r7}
 80040d0:	4770      	bx	lr
	...

080040d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10d      	bne.n	8004126 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	f003 0320 	and.w	r3, r3, #32
 8004110:	2b00      	cmp	r3, #0
 8004112:	d008      	beq.n	8004126 <HAL_UART_IRQHandler+0x52>
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f982 	bl	8004428 <UART_Receive_IT>
      return;
 8004124:	e0d0      	b.n	80042c8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 80b0 	beq.w	800428e <HAL_UART_IRQHandler+0x1ba>
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b00      	cmp	r3, #0
 8004136:	d105      	bne.n	8004144 <HAL_UART_IRQHandler+0x70>
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 80a5 	beq.w	800428e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <HAL_UART_IRQHandler+0x90>
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415c:	f043 0201 	orr.w	r2, r3, #1
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <HAL_UART_IRQHandler+0xb0>
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417c:	f043 0202 	orr.w	r2, r3, #2
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <HAL_UART_IRQHandler+0xd0>
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419c:	f043 0204 	orr.w	r2, r3, #4
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00f      	beq.n	80041ce <HAL_UART_IRQHandler+0xfa>
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	f003 0320 	and.w	r3, r3, #32
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d104      	bne.n	80041c2 <HAL_UART_IRQHandler+0xee>
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d005      	beq.n	80041ce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c6:	f043 0208 	orr.w	r2, r3, #8
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d077      	beq.n	80042c6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d007      	beq.n	80041f0 <HAL_UART_IRQHandler+0x11c>
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f91c 	bl	8004428 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	bf14      	ite	ne
 80041fe:	2301      	movne	r3, #1
 8004200:	2300      	moveq	r3, #0
 8004202:	b2db      	uxtb	r3, r3
 8004204:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b00      	cmp	r3, #0
 8004210:	d102      	bne.n	8004218 <HAL_UART_IRQHandler+0x144>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d031      	beq.n	800427c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f86d 	bl	80042f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004228:	2b00      	cmp	r3, #0
 800422a:	d023      	beq.n	8004274 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695a      	ldr	r2, [r3, #20]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800423a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004240:	2b00      	cmp	r3, #0
 8004242:	d013      	beq.n	800426c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004248:	4a21      	ldr	r2, [pc, #132]	; (80042d0 <HAL_UART_IRQHandler+0x1fc>)
 800424a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004250:	4618      	mov	r0, r3
 8004252:	f7fd f879 	bl	8001348 <HAL_DMA_Abort_IT>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d016      	beq.n	800428a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004266:	4610      	mov	r0, r2
 8004268:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800426a:	e00e      	b.n	800428a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f83a 	bl	80042e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004272:	e00a      	b.n	800428a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f836 	bl	80042e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800427a:	e006      	b.n	800428a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f832 	bl	80042e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004288:	e01d      	b.n	80042c6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800428a:	bf00      	nop
    return;
 800428c:	e01b      	b.n	80042c6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <HAL_UART_IRQHandler+0x1d6>
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f859 	bl	800435a <UART_Transmit_IT>
    return;
 80042a8:	e00e      	b.n	80042c8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d009      	beq.n	80042c8 <HAL_UART_IRQHandler+0x1f4>
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d004      	beq.n	80042c8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f89a 	bl	80043f8 <UART_EndTransmit_IT>
    return;
 80042c4:	e000      	b.n	80042c8 <HAL_UART_IRQHandler+0x1f4>
    return;
 80042c6:	bf00      	nop
  }
}
 80042c8:	3720      	adds	r7, #32
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	08004333 	.word	0x08004333

080042d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bc80      	pop	{r7}
 80042e4:	4770      	bx	lr

080042e6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bc80      	pop	{r7}
 80042f6:	4770      	bx	lr

080042f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800430e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695a      	ldr	r2, [r3, #20]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0201 	bic.w	r2, r2, #1
 800431e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2220      	movs	r2, #32
 8004324:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	bc80      	pop	{r7}
 8004330:	4770      	bx	lr

08004332 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f7ff ffca 	bl	80042e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004352:	bf00      	nop
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800435a:	b480      	push	{r7}
 800435c:	b085      	sub	sp, #20
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b21      	cmp	r3, #33	; 0x21
 800436c:	d13e      	bne.n	80043ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004376:	d114      	bne.n	80043a2 <UART_Transmit_IT+0x48>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d110      	bne.n	80043a2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	461a      	mov	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004394:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	1c9a      	adds	r2, r3, #2
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	621a      	str	r2, [r3, #32]
 80043a0:	e008      	b.n	80043b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	1c59      	adds	r1, r3, #1
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6211      	str	r1, [r2, #32]
 80043ac:	781a      	ldrb	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b29b      	uxth	r3, r3
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	4619      	mov	r1, r3
 80043c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10f      	bne.n	80043e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	e000      	b.n	80043ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043ec:	2302      	movs	r3, #2
  }
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bc80      	pop	{r7}
 80043f6:	4770      	bx	lr

080043f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800440e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7ff ff5b 	bl	80042d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b22      	cmp	r3, #34	; 0x22
 800443a:	d170      	bne.n	800451e <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004444:	d117      	bne.n	8004476 <UART_Receive_IT+0x4e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d113      	bne.n	8004476 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004456:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	b29b      	uxth	r3, r3
 8004460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004464:	b29a      	uxth	r2, r3
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	1c9a      	adds	r2, r3, #2
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	629a      	str	r2, [r3, #40]	; 0x28
 8004474:	e026      	b.n	80044c4 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800447c:	2300      	movs	r3, #0
 800447e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004488:	d007      	beq.n	800449a <UART_Receive_IT+0x72>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10a      	bne.n	80044a8 <UART_Receive_IT+0x80>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d106      	bne.n	80044a8 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	e008      	b.n	80044ba <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044be:	1c5a      	adds	r2, r3, #1
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	3b01      	subs	r3, #1
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	4619      	mov	r1, r3
 80044d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d120      	bne.n	800451a <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0220 	bic.w	r2, r2, #32
 80044e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695a      	ldr	r2, [r3, #20]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0201 	bic.w	r2, r2, #1
 8004506:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f007 fc17 	bl	800bd44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	e002      	b.n	8004520 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800451a:	2300      	movs	r3, #0
 800451c:	e000      	b.n	8004520 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800451e:	2302      	movs	r3, #2
  }
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	4313      	orrs	r3, r2
 8004556:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004562:	f023 030c 	bic.w	r3, r3, #12
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6812      	ldr	r2, [r2, #0]
 800456a:	68b9      	ldr	r1, [r7, #8]
 800456c:	430b      	orrs	r3, r1
 800456e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699a      	ldr	r2, [r3, #24]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a2c      	ldr	r2, [pc, #176]	; (800463c <UART_SetConfig+0x114>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d103      	bne.n	8004598 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004590:	f7ff f99c 	bl	80038cc <HAL_RCC_GetPCLK2Freq>
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	e002      	b.n	800459e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004598:	f7ff f984 	bl	80038a4 <HAL_RCC_GetPCLK1Freq>
 800459c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	4613      	mov	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	009a      	lsls	r2, r3, #2
 80045a8:	441a      	add	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b4:	4a22      	ldr	r2, [pc, #136]	; (8004640 <UART_SetConfig+0x118>)
 80045b6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ba:	095b      	lsrs	r3, r3, #5
 80045bc:	0119      	lsls	r1, r3, #4
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	4613      	mov	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	009a      	lsls	r2, r3, #2
 80045c8:	441a      	add	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80045d4:	4b1a      	ldr	r3, [pc, #104]	; (8004640 <UART_SetConfig+0x118>)
 80045d6:	fba3 0302 	umull	r0, r3, r3, r2
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	2064      	movs	r0, #100	; 0x64
 80045de:	fb00 f303 	mul.w	r3, r0, r3
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	3332      	adds	r3, #50	; 0x32
 80045e8:	4a15      	ldr	r2, [pc, #84]	; (8004640 <UART_SetConfig+0x118>)
 80045ea:	fba2 2303 	umull	r2, r3, r2, r3
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045f4:	4419      	add	r1, r3
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4613      	mov	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	009a      	lsls	r2, r3, #2
 8004600:	441a      	add	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	fbb2 f2f3 	udiv	r2, r2, r3
 800460c:	4b0c      	ldr	r3, [pc, #48]	; (8004640 <UART_SetConfig+0x118>)
 800460e:	fba3 0302 	umull	r0, r3, r3, r2
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	2064      	movs	r0, #100	; 0x64
 8004616:	fb00 f303 	mul.w	r3, r0, r3
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	011b      	lsls	r3, r3, #4
 800461e:	3332      	adds	r3, #50	; 0x32
 8004620:	4a07      	ldr	r2, [pc, #28]	; (8004640 <UART_SetConfig+0x118>)
 8004622:	fba2 2303 	umull	r2, r3, r2, r3
 8004626:	095b      	lsrs	r3, r3, #5
 8004628:	f003 020f 	and.w	r2, r3, #15
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	440a      	add	r2, r1
 8004632:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004634:	bf00      	nop
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40013800 	.word	0x40013800
 8004640:	51eb851f 	.word	0x51eb851f

08004644 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004644:	b084      	sub	sp, #16
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	f107 0014 	add.w	r0, r7, #20
 8004652:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	b004      	add	sp, #16
 8004662:	4770      	bx	lr

08004664 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004674:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004678:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	b29a      	uxth	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	bc80      	pop	{r7}
 800468e:	4770      	bx	lr

08004690 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004698:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800469c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	43db      	mvns	r3, r3
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	4013      	ands	r3, r2
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr

080046c4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	460b      	mov	r3, r1
 80046ce:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr

080046dc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80046dc:	b084      	sub	sp, #16
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	f107 0014 	add.w	r0, r7, #20
 80046ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	bc80      	pop	{r7}
 8004718:	b004      	add	sp, #16
 800471a:	4770      	bx	lr

0800471c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800471c:	b480      	push	{r7}
 800471e:	b09b      	sub	sp, #108	; 0x6c
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	b29b      	uxth	r3, r3
 800473a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800473e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004742:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	78db      	ldrb	r3, [r3, #3]
 800474a:	2b03      	cmp	r3, #3
 800474c:	d81f      	bhi.n	800478e <USB_ActivateEndpoint+0x72>
 800474e:	a201      	add	r2, pc, #4	; (adr r2, 8004754 <USB_ActivateEndpoint+0x38>)
 8004750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004754:	08004765 	.word	0x08004765
 8004758:	08004781 	.word	0x08004781
 800475c:	08004797 	.word	0x08004797
 8004760:	08004773 	.word	0x08004773
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004764:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004768:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800476c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004770:	e012      	b.n	8004798 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004772:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004776:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800477a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800477e:	e00b      	b.n	8004798 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004780:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004784:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004788:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800478c:	e004      	b.n	8004798 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004794:	e000      	b.n	8004798 <USB_ActivateEndpoint+0x7c>
      break;
 8004796:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	441a      	add	r2, r3
 80047a2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80047a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	441a      	add	r2, r3
 80047e8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80047ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	7b1b      	ldrb	r3, [r3, #12]
 8004804:	2b00      	cmp	r3, #0
 8004806:	f040 8149 	bne.w	8004a9c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	785b      	ldrb	r3, [r3, #1]
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 8084 	beq.w	800491c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800481e:	b29b      	uxth	r3, r3
 8004820:	461a      	mov	r2, r3
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	4413      	add	r3, r2
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	011a      	lsls	r2, r3, #4
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	4413      	add	r3, r2
 8004832:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004836:	613b      	str	r3, [r7, #16]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	88db      	ldrh	r3, [r3, #6]
 800483c:	085b      	lsrs	r3, r3, #1
 800483e:	b29b      	uxth	r3, r3
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	b29a      	uxth	r2, r3
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	81fb      	strh	r3, [r7, #14]
 8004856:	89fb      	ldrh	r3, [r7, #14]
 8004858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485c:	2b00      	cmp	r3, #0
 800485e:	d01b      	beq.n	8004898 <USB_ActivateEndpoint+0x17c>
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	b29b      	uxth	r3, r3
 800486e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004876:	81bb      	strh	r3, [r7, #12]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	441a      	add	r2, r3
 8004882:	89bb      	ldrh	r3, [r7, #12]
 8004884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800488c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004890:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004894:	b29b      	uxth	r3, r3
 8004896:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	78db      	ldrb	r3, [r3, #3]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d020      	beq.n	80048e2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	881b      	ldrh	r3, [r3, #0]
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048b6:	813b      	strh	r3, [r7, #8]
 80048b8:	893b      	ldrh	r3, [r7, #8]
 80048ba:	f083 0320 	eor.w	r3, r3, #32
 80048be:	813b      	strh	r3, [r7, #8]
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	441a      	add	r2, r3
 80048ca:	893b      	ldrh	r3, [r7, #8]
 80048cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048dc:	b29b      	uxth	r3, r3
 80048de:	8013      	strh	r3, [r2, #0]
 80048e0:	e27f      	b.n	8004de2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f8:	817b      	strh	r3, [r7, #10]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	441a      	add	r2, r3
 8004904:	897b      	ldrh	r3, [r7, #10]
 8004906:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800490a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800490e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004916:	b29b      	uxth	r3, r3
 8004918:	8013      	strh	r3, [r2, #0]
 800491a:	e262      	b.n	8004de2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004926:	b29b      	uxth	r3, r3
 8004928:	461a      	mov	r2, r3
 800492a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492c:	4413      	add	r3, r2
 800492e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	011a      	lsls	r2, r3, #4
 8004936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004938:	4413      	add	r3, r2
 800493a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800493e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	88db      	ldrh	r3, [r3, #6]
 8004944:	085b      	lsrs	r3, r3, #1
 8004946:	b29b      	uxth	r3, r3
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	627b      	str	r3, [r7, #36]	; 0x24
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800495a:	b29b      	uxth	r3, r3
 800495c:	461a      	mov	r2, r3
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	4413      	add	r3, r2
 8004962:	627b      	str	r3, [r7, #36]	; 0x24
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	011a      	lsls	r2, r3, #4
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	4413      	add	r3, r2
 800496e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004972:	623b      	str	r3, [r7, #32]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d112      	bne.n	80049a2 <USB_ActivateEndpoint+0x286>
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	b29b      	uxth	r3, r3
 8004982:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004986:	b29a      	uxth	r2, r3
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	801a      	strh	r2, [r3, #0]
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	b29b      	uxth	r3, r3
 8004992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800499a:	b29a      	uxth	r2, r3
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	801a      	strh	r2, [r3, #0]
 80049a0:	e02f      	b.n	8004a02 <USB_ActivateEndpoint+0x2e6>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b3e      	cmp	r3, #62	; 0x3e
 80049a8:	d813      	bhi.n	80049d2 <USB_ActivateEndpoint+0x2b6>
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	085b      	lsrs	r3, r3, #1
 80049b0:	663b      	str	r3, [r7, #96]	; 0x60
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <USB_ActivateEndpoint+0x2a8>
 80049be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049c0:	3301      	adds	r3, #1
 80049c2:	663b      	str	r3, [r7, #96]	; 0x60
 80049c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	029b      	lsls	r3, r3, #10
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	801a      	strh	r2, [r3, #0]
 80049d0:	e017      	b.n	8004a02 <USB_ActivateEndpoint+0x2e6>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	095b      	lsrs	r3, r3, #5
 80049d8:	663b      	str	r3, [r7, #96]	; 0x60
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 031f 	and.w	r3, r3, #31
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d102      	bne.n	80049ec <USB_ActivateEndpoint+0x2d0>
 80049e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049e8:	3b01      	subs	r3, #1
 80049ea:	663b      	str	r3, [r7, #96]	; 0x60
 80049ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	029b      	lsls	r3, r3, #10
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	6a3b      	ldr	r3, [r7, #32]
 8004a00:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	83fb      	strh	r3, [r7, #30]
 8004a10:	8bfb      	ldrh	r3, [r7, #30]
 8004a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d01b      	beq.n	8004a52 <USB_ActivateEndpoint+0x336>
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a30:	83bb      	strh	r3, [r7, #28]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	441a      	add	r2, r3
 8004a3c:	8bbb      	ldrh	r3, [r7, #28]
 8004a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a68:	837b      	strh	r3, [r7, #26]
 8004a6a:	8b7b      	ldrh	r3, [r7, #26]
 8004a6c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a70:	837b      	strh	r3, [r7, #26]
 8004a72:	8b7b      	ldrh	r3, [r7, #26]
 8004a74:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a78:	837b      	strh	r3, [r7, #26]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	441a      	add	r2, r3
 8004a84:	8b7b      	ldrh	r3, [r7, #26]
 8004a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	8013      	strh	r3, [r2, #0]
 8004a9a:	e1a2      	b.n	8004de2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	441a      	add	r2, r3
 8004ac0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004ac4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ac8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004acc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	65bb      	str	r3, [r7, #88]	; 0x58
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ae8:	4413      	add	r3, r2
 8004aea:	65bb      	str	r3, [r7, #88]	; 0x58
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	011a      	lsls	r2, r3, #4
 8004af2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004afa:	657b      	str	r3, [r7, #84]	; 0x54
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	891b      	ldrh	r3, [r3, #8]
 8004b00:	085b      	lsrs	r3, r3, #1
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b0a:	801a      	strh	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	653b      	str	r3, [r7, #80]	; 0x50
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	461a      	mov	r2, r3
 8004b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b1c:	4413      	add	r3, r2
 8004b1e:	653b      	str	r3, [r7, #80]	; 0x50
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	011a      	lsls	r2, r3, #4
 8004b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b28:	4413      	add	r3, r2
 8004b2a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	895b      	ldrh	r3, [r3, #10]
 8004b34:	085b      	lsrs	r3, r3, #1
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b3e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	785b      	ldrb	r3, [r3, #1]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f040 8091 	bne.w	8004c6c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004b58:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d01b      	beq.n	8004b9a <USB_ActivateEndpoint+0x47e>
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b78:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	441a      	add	r2, r3
 8004b84:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004b86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	873b      	strh	r3, [r7, #56]	; 0x38
 8004ba8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d01b      	beq.n	8004bea <USB_ActivateEndpoint+0x4ce>
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	441a      	add	r2, r3
 8004bd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004bd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	881b      	ldrh	r3, [r3, #0]
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c00:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004c02:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004c04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c08:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004c0a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004c0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c10:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	441a      	add	r2, r3
 8004c1c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c48:	867b      	strh	r3, [r7, #50]	; 0x32
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	441a      	add	r2, r3
 8004c54:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	8013      	strh	r3, [r2, #0]
 8004c6a:	e0ba      	b.n	8004de2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004c7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01d      	beq.n	8004cc4 <USB_ActivateEndpoint+0x5a8>
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	441a      	add	r2, r3
 8004cac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004cb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004cd4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d01d      	beq.n	8004d1c <USB_ActivateEndpoint+0x600>
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	441a      	add	r2, r3
 8004d04:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	78db      	ldrb	r3, [r3, #3]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d024      	beq.n	8004d6e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d3a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004d3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004d42:	f083 0320 	eor.w	r3, r3, #32
 8004d46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	441a      	add	r2, r3
 8004d54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004d58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	8013      	strh	r3, [r2, #0]
 8004d6c:	e01d      	b.n	8004daa <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d84:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	441a      	add	r2, r3
 8004d92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	441a      	add	r2, r3
 8004dcc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004de2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	376c      	adds	r7, #108	; 0x6c
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bc80      	pop	{r7}
 8004dee:	4770      	bx	lr

08004df0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b08d      	sub	sp, #52	; 0x34
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	7b1b      	ldrb	r3, [r3, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f040 808e 	bne.w	8004f20 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	785b      	ldrb	r3, [r3, #1]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d044      	beq.n	8004e96 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	881b      	ldrh	r3, [r3, #0]
 8004e18:	81bb      	strh	r3, [r7, #12]
 8004e1a:	89bb      	ldrh	r3, [r7, #12]
 8004e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d01b      	beq.n	8004e5c <USB_DeactivateEndpoint+0x6c>
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3a:	817b      	strh	r3, [r7, #10]
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	441a      	add	r2, r3
 8004e46:	897b      	ldrh	r3, [r7, #10]
 8004e48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e72:	813b      	strh	r3, [r7, #8]
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	441a      	add	r2, r3
 8004e7e:	893b      	ldrh	r3, [r7, #8]
 8004e80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	8013      	strh	r3, [r2, #0]
 8004e94:	e192      	b.n	80051bc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	827b      	strh	r3, [r7, #18]
 8004ea4:	8a7b      	ldrh	r3, [r7, #18]
 8004ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d01b      	beq.n	8004ee6 <USB_DeactivateEndpoint+0xf6>
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec4:	823b      	strh	r3, [r7, #16]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	441a      	add	r2, r3
 8004ed0:	8a3b      	ldrh	r3, [r7, #16]
 8004ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	881b      	ldrh	r3, [r3, #0]
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efc:	81fb      	strh	r3, [r7, #14]
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	441a      	add	r2, r3
 8004f08:	89fb      	ldrh	r3, [r7, #14]
 8004f0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	8013      	strh	r3, [r2, #0]
 8004f1e:	e14d      	b.n	80051bc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	785b      	ldrb	r3, [r3, #1]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f040 80a5 	bne.w	8005074 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	843b      	strh	r3, [r7, #32]
 8004f38:	8c3b      	ldrh	r3, [r7, #32]
 8004f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d01b      	beq.n	8004f7a <USB_DeactivateEndpoint+0x18a>
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f58:	83fb      	strh	r3, [r7, #30]
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	441a      	add	r2, r3
 8004f64:	8bfb      	ldrh	r3, [r7, #30]
 8004f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	83bb      	strh	r3, [r7, #28]
 8004f88:	8bbb      	ldrh	r3, [r7, #28]
 8004f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d01b      	beq.n	8004fca <USB_DeactivateEndpoint+0x1da>
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa8:	837b      	strh	r3, [r7, #26]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	441a      	add	r2, r3
 8004fb4:	8b7b      	ldrh	r3, [r7, #26]
 8004fb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe0:	833b      	strh	r3, [r7, #24]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	441a      	add	r2, r3
 8004fec:	8b3b      	ldrh	r3, [r7, #24]
 8004fee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ffa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	b29b      	uxth	r3, r3
 8005010:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005018:	82fb      	strh	r3, [r7, #22]
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	441a      	add	r2, r3
 8005024:	8afb      	ldrh	r3, [r7, #22]
 8005026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800502a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800502e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005036:	b29b      	uxth	r3, r3
 8005038:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	b29b      	uxth	r3, r3
 8005048:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800504c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005050:	82bb      	strh	r3, [r7, #20]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	441a      	add	r2, r3
 800505c:	8abb      	ldrh	r3, [r7, #20]
 800505e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005062:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800506a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800506e:	b29b      	uxth	r3, r3
 8005070:	8013      	strh	r3, [r2, #0]
 8005072:	e0a3      	b.n	80051bc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005082:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d01b      	beq.n	80050c4 <USB_DeactivateEndpoint+0x2d4>
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	b29b      	uxth	r3, r3
 800509a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800509e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	441a      	add	r2, r3
 80050ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80050b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80050d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80050d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d01b      	beq.n	8005114 <USB_DeactivateEndpoint+0x324>
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f2:	853b      	strh	r3, [r7, #40]	; 0x28
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	441a      	add	r2, r3
 80050fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800510c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005110:	b29b      	uxth	r3, r3
 8005112:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	881b      	ldrh	r3, [r3, #0]
 8005120:	b29b      	uxth	r3, r3
 8005122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	441a      	add	r2, r3
 8005136:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005138:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800513c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005140:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005148:	b29b      	uxth	r3, r3
 800514a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	b29b      	uxth	r3, r3
 800515a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800515e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005162:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	441a      	add	r2, r3
 800516e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005178:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800517c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005180:	b29b      	uxth	r3, r3
 8005182:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	b29b      	uxth	r3, r3
 8005192:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519a:	847b      	strh	r3, [r7, #34]	; 0x22
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	441a      	add	r2, r3
 80051a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80051a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3734      	adds	r7, #52	; 0x34
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bc80      	pop	{r7}
 80051c6:	4770      	bx	lr

080051c8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b0c4      	sub	sp, #272	; 0x110
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	1d3b      	adds	r3, r7, #4
 80051d0:	6018      	str	r0, [r3, #0]
 80051d2:	463b      	mov	r3, r7
 80051d4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051d6:	463b      	mov	r3, r7
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	785b      	ldrb	r3, [r3, #1]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	f040 8557 	bne.w	8005c90 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80051e2:	463b      	mov	r3, r7
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	699a      	ldr	r2, [r3, #24]
 80051e8:	463b      	mov	r3, r7
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d905      	bls.n	80051fe <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80051f2:	463b      	mov	r3, r7
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80051fc:	e004      	b.n	8005208 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80051fe:	463b      	mov	r3, r7
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005208:	463b      	mov	r3, r7
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	7b1b      	ldrb	r3, [r3, #12]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d12c      	bne.n	800526c <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005212:	463b      	mov	r3, r7
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6959      	ldr	r1, [r3, #20]
 8005218:	463b      	mov	r3, r7
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	88da      	ldrh	r2, [r3, #6]
 800521e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005222:	b29b      	uxth	r3, r3
 8005224:	1d38      	adds	r0, r7, #4
 8005226:	6800      	ldr	r0, [r0, #0]
 8005228:	f001 fa2c 	bl	8006684 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800522c:	1d3b      	adds	r3, r7, #4
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	1d3b      	adds	r3, r7, #4
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800523a:	b29b      	uxth	r3, r3
 800523c:	461a      	mov	r2, r3
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	4413      	add	r3, r2
 8005242:	617b      	str	r3, [r7, #20]
 8005244:	463b      	mov	r3, r7
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	011a      	lsls	r2, r3, #4
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	4413      	add	r3, r2
 8005250:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005254:	f107 0310 	add.w	r3, r7, #16
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800525e:	b29a      	uxth	r2, r3
 8005260:	f107 0310 	add.w	r3, r7, #16
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	801a      	strh	r2, [r3, #0]
 8005268:	f000 bcdd 	b.w	8005c26 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800526c:	463b      	mov	r3, r7
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	78db      	ldrb	r3, [r3, #3]
 8005272:	2b02      	cmp	r3, #2
 8005274:	f040 8347 	bne.w	8005906 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005278:	463b      	mov	r3, r7
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6a1a      	ldr	r2, [r3, #32]
 800527e:	463b      	mov	r3, r7
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	429a      	cmp	r2, r3
 8005286:	f240 82eb 	bls.w	8005860 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800528a:	1d3b      	adds	r3, r7, #4
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	463b      	mov	r3, r7
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	b29b      	uxth	r3, r3
 800529c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80052a8:	1d3b      	adds	r3, r7, #4
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	463b      	mov	r3, r7
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	441a      	add	r2, r3
 80052b6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80052ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052c2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80052c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80052ce:	463b      	mov	r3, r7
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6a1a      	ldr	r2, [r3, #32]
 80052d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052d8:	1ad2      	subs	r2, r2, r3
 80052da:	463b      	mov	r3, r7
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80052e0:	1d3b      	adds	r3, r7, #4
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	463b      	mov	r3, r7
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f000 8159 	beq.w	80055ae <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052fc:	1d3b      	adds	r3, r7, #4
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	637b      	str	r3, [r7, #52]	; 0x34
 8005302:	463b      	mov	r3, r7
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	785b      	ldrb	r3, [r3, #1]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d164      	bne.n	80053d6 <USB_EPStartXfer+0x20e>
 800530c:	1d3b      	adds	r3, r7, #4
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005312:	1d3b      	adds	r3, r7, #4
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800531a:	b29b      	uxth	r3, r3
 800531c:	461a      	mov	r2, r3
 800531e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005320:	4413      	add	r3, r2
 8005322:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005324:	463b      	mov	r3, r7
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	011a      	lsls	r2, r3, #4
 800532c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532e:	4413      	add	r3, r2
 8005330:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005334:	62bb      	str	r3, [r7, #40]	; 0x28
 8005336:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800533a:	2b00      	cmp	r3, #0
 800533c:	d112      	bne.n	8005364 <USB_EPStartXfer+0x19c>
 800533e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	b29b      	uxth	r3, r3
 8005344:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005348:	b29a      	uxth	r2, r3
 800534a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534c:	801a      	strh	r2, [r3, #0]
 800534e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	b29b      	uxth	r3, r3
 8005354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800535c:	b29a      	uxth	r2, r3
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	801a      	strh	r2, [r3, #0]
 8005362:	e054      	b.n	800540e <USB_EPStartXfer+0x246>
 8005364:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005368:	2b3e      	cmp	r3, #62	; 0x3e
 800536a:	d817      	bhi.n	800539c <USB_EPStartXfer+0x1d4>
 800536c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005370:	085b      	lsrs	r3, r3, #1
 8005372:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005376:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d004      	beq.n	800538c <USB_EPStartXfer+0x1c4>
 8005382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005386:	3301      	adds	r3, #1
 8005388:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800538c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005390:	b29b      	uxth	r3, r3
 8005392:	029b      	lsls	r3, r3, #10
 8005394:	b29a      	uxth	r2, r3
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	801a      	strh	r2, [r3, #0]
 800539a:	e038      	b.n	800540e <USB_EPStartXfer+0x246>
 800539c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053a0:	095b      	lsrs	r3, r3, #5
 80053a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80053a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053aa:	f003 031f 	and.w	r3, r3, #31
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d104      	bne.n	80053bc <USB_EPStartXfer+0x1f4>
 80053b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053b6:	3b01      	subs	r3, #1
 80053b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80053bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	029b      	lsls	r3, r3, #10
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d2:	801a      	strh	r2, [r3, #0]
 80053d4:	e01b      	b.n	800540e <USB_EPStartXfer+0x246>
 80053d6:	463b      	mov	r3, r7
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	785b      	ldrb	r3, [r3, #1]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d116      	bne.n	800540e <USB_EPStartXfer+0x246>
 80053e0:	1d3b      	adds	r3, r7, #4
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	461a      	mov	r2, r3
 80053ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ee:	4413      	add	r3, r2
 80053f0:	637b      	str	r3, [r7, #52]	; 0x34
 80053f2:	463b      	mov	r3, r7
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	011a      	lsls	r2, r3, #4
 80053fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fc:	4413      	add	r3, r2
 80053fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005402:	633b      	str	r3, [r7, #48]	; 0x30
 8005404:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005408:	b29a      	uxth	r2, r3
 800540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800540e:	463b      	mov	r3, r7
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	895b      	ldrh	r3, [r3, #10]
 8005414:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005418:	463b      	mov	r3, r7
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6959      	ldr	r1, [r3, #20]
 800541e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005422:	b29b      	uxth	r3, r3
 8005424:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005428:	1d38      	adds	r0, r7, #4
 800542a:	6800      	ldr	r0, [r0, #0]
 800542c:	f001 f92a 	bl	8006684 <USB_WritePMA>
            ep->xfer_buff += len;
 8005430:	463b      	mov	r3, r7
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	695a      	ldr	r2, [r3, #20]
 8005436:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800543a:	441a      	add	r2, r3
 800543c:	463b      	mov	r3, r7
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005442:	463b      	mov	r3, r7
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6a1a      	ldr	r2, [r3, #32]
 8005448:	463b      	mov	r3, r7
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	429a      	cmp	r2, r3
 8005450:	d909      	bls.n	8005466 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8005452:	463b      	mov	r3, r7
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6a1a      	ldr	r2, [r3, #32]
 8005458:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800545c:	1ad2      	subs	r2, r2, r3
 800545e:	463b      	mov	r3, r7
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	621a      	str	r2, [r3, #32]
 8005464:	e008      	b.n	8005478 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005466:	463b      	mov	r3, r7
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005470:	463b      	mov	r3, r7
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2200      	movs	r2, #0
 8005476:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005478:	463b      	mov	r3, r7
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	785b      	ldrb	r3, [r3, #1]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d164      	bne.n	800554c <USB_EPStartXfer+0x384>
 8005482:	1d3b      	adds	r3, r7, #4
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	61fb      	str	r3, [r7, #28]
 8005488:	1d3b      	adds	r3, r7, #4
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005490:	b29b      	uxth	r3, r3
 8005492:	461a      	mov	r2, r3
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	4413      	add	r3, r2
 8005498:	61fb      	str	r3, [r7, #28]
 800549a:	463b      	mov	r3, r7
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	011a      	lsls	r2, r3, #4
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	4413      	add	r3, r2
 80054a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054aa:	61bb      	str	r3, [r7, #24]
 80054ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d112      	bne.n	80054da <USB_EPStartXfer+0x312>
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054be:	b29a      	uxth	r2, r3
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	801a      	strh	r2, [r3, #0]
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	801a      	strh	r2, [r3, #0]
 80054d8:	e057      	b.n	800558a <USB_EPStartXfer+0x3c2>
 80054da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054de:	2b3e      	cmp	r3, #62	; 0x3e
 80054e0:	d817      	bhi.n	8005512 <USB_EPStartXfer+0x34a>
 80054e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054e6:	085b      	lsrs	r3, r3, #1
 80054e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80054ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d004      	beq.n	8005502 <USB_EPStartXfer+0x33a>
 80054f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80054fc:	3301      	adds	r3, #1
 80054fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005502:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005506:	b29b      	uxth	r3, r3
 8005508:	029b      	lsls	r3, r3, #10
 800550a:	b29a      	uxth	r2, r3
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	801a      	strh	r2, [r3, #0]
 8005510:	e03b      	b.n	800558a <USB_EPStartXfer+0x3c2>
 8005512:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005516:	095b      	lsrs	r3, r3, #5
 8005518:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800551c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005520:	f003 031f 	and.w	r3, r3, #31
 8005524:	2b00      	cmp	r3, #0
 8005526:	d104      	bne.n	8005532 <USB_EPStartXfer+0x36a>
 8005528:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800552c:	3b01      	subs	r3, #1
 800552e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005532:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005536:	b29b      	uxth	r3, r3
 8005538:	029b      	lsls	r3, r3, #10
 800553a:	b29b      	uxth	r3, r3
 800553c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005544:	b29a      	uxth	r2, r3
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	801a      	strh	r2, [r3, #0]
 800554a:	e01e      	b.n	800558a <USB_EPStartXfer+0x3c2>
 800554c:	463b      	mov	r3, r7
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	785b      	ldrb	r3, [r3, #1]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d119      	bne.n	800558a <USB_EPStartXfer+0x3c2>
 8005556:	1d3b      	adds	r3, r7, #4
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	627b      	str	r3, [r7, #36]	; 0x24
 800555c:	1d3b      	adds	r3, r7, #4
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005564:	b29b      	uxth	r3, r3
 8005566:	461a      	mov	r2, r3
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	4413      	add	r3, r2
 800556c:	627b      	str	r3, [r7, #36]	; 0x24
 800556e:	463b      	mov	r3, r7
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	011a      	lsls	r2, r3, #4
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	4413      	add	r3, r2
 800557a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800557e:	623b      	str	r3, [r7, #32]
 8005580:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005584:	b29a      	uxth	r2, r3
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800558a:	463b      	mov	r3, r7
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	891b      	ldrh	r3, [r3, #8]
 8005590:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005594:	463b      	mov	r3, r7
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6959      	ldr	r1, [r3, #20]
 800559a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800559e:	b29b      	uxth	r3, r3
 80055a0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80055a4:	1d38      	adds	r0, r7, #4
 80055a6:	6800      	ldr	r0, [r0, #0]
 80055a8:	f001 f86c 	bl	8006684 <USB_WritePMA>
 80055ac:	e33b      	b.n	8005c26 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055ae:	463b      	mov	r3, r7
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	785b      	ldrb	r3, [r3, #1]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d164      	bne.n	8005682 <USB_EPStartXfer+0x4ba>
 80055b8:	1d3b      	adds	r3, r7, #4
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055be:	1d3b      	adds	r3, r7, #4
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055cc:	4413      	add	r3, r2
 80055ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055d0:	463b      	mov	r3, r7
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	011a      	lsls	r2, r3, #4
 80055d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055da:	4413      	add	r3, r2
 80055dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80055e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d112      	bne.n	8005610 <USB_EPStartXfer+0x448>
 80055ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055ec:	881b      	ldrh	r3, [r3, #0]
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055f8:	801a      	strh	r2, [r3, #0]
 80055fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005608:	b29a      	uxth	r2, r3
 800560a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800560c:	801a      	strh	r2, [r3, #0]
 800560e:	e057      	b.n	80056c0 <USB_EPStartXfer+0x4f8>
 8005610:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005614:	2b3e      	cmp	r3, #62	; 0x3e
 8005616:	d817      	bhi.n	8005648 <USB_EPStartXfer+0x480>
 8005618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800561c:	085b      	lsrs	r3, r3, #1
 800561e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005622:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b00      	cmp	r3, #0
 800562c:	d004      	beq.n	8005638 <USB_EPStartXfer+0x470>
 800562e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005632:	3301      	adds	r3, #1
 8005634:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005638:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800563c:	b29b      	uxth	r3, r3
 800563e:	029b      	lsls	r3, r3, #10
 8005640:	b29a      	uxth	r2, r3
 8005642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005644:	801a      	strh	r2, [r3, #0]
 8005646:	e03b      	b.n	80056c0 <USB_EPStartXfer+0x4f8>
 8005648:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800564c:	095b      	lsrs	r3, r3, #5
 800564e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005652:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005656:	f003 031f 	and.w	r3, r3, #31
 800565a:	2b00      	cmp	r3, #0
 800565c:	d104      	bne.n	8005668 <USB_EPStartXfer+0x4a0>
 800565e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005662:	3b01      	subs	r3, #1
 8005664:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005668:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800566c:	b29b      	uxth	r3, r3
 800566e:	029b      	lsls	r3, r3, #10
 8005670:	b29b      	uxth	r3, r3
 8005672:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005676:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800567a:	b29a      	uxth	r2, r3
 800567c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800567e:	801a      	strh	r2, [r3, #0]
 8005680:	e01e      	b.n	80056c0 <USB_EPStartXfer+0x4f8>
 8005682:	463b      	mov	r3, r7
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	785b      	ldrb	r3, [r3, #1]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d119      	bne.n	80056c0 <USB_EPStartXfer+0x4f8>
 800568c:	1d3b      	adds	r3, r7, #4
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	657b      	str	r3, [r7, #84]	; 0x54
 8005692:	1d3b      	adds	r3, r7, #4
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800569a:	b29b      	uxth	r3, r3
 800569c:	461a      	mov	r2, r3
 800569e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056a0:	4413      	add	r3, r2
 80056a2:	657b      	str	r3, [r7, #84]	; 0x54
 80056a4:	463b      	mov	r3, r7
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	011a      	lsls	r2, r3, #4
 80056ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056ae:	4413      	add	r3, r2
 80056b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056b4:	653b      	str	r3, [r7, #80]	; 0x50
 80056b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80056c0:	463b      	mov	r3, r7
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	891b      	ldrh	r3, [r3, #8]
 80056c6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056ca:	463b      	mov	r3, r7
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6959      	ldr	r1, [r3, #20]
 80056d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80056da:	1d38      	adds	r0, r7, #4
 80056dc:	6800      	ldr	r0, [r0, #0]
 80056de:	f000 ffd1 	bl	8006684 <USB_WritePMA>
            ep->xfer_buff += len;
 80056e2:	463b      	mov	r3, r7
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	695a      	ldr	r2, [r3, #20]
 80056e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056ec:	441a      	add	r2, r3
 80056ee:	463b      	mov	r3, r7
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80056f4:	463b      	mov	r3, r7
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6a1a      	ldr	r2, [r3, #32]
 80056fa:	463b      	mov	r3, r7
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	429a      	cmp	r2, r3
 8005702:	d909      	bls.n	8005718 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8005704:	463b      	mov	r3, r7
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6a1a      	ldr	r2, [r3, #32]
 800570a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800570e:	1ad2      	subs	r2, r2, r3
 8005710:	463b      	mov	r3, r7
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	621a      	str	r2, [r3, #32]
 8005716:	e008      	b.n	800572a <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005718:	463b      	mov	r3, r7
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005722:	463b      	mov	r3, r7
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2200      	movs	r2, #0
 8005728:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800572a:	1d3b      	adds	r3, r7, #4
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	647b      	str	r3, [r7, #68]	; 0x44
 8005730:	463b      	mov	r3, r7
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	785b      	ldrb	r3, [r3, #1]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d164      	bne.n	8005804 <USB_EPStartXfer+0x63c>
 800573a:	1d3b      	adds	r3, r7, #4
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005740:	1d3b      	adds	r3, r7, #4
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005748:	b29b      	uxth	r3, r3
 800574a:	461a      	mov	r2, r3
 800574c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574e:	4413      	add	r3, r2
 8005750:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005752:	463b      	mov	r3, r7
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	011a      	lsls	r2, r3, #4
 800575a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800575c:	4413      	add	r3, r2
 800575e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005762:	63bb      	str	r3, [r7, #56]	; 0x38
 8005764:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005768:	2b00      	cmp	r3, #0
 800576a:	d112      	bne.n	8005792 <USB_EPStartXfer+0x5ca>
 800576c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576e:	881b      	ldrh	r3, [r3, #0]
 8005770:	b29b      	uxth	r3, r3
 8005772:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005776:	b29a      	uxth	r2, r3
 8005778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577a:	801a      	strh	r2, [r3, #0]
 800577c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	b29b      	uxth	r3, r3
 8005782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800578a:	b29a      	uxth	r2, r3
 800578c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578e:	801a      	strh	r2, [r3, #0]
 8005790:	e054      	b.n	800583c <USB_EPStartXfer+0x674>
 8005792:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005796:	2b3e      	cmp	r3, #62	; 0x3e
 8005798:	d817      	bhi.n	80057ca <USB_EPStartXfer+0x602>
 800579a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800579e:	085b      	lsrs	r3, r3, #1
 80057a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80057a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d004      	beq.n	80057ba <USB_EPStartXfer+0x5f2>
 80057b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057b4:	3301      	adds	r3, #1
 80057b6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80057ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057be:	b29b      	uxth	r3, r3
 80057c0:	029b      	lsls	r3, r3, #10
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c6:	801a      	strh	r2, [r3, #0]
 80057c8:	e038      	b.n	800583c <USB_EPStartXfer+0x674>
 80057ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ce:	095b      	lsrs	r3, r3, #5
 80057d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80057d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057d8:	f003 031f 	and.w	r3, r3, #31
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d104      	bne.n	80057ea <USB_EPStartXfer+0x622>
 80057e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057e4:	3b01      	subs	r3, #1
 80057e6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80057ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	029b      	lsls	r3, r3, #10
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005800:	801a      	strh	r2, [r3, #0]
 8005802:	e01b      	b.n	800583c <USB_EPStartXfer+0x674>
 8005804:	463b      	mov	r3, r7
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	785b      	ldrb	r3, [r3, #1]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d116      	bne.n	800583c <USB_EPStartXfer+0x674>
 800580e:	1d3b      	adds	r3, r7, #4
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005816:	b29b      	uxth	r3, r3
 8005818:	461a      	mov	r2, r3
 800581a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800581c:	4413      	add	r3, r2
 800581e:	647b      	str	r3, [r7, #68]	; 0x44
 8005820:	463b      	mov	r3, r7
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	011a      	lsls	r2, r3, #4
 8005828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800582a:	4413      	add	r3, r2
 800582c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005830:	643b      	str	r3, [r7, #64]	; 0x40
 8005832:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005836:	b29a      	uxth	r2, r3
 8005838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800583a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800583c:	463b      	mov	r3, r7
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	895b      	ldrh	r3, [r3, #10]
 8005842:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005846:	463b      	mov	r3, r7
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6959      	ldr	r1, [r3, #20]
 800584c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005850:	b29b      	uxth	r3, r3
 8005852:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005856:	1d38      	adds	r0, r7, #4
 8005858:	6800      	ldr	r0, [r0, #0]
 800585a:	f000 ff13 	bl	8006684 <USB_WritePMA>
 800585e:	e1e2      	b.n	8005c26 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005860:	463b      	mov	r3, r7
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800586a:	1d3b      	adds	r3, r7, #4
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	463b      	mov	r3, r7
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4413      	add	r3, r2
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	b29b      	uxth	r3, r3
 800587c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005884:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005888:	1d3b      	adds	r3, r7, #4
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	463b      	mov	r3, r7
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	441a      	add	r2, r3
 8005896:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800589a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800589e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80058ae:	1d3b      	adds	r3, r7, #4
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	663b      	str	r3, [r7, #96]	; 0x60
 80058b4:	1d3b      	adds	r3, r7, #4
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058bc:	b29b      	uxth	r3, r3
 80058be:	461a      	mov	r2, r3
 80058c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058c2:	4413      	add	r3, r2
 80058c4:	663b      	str	r3, [r7, #96]	; 0x60
 80058c6:	463b      	mov	r3, r7
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	011a      	lsls	r2, r3, #4
 80058ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058d0:	4413      	add	r3, r2
 80058d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058dc:	b29a      	uxth	r2, r3
 80058de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058e0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80058e2:	463b      	mov	r3, r7
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	891b      	ldrh	r3, [r3, #8]
 80058e8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058ec:	463b      	mov	r3, r7
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6959      	ldr	r1, [r3, #20]
 80058f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80058fc:	1d38      	adds	r0, r7, #4
 80058fe:	6800      	ldr	r0, [r0, #0]
 8005900:	f000 fec0 	bl	8006684 <USB_WritePMA>
 8005904:	e18f      	b.n	8005c26 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005906:	1d3b      	adds	r3, r7, #4
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	463b      	mov	r3, r7
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	b29b      	uxth	r3, r3
 8005918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 808f 	beq.w	8005a40 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005922:	1d3b      	adds	r3, r7, #4
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	67bb      	str	r3, [r7, #120]	; 0x78
 8005928:	463b      	mov	r3, r7
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	785b      	ldrb	r3, [r3, #1]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d164      	bne.n	80059fc <USB_EPStartXfer+0x834>
 8005932:	1d3b      	adds	r3, r7, #4
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	673b      	str	r3, [r7, #112]	; 0x70
 8005938:	1d3b      	adds	r3, r7, #4
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005940:	b29b      	uxth	r3, r3
 8005942:	461a      	mov	r2, r3
 8005944:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005946:	4413      	add	r3, r2
 8005948:	673b      	str	r3, [r7, #112]	; 0x70
 800594a:	463b      	mov	r3, r7
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	011a      	lsls	r2, r3, #4
 8005952:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005954:	4413      	add	r3, r2
 8005956:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800595a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800595c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005960:	2b00      	cmp	r3, #0
 8005962:	d112      	bne.n	800598a <USB_EPStartXfer+0x7c2>
 8005964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005966:	881b      	ldrh	r3, [r3, #0]
 8005968:	b29b      	uxth	r3, r3
 800596a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800596e:	b29a      	uxth	r2, r3
 8005970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005972:	801a      	strh	r2, [r3, #0]
 8005974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	b29b      	uxth	r3, r3
 800597a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800597e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005982:	b29a      	uxth	r2, r3
 8005984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005986:	801a      	strh	r2, [r3, #0]
 8005988:	e054      	b.n	8005a34 <USB_EPStartXfer+0x86c>
 800598a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800598e:	2b3e      	cmp	r3, #62	; 0x3e
 8005990:	d817      	bhi.n	80059c2 <USB_EPStartXfer+0x7fa>
 8005992:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005996:	085b      	lsrs	r3, r3, #1
 8005998:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800599c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d004      	beq.n	80059b2 <USB_EPStartXfer+0x7ea>
 80059a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ac:	3301      	adds	r3, #1
 80059ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80059b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	029b      	lsls	r3, r3, #10
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059be:	801a      	strh	r2, [r3, #0]
 80059c0:	e038      	b.n	8005a34 <USB_EPStartXfer+0x86c>
 80059c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80059cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059d0:	f003 031f 	and.w	r3, r3, #31
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d104      	bne.n	80059e2 <USB_EPStartXfer+0x81a>
 80059d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059dc:	3b01      	subs	r3, #1
 80059de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80059e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	029b      	lsls	r3, r3, #10
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f8:	801a      	strh	r2, [r3, #0]
 80059fa:	e01b      	b.n	8005a34 <USB_EPStartXfer+0x86c>
 80059fc:	463b      	mov	r3, r7
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	785b      	ldrb	r3, [r3, #1]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d116      	bne.n	8005a34 <USB_EPStartXfer+0x86c>
 8005a06:	1d3b      	adds	r3, r7, #4
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	461a      	mov	r2, r3
 8005a12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a14:	4413      	add	r3, r2
 8005a16:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a18:	463b      	mov	r3, r7
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	011a      	lsls	r2, r3, #4
 8005a20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a22:	4413      	add	r3, r2
 8005a24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a28:	677b      	str	r3, [r7, #116]	; 0x74
 8005a2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a32:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005a34:	463b      	mov	r3, r7
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	895b      	ldrh	r3, [r3, #10]
 8005a3a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005a3e:	e097      	b.n	8005b70 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a40:	463b      	mov	r3, r7
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	785b      	ldrb	r3, [r3, #1]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d168      	bne.n	8005b1c <USB_EPStartXfer+0x954>
 8005a4a:	1d3b      	adds	r3, r7, #4
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a52:	1d3b      	adds	r3, r7, #4
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a62:	4413      	add	r3, r2
 8005a64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a68:	463b      	mov	r3, r7
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	011a      	lsls	r2, r3, #4
 8005a70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a74:	4413      	add	r3, r2
 8005a76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d112      	bne.n	8005aaa <USB_EPStartXfer+0x8e2>
 8005a84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a86:	881b      	ldrh	r3, [r3, #0]
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a92:	801a      	strh	r2, [r3, #0]
 8005a94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005aa6:	801a      	strh	r2, [r3, #0]
 8005aa8:	e05d      	b.n	8005b66 <USB_EPStartXfer+0x99e>
 8005aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aae:	2b3e      	cmp	r3, #62	; 0x3e
 8005ab0:	d817      	bhi.n	8005ae2 <USB_EPStartXfer+0x91a>
 8005ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ab6:	085b      	lsrs	r3, r3, #1
 8005ab8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d004      	beq.n	8005ad2 <USB_EPStartXfer+0x90a>
 8005ac8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005acc:	3301      	adds	r3, #1
 8005ace:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ad2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	029b      	lsls	r3, r3, #10
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ade:	801a      	strh	r2, [r3, #0]
 8005ae0:	e041      	b.n	8005b66 <USB_EPStartXfer+0x99e>
 8005ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ae6:	095b      	lsrs	r3, r3, #5
 8005ae8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005af0:	f003 031f 	and.w	r3, r3, #31
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d104      	bne.n	8005b02 <USB_EPStartXfer+0x93a>
 8005af8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005afc:	3b01      	subs	r3, #1
 8005afe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	029b      	lsls	r3, r3, #10
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b18:	801a      	strh	r2, [r3, #0]
 8005b1a:	e024      	b.n	8005b66 <USB_EPStartXfer+0x99e>
 8005b1c:	463b      	mov	r3, r7
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	785b      	ldrb	r3, [r3, #1]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d11f      	bne.n	8005b66 <USB_EPStartXfer+0x99e>
 8005b26:	1d3b      	adds	r3, r7, #4
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b2e:	1d3b      	adds	r3, r7, #4
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	461a      	mov	r2, r3
 8005b3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b3e:	4413      	add	r3, r2
 8005b40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b44:	463b      	mov	r3, r7
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	011a      	lsls	r2, r3, #4
 8005b4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b50:	4413      	add	r3, r2
 8005b52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b64:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b66:	463b      	mov	r3, r7
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	891b      	ldrh	r3, [r3, #8]
 8005b6c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b70:	463b      	mov	r3, r7
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6959      	ldr	r1, [r3, #20]
 8005b76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005b80:	1d38      	adds	r0, r7, #4
 8005b82:	6800      	ldr	r0, [r0, #0]
 8005b84:	f000 fd7e 	bl	8006684 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005b88:	463b      	mov	r3, r7
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	785b      	ldrb	r3, [r3, #1]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d122      	bne.n	8005bd8 <USB_EPStartXfer+0xa10>
 8005b92:	1d3b      	adds	r3, r7, #4
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	463b      	mov	r3, r7
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bac:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005bb0:	1d3b      	adds	r3, r7, #4
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	463b      	mov	r3, r7
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	441a      	add	r2, r3
 8005bbe:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	8013      	strh	r3, [r2, #0]
 8005bd6:	e026      	b.n	8005c26 <USB_EPStartXfer+0xa5e>
 8005bd8:	463b      	mov	r3, r7
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	785b      	ldrb	r3, [r3, #1]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d121      	bne.n	8005c26 <USB_EPStartXfer+0xa5e>
 8005be2:	1d3b      	adds	r3, r7, #4
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	463b      	mov	r3, r7
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bfc:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005c00:	1d3b      	adds	r3, r7, #4
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	463b      	mov	r3, r7
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	441a      	add	r2, r3
 8005c0e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005c26:	1d3b      	adds	r3, r7, #4
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	463b      	mov	r3, r7
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	f107 020e 	add.w	r2, r7, #14
 8005c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c44:	8013      	strh	r3, [r2, #0]
 8005c46:	f107 030e 	add.w	r3, r7, #14
 8005c4a:	f107 020e 	add.w	r2, r7, #14
 8005c4e:	8812      	ldrh	r2, [r2, #0]
 8005c50:	f082 0210 	eor.w	r2, r2, #16
 8005c54:	801a      	strh	r2, [r3, #0]
 8005c56:	f107 030e 	add.w	r3, r7, #14
 8005c5a:	f107 020e 	add.w	r2, r7, #14
 8005c5e:	8812      	ldrh	r2, [r2, #0]
 8005c60:	f082 0220 	eor.w	r2, r2, #32
 8005c64:	801a      	strh	r2, [r3, #0]
 8005c66:	1d3b      	adds	r3, r7, #4
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	463b      	mov	r3, r7
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	441a      	add	r2, r3
 8005c74:	f107 030e 	add.w	r3, r7, #14
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	8013      	strh	r3, [r2, #0]
 8005c8e:	e3b5      	b.n	80063fc <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005c90:	463b      	mov	r3, r7
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	7b1b      	ldrb	r3, [r3, #12]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f040 8090 	bne.w	8005dbc <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005c9c:	463b      	mov	r3, r7
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699a      	ldr	r2, [r3, #24]
 8005ca2:	463b      	mov	r3, r7
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d90e      	bls.n	8005cca <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005cac:	463b      	mov	r3, r7
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8005cb6:	463b      	mov	r3, r7
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	699a      	ldr	r2, [r3, #24]
 8005cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cc0:	1ad2      	subs	r2, r2, r3
 8005cc2:	463b      	mov	r3, r7
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	619a      	str	r2, [r3, #24]
 8005cc8:	e008      	b.n	8005cdc <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8005cca:	463b      	mov	r3, r7
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8005cd4:	463b      	mov	r3, r7
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005cdc:	1d3b      	adds	r3, r7, #4
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ce4:	1d3b      	adds	r3, r7, #4
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005cfa:	463b      	mov	r3, r7
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	011a      	lsls	r2, r3, #4
 8005d02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005d06:	4413      	add	r3, r2
 8005d08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d116      	bne.n	8005d46 <USB_EPStartXfer+0xb7e>
 8005d18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d2a:	801a      	strh	r2, [r3, #0]
 8005d2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d42:	801a      	strh	r2, [r3, #0]
 8005d44:	e32c      	b.n	80063a0 <USB_EPStartXfer+0x11d8>
 8005d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d4a:	2b3e      	cmp	r3, #62	; 0x3e
 8005d4c:	d818      	bhi.n	8005d80 <USB_EPStartXfer+0xbb8>
 8005d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d52:	085b      	lsrs	r3, r3, #1
 8005d54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d004      	beq.n	8005d6e <USB_EPStartXfer+0xba6>
 8005d64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d68:	3301      	adds	r3, #1
 8005d6a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	029b      	lsls	r3, r3, #10
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d7c:	801a      	strh	r2, [r3, #0]
 8005d7e:	e30f      	b.n	80063a0 <USB_EPStartXfer+0x11d8>
 8005d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d84:	095b      	lsrs	r3, r3, #5
 8005d86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d8e:	f003 031f 	and.w	r3, r3, #31
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d104      	bne.n	8005da0 <USB_EPStartXfer+0xbd8>
 8005d96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005da0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	029b      	lsls	r3, r3, #10
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005db8:	801a      	strh	r2, [r3, #0]
 8005dba:	e2f1      	b.n	80063a0 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005dbc:	463b      	mov	r3, r7
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	78db      	ldrb	r3, [r3, #3]
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	f040 818f 	bne.w	80060e6 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005dc8:	463b      	mov	r3, r7
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	785b      	ldrb	r3, [r3, #1]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d175      	bne.n	8005ebe <USB_EPStartXfer+0xcf6>
 8005dd2:	1d3b      	adds	r3, r7, #4
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005dda:	1d3b      	adds	r3, r7, #4
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	461a      	mov	r2, r3
 8005de6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005dea:	4413      	add	r3, r2
 8005dec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005df0:	463b      	mov	r3, r7
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	011a      	lsls	r2, r3, #4
 8005df8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e06:	463b      	mov	r3, r7
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d116      	bne.n	8005e3e <USB_EPStartXfer+0xc76>
 8005e10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e22:	801a      	strh	r2, [r3, #0]
 8005e24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e28:	881b      	ldrh	r3, [r3, #0]
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e3a:	801a      	strh	r2, [r3, #0]
 8005e3c:	e065      	b.n	8005f0a <USB_EPStartXfer+0xd42>
 8005e3e:	463b      	mov	r3, r7
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	2b3e      	cmp	r3, #62	; 0x3e
 8005e46:	d81a      	bhi.n	8005e7e <USB_EPStartXfer+0xcb6>
 8005e48:	463b      	mov	r3, r7
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	085b      	lsrs	r3, r3, #1
 8005e50:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e54:	463b      	mov	r3, r7
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d004      	beq.n	8005e6c <USB_EPStartXfer+0xca4>
 8005e62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e66:	3301      	adds	r3, #1
 8005e68:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	029b      	lsls	r3, r3, #10
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e7a:	801a      	strh	r2, [r3, #0]
 8005e7c:	e045      	b.n	8005f0a <USB_EPStartXfer+0xd42>
 8005e7e:	463b      	mov	r3, r7
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	095b      	lsrs	r3, r3, #5
 8005e86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e8a:	463b      	mov	r3, r7
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	f003 031f 	and.w	r3, r3, #31
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d104      	bne.n	8005ea2 <USB_EPStartXfer+0xcda>
 8005e98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ea2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	029b      	lsls	r3, r3, #10
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005eba:	801a      	strh	r2, [r3, #0]
 8005ebc:	e025      	b.n	8005f0a <USB_EPStartXfer+0xd42>
 8005ebe:	463b      	mov	r3, r7
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	785b      	ldrb	r3, [r3, #1]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d120      	bne.n	8005f0a <USB_EPStartXfer+0xd42>
 8005ec8:	1d3b      	adds	r3, r7, #4
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ed0:	1d3b      	adds	r3, r7, #4
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	461a      	mov	r2, r3
 8005edc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ee6:	463b      	mov	r3, r7
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	011a      	lsls	r2, r3, #4
 8005eee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005efc:	463b      	mov	r3, r7
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f08:	801a      	strh	r2, [r3, #0]
 8005f0a:	1d3b      	adds	r3, r7, #4
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f12:	463b      	mov	r3, r7
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	785b      	ldrb	r3, [r3, #1]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d175      	bne.n	8006008 <USB_EPStartXfer+0xe40>
 8005f1c:	1d3b      	adds	r3, r7, #4
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f24:	1d3b      	adds	r3, r7, #4
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	461a      	mov	r2, r3
 8005f30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f34:	4413      	add	r3, r2
 8005f36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f3a:	463b      	mov	r3, r7
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	011a      	lsls	r2, r3, #4
 8005f42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f46:	4413      	add	r3, r2
 8005f48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f50:	463b      	mov	r3, r7
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d116      	bne.n	8005f88 <USB_EPStartXfer+0xdc0>
 8005f5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f6c:	801a      	strh	r2, [r3, #0]
 8005f6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f84:	801a      	strh	r2, [r3, #0]
 8005f86:	e061      	b.n	800604c <USB_EPStartXfer+0xe84>
 8005f88:	463b      	mov	r3, r7
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	2b3e      	cmp	r3, #62	; 0x3e
 8005f90:	d81a      	bhi.n	8005fc8 <USB_EPStartXfer+0xe00>
 8005f92:	463b      	mov	r3, r7
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	085b      	lsrs	r3, r3, #1
 8005f9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f9e:	463b      	mov	r3, r7
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d004      	beq.n	8005fb6 <USB_EPStartXfer+0xdee>
 8005fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	029b      	lsls	r3, r3, #10
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fc4:	801a      	strh	r2, [r3, #0]
 8005fc6:	e041      	b.n	800604c <USB_EPStartXfer+0xe84>
 8005fc8:	463b      	mov	r3, r7
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	095b      	lsrs	r3, r3, #5
 8005fd0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fd4:	463b      	mov	r3, r7
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	f003 031f 	and.w	r3, r3, #31
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d104      	bne.n	8005fec <USB_EPStartXfer+0xe24>
 8005fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	029b      	lsls	r3, r3, #10
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006004:	801a      	strh	r2, [r3, #0]
 8006006:	e021      	b.n	800604c <USB_EPStartXfer+0xe84>
 8006008:	463b      	mov	r3, r7
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	785b      	ldrb	r3, [r3, #1]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d11c      	bne.n	800604c <USB_EPStartXfer+0xe84>
 8006012:	1d3b      	adds	r3, r7, #4
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800601a:	b29b      	uxth	r3, r3
 800601c:	461a      	mov	r2, r3
 800601e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006022:	4413      	add	r3, r2
 8006024:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006028:	463b      	mov	r3, r7
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	011a      	lsls	r2, r3, #4
 8006030:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006034:	4413      	add	r3, r2
 8006036:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800603a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800603e:	463b      	mov	r3, r7
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	b29a      	uxth	r2, r3
 8006046:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800604a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800604c:	463b      	mov	r3, r7
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	2b00      	cmp	r3, #0
 8006054:	f000 81a4 	beq.w	80063a0 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006058:	1d3b      	adds	r3, r7, #4
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	463b      	mov	r3, r7
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	881b      	ldrh	r3, [r3, #0]
 8006068:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800606c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d005      	beq.n	8006084 <USB_EPStartXfer+0xebc>
 8006078:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800607c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10d      	bne.n	80060a0 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006084:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800608c:	2b00      	cmp	r3, #0
 800608e:	f040 8187 	bne.w	80063a0 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006092:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800609a:	2b00      	cmp	r3, #0
 800609c:	f040 8180 	bne.w	80063a0 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80060a0:	1d3b      	adds	r3, r7, #4
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	463b      	mov	r3, r7
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ba:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80060be:	1d3b      	adds	r3, r7, #4
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	463b      	mov	r3, r7
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	441a      	add	r2, r3
 80060cc:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80060d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	8013      	strh	r3, [r2, #0]
 80060e4:	e15c      	b.n	80063a0 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80060e6:	463b      	mov	r3, r7
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	78db      	ldrb	r3, [r3, #3]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	f040 8155 	bne.w	800639c <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80060f2:	463b      	mov	r3, r7
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	699a      	ldr	r2, [r3, #24]
 80060f8:	463b      	mov	r3, r7
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d90e      	bls.n	8006120 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8006102:	463b      	mov	r3, r7
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 800610c:	463b      	mov	r3, r7
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699a      	ldr	r2, [r3, #24]
 8006112:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006116:	1ad2      	subs	r2, r2, r3
 8006118:	463b      	mov	r3, r7
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	619a      	str	r2, [r3, #24]
 800611e:	e008      	b.n	8006132 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8006120:	463b      	mov	r3, r7
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800612a:	463b      	mov	r3, r7
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2200      	movs	r2, #0
 8006130:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006132:	463b      	mov	r3, r7
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	785b      	ldrb	r3, [r3, #1]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d16f      	bne.n	800621c <USB_EPStartXfer+0x1054>
 800613c:	1d3b      	adds	r3, r7, #4
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006144:	1d3b      	adds	r3, r7, #4
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800614c:	b29b      	uxth	r3, r3
 800614e:	461a      	mov	r2, r3
 8006150:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006154:	4413      	add	r3, r2
 8006156:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800615a:	463b      	mov	r3, r7
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	011a      	lsls	r2, r3, #4
 8006162:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006166:	4413      	add	r3, r2
 8006168:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800616c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006170:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006174:	2b00      	cmp	r3, #0
 8006176:	d116      	bne.n	80061a6 <USB_EPStartXfer+0xfde>
 8006178:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	b29b      	uxth	r3, r3
 8006180:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006184:	b29a      	uxth	r2, r3
 8006186:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800618a:	801a      	strh	r2, [r3, #0]
 800618c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006190:	881b      	ldrh	r3, [r3, #0]
 8006192:	b29b      	uxth	r3, r3
 8006194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800619c:	b29a      	uxth	r2, r3
 800619e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80061a2:	801a      	strh	r2, [r3, #0]
 80061a4:	e05f      	b.n	8006266 <USB_EPStartXfer+0x109e>
 80061a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061aa:	2b3e      	cmp	r3, #62	; 0x3e
 80061ac:	d818      	bhi.n	80061e0 <USB_EPStartXfer+0x1018>
 80061ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061b2:	085b      	lsrs	r3, r3, #1
 80061b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d004      	beq.n	80061ce <USB_EPStartXfer+0x1006>
 80061c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061c8:	3301      	adds	r3, #1
 80061ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	029b      	lsls	r3, r3, #10
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80061dc:	801a      	strh	r2, [r3, #0]
 80061de:	e042      	b.n	8006266 <USB_EPStartXfer+0x109e>
 80061e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061e4:	095b      	lsrs	r3, r3, #5
 80061e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061ee:	f003 031f 	and.w	r3, r3, #31
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d104      	bne.n	8006200 <USB_EPStartXfer+0x1038>
 80061f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061fa:	3b01      	subs	r3, #1
 80061fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006204:	b29b      	uxth	r3, r3
 8006206:	029b      	lsls	r3, r3, #10
 8006208:	b29b      	uxth	r3, r3
 800620a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800620e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006212:	b29a      	uxth	r2, r3
 8006214:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006218:	801a      	strh	r2, [r3, #0]
 800621a:	e024      	b.n	8006266 <USB_EPStartXfer+0x109e>
 800621c:	463b      	mov	r3, r7
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	785b      	ldrb	r3, [r3, #1]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d11f      	bne.n	8006266 <USB_EPStartXfer+0x109e>
 8006226:	1d3b      	adds	r3, r7, #4
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800622e:	1d3b      	adds	r3, r7, #4
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006236:	b29b      	uxth	r3, r3
 8006238:	461a      	mov	r2, r3
 800623a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800623e:	4413      	add	r3, r2
 8006240:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006244:	463b      	mov	r3, r7
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	011a      	lsls	r2, r3, #4
 800624c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006250:	4413      	add	r3, r2
 8006252:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006256:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800625a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800625e:	b29a      	uxth	r2, r3
 8006260:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006264:	801a      	strh	r2, [r3, #0]
 8006266:	1d3b      	adds	r3, r7, #4
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800626e:	463b      	mov	r3, r7
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	785b      	ldrb	r3, [r3, #1]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d16f      	bne.n	8006358 <USB_EPStartXfer+0x1190>
 8006278:	1d3b      	adds	r3, r7, #4
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006280:	1d3b      	adds	r3, r7, #4
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006288:	b29b      	uxth	r3, r3
 800628a:	461a      	mov	r2, r3
 800628c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006290:	4413      	add	r3, r2
 8006292:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006296:	463b      	mov	r3, r7
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	011a      	lsls	r2, r3, #4
 800629e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80062a2:	4413      	add	r3, r2
 80062a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80062ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d116      	bne.n	80062e2 <USB_EPStartXfer+0x111a>
 80062b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80062c6:	801a      	strh	r2, [r3, #0]
 80062c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80062cc:	881b      	ldrh	r3, [r3, #0]
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062d8:	b29a      	uxth	r2, r3
 80062da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80062de:	801a      	strh	r2, [r3, #0]
 80062e0:	e05e      	b.n	80063a0 <USB_EPStartXfer+0x11d8>
 80062e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062e6:	2b3e      	cmp	r3, #62	; 0x3e
 80062e8:	d818      	bhi.n	800631c <USB_EPStartXfer+0x1154>
 80062ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062ee:	085b      	lsrs	r3, r3, #1
 80062f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80062f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d004      	beq.n	800630a <USB_EPStartXfer+0x1142>
 8006300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006304:	3301      	adds	r3, #1
 8006306:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800630a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800630e:	b29b      	uxth	r3, r3
 8006310:	029b      	lsls	r3, r3, #10
 8006312:	b29a      	uxth	r2, r3
 8006314:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006318:	801a      	strh	r2, [r3, #0]
 800631a:	e041      	b.n	80063a0 <USB_EPStartXfer+0x11d8>
 800631c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006320:	095b      	lsrs	r3, r3, #5
 8006322:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006326:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800632a:	f003 031f 	and.w	r3, r3, #31
 800632e:	2b00      	cmp	r3, #0
 8006330:	d104      	bne.n	800633c <USB_EPStartXfer+0x1174>
 8006332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006336:	3b01      	subs	r3, #1
 8006338:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800633c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006340:	b29b      	uxth	r3, r3
 8006342:	029b      	lsls	r3, r3, #10
 8006344:	b29b      	uxth	r3, r3
 8006346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800634a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800634e:	b29a      	uxth	r2, r3
 8006350:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006354:	801a      	strh	r2, [r3, #0]
 8006356:	e023      	b.n	80063a0 <USB_EPStartXfer+0x11d8>
 8006358:	463b      	mov	r3, r7
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	785b      	ldrb	r3, [r3, #1]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d11e      	bne.n	80063a0 <USB_EPStartXfer+0x11d8>
 8006362:	1d3b      	adds	r3, r7, #4
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800636a:	b29b      	uxth	r3, r3
 800636c:	461a      	mov	r2, r3
 800636e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006372:	4413      	add	r3, r2
 8006374:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006378:	463b      	mov	r3, r7
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	011a      	lsls	r2, r3, #4
 8006380:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006384:	4413      	add	r3, r2
 8006386:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800638a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800638e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006392:	b29a      	uxth	r2, r3
 8006394:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006398:	801a      	strh	r2, [r3, #0]
 800639a:	e001      	b.n	80063a0 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e02e      	b.n	80063fe <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063a0:	1d3b      	adds	r3, r7, #4
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	463b      	mov	r3, r7
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	881b      	ldrh	r3, [r3, #0]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ba:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80063be:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80063c2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063c6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80063ca:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80063ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80063d2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80063d6:	1d3b      	adds	r3, r7, #4
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	463b      	mov	r3, r7
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	441a      	add	r2, r3
 80063e4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80063e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	785b      	ldrb	r3, [r3, #1]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d020      	beq.n	800645c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	b29b      	uxth	r3, r3
 8006428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800642c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006430:	81bb      	strh	r3, [r7, #12]
 8006432:	89bb      	ldrh	r3, [r7, #12]
 8006434:	f083 0310 	eor.w	r3, r3, #16
 8006438:	81bb      	strh	r3, [r7, #12]
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	441a      	add	r2, r3
 8006444:	89bb      	ldrh	r3, [r7, #12]
 8006446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800644a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800644e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006456:	b29b      	uxth	r3, r3
 8006458:	8013      	strh	r3, [r2, #0]
 800645a:	e01f      	b.n	800649c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	b29b      	uxth	r3, r3
 800646a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800646e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006472:	81fb      	strh	r3, [r7, #14]
 8006474:	89fb      	ldrh	r3, [r7, #14]
 8006476:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800647a:	81fb      	strh	r3, [r7, #14]
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	441a      	add	r2, r3
 8006486:	89fb      	ldrh	r3, [r7, #14]
 8006488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800648c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006498:	b29b      	uxth	r3, r3
 800649a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bc80      	pop	{r7}
 80064a6:	4770      	bx	lr

080064a8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	7b1b      	ldrb	r3, [r3, #12]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f040 809d 	bne.w	80065f6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	785b      	ldrb	r3, [r3, #1]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d04c      	beq.n	800655e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4413      	add	r3, r2
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	823b      	strh	r3, [r7, #16]
 80064d2:	8a3b      	ldrh	r3, [r7, #16]
 80064d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d01b      	beq.n	8006514 <USB_EPClearStall+0x6c>
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4413      	add	r3, r2
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f2:	81fb      	strh	r3, [r7, #14]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	441a      	add	r2, r3
 80064fe:	89fb      	ldrh	r3, [r7, #14]
 8006500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800650c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006510:	b29b      	uxth	r3, r3
 8006512:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	78db      	ldrb	r3, [r3, #3]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d06c      	beq.n	80065f6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	881b      	ldrh	r3, [r3, #0]
 8006528:	b29b      	uxth	r3, r3
 800652a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800652e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006532:	81bb      	strh	r3, [r7, #12]
 8006534:	89bb      	ldrh	r3, [r7, #12]
 8006536:	f083 0320 	eor.w	r3, r3, #32
 800653a:	81bb      	strh	r3, [r7, #12]
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	441a      	add	r2, r3
 8006546:	89bb      	ldrh	r3, [r7, #12]
 8006548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800654c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006558:	b29b      	uxth	r3, r3
 800655a:	8013      	strh	r3, [r2, #0]
 800655c:	e04b      	b.n	80065f6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4413      	add	r3, r2
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	82fb      	strh	r3, [r7, #22]
 800656c:	8afb      	ldrh	r3, [r7, #22]
 800656e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d01b      	beq.n	80065ae <USB_EPClearStall+0x106>
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	b29b      	uxth	r3, r3
 8006584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800658c:	82bb      	strh	r3, [r7, #20]
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	441a      	add	r2, r3
 8006598:	8abb      	ldrh	r3, [r7, #20]
 800659a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800659e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	881b      	ldrh	r3, [r3, #0]
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065c4:	827b      	strh	r3, [r7, #18]
 80065c6:	8a7b      	ldrh	r3, [r7, #18]
 80065c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80065cc:	827b      	strh	r3, [r7, #18]
 80065ce:	8a7b      	ldrh	r3, [r7, #18]
 80065d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80065d4:	827b      	strh	r3, [r7, #18]
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	441a      	add	r2, r3
 80065e0:	8a7b      	ldrh	r3, [r7, #18]
 80065e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	371c      	adds	r7, #28
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bc80      	pop	{r7}
 8006600:	4770      	bx	lr

08006602 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006602:	b480      	push	{r7}
 8006604:	b083      	sub	sp, #12
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	460b      	mov	r3, r1
 800660c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800660e:	78fb      	ldrb	r3, [r7, #3]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d103      	bne.n	800661c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2280      	movs	r2, #128	; 0x80
 8006618:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	bc80      	pop	{r7}
 8006626:	4770      	bx	lr

08006628 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	bc80      	pop	{r7}
 800663a:	4770      	bx	lr

0800663c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	bc80      	pop	{r7}
 800664e:	4770      	bx	lr

08006650 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800665e:	b29b      	uxth	r3, r3
 8006660:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006662:	68fb      	ldr	r3, [r7, #12]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	bc80      	pop	{r7}
 800666c:	4770      	bx	lr

0800666e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800666e:	b480      	push	{r7}
 8006670:	b083      	sub	sp, #12
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
 8006676:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	bc80      	pop	{r7}
 8006682:	4770      	bx	lr

08006684 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006684:	b480      	push	{r7}
 8006686:	b08d      	sub	sp, #52	; 0x34
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	4611      	mov	r1, r2
 8006690:	461a      	mov	r2, r3
 8006692:	460b      	mov	r3, r1
 8006694:	80fb      	strh	r3, [r7, #6]
 8006696:	4613      	mov	r3, r2
 8006698:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800669a:	88bb      	ldrh	r3, [r7, #4]
 800669c:	3301      	adds	r3, #1
 800669e:	085b      	lsrs	r3, r3, #1
 80066a0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80066aa:	88fb      	ldrh	r3, [r7, #6]
 80066ac:	005a      	lsls	r2, r3, #1
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066b6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80066b8:	6a3b      	ldr	r3, [r7, #32]
 80066ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066bc:	e01e      	b.n	80066fc <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80066be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c6:	3301      	adds	r3, #1
 80066c8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	021b      	lsls	r3, r3, #8
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	461a      	mov	r2, r3
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	4313      	orrs	r3, r2
 80066da:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	b29a      	uxth	r2, r3
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80066e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e6:	3302      	adds	r3, #2
 80066e8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80066ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ec:	3302      	adds	r3, #2
 80066ee:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	3301      	adds	r3, #1
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80066f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f8:	3b01      	subs	r3, #1
 80066fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1dd      	bne.n	80066be <USB_WritePMA+0x3a>
  }
}
 8006702:	bf00      	nop
 8006704:	bf00      	nop
 8006706:	3734      	adds	r7, #52	; 0x34
 8006708:	46bd      	mov	sp, r7
 800670a:	bc80      	pop	{r7}
 800670c:	4770      	bx	lr

0800670e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800670e:	b480      	push	{r7}
 8006710:	b08b      	sub	sp, #44	; 0x2c
 8006712:	af00      	add	r7, sp, #0
 8006714:	60f8      	str	r0, [r7, #12]
 8006716:	60b9      	str	r1, [r7, #8]
 8006718:	4611      	mov	r1, r2
 800671a:	461a      	mov	r2, r3
 800671c:	460b      	mov	r3, r1
 800671e:	80fb      	strh	r3, [r7, #6]
 8006720:	4613      	mov	r3, r2
 8006722:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006724:	88bb      	ldrh	r3, [r7, #4]
 8006726:	085b      	lsrs	r3, r3, #1
 8006728:	b29b      	uxth	r3, r3
 800672a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006734:	88fb      	ldrh	r3, [r7, #6]
 8006736:	005a      	lsls	r2, r3, #1
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006740:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	627b      	str	r3, [r7, #36]	; 0x24
 8006746:	e01b      	b.n	8006780 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	b29b      	uxth	r3, r3
 800674e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	3302      	adds	r3, #2
 8006754:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	b2da      	uxtb	r2, r3
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	3301      	adds	r3, #1
 8006762:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	0a1b      	lsrs	r3, r3, #8
 8006768:	b2da      	uxtb	r2, r3
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	3301      	adds	r3, #1
 8006772:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006774:	6a3b      	ldr	r3, [r7, #32]
 8006776:	3302      	adds	r3, #2
 8006778:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	3b01      	subs	r3, #1
 800677e:	627b      	str	r3, [r7, #36]	; 0x24
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1e0      	bne.n	8006748 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006786:	88bb      	ldrh	r3, [r7, #4]
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	b29b      	uxth	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d007      	beq.n	80067a2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	b29b      	uxth	r3, r3
 8006798:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	b2da      	uxtb	r2, r3
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	701a      	strb	r2, [r3, #0]
  }
}
 80067a2:	bf00      	nop
 80067a4:	372c      	adds	r7, #44	; 0x2c
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bc80      	pop	{r7}
 80067aa:	4770      	bx	lr

080067ac <IO_init>:
 */
#include "InputOutputInterface.h"
IO_interface inputOutputs;


void IO_init(void){
 80067ac:	b480      	push	{r7}
 80067ae:	af00      	add	r7, sp, #0
	inputOutputs.switch_1=false;
 80067b0:	4b19      	ldr	r3, [pc, #100]	; (8006818 <IO_init+0x6c>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	701a      	strb	r2, [r3, #0]
	inputOutputs.switch_2=false;
 80067b6:	4b18      	ldr	r3, [pc, #96]	; (8006818 <IO_init+0x6c>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	705a      	strb	r2, [r3, #1]
	inputOutputs.switch_3=false;
 80067bc:	4b16      	ldr	r3, [pc, #88]	; (8006818 <IO_init+0x6c>)
 80067be:	2200      	movs	r2, #0
 80067c0:	709a      	strb	r2, [r3, #2]
	inputOutputs.switch_4=false;
 80067c2:	4b15      	ldr	r3, [pc, #84]	; (8006818 <IO_init+0x6c>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	70da      	strb	r2, [r3, #3]
	inputOutputs.switch_5=false;
 80067c8:	4b13      	ldr	r3, [pc, #76]	; (8006818 <IO_init+0x6c>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	711a      	strb	r2, [r3, #4]
	inputOutputs.switch_6=false;
 80067ce:	4b12      	ldr	r3, [pc, #72]	; (8006818 <IO_init+0x6c>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	715a      	strb	r2, [r3, #5]
	inputOutputs.switch_7=false;
 80067d4:	4b10      	ldr	r3, [pc, #64]	; (8006818 <IO_init+0x6c>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	719a      	strb	r2, [r3, #6]
	inputOutputs.switch_8=false;
 80067da:	4b0f      	ldr	r3, [pc, #60]	; (8006818 <IO_init+0x6c>)
 80067dc:	2200      	movs	r2, #0
 80067de:	71da      	strb	r2, [r3, #7]

	inputOutputs.relay_1=false;
 80067e0:	4b0d      	ldr	r3, [pc, #52]	; (8006818 <IO_init+0x6c>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	721a      	strb	r2, [r3, #8]
	inputOutputs.relay_2=false;
 80067e6:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <IO_init+0x6c>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	725a      	strb	r2, [r3, #9]
	inputOutputs.relay_3=false;
 80067ec:	4b0a      	ldr	r3, [pc, #40]	; (8006818 <IO_init+0x6c>)
 80067ee:	2200      	movs	r2, #0
 80067f0:	729a      	strb	r2, [r3, #10]
	inputOutputs.relay_4=false;
 80067f2:	4b09      	ldr	r3, [pc, #36]	; (8006818 <IO_init+0x6c>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	72da      	strb	r2, [r3, #11]
	inputOutputs.relay_5=false;
 80067f8:	4b07      	ldr	r3, [pc, #28]	; (8006818 <IO_init+0x6c>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	731a      	strb	r2, [r3, #12]
	inputOutputs.relay_6=false;
 80067fe:	4b06      	ldr	r3, [pc, #24]	; (8006818 <IO_init+0x6c>)
 8006800:	2200      	movs	r2, #0
 8006802:	735a      	strb	r2, [r3, #13]
	inputOutputs.relay_7=false;
 8006804:	4b04      	ldr	r3, [pc, #16]	; (8006818 <IO_init+0x6c>)
 8006806:	2200      	movs	r2, #0
 8006808:	739a      	strb	r2, [r3, #14]
	inputOutputs.relay_8=false;
 800680a:	4b03      	ldr	r3, [pc, #12]	; (8006818 <IO_init+0x6c>)
 800680c:	2200      	movs	r2, #0
 800680e:	73da      	strb	r2, [r3, #15]
}
 8006810:	bf00      	nop
 8006812:	46bd      	mov	sp, r7
 8006814:	bc80      	pop	{r7}
 8006816:	4770      	bx	lr
 8006818:	20003a8c 	.word	0x20003a8c

0800681c <IO_readInputSwitchs>:

void IO_readInputSwitchs(void){
 800681c:	b580      	push	{r7, lr}
 800681e:	af00      	add	r7, sp, #0
	inputOutputs.switch_1=!SW_I_1;
 8006820:	2102      	movs	r1, #2
 8006822:	4830      	ldr	r0, [pc, #192]	; (80068e4 <IO_readInputSwitchs+0xc8>)
 8006824:	f7fb f890 	bl	8001948 <HAL_GPIO_ReadPin>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	bf0c      	ite	eq
 800682e:	2301      	moveq	r3, #1
 8006830:	2300      	movne	r3, #0
 8006832:	b2da      	uxtb	r2, r3
 8006834:	4b2c      	ldr	r3, [pc, #176]	; (80068e8 <IO_readInputSwitchs+0xcc>)
 8006836:	701a      	strb	r2, [r3, #0]
	inputOutputs.switch_2=!SW_I_2;
 8006838:	2101      	movs	r1, #1
 800683a:	482a      	ldr	r0, [pc, #168]	; (80068e4 <IO_readInputSwitchs+0xc8>)
 800683c:	f7fb f884 	bl	8001948 <HAL_GPIO_ReadPin>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	bf0c      	ite	eq
 8006846:	2301      	moveq	r3, #1
 8006848:	2300      	movne	r3, #0
 800684a:	b2da      	uxtb	r2, r3
 800684c:	4b26      	ldr	r3, [pc, #152]	; (80068e8 <IO_readInputSwitchs+0xcc>)
 800684e:	705a      	strb	r2, [r3, #1]
	inputOutputs.switch_3=!SW_I_3;
 8006850:	2180      	movs	r1, #128	; 0x80
 8006852:	4826      	ldr	r0, [pc, #152]	; (80068ec <IO_readInputSwitchs+0xd0>)
 8006854:	f7fb f878 	bl	8001948 <HAL_GPIO_ReadPin>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	bf0c      	ite	eq
 800685e:	2301      	moveq	r3, #1
 8006860:	2300      	movne	r3, #0
 8006862:	b2da      	uxtb	r2, r3
 8006864:	4b20      	ldr	r3, [pc, #128]	; (80068e8 <IO_readInputSwitchs+0xcc>)
 8006866:	709a      	strb	r2, [r3, #2]
	inputOutputs.switch_4=!SW_I_4;
 8006868:	2110      	movs	r1, #16
 800686a:	481e      	ldr	r0, [pc, #120]	; (80068e4 <IO_readInputSwitchs+0xc8>)
 800686c:	f7fb f86c 	bl	8001948 <HAL_GPIO_ReadPin>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	bf0c      	ite	eq
 8006876:	2301      	moveq	r3, #1
 8006878:	2300      	movne	r3, #0
 800687a:	b2da      	uxtb	r2, r3
 800687c:	4b1a      	ldr	r3, [pc, #104]	; (80068e8 <IO_readInputSwitchs+0xcc>)
 800687e:	70da      	strb	r2, [r3, #3]
	inputOutputs.switch_5=!SW_I_5;
 8006880:	2120      	movs	r1, #32
 8006882:	481a      	ldr	r0, [pc, #104]	; (80068ec <IO_readInputSwitchs+0xd0>)
 8006884:	f7fb f860 	bl	8001948 <HAL_GPIO_ReadPin>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	bf0c      	ite	eq
 800688e:	2301      	moveq	r3, #1
 8006890:	2300      	movne	r3, #0
 8006892:	b2da      	uxtb	r2, r3
 8006894:	4b14      	ldr	r3, [pc, #80]	; (80068e8 <IO_readInputSwitchs+0xcc>)
 8006896:	711a      	strb	r2, [r3, #4]
	inputOutputs.switch_6=!SW_I_6;
 8006898:	2110      	movs	r1, #16
 800689a:	4814      	ldr	r0, [pc, #80]	; (80068ec <IO_readInputSwitchs+0xd0>)
 800689c:	f7fb f854 	bl	8001948 <HAL_GPIO_ReadPin>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	bf0c      	ite	eq
 80068a6:	2301      	moveq	r3, #1
 80068a8:	2300      	movne	r3, #0
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	4b0e      	ldr	r3, [pc, #56]	; (80068e8 <IO_readInputSwitchs+0xcc>)
 80068ae:	715a      	strb	r2, [r3, #5]
	inputOutputs.switch_7=!SW_I_7;
 80068b0:	2102      	movs	r1, #2
 80068b2:	480e      	ldr	r0, [pc, #56]	; (80068ec <IO_readInputSwitchs+0xd0>)
 80068b4:	f7fb f848 	bl	8001948 <HAL_GPIO_ReadPin>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	bf0c      	ite	eq
 80068be:	2301      	moveq	r3, #1
 80068c0:	2300      	movne	r3, #0
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	4b08      	ldr	r3, [pc, #32]	; (80068e8 <IO_readInputSwitchs+0xcc>)
 80068c6:	719a      	strb	r2, [r3, #6]
	inputOutputs.switch_8=!SW_I_8;
 80068c8:	2108      	movs	r1, #8
 80068ca:	4806      	ldr	r0, [pc, #24]	; (80068e4 <IO_readInputSwitchs+0xc8>)
 80068cc:	f7fb f83c 	bl	8001948 <HAL_GPIO_ReadPin>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	bf0c      	ite	eq
 80068d6:	2301      	moveq	r3, #1
 80068d8:	2300      	movne	r3, #0
 80068da:	b2da      	uxtb	r2, r3
 80068dc:	4b02      	ldr	r3, [pc, #8]	; (80068e8 <IO_readInputSwitchs+0xcc>)
 80068de:	71da      	strb	r2, [r3, #7]
}
 80068e0:	bf00      	nop
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	40010c00 	.word	0x40010c00
 80068e8:	20003a8c 	.word	0x20003a8c
 80068ec:	40010800 	.word	0x40010800

080068f0 <IO_testInputOutput>:
//	if(inputOutputs.relay_6)R_6_O_HIGH; else R_6_O_LOW;
	//if(inputOutputs.relay_7)R_7_O_HIGH; else R_7_O_LOW;
	if(inputOutputs.relay_8)R_8_O_HIGH; else R_8_O_LOW;
}
uint8_t testBtye[1];
void IO_testInputOutput(void){
 80068f0:	b598      	push	{r3, r4, r7, lr}
 80068f2:	af00      	add	r7, sp, #0
	if(inputOutputs.switch_5)R_5_O_HIGH; else R_5_O_LOW;
	if(inputOutputs.switch_6)R_6_O_HIGH; else R_6_O_LOW;
	if(inputOutputs.switch_7)R_7_O_HIGH; else R_7_O_LOW;
	if(inputOutputs.switch_8)R_8_O_HIGH; else R_8_O_LOW;*/

	testBtye[0]=IO_inputsBitsPackageToByte(inputOutputs);
 80068f4:	4b0c      	ldr	r3, [pc, #48]	; (8006928 <IO_testInputOutput+0x38>)
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	2000      	movs	r0, #0
 80068fa:	4610      	mov	r0, r2
 80068fc:	685a      	ldr	r2, [r3, #4]
 80068fe:	2100      	movs	r1, #0
 8006900:	4611      	mov	r1, r2
 8006902:	689c      	ldr	r4, [r3, #8]
 8006904:	2200      	movs	r2, #0
 8006906:	4622      	mov	r2, r4
 8006908:	68dc      	ldr	r4, [r3, #12]
 800690a:	2300      	movs	r3, #0
 800690c:	4623      	mov	r3, r4
 800690e:	f000 f80f 	bl	8006930 <IO_inputsBitsPackageToByte>
 8006912:	4603      	mov	r3, r0
 8006914:	461a      	mov	r2, r3
 8006916:	4b05      	ldr	r3, [pc, #20]	; (800692c <IO_testInputOutput+0x3c>)
 8006918:	701a      	strb	r2, [r3, #0]
	IO_outputByteToBitsPackage(testBtye[0]);
 800691a:	4b04      	ldr	r3, [pc, #16]	; (800692c <IO_testInputOutput+0x3c>)
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	4618      	mov	r0, r3
 8006920:	f000 f838 	bl	8006994 <IO_outputByteToBitsPackage>

}
 8006924:	bf00      	nop
 8006926:	bd98      	pop	{r3, r4, r7, pc}
 8006928:	20003a8c 	.word	0x20003a8c
 800692c:	20003a88 	.word	0x20003a88

08006930 <IO_inputsBitsPackageToByte>:

uint8_t IO_inputsBitsPackageToByte(IO_interface inputBits){
 8006930:	b490      	push	{r4, r7}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	463c      	mov	r4, r7
 8006938:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t bitPackage;
	bitPackage = (inputBits.switch_8 << 7) | (inputBits.switch_7 << 6) |
 800693c:	79fb      	ldrb	r3, [r7, #7]
 800693e:	01db      	lsls	r3, r3, #7
 8006940:	b25a      	sxtb	r2, r3
 8006942:	79bb      	ldrb	r3, [r7, #6]
 8006944:	019b      	lsls	r3, r3, #6
 8006946:	b25b      	sxtb	r3, r3
 8006948:	4313      	orrs	r3, r2
 800694a:	b25a      	sxtb	r2, r3
	(inputBits.switch_6 << 5) | (inputBits.switch_5 << 4) |
 800694c:	797b      	ldrb	r3, [r7, #5]
 800694e:	015b      	lsls	r3, r3, #5
	bitPackage = (inputBits.switch_8 << 7) | (inputBits.switch_7 << 6) |
 8006950:	b25b      	sxtb	r3, r3
 8006952:	4313      	orrs	r3, r2
 8006954:	b25a      	sxtb	r2, r3
	(inputBits.switch_6 << 5) | (inputBits.switch_5 << 4) |
 8006956:	793b      	ldrb	r3, [r7, #4]
 8006958:	011b      	lsls	r3, r3, #4
 800695a:	b25b      	sxtb	r3, r3
 800695c:	4313      	orrs	r3, r2
 800695e:	b25a      	sxtb	r2, r3
	(inputBits.switch_4 << 3) | (inputBits.switch_3 << 2) |
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	00db      	lsls	r3, r3, #3
	(inputBits.switch_6 << 5) | (inputBits.switch_5 << 4) |
 8006964:	b25b      	sxtb	r3, r3
 8006966:	4313      	orrs	r3, r2
 8006968:	b25a      	sxtb	r2, r3
	(inputBits.switch_4 << 3) | (inputBits.switch_3 << 2) |
 800696a:	78bb      	ldrb	r3, [r7, #2]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	b25b      	sxtb	r3, r3
 8006970:	4313      	orrs	r3, r2
 8006972:	b25a      	sxtb	r2, r3
    (inputBits.switch_2 << 1) | (inputBits.switch_1);
 8006974:	787b      	ldrb	r3, [r7, #1]
 8006976:	005b      	lsls	r3, r3, #1
	(inputBits.switch_4 << 3) | (inputBits.switch_3 << 2) |
 8006978:	b25b      	sxtb	r3, r3
 800697a:	4313      	orrs	r3, r2
 800697c:	b25a      	sxtb	r2, r3
    (inputBits.switch_2 << 1) | (inputBits.switch_1);
 800697e:	783b      	ldrb	r3, [r7, #0]
 8006980:	b25b      	sxtb	r3, r3
 8006982:	4313      	orrs	r3, r2
 8006984:	b25b      	sxtb	r3, r3
	bitPackage = (inputBits.switch_8 << 7) | (inputBits.switch_7 << 6) |
 8006986:	75fb      	strb	r3, [r7, #23]
	return bitPackage;
 8006988:	7dfb      	ldrb	r3, [r7, #23]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3718      	adds	r7, #24
 800698e:	46bd      	mov	sp, r7
 8006990:	bc90      	pop	{r4, r7}
 8006992:	4770      	bx	lr

08006994 <IO_outputByteToBitsPackage>:

void IO_outputByteToBitsPackage(uint8_t byte){
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	4603      	mov	r3, r0
 800699c:	71fb      	strb	r3, [r7, #7]
	inputOutputs.relay_1=(bool)(byte & IO_BIT_0);
 800699e:	79fb      	ldrb	r3, [r7, #7]
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	bf14      	ite	ne
 80069a8:	2301      	movne	r3, #1
 80069aa:	2300      	moveq	r3, #0
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	4b25      	ldr	r3, [pc, #148]	; (8006a44 <IO_outputByteToBitsPackage+0xb0>)
 80069b0:	721a      	strb	r2, [r3, #8]
	inputOutputs.relay_2=(bool)(byte & IO_BIT_1);
 80069b2:	79fb      	ldrb	r3, [r7, #7]
 80069b4:	f003 0302 	and.w	r3, r3, #2
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	bf14      	ite	ne
 80069bc:	2301      	movne	r3, #1
 80069be:	2300      	moveq	r3, #0
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	4b20      	ldr	r3, [pc, #128]	; (8006a44 <IO_outputByteToBitsPackage+0xb0>)
 80069c4:	725a      	strb	r2, [r3, #9]
	inputOutputs.relay_3=(bool)(byte & IO_BIT_2);
 80069c6:	79fb      	ldrb	r3, [r7, #7]
 80069c8:	f003 0304 	and.w	r3, r3, #4
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	bf14      	ite	ne
 80069d0:	2301      	movne	r3, #1
 80069d2:	2300      	moveq	r3, #0
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	4b1b      	ldr	r3, [pc, #108]	; (8006a44 <IO_outputByteToBitsPackage+0xb0>)
 80069d8:	729a      	strb	r2, [r3, #10]
	inputOutputs.relay_4=(bool)(byte & IO_BIT_3);
 80069da:	79fb      	ldrb	r3, [r7, #7]
 80069dc:	f003 0308 	and.w	r3, r3, #8
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	bf14      	ite	ne
 80069e4:	2301      	movne	r3, #1
 80069e6:	2300      	moveq	r3, #0
 80069e8:	b2da      	uxtb	r2, r3
 80069ea:	4b16      	ldr	r3, [pc, #88]	; (8006a44 <IO_outputByteToBitsPackage+0xb0>)
 80069ec:	72da      	strb	r2, [r3, #11]
	inputOutputs.relay_5=(bool)(byte & IO_BIT_4);
 80069ee:	79fb      	ldrb	r3, [r7, #7]
 80069f0:	f003 0310 	and.w	r3, r3, #16
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	bf14      	ite	ne
 80069f8:	2301      	movne	r3, #1
 80069fa:	2300      	moveq	r3, #0
 80069fc:	b2da      	uxtb	r2, r3
 80069fe:	4b11      	ldr	r3, [pc, #68]	; (8006a44 <IO_outputByteToBitsPackage+0xb0>)
 8006a00:	731a      	strb	r2, [r3, #12]
	inputOutputs.relay_6=(bool)(byte & IO_BIT_5);
 8006a02:	79fb      	ldrb	r3, [r7, #7]
 8006a04:	f003 0320 	and.w	r3, r3, #32
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	bf14      	ite	ne
 8006a0c:	2301      	movne	r3, #1
 8006a0e:	2300      	moveq	r3, #0
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	4b0c      	ldr	r3, [pc, #48]	; (8006a44 <IO_outputByteToBitsPackage+0xb0>)
 8006a14:	735a      	strb	r2, [r3, #13]
	inputOutputs.relay_7=(bool)(byte & IO_BIT_6);
 8006a16:	79fb      	ldrb	r3, [r7, #7]
 8006a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	bf14      	ite	ne
 8006a20:	2301      	movne	r3, #1
 8006a22:	2300      	moveq	r3, #0
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	4b07      	ldr	r3, [pc, #28]	; (8006a44 <IO_outputByteToBitsPackage+0xb0>)
 8006a28:	739a      	strb	r2, [r3, #14]
	inputOutputs.relay_8=(bool)(byte & IO_BIT_7);
 8006a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	09db      	lsrs	r3, r3, #7
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	4b03      	ldr	r3, [pc, #12]	; (8006a44 <IO_outputByteToBitsPackage+0xb0>)
 8006a36:	73da      	strb	r2, [r3, #15]
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bc80      	pop	{r7}
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	20003a8c 	.word	0x20003a8c

08006a48 <IO_getInputOutputsVal>:

IO_interface IO_getInputOutputsVal(void){return inputOutputs;}
 8006a48:	b490      	push	{r4, r7}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a07      	ldr	r2, [pc, #28]	; (8006a70 <IO_getInputOutputsVal+0x28>)
 8006a54:	6814      	ldr	r4, [r2, #0]
 8006a56:	6850      	ldr	r0, [r2, #4]
 8006a58:	6891      	ldr	r1, [r2, #8]
 8006a5a:	68d2      	ldr	r2, [r2, #12]
 8006a5c:	601c      	str	r4, [r3, #0]
 8006a5e:	6058      	str	r0, [r3, #4]
 8006a60:	6099      	str	r1, [r3, #8]
 8006a62:	60da      	str	r2, [r3, #12]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bc90      	pop	{r4, r7}
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	20003a8c 	.word	0x20003a8c

08006a74 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006a80:	2300      	movs	r3, #0
 8006a82:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	7c1b      	ldrb	r3, [r3, #16]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d115      	bne.n	8006ab8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a90:	2202      	movs	r2, #2
 8006a92:	2181      	movs	r1, #129	; 0x81
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f004 fd78 	bl	800b58a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aa4:	2202      	movs	r2, #2
 8006aa6:	2101      	movs	r1, #1
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f004 fd6e 	bl	800b58a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006ab6:	e012      	b.n	8006ade <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006ab8:	2340      	movs	r3, #64	; 0x40
 8006aba:	2202      	movs	r2, #2
 8006abc:	2181      	movs	r1, #129	; 0x81
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f004 fd63 	bl	800b58a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006aca:	2340      	movs	r3, #64	; 0x40
 8006acc:	2202      	movs	r2, #2
 8006ace:	2101      	movs	r1, #1
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f004 fd5a 	bl	800b58a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006ade:	2308      	movs	r3, #8
 8006ae0:	2203      	movs	r2, #3
 8006ae2:	2182      	movs	r1, #130	; 0x82
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f004 fd50 	bl	800b58a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006af0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006af4:	f004 fe70 	bl	800b7d8 <USBD_static_malloc>
 8006af8:	4602      	mov	r2, r0
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d102      	bne.n	8006b10 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	73fb      	strb	r3, [r7, #15]
 8006b0e:	e026      	b.n	8006b5e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b16:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	7c1b      	ldrb	r3, [r3, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d109      	bne.n	8006b4e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b44:	2101      	movs	r1, #1
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f004 fe10 	bl	800b76c <USBD_LL_PrepareReceive>
 8006b4c:	e007      	b.n	8006b5e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b54:	2340      	movs	r3, #64	; 0x40
 8006b56:	2101      	movs	r1, #1
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f004 fe07 	bl	800b76c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	460b      	mov	r3, r1
 8006b72:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006b78:	2181      	movs	r1, #129	; 0x81
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f004 fd2b 	bl	800b5d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006b86:	2101      	movs	r1, #1
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f004 fd24 	bl	800b5d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006b96:	2182      	movs	r1, #130	; 0x82
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f004 fd1c 	bl	800b5d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00e      	beq.n	8006bcc <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f004 fe16 	bl	800b7f0 <USBD_static_free>
    pdev->pClassData = NULL;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b086      	sub	sp, #24
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006be8:	2300      	movs	r3, #0
 8006bea:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d039      	beq.n	8006c74 <USBD_CDC_Setup+0x9e>
 8006c00:	2b20      	cmp	r3, #32
 8006c02:	d17f      	bne.n	8006d04 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	88db      	ldrh	r3, [r3, #6]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d029      	beq.n	8006c60 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	b25b      	sxtb	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	da11      	bge.n	8006c3a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006c22:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	88d2      	ldrh	r2, [r2, #6]
 8006c28:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006c2a:	6939      	ldr	r1, [r7, #16]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	88db      	ldrh	r3, [r3, #6]
 8006c30:	461a      	mov	r2, r3
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f001 f9d9 	bl	8007fea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006c38:	e06b      	b.n	8006d12 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	785a      	ldrb	r2, [r3, #1]
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	88db      	ldrh	r3, [r3, #6]
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006c50:	6939      	ldr	r1, [r7, #16]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	88db      	ldrh	r3, [r3, #6]
 8006c56:	461a      	mov	r2, r3
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f001 f9f4 	bl	8008046 <USBD_CtlPrepareRx>
      break;
 8006c5e:	e058      	b.n	8006d12 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	7850      	ldrb	r0, [r2, #1]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	6839      	ldr	r1, [r7, #0]
 8006c70:	4798      	blx	r3
      break;
 8006c72:	e04e      	b.n	8006d12 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	785b      	ldrb	r3, [r3, #1]
 8006c78:	2b0b      	cmp	r3, #11
 8006c7a:	d02e      	beq.n	8006cda <USBD_CDC_Setup+0x104>
 8006c7c:	2b0b      	cmp	r3, #11
 8006c7e:	dc38      	bgt.n	8006cf2 <USBD_CDC_Setup+0x11c>
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d002      	beq.n	8006c8a <USBD_CDC_Setup+0xb4>
 8006c84:	2b0a      	cmp	r3, #10
 8006c86:	d014      	beq.n	8006cb2 <USBD_CDC_Setup+0xdc>
 8006c88:	e033      	b.n	8006cf2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c90:	2b03      	cmp	r3, #3
 8006c92:	d107      	bne.n	8006ca4 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006c94:	f107 030c 	add.w	r3, r7, #12
 8006c98:	2202      	movs	r2, #2
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f001 f9a4 	bl	8007fea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ca2:	e02e      	b.n	8006d02 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006ca4:	6839      	ldr	r1, [r7, #0]
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f001 f935 	bl	8007f16 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cac:	2302      	movs	r3, #2
 8006cae:	75fb      	strb	r3, [r7, #23]
          break;
 8006cb0:	e027      	b.n	8006d02 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cb8:	2b03      	cmp	r3, #3
 8006cba:	d107      	bne.n	8006ccc <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006cbc:	f107 030f 	add.w	r3, r7, #15
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f001 f990 	bl	8007fea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cca:	e01a      	b.n	8006d02 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006ccc:	6839      	ldr	r1, [r7, #0]
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f001 f921 	bl	8007f16 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	75fb      	strb	r3, [r7, #23]
          break;
 8006cd8:	e013      	b.n	8006d02 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce0:	2b03      	cmp	r3, #3
 8006ce2:	d00d      	beq.n	8006d00 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f001 f915 	bl	8007f16 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cec:	2302      	movs	r3, #2
 8006cee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006cf0:	e006      	b.n	8006d00 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f001 f90e 	bl	8007f16 <USBD_CtlError>
          ret = USBD_FAIL;
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	75fb      	strb	r3, [r7, #23]
          break;
 8006cfe:	e000      	b.n	8006d02 <USBD_CDC_Setup+0x12c>
          break;
 8006d00:	bf00      	nop
      }
      break;
 8006d02:	e006      	b.n	8006d12 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006d04:	6839      	ldr	r1, [r7, #0]
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f001 f905 	bl	8007f16 <USBD_CtlError>
      ret = USBD_FAIL;
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d10:	bf00      	nop
  }

  return ret;
 8006d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3718      	adds	r7, #24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	460b      	mov	r3, r1
 8006d26:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d2e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d36:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d03a      	beq.n	8006db8 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006d42:	78fa      	ldrb	r2, [r7, #3]
 8006d44:	6879      	ldr	r1, [r7, #4]
 8006d46:	4613      	mov	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	440b      	add	r3, r1
 8006d50:	331c      	adds	r3, #28
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d029      	beq.n	8006dac <USBD_CDC_DataIn+0x90>
 8006d58:	78fa      	ldrb	r2, [r7, #3]
 8006d5a:	6879      	ldr	r1, [r7, #4]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	440b      	add	r3, r1
 8006d66:	331c      	adds	r3, #28
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	78f9      	ldrb	r1, [r7, #3]
 8006d6c:	68b8      	ldr	r0, [r7, #8]
 8006d6e:	460b      	mov	r3, r1
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	440b      	add	r3, r1
 8006d74:	00db      	lsls	r3, r3, #3
 8006d76:	4403      	add	r3, r0
 8006d78:	3338      	adds	r3, #56	; 0x38
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006d80:	fb03 f301 	mul.w	r3, r3, r1
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d110      	bne.n	8006dac <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006d8a:	78fa      	ldrb	r2, [r7, #3]
 8006d8c:	6879      	ldr	r1, [r7, #4]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	440b      	add	r3, r1
 8006d98:	331c      	adds	r3, #28
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006d9e:	78f9      	ldrb	r1, [r7, #3]
 8006da0:	2300      	movs	r3, #0
 8006da2:	2200      	movs	r2, #0
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f004 fcbe 	bl	800b726 <USBD_LL_Transmit>
 8006daa:	e003      	b.n	8006db4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006db4:	2300      	movs	r3, #0
 8006db6:	e000      	b.n	8006dba <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006db8:	2302      	movs	r3, #2
  }
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	460b      	mov	r3, r1
 8006dcc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dd4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006dd6:	78fb      	ldrb	r3, [r7, #3]
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f004 fce9 	bl	800b7b2 <USBD_LL_GetRxDataSize>
 8006de0:	4602      	mov	r2, r0
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00d      	beq.n	8006e0e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006e06:	4611      	mov	r1, r2
 8006e08:	4798      	blx	r3

    return USBD_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	e000      	b.n	8006e10 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006e0e:	2302      	movs	r3, #2
  }
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e26:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d015      	beq.n	8006e5e <USBD_CDC_EP0_RxReady+0x46>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006e38:	2bff      	cmp	r3, #255	; 0xff
 8006e3a:	d010      	beq.n	8006e5e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006e4a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e52:	b292      	uxth	r2, r2
 8006e54:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	22ff      	movs	r2, #255	; 0xff
 8006e5a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2243      	movs	r2, #67	; 0x43
 8006e74:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006e76:	4b03      	ldr	r3, [pc, #12]	; (8006e84 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bc80      	pop	{r7}
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	20000094 	.word	0x20000094

08006e88 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2243      	movs	r2, #67	; 0x43
 8006e94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006e96:	4b03      	ldr	r3, [pc, #12]	; (8006ea4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bc80      	pop	{r7}
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	20000050 	.word	0x20000050

08006ea8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2243      	movs	r2, #67	; 0x43
 8006eb4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006eb6:	4b03      	ldr	r3, [pc, #12]	; (8006ec4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bc80      	pop	{r7}
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	200000d8 	.word	0x200000d8

08006ec8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	220a      	movs	r2, #10
 8006ed4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006ed6:	4b03      	ldr	r3, [pc, #12]	; (8006ee4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bc80      	pop	{r7}
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	2000000c 	.word	0x2000000c

08006ee8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d005      	beq.n	8006f08 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	683a      	ldr	r2, [r7, #0]
 8006f00:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006f04:	2300      	movs	r3, #0
 8006f06:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bc80      	pop	{r7}
 8006f12:	4770      	bx	lr

08006f14 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f28:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006f32:	88fa      	ldrh	r2, [r7, #6]
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	371c      	adds	r7, #28
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bc80      	pop	{r7}
 8006f44:	4770      	bx	lr

08006f46 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b085      	sub	sp, #20
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f56:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bc80      	pop	{r7}
 8006f6a:	4770      	bx	lr

08006f6c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d017      	beq.n	8006fb6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	7c1b      	ldrb	r3, [r3, #16]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d109      	bne.n	8006fa2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f98:	2101      	movs	r1, #1
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f004 fbe6 	bl	800b76c <USBD_LL_PrepareReceive>
 8006fa0:	e007      	b.n	8006fb2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fa8:	2340      	movs	r3, #64	; 0x40
 8006faa:	2101      	movs	r1, #1
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f004 fbdd 	bl	800b76c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	e000      	b.n	8006fb8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006fb6:	2302      	movs	r3, #2
  }
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	e01a      	b.n	800700e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d003      	beq.n	8006ff8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	79fa      	ldrb	r2, [r7, #7]
 8007004:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f004 fa4a 	bl	800b4a0 <USBD_LL_Init>

  return USBD_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007016:	b480      	push	{r7}
 8007018:	b085      	sub	sp, #20
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007020:	2300      	movs	r3, #0
 8007022:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d006      	beq.n	8007038 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	683a      	ldr	r2, [r7, #0]
 800702e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	73fb      	strb	r3, [r7, #15]
 8007036:	e001      	b.n	800703c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007038:	2302      	movs	r3, #2
 800703a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800703c:	7bfb      	ldrb	r3, [r7, #15]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	bc80      	pop	{r7}
 8007046:	4770      	bx	lr

08007048 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f004 fa7f 	bl	800b554 <USBD_LL_Start>

  return USBD_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3708      	adds	r7, #8
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	bc80      	pop	{r7}
 8007072:	4770      	bx	lr

08007074 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	460b      	mov	r3, r1
 800707e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007080:	2302      	movs	r3, #2
 8007082:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00c      	beq.n	80070a8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	78fa      	ldrb	r2, [r7, #3]
 8007098:	4611      	mov	r1, r2
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	4798      	blx	r3
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d101      	bne.n	80070a8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b082      	sub	sp, #8
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	460b      	mov	r3, r1
 80070bc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	78fa      	ldrb	r2, [r7, #3]
 80070c8:	4611      	mov	r1, r2
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	4798      	blx	r3

  return USBD_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 fed7 	bl	8007e9e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80070fe:	461a      	mov	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800710c:	f003 031f 	and.w	r3, r3, #31
 8007110:	2b02      	cmp	r3, #2
 8007112:	d016      	beq.n	8007142 <USBD_LL_SetupStage+0x6a>
 8007114:	2b02      	cmp	r3, #2
 8007116:	d81c      	bhi.n	8007152 <USBD_LL_SetupStage+0x7a>
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <USBD_LL_SetupStage+0x4a>
 800711c:	2b01      	cmp	r3, #1
 800711e:	d008      	beq.n	8007132 <USBD_LL_SetupStage+0x5a>
 8007120:	e017      	b.n	8007152 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007128:	4619      	mov	r1, r3
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f9ca 	bl	80074c4 <USBD_StdDevReq>
      break;
 8007130:	e01a      	b.n	8007168 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fa2c 	bl	8007598 <USBD_StdItfReq>
      break;
 8007140:	e012      	b.n	8007168 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007148:	4619      	mov	r1, r3
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fa6c 	bl	8007628 <USBD_StdEPReq>
      break;
 8007150:	e00a      	b.n	8007168 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007158:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800715c:	b2db      	uxtb	r3, r3
 800715e:	4619      	mov	r1, r3
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f004 fa57 	bl	800b614 <USBD_LL_StallEP>
      break;
 8007166:	bf00      	nop
  }

  return USBD_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3708      	adds	r7, #8
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b086      	sub	sp, #24
 8007176:	af00      	add	r7, sp, #0
 8007178:	60f8      	str	r0, [r7, #12]
 800717a:	460b      	mov	r3, r1
 800717c:	607a      	str	r2, [r7, #4]
 800717e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007180:	7afb      	ldrb	r3, [r7, #11]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d14b      	bne.n	800721e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800718c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007194:	2b03      	cmp	r3, #3
 8007196:	d134      	bne.n	8007202 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	68da      	ldr	r2, [r3, #12]
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d919      	bls.n	80071d8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	68da      	ldr	r2, [r3, #12]
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	1ad2      	subs	r2, r2, r3
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	68da      	ldr	r2, [r3, #12]
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d203      	bcs.n	80071c6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	e002      	b.n	80071cc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	461a      	mov	r2, r3
 80071ce:	6879      	ldr	r1, [r7, #4]
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f000 ff56 	bl	8008082 <USBD_CtlContinueRx>
 80071d6:	e038      	b.n	800724a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00a      	beq.n	80071fa <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80071ea:	2b03      	cmp	r3, #3
 80071ec:	d105      	bne.n	80071fa <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f000 ff53 	bl	80080a6 <USBD_CtlSendStatus>
 8007200:	e023      	b.n	800724a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007208:	2b05      	cmp	r3, #5
 800720a:	d11e      	bne.n	800724a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007214:	2100      	movs	r1, #0
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f004 f9fc 	bl	800b614 <USBD_LL_StallEP>
 800721c:	e015      	b.n	800724a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00d      	beq.n	8007246 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007230:	2b03      	cmp	r3, #3
 8007232:	d108      	bne.n	8007246 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	7afa      	ldrb	r2, [r7, #11]
 800723e:	4611      	mov	r1, r2
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	4798      	blx	r3
 8007244:	e001      	b.n	800724a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007246:	2302      	movs	r3, #2
 8007248:	e000      	b.n	800724c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3718      	adds	r7, #24
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	460b      	mov	r3, r1
 800725e:	607a      	str	r2, [r7, #4]
 8007260:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007262:	7afb      	ldrb	r3, [r7, #11]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d17f      	bne.n	8007368 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	3314      	adds	r3, #20
 800726c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007274:	2b02      	cmp	r3, #2
 8007276:	d15c      	bne.n	8007332 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	68da      	ldr	r2, [r3, #12]
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	429a      	cmp	r2, r3
 8007282:	d915      	bls.n	80072b0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	68da      	ldr	r2, [r3, #12]
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	1ad2      	subs	r2, r2, r3
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	b29b      	uxth	r3, r3
 8007298:	461a      	mov	r2, r3
 800729a:	6879      	ldr	r1, [r7, #4]
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f000 fec0 	bl	8008022 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072a2:	2300      	movs	r3, #0
 80072a4:	2200      	movs	r2, #0
 80072a6:	2100      	movs	r1, #0
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f004 fa5f 	bl	800b76c <USBD_LL_PrepareReceive>
 80072ae:	e04e      	b.n	800734e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	6912      	ldr	r2, [r2, #16]
 80072b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80072bc:	fb02 f201 	mul.w	r2, r2, r1
 80072c0:	1a9b      	subs	r3, r3, r2
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d11c      	bne.n	8007300 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	689a      	ldr	r2, [r3, #8]
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d316      	bcc.n	8007300 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	689a      	ldr	r2, [r3, #8]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80072dc:	429a      	cmp	r2, r3
 80072de:	d20f      	bcs.n	8007300 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80072e0:	2200      	movs	r2, #0
 80072e2:	2100      	movs	r1, #0
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 fe9c 	bl	8008022 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072f2:	2300      	movs	r3, #0
 80072f4:	2200      	movs	r2, #0
 80072f6:	2100      	movs	r1, #0
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f004 fa37 	bl	800b76c <USBD_LL_PrepareReceive>
 80072fe:	e026      	b.n	800734e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00a      	beq.n	8007322 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007312:	2b03      	cmp	r3, #3
 8007314:	d105      	bne.n	8007322 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007322:	2180      	movs	r1, #128	; 0x80
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f004 f975 	bl	800b614 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f000 fece 	bl	80080cc <USBD_CtlReceiveStatus>
 8007330:	e00d      	b.n	800734e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007338:	2b04      	cmp	r3, #4
 800733a:	d004      	beq.n	8007346 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007342:	2b00      	cmp	r3, #0
 8007344:	d103      	bne.n	800734e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007346:	2180      	movs	r1, #128	; 0x80
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f004 f963 	bl	800b614 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007354:	2b01      	cmp	r3, #1
 8007356:	d11d      	bne.n	8007394 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f7ff fe81 	bl	8007060 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007366:	e015      	b.n	8007394 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800736e:	695b      	ldr	r3, [r3, #20]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00d      	beq.n	8007390 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800737a:	2b03      	cmp	r3, #3
 800737c:	d108      	bne.n	8007390 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007384:	695b      	ldr	r3, [r3, #20]
 8007386:	7afa      	ldrb	r2, [r7, #11]
 8007388:	4611      	mov	r1, r2
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	4798      	blx	r3
 800738e:	e001      	b.n	8007394 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007390:	2302      	movs	r3, #2
 8007392:	e000      	b.n	8007396 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3718      	adds	r7, #24
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b082      	sub	sp, #8
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073a6:	2340      	movs	r3, #64	; 0x40
 80073a8:	2200      	movs	r2, #0
 80073aa:	2100      	movs	r1, #0
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f004 f8ec 	bl	800b58a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2240      	movs	r2, #64	; 0x40
 80073be:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073c2:	2340      	movs	r3, #64	; 0x40
 80073c4:	2200      	movs	r2, #0
 80073c6:	2180      	movs	r1, #128	; 0x80
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f004 f8de 	bl	800b58a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2201      	movs	r2, #1
 80073d2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2240      	movs	r2, #64	; 0x40
 80073d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d009      	beq.n	8007416 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	6852      	ldr	r2, [r2, #4]
 800740e:	b2d2      	uxtb	r2, r2
 8007410:	4611      	mov	r1, r2
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	4798      	blx	r3
  }

  return USBD_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3708      	adds	r7, #8
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	460b      	mov	r3, r1
 800742a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	78fa      	ldrb	r2, [r7, #3]
 8007430:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	bc80      	pop	{r7}
 800743c:	4770      	bx	lr

0800743e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800743e:	b480      	push	{r7}
 8007440:	b083      	sub	sp, #12
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2204      	movs	r2, #4
 8007456:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	bc80      	pop	{r7}
 8007464:	4770      	bx	lr

08007466 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007466:	b480      	push	{r7}
 8007468:	b083      	sub	sp, #12
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007474:	2b04      	cmp	r3, #4
 8007476:	d105      	bne.n	8007484 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	370c      	adds	r7, #12
 800748a:	46bd      	mov	sp, r7
 800748c:	bc80      	pop	{r7}
 800748e:	4770      	bx	lr

08007490 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800749e:	2b03      	cmp	r3, #3
 80074a0:	d10b      	bne.n	80074ba <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d005      	beq.n	80074ba <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074da:	2b40      	cmp	r3, #64	; 0x40
 80074dc:	d005      	beq.n	80074ea <USBD_StdDevReq+0x26>
 80074de:	2b40      	cmp	r3, #64	; 0x40
 80074e0:	d84f      	bhi.n	8007582 <USBD_StdDevReq+0xbe>
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d009      	beq.n	80074fa <USBD_StdDevReq+0x36>
 80074e6:	2b20      	cmp	r3, #32
 80074e8:	d14b      	bne.n	8007582 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	6839      	ldr	r1, [r7, #0]
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	4798      	blx	r3
      break;
 80074f8:	e048      	b.n	800758c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	785b      	ldrb	r3, [r3, #1]
 80074fe:	2b09      	cmp	r3, #9
 8007500:	d839      	bhi.n	8007576 <USBD_StdDevReq+0xb2>
 8007502:	a201      	add	r2, pc, #4	; (adr r2, 8007508 <USBD_StdDevReq+0x44>)
 8007504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007508:	08007559 	.word	0x08007559
 800750c:	0800756d 	.word	0x0800756d
 8007510:	08007577 	.word	0x08007577
 8007514:	08007563 	.word	0x08007563
 8007518:	08007577 	.word	0x08007577
 800751c:	0800753b 	.word	0x0800753b
 8007520:	08007531 	.word	0x08007531
 8007524:	08007577 	.word	0x08007577
 8007528:	0800754f 	.word	0x0800754f
 800752c:	08007545 	.word	0x08007545
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007530:	6839      	ldr	r1, [r7, #0]
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f9dc 	bl	80078f0 <USBD_GetDescriptor>
          break;
 8007538:	e022      	b.n	8007580 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800753a:	6839      	ldr	r1, [r7, #0]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fb3f 	bl	8007bc0 <USBD_SetAddress>
          break;
 8007542:	e01d      	b.n	8007580 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007544:	6839      	ldr	r1, [r7, #0]
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 fb7e 	bl	8007c48 <USBD_SetConfig>
          break;
 800754c:	e018      	b.n	8007580 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fc07 	bl	8007d64 <USBD_GetConfig>
          break;
 8007556:	e013      	b.n	8007580 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007558:	6839      	ldr	r1, [r7, #0]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fc37 	bl	8007dce <USBD_GetStatus>
          break;
 8007560:	e00e      	b.n	8007580 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007562:	6839      	ldr	r1, [r7, #0]
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fc65 	bl	8007e34 <USBD_SetFeature>
          break;
 800756a:	e009      	b.n	8007580 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fc74 	bl	8007e5c <USBD_ClrFeature>
          break;
 8007574:	e004      	b.n	8007580 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fccc 	bl	8007f16 <USBD_CtlError>
          break;
 800757e:	bf00      	nop
      }
      break;
 8007580:	e004      	b.n	800758c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fcc6 	bl	8007f16 <USBD_CtlError>
      break;
 800758a:	bf00      	nop
  }

  return ret;
 800758c:	7bfb      	ldrb	r3, [r7, #15]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop

08007598 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075ae:	2b40      	cmp	r3, #64	; 0x40
 80075b0:	d005      	beq.n	80075be <USBD_StdItfReq+0x26>
 80075b2:	2b40      	cmp	r3, #64	; 0x40
 80075b4:	d82e      	bhi.n	8007614 <USBD_StdItfReq+0x7c>
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <USBD_StdItfReq+0x26>
 80075ba:	2b20      	cmp	r3, #32
 80075bc:	d12a      	bne.n	8007614 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c4:	3b01      	subs	r3, #1
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d81d      	bhi.n	8007606 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	889b      	ldrh	r3, [r3, #4]
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d813      	bhi.n	80075fc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	4798      	blx	r3
 80075e2:	4603      	mov	r3, r0
 80075e4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	88db      	ldrh	r3, [r3, #6]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d110      	bne.n	8007610 <USBD_StdItfReq+0x78>
 80075ee:	7bfb      	ldrb	r3, [r7, #15]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10d      	bne.n	8007610 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fd56 	bl	80080a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80075fa:	e009      	b.n	8007610 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80075fc:	6839      	ldr	r1, [r7, #0]
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fc89 	bl	8007f16 <USBD_CtlError>
          break;
 8007604:	e004      	b.n	8007610 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fc84 	bl	8007f16 <USBD_CtlError>
          break;
 800760e:	e000      	b.n	8007612 <USBD_StdItfReq+0x7a>
          break;
 8007610:	bf00      	nop
      }
      break;
 8007612:	e004      	b.n	800761e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fc7d 	bl	8007f16 <USBD_CtlError>
      break;
 800761c:	bf00      	nop
  }

  return USBD_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	889b      	ldrh	r3, [r3, #4]
 800763a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007644:	2b40      	cmp	r3, #64	; 0x40
 8007646:	d007      	beq.n	8007658 <USBD_StdEPReq+0x30>
 8007648:	2b40      	cmp	r3, #64	; 0x40
 800764a:	f200 8146 	bhi.w	80078da <USBD_StdEPReq+0x2b2>
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00a      	beq.n	8007668 <USBD_StdEPReq+0x40>
 8007652:	2b20      	cmp	r3, #32
 8007654:	f040 8141 	bne.w	80078da <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	4798      	blx	r3
      break;
 8007666:	e13d      	b.n	80078e4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007670:	2b20      	cmp	r3, #32
 8007672:	d10a      	bne.n	800768a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	4798      	blx	r3
 8007682:	4603      	mov	r3, r0
 8007684:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007686:	7bfb      	ldrb	r3, [r7, #15]
 8007688:	e12d      	b.n	80078e6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	785b      	ldrb	r3, [r3, #1]
 800768e:	2b03      	cmp	r3, #3
 8007690:	d007      	beq.n	80076a2 <USBD_StdEPReq+0x7a>
 8007692:	2b03      	cmp	r3, #3
 8007694:	f300 811b 	bgt.w	80078ce <USBD_StdEPReq+0x2a6>
 8007698:	2b00      	cmp	r3, #0
 800769a:	d072      	beq.n	8007782 <USBD_StdEPReq+0x15a>
 800769c:	2b01      	cmp	r3, #1
 800769e:	d03a      	beq.n	8007716 <USBD_StdEPReq+0xee>
 80076a0:	e115      	b.n	80078ce <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d002      	beq.n	80076b2 <USBD_StdEPReq+0x8a>
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d015      	beq.n	80076dc <USBD_StdEPReq+0xb4>
 80076b0:	e02b      	b.n	800770a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076b2:	7bbb      	ldrb	r3, [r7, #14]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00c      	beq.n	80076d2 <USBD_StdEPReq+0xaa>
 80076b8:	7bbb      	ldrb	r3, [r7, #14]
 80076ba:	2b80      	cmp	r3, #128	; 0x80
 80076bc:	d009      	beq.n	80076d2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80076be:	7bbb      	ldrb	r3, [r7, #14]
 80076c0:	4619      	mov	r1, r3
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f003 ffa6 	bl	800b614 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80076c8:	2180      	movs	r1, #128	; 0x80
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f003 ffa2 	bl	800b614 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076d0:	e020      	b.n	8007714 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80076d2:	6839      	ldr	r1, [r7, #0]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fc1e 	bl	8007f16 <USBD_CtlError>
              break;
 80076da:	e01b      	b.n	8007714 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	885b      	ldrh	r3, [r3, #2]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10e      	bne.n	8007702 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80076e4:	7bbb      	ldrb	r3, [r7, #14]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00b      	beq.n	8007702 <USBD_StdEPReq+0xda>
 80076ea:	7bbb      	ldrb	r3, [r7, #14]
 80076ec:	2b80      	cmp	r3, #128	; 0x80
 80076ee:	d008      	beq.n	8007702 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	88db      	ldrh	r3, [r3, #6]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d104      	bne.n	8007702 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80076f8:	7bbb      	ldrb	r3, [r7, #14]
 80076fa:	4619      	mov	r1, r3
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f003 ff89 	bl	800b614 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fccf 	bl	80080a6 <USBD_CtlSendStatus>

              break;
 8007708:	e004      	b.n	8007714 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800770a:	6839      	ldr	r1, [r7, #0]
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fc02 	bl	8007f16 <USBD_CtlError>
              break;
 8007712:	bf00      	nop
          }
          break;
 8007714:	e0e0      	b.n	80078d8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800771c:	2b02      	cmp	r3, #2
 800771e:	d002      	beq.n	8007726 <USBD_StdEPReq+0xfe>
 8007720:	2b03      	cmp	r3, #3
 8007722:	d015      	beq.n	8007750 <USBD_StdEPReq+0x128>
 8007724:	e026      	b.n	8007774 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007726:	7bbb      	ldrb	r3, [r7, #14]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00c      	beq.n	8007746 <USBD_StdEPReq+0x11e>
 800772c:	7bbb      	ldrb	r3, [r7, #14]
 800772e:	2b80      	cmp	r3, #128	; 0x80
 8007730:	d009      	beq.n	8007746 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007732:	7bbb      	ldrb	r3, [r7, #14]
 8007734:	4619      	mov	r1, r3
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f003 ff6c 	bl	800b614 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800773c:	2180      	movs	r1, #128	; 0x80
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f003 ff68 	bl	800b614 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007744:	e01c      	b.n	8007780 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fbe4 	bl	8007f16 <USBD_CtlError>
              break;
 800774e:	e017      	b.n	8007780 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	885b      	ldrh	r3, [r3, #2]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d112      	bne.n	800777e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007758:	7bbb      	ldrb	r3, [r7, #14]
 800775a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800775e:	2b00      	cmp	r3, #0
 8007760:	d004      	beq.n	800776c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007762:	7bbb      	ldrb	r3, [r7, #14]
 8007764:	4619      	mov	r1, r3
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f003 ff73 	bl	800b652 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fc9a 	bl	80080a6 <USBD_CtlSendStatus>
              }
              break;
 8007772:	e004      	b.n	800777e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007774:	6839      	ldr	r1, [r7, #0]
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fbcd 	bl	8007f16 <USBD_CtlError>
              break;
 800777c:	e000      	b.n	8007780 <USBD_StdEPReq+0x158>
              break;
 800777e:	bf00      	nop
          }
          break;
 8007780:	e0aa      	b.n	80078d8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007788:	2b02      	cmp	r3, #2
 800778a:	d002      	beq.n	8007792 <USBD_StdEPReq+0x16a>
 800778c:	2b03      	cmp	r3, #3
 800778e:	d032      	beq.n	80077f6 <USBD_StdEPReq+0x1ce>
 8007790:	e097      	b.n	80078c2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007792:	7bbb      	ldrb	r3, [r7, #14]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d007      	beq.n	80077a8 <USBD_StdEPReq+0x180>
 8007798:	7bbb      	ldrb	r3, [r7, #14]
 800779a:	2b80      	cmp	r3, #128	; 0x80
 800779c:	d004      	beq.n	80077a8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800779e:	6839      	ldr	r1, [r7, #0]
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fbb8 	bl	8007f16 <USBD_CtlError>
                break;
 80077a6:	e091      	b.n	80078cc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	da0b      	bge.n	80077c8 <USBD_StdEPReq+0x1a0>
 80077b0:	7bbb      	ldrb	r3, [r7, #14]
 80077b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077b6:	4613      	mov	r3, r2
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4413      	add	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	3310      	adds	r3, #16
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	4413      	add	r3, r2
 80077c4:	3304      	adds	r3, #4
 80077c6:	e00b      	b.n	80077e0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077c8:	7bbb      	ldrb	r3, [r7, #14]
 80077ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077ce:	4613      	mov	r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	4413      	add	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	4413      	add	r3, r2
 80077de:	3304      	adds	r3, #4
 80077e0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2200      	movs	r2, #0
 80077e6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2202      	movs	r2, #2
 80077ec:	4619      	mov	r1, r3
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fbfb 	bl	8007fea <USBD_CtlSendData>
              break;
 80077f4:	e06a      	b.n	80078cc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80077f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	da11      	bge.n	8007822 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077fe:	7bbb      	ldrb	r3, [r7, #14]
 8007800:	f003 020f 	and.w	r2, r3, #15
 8007804:	6879      	ldr	r1, [r7, #4]
 8007806:	4613      	mov	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	4413      	add	r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	440b      	add	r3, r1
 8007810:	3318      	adds	r3, #24
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d117      	bne.n	8007848 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fb7b 	bl	8007f16 <USBD_CtlError>
                  break;
 8007820:	e054      	b.n	80078cc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007822:	7bbb      	ldrb	r3, [r7, #14]
 8007824:	f003 020f 	and.w	r2, r3, #15
 8007828:	6879      	ldr	r1, [r7, #4]
 800782a:	4613      	mov	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	440b      	add	r3, r1
 8007834:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d104      	bne.n	8007848 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800783e:	6839      	ldr	r1, [r7, #0]
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fb68 	bl	8007f16 <USBD_CtlError>
                  break;
 8007846:	e041      	b.n	80078cc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007848:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800784c:	2b00      	cmp	r3, #0
 800784e:	da0b      	bge.n	8007868 <USBD_StdEPReq+0x240>
 8007850:	7bbb      	ldrb	r3, [r7, #14]
 8007852:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007856:	4613      	mov	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4413      	add	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	3310      	adds	r3, #16
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	4413      	add	r3, r2
 8007864:	3304      	adds	r3, #4
 8007866:	e00b      	b.n	8007880 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007868:	7bbb      	ldrb	r3, [r7, #14]
 800786a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800786e:	4613      	mov	r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	4413      	add	r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	4413      	add	r3, r2
 800787e:	3304      	adds	r3, #4
 8007880:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007882:	7bbb      	ldrb	r3, [r7, #14]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d002      	beq.n	800788e <USBD_StdEPReq+0x266>
 8007888:	7bbb      	ldrb	r3, [r7, #14]
 800788a:	2b80      	cmp	r3, #128	; 0x80
 800788c:	d103      	bne.n	8007896 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	2200      	movs	r2, #0
 8007892:	601a      	str	r2, [r3, #0]
 8007894:	e00e      	b.n	80078b4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007896:	7bbb      	ldrb	r3, [r7, #14]
 8007898:	4619      	mov	r1, r3
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f003 fef8 	bl	800b690 <USBD_LL_IsStallEP>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d003      	beq.n	80078ae <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	2201      	movs	r2, #1
 80078aa:	601a      	str	r2, [r3, #0]
 80078ac:	e002      	b.n	80078b4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	2200      	movs	r2, #0
 80078b2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	2202      	movs	r2, #2
 80078b8:	4619      	mov	r1, r3
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fb95 	bl	8007fea <USBD_CtlSendData>
              break;
 80078c0:	e004      	b.n	80078cc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80078c2:	6839      	ldr	r1, [r7, #0]
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fb26 	bl	8007f16 <USBD_CtlError>
              break;
 80078ca:	bf00      	nop
          }
          break;
 80078cc:	e004      	b.n	80078d8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fb20 	bl	8007f16 <USBD_CtlError>
          break;
 80078d6:	bf00      	nop
      }
      break;
 80078d8:	e004      	b.n	80078e4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80078da:	6839      	ldr	r1, [r7, #0]
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fb1a 	bl	8007f16 <USBD_CtlError>
      break;
 80078e2:	bf00      	nop
  }

  return ret;
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
	...

080078f0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078fa:	2300      	movs	r3, #0
 80078fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80078fe:	2300      	movs	r3, #0
 8007900:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007902:	2300      	movs	r3, #0
 8007904:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	885b      	ldrh	r3, [r3, #2]
 800790a:	0a1b      	lsrs	r3, r3, #8
 800790c:	b29b      	uxth	r3, r3
 800790e:	3b01      	subs	r3, #1
 8007910:	2b06      	cmp	r3, #6
 8007912:	f200 8128 	bhi.w	8007b66 <USBD_GetDescriptor+0x276>
 8007916:	a201      	add	r2, pc, #4	; (adr r2, 800791c <USBD_GetDescriptor+0x2c>)
 8007918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791c:	08007939 	.word	0x08007939
 8007920:	08007951 	.word	0x08007951
 8007924:	08007991 	.word	0x08007991
 8007928:	08007b67 	.word	0x08007b67
 800792c:	08007b67 	.word	0x08007b67
 8007930:	08007b07 	.word	0x08007b07
 8007934:	08007b33 	.word	0x08007b33
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	7c12      	ldrb	r2, [r2, #16]
 8007944:	f107 0108 	add.w	r1, r7, #8
 8007948:	4610      	mov	r0, r2
 800794a:	4798      	blx	r3
 800794c:	60f8      	str	r0, [r7, #12]
      break;
 800794e:	e112      	b.n	8007b76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	7c1b      	ldrb	r3, [r3, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10d      	bne.n	8007974 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800795e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007960:	f107 0208 	add.w	r2, r7, #8
 8007964:	4610      	mov	r0, r2
 8007966:	4798      	blx	r3
 8007968:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	3301      	adds	r3, #1
 800796e:	2202      	movs	r2, #2
 8007970:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007972:	e100      	b.n	8007b76 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800797a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797c:	f107 0208 	add.w	r2, r7, #8
 8007980:	4610      	mov	r0, r2
 8007982:	4798      	blx	r3
 8007984:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	3301      	adds	r3, #1
 800798a:	2202      	movs	r2, #2
 800798c:	701a      	strb	r2, [r3, #0]
      break;
 800798e:	e0f2      	b.n	8007b76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	885b      	ldrh	r3, [r3, #2]
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b05      	cmp	r3, #5
 8007998:	f200 80ac 	bhi.w	8007af4 <USBD_GetDescriptor+0x204>
 800799c:	a201      	add	r2, pc, #4	; (adr r2, 80079a4 <USBD_GetDescriptor+0xb4>)
 800799e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a2:	bf00      	nop
 80079a4:	080079bd 	.word	0x080079bd
 80079a8:	080079f1 	.word	0x080079f1
 80079ac:	08007a25 	.word	0x08007a25
 80079b0:	08007a59 	.word	0x08007a59
 80079b4:	08007a8d 	.word	0x08007a8d
 80079b8:	08007ac1 	.word	0x08007ac1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00b      	beq.n	80079e0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	7c12      	ldrb	r2, [r2, #16]
 80079d4:	f107 0108 	add.w	r1, r7, #8
 80079d8:	4610      	mov	r0, r2
 80079da:	4798      	blx	r3
 80079dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079de:	e091      	b.n	8007b04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079e0:	6839      	ldr	r1, [r7, #0]
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fa97 	bl	8007f16 <USBD_CtlError>
            err++;
 80079e8:	7afb      	ldrb	r3, [r7, #11]
 80079ea:	3301      	adds	r3, #1
 80079ec:	72fb      	strb	r3, [r7, #11]
          break;
 80079ee:	e089      	b.n	8007b04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00b      	beq.n	8007a14 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	7c12      	ldrb	r2, [r2, #16]
 8007a08:	f107 0108 	add.w	r1, r7, #8
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	4798      	blx	r3
 8007a10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a12:	e077      	b.n	8007b04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fa7d 	bl	8007f16 <USBD_CtlError>
            err++;
 8007a1c:	7afb      	ldrb	r3, [r7, #11]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	72fb      	strb	r3, [r7, #11]
          break;
 8007a22:	e06f      	b.n	8007b04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00b      	beq.n	8007a48 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	7c12      	ldrb	r2, [r2, #16]
 8007a3c:	f107 0108 	add.w	r1, r7, #8
 8007a40:	4610      	mov	r0, r2
 8007a42:	4798      	blx	r3
 8007a44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a46:	e05d      	b.n	8007b04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fa63 	bl	8007f16 <USBD_CtlError>
            err++;
 8007a50:	7afb      	ldrb	r3, [r7, #11]
 8007a52:	3301      	adds	r3, #1
 8007a54:	72fb      	strb	r3, [r7, #11]
          break;
 8007a56:	e055      	b.n	8007b04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00b      	beq.n	8007a7c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	7c12      	ldrb	r2, [r2, #16]
 8007a70:	f107 0108 	add.w	r1, r7, #8
 8007a74:	4610      	mov	r0, r2
 8007a76:	4798      	blx	r3
 8007a78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a7a:	e043      	b.n	8007b04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fa49 	bl	8007f16 <USBD_CtlError>
            err++;
 8007a84:	7afb      	ldrb	r3, [r7, #11]
 8007a86:	3301      	adds	r3, #1
 8007a88:	72fb      	strb	r3, [r7, #11]
          break;
 8007a8a:	e03b      	b.n	8007b04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a92:	695b      	ldr	r3, [r3, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00b      	beq.n	8007ab0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a9e:	695b      	ldr	r3, [r3, #20]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	7c12      	ldrb	r2, [r2, #16]
 8007aa4:	f107 0108 	add.w	r1, r7, #8
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	4798      	blx	r3
 8007aac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aae:	e029      	b.n	8007b04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ab0:	6839      	ldr	r1, [r7, #0]
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fa2f 	bl	8007f16 <USBD_CtlError>
            err++;
 8007ab8:	7afb      	ldrb	r3, [r7, #11]
 8007aba:	3301      	adds	r3, #1
 8007abc:	72fb      	strb	r3, [r7, #11]
          break;
 8007abe:	e021      	b.n	8007b04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00b      	beq.n	8007ae4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	7c12      	ldrb	r2, [r2, #16]
 8007ad8:	f107 0108 	add.w	r1, r7, #8
 8007adc:	4610      	mov	r0, r2
 8007ade:	4798      	blx	r3
 8007ae0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ae2:	e00f      	b.n	8007b04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fa15 	bl	8007f16 <USBD_CtlError>
            err++;
 8007aec:	7afb      	ldrb	r3, [r7, #11]
 8007aee:	3301      	adds	r3, #1
 8007af0:	72fb      	strb	r3, [r7, #11]
          break;
 8007af2:	e007      	b.n	8007b04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fa0d 	bl	8007f16 <USBD_CtlError>
          err++;
 8007afc:	7afb      	ldrb	r3, [r7, #11]
 8007afe:	3301      	adds	r3, #1
 8007b00:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007b02:	e038      	b.n	8007b76 <USBD_GetDescriptor+0x286>
 8007b04:	e037      	b.n	8007b76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	7c1b      	ldrb	r3, [r3, #16]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d109      	bne.n	8007b22 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b16:	f107 0208 	add.w	r2, r7, #8
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	4798      	blx	r3
 8007b1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b20:	e029      	b.n	8007b76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f9f6 	bl	8007f16 <USBD_CtlError>
        err++;
 8007b2a:	7afb      	ldrb	r3, [r7, #11]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	72fb      	strb	r3, [r7, #11]
      break;
 8007b30:	e021      	b.n	8007b76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	7c1b      	ldrb	r3, [r3, #16]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10d      	bne.n	8007b56 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b42:	f107 0208 	add.w	r2, r7, #8
 8007b46:	4610      	mov	r0, r2
 8007b48:	4798      	blx	r3
 8007b4a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	2207      	movs	r2, #7
 8007b52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b54:	e00f      	b.n	8007b76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 f9dc 	bl	8007f16 <USBD_CtlError>
        err++;
 8007b5e:	7afb      	ldrb	r3, [r7, #11]
 8007b60:	3301      	adds	r3, #1
 8007b62:	72fb      	strb	r3, [r7, #11]
      break;
 8007b64:	e007      	b.n	8007b76 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007b66:	6839      	ldr	r1, [r7, #0]
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f9d4 	bl	8007f16 <USBD_CtlError>
      err++;
 8007b6e:	7afb      	ldrb	r3, [r7, #11]
 8007b70:	3301      	adds	r3, #1
 8007b72:	72fb      	strb	r3, [r7, #11]
      break;
 8007b74:	bf00      	nop
  }

  if (err != 0U)
 8007b76:	7afb      	ldrb	r3, [r7, #11]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d11c      	bne.n	8007bb6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007b7c:	893b      	ldrh	r3, [r7, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d011      	beq.n	8007ba6 <USBD_GetDescriptor+0x2b6>
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	88db      	ldrh	r3, [r3, #6]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00d      	beq.n	8007ba6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	88da      	ldrh	r2, [r3, #6]
 8007b8e:	893b      	ldrh	r3, [r7, #8]
 8007b90:	4293      	cmp	r3, r2
 8007b92:	bf28      	it	cs
 8007b94:	4613      	movcs	r3, r2
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b9a:	893b      	ldrh	r3, [r7, #8]
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	68f9      	ldr	r1, [r7, #12]
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fa22 	bl	8007fea <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	88db      	ldrh	r3, [r3, #6]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d104      	bne.n	8007bb8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 fa79 	bl	80080a6 <USBD_CtlSendStatus>
 8007bb4:	e000      	b.n	8007bb8 <USBD_GetDescriptor+0x2c8>
    return;
 8007bb6:	bf00      	nop
    }
  }
}
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop

08007bc0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	889b      	ldrh	r3, [r3, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d130      	bne.n	8007c34 <USBD_SetAddress+0x74>
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	88db      	ldrh	r3, [r3, #6]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d12c      	bne.n	8007c34 <USBD_SetAddress+0x74>
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	885b      	ldrh	r3, [r3, #2]
 8007bde:	2b7f      	cmp	r3, #127	; 0x7f
 8007be0:	d828      	bhi.n	8007c34 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	885b      	ldrh	r3, [r3, #2]
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bf4:	2b03      	cmp	r3, #3
 8007bf6:	d104      	bne.n	8007c02 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f98b 	bl	8007f16 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c00:	e01d      	b.n	8007c3e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	7bfa      	ldrb	r2, [r7, #15]
 8007c06:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f003 fd6a 	bl	800b6e8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 fa46 	bl	80080a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c1a:	7bfb      	ldrb	r3, [r7, #15]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d004      	beq.n	8007c2a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2202      	movs	r2, #2
 8007c24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c28:	e009      	b.n	8007c3e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c32:	e004      	b.n	8007c3e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c34:	6839      	ldr	r1, [r7, #0]
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f96d 	bl	8007f16 <USBD_CtlError>
  }
}
 8007c3c:	bf00      	nop
 8007c3e:	bf00      	nop
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
	...

08007c48 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	885b      	ldrh	r3, [r3, #2]
 8007c56:	b2da      	uxtb	r2, r3
 8007c58:	4b41      	ldr	r3, [pc, #260]	; (8007d60 <USBD_SetConfig+0x118>)
 8007c5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c5c:	4b40      	ldr	r3, [pc, #256]	; (8007d60 <USBD_SetConfig+0x118>)
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d904      	bls.n	8007c6e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f955 	bl	8007f16 <USBD_CtlError>
 8007c6c:	e075      	b.n	8007d5a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d002      	beq.n	8007c7e <USBD_SetConfig+0x36>
 8007c78:	2b03      	cmp	r3, #3
 8007c7a:	d023      	beq.n	8007cc4 <USBD_SetConfig+0x7c>
 8007c7c:	e062      	b.n	8007d44 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007c7e:	4b38      	ldr	r3, [pc, #224]	; (8007d60 <USBD_SetConfig+0x118>)
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d01a      	beq.n	8007cbc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007c86:	4b36      	ldr	r3, [pc, #216]	; (8007d60 <USBD_SetConfig+0x118>)
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2203      	movs	r2, #3
 8007c94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007c98:	4b31      	ldr	r3, [pc, #196]	; (8007d60 <USBD_SetConfig+0x118>)
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7ff f9e8 	bl	8007074 <USBD_SetClassConfig>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d104      	bne.n	8007cb4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007caa:	6839      	ldr	r1, [r7, #0]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f932 	bl	8007f16 <USBD_CtlError>
            return;
 8007cb2:	e052      	b.n	8007d5a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 f9f6 	bl	80080a6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007cba:	e04e      	b.n	8007d5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f9f2 	bl	80080a6 <USBD_CtlSendStatus>
        break;
 8007cc2:	e04a      	b.n	8007d5a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007cc4:	4b26      	ldr	r3, [pc, #152]	; (8007d60 <USBD_SetConfig+0x118>)
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d112      	bne.n	8007cf2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2202      	movs	r2, #2
 8007cd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007cd4:	4b22      	ldr	r3, [pc, #136]	; (8007d60 <USBD_SetConfig+0x118>)
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	461a      	mov	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007cde:	4b20      	ldr	r3, [pc, #128]	; (8007d60 <USBD_SetConfig+0x118>)
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f7ff f9e4 	bl	80070b2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f9db 	bl	80080a6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007cf0:	e033      	b.n	8007d5a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007cf2:	4b1b      	ldr	r3, [pc, #108]	; (8007d60 <USBD_SetConfig+0x118>)
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d01d      	beq.n	8007d3c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	4619      	mov	r1, r3
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f7ff f9d2 	bl	80070b2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007d0e:	4b14      	ldr	r3, [pc, #80]	; (8007d60 <USBD_SetConfig+0x118>)
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	461a      	mov	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007d18:	4b11      	ldr	r3, [pc, #68]	; (8007d60 <USBD_SetConfig+0x118>)
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7ff f9a8 	bl	8007074 <USBD_SetClassConfig>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d104      	bne.n	8007d34 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f8f2 	bl	8007f16 <USBD_CtlError>
            return;
 8007d32:	e012      	b.n	8007d5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 f9b6 	bl	80080a6 <USBD_CtlSendStatus>
        break;
 8007d3a:	e00e      	b.n	8007d5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f9b2 	bl	80080a6 <USBD_CtlSendStatus>
        break;
 8007d42:	e00a      	b.n	8007d5a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f8e5 	bl	8007f16 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007d4c:	4b04      	ldr	r3, [pc, #16]	; (8007d60 <USBD_SetConfig+0x118>)
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	4619      	mov	r1, r3
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7ff f9ad 	bl	80070b2 <USBD_ClrClassConfig>
        break;
 8007d58:	bf00      	nop
    }
  }
}
 8007d5a:	3708      	adds	r7, #8
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	200001c1 	.word	0x200001c1

08007d64 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	88db      	ldrh	r3, [r3, #6]
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d004      	beq.n	8007d80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007d76:	6839      	ldr	r1, [r7, #0]
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f8cc 	bl	8007f16 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007d7e:	e022      	b.n	8007dc6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	dc02      	bgt.n	8007d90 <USBD_GetConfig+0x2c>
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	dc03      	bgt.n	8007d96 <USBD_GetConfig+0x32>
 8007d8e:	e015      	b.n	8007dbc <USBD_GetConfig+0x58>
 8007d90:	2b03      	cmp	r3, #3
 8007d92:	d00b      	beq.n	8007dac <USBD_GetConfig+0x48>
 8007d94:	e012      	b.n	8007dbc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	3308      	adds	r3, #8
 8007da0:	2201      	movs	r2, #1
 8007da2:	4619      	mov	r1, r3
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f920 	bl	8007fea <USBD_CtlSendData>
        break;
 8007daa:	e00c      	b.n	8007dc6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	3304      	adds	r3, #4
 8007db0:	2201      	movs	r2, #1
 8007db2:	4619      	mov	r1, r3
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f918 	bl	8007fea <USBD_CtlSendData>
        break;
 8007dba:	e004      	b.n	8007dc6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007dbc:	6839      	ldr	r1, [r7, #0]
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f8a9 	bl	8007f16 <USBD_CtlError>
        break;
 8007dc4:	bf00      	nop
}
 8007dc6:	bf00      	nop
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b082      	sub	sp, #8
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dde:	3b01      	subs	r3, #1
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d81e      	bhi.n	8007e22 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	88db      	ldrh	r3, [r3, #6]
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d004      	beq.n	8007df6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f891 	bl	8007f16 <USBD_CtlError>
        break;
 8007df4:	e01a      	b.n	8007e2c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d005      	beq.n	8007e12 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	f043 0202 	orr.w	r2, r3, #2
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	330c      	adds	r3, #12
 8007e16:	2202      	movs	r2, #2
 8007e18:	4619      	mov	r1, r3
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 f8e5 	bl	8007fea <USBD_CtlSendData>
      break;
 8007e20:	e004      	b.n	8007e2c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007e22:	6839      	ldr	r1, [r7, #0]
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f876 	bl	8007f16 <USBD_CtlError>
      break;
 8007e2a:	bf00      	nop
  }
}
 8007e2c:	bf00      	nop
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	885b      	ldrh	r3, [r3, #2]
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d106      	bne.n	8007e54 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f929 	bl	80080a6 <USBD_CtlSendStatus>
  }
}
 8007e54:	bf00      	nop
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d80b      	bhi.n	8007e8a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	885b      	ldrh	r3, [r3, #2]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d10c      	bne.n	8007e94 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f90f 	bl	80080a6 <USBD_CtlSendStatus>
      }
      break;
 8007e88:	e004      	b.n	8007e94 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007e8a:	6839      	ldr	r1, [r7, #0]
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f842 	bl	8007f16 <USBD_CtlError>
      break;
 8007e92:	e000      	b.n	8007e96 <USBD_ClrFeature+0x3a>
      break;
 8007e94:	bf00      	nop
  }
}
 8007e96:	bf00      	nop
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b083      	sub	sp, #12
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	781a      	ldrb	r2, [r3, #0]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	785a      	ldrb	r2, [r3, #1]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	3302      	adds	r3, #2
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	3303      	adds	r3, #3
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	021b      	lsls	r3, r3, #8
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	4413      	add	r3, r2
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	b29a      	uxth	r2, r3
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	3305      	adds	r3, #5
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	021b      	lsls	r3, r3, #8
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	4413      	add	r3, r2
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	3306      	adds	r3, #6
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	3307      	adds	r3, #7
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	021b      	lsls	r3, r3, #8
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	4413      	add	r3, r2
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	80da      	strh	r2, [r3, #6]

}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bc80      	pop	{r7}
 8007f14:	4770      	bx	lr

08007f16 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b082      	sub	sp, #8
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
 8007f1e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007f20:	2180      	movs	r1, #128	; 0x80
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f003 fb76 	bl	800b614 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007f28:	2100      	movs	r1, #0
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f003 fb72 	bl	800b614 <USBD_LL_StallEP>
}
 8007f30:	bf00      	nop
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b086      	sub	sp, #24
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007f44:	2300      	movs	r3, #0
 8007f46:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d032      	beq.n	8007fb4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007f4e:	68f8      	ldr	r0, [r7, #12]
 8007f50:	f000 f834 	bl	8007fbc <USBD_GetLen>
 8007f54:	4603      	mov	r3, r0
 8007f56:	3301      	adds	r3, #1
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	005b      	lsls	r3, r3, #1
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007f62:	7dfb      	ldrb	r3, [r7, #23]
 8007f64:	1c5a      	adds	r2, r3, #1
 8007f66:	75fa      	strb	r2, [r7, #23]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	7812      	ldrb	r2, [r2, #0]
 8007f72:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007f74:	7dfb      	ldrb	r3, [r7, #23]
 8007f76:	1c5a      	adds	r2, r3, #1
 8007f78:	75fa      	strb	r2, [r7, #23]
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	4413      	add	r3, r2
 8007f80:	2203      	movs	r2, #3
 8007f82:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007f84:	e012      	b.n	8007fac <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	1c5a      	adds	r2, r3, #1
 8007f8a:	60fa      	str	r2, [r7, #12]
 8007f8c:	7dfa      	ldrb	r2, [r7, #23]
 8007f8e:	1c51      	adds	r1, r2, #1
 8007f90:	75f9      	strb	r1, [r7, #23]
 8007f92:	4611      	mov	r1, r2
 8007f94:	68ba      	ldr	r2, [r7, #8]
 8007f96:	440a      	add	r2, r1
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007f9c:	7dfb      	ldrb	r3, [r7, #23]
 8007f9e:	1c5a      	adds	r2, r3, #1
 8007fa0:	75fa      	strb	r2, [r7, #23]
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	2200      	movs	r2, #0
 8007faa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1e8      	bne.n	8007f86 <USBD_GetString+0x4e>
    }
  }
}
 8007fb4:	bf00      	nop
 8007fb6:	3718      	adds	r7, #24
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007fc8:	e005      	b.n	8007fd6 <USBD_GetLen+0x1a>
  {
    len++;
 8007fca:	7bfb      	ldrb	r3, [r7, #15]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1f5      	bne.n	8007fca <USBD_GetLen+0xe>
  }

  return len;
 8007fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bc80      	pop	{r7}
 8007fe8:	4770      	bx	lr

08007fea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	60f8      	str	r0, [r7, #12]
 8007ff2:	60b9      	str	r1, [r7, #8]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2202      	movs	r2, #2
 8007ffc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008000:	88fa      	ldrh	r2, [r7, #6]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008006:	88fa      	ldrh	r2, [r7, #6]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800800c:	88fb      	ldrh	r3, [r7, #6]
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	2100      	movs	r1, #0
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f003 fb87 	bl	800b726 <USBD_LL_Transmit>

  return USBD_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b084      	sub	sp, #16
 8008026:	af00      	add	r7, sp, #0
 8008028:	60f8      	str	r0, [r7, #12]
 800802a:	60b9      	str	r1, [r7, #8]
 800802c:	4613      	mov	r3, r2
 800802e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008030:	88fb      	ldrh	r3, [r7, #6]
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	2100      	movs	r1, #0
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f003 fb75 	bl	800b726 <USBD_LL_Transmit>

  return USBD_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b084      	sub	sp, #16
 800804a:	af00      	add	r7, sp, #0
 800804c:	60f8      	str	r0, [r7, #12]
 800804e:	60b9      	str	r1, [r7, #8]
 8008050:	4613      	mov	r3, r2
 8008052:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2203      	movs	r2, #3
 8008058:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800805c:	88fa      	ldrh	r2, [r7, #6]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008064:	88fa      	ldrh	r2, [r7, #6]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800806c:	88fb      	ldrh	r3, [r7, #6]
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	2100      	movs	r1, #0
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f003 fb7a 	bl	800b76c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b084      	sub	sp, #16
 8008086:	af00      	add	r7, sp, #0
 8008088:	60f8      	str	r0, [r7, #12]
 800808a:	60b9      	str	r1, [r7, #8]
 800808c:	4613      	mov	r3, r2
 800808e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008090:	88fb      	ldrh	r3, [r7, #6]
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	2100      	movs	r1, #0
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f003 fb68 	bl	800b76c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b082      	sub	sp, #8
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2204      	movs	r2, #4
 80080b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80080b6:	2300      	movs	r3, #0
 80080b8:	2200      	movs	r2, #0
 80080ba:	2100      	movs	r1, #0
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f003 fb32 	bl	800b726 <USBD_LL_Transmit>

  return USBD_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2205      	movs	r2, #5
 80080d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080dc:	2300      	movs	r3, #0
 80080de:	2200      	movs	r2, #0
 80080e0:	2100      	movs	r1, #0
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f003 fb42 	bl	800b76c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
	...

080080f4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080fa:	f3ef 8305 	mrs	r3, IPSR
 80080fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8008100:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10f      	bne.n	8008126 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008106:	f3ef 8310 	mrs	r3, PRIMASK
 800810a:	607b      	str	r3, [r7, #4]
  return(result);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d109      	bne.n	8008126 <osKernelInitialize+0x32>
 8008112:	4b10      	ldr	r3, [pc, #64]	; (8008154 <osKernelInitialize+0x60>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2b02      	cmp	r3, #2
 8008118:	d109      	bne.n	800812e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800811a:	f3ef 8311 	mrs	r3, BASEPRI
 800811e:	603b      	str	r3, [r7, #0]
  return(result);
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d003      	beq.n	800812e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008126:	f06f 0305 	mvn.w	r3, #5
 800812a:	60fb      	str	r3, [r7, #12]
 800812c:	e00c      	b.n	8008148 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800812e:	4b09      	ldr	r3, [pc, #36]	; (8008154 <osKernelInitialize+0x60>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d105      	bne.n	8008142 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8008136:	4b07      	ldr	r3, [pc, #28]	; (8008154 <osKernelInitialize+0x60>)
 8008138:	2201      	movs	r2, #1
 800813a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800813c:	2300      	movs	r3, #0
 800813e:	60fb      	str	r3, [r7, #12]
 8008140:	e002      	b.n	8008148 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008142:	f04f 33ff 	mov.w	r3, #4294967295
 8008146:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008148:	68fb      	ldr	r3, [r7, #12]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3714      	adds	r7, #20
 800814e:	46bd      	mov	sp, r7
 8008150:	bc80      	pop	{r7}
 8008152:	4770      	bx	lr
 8008154:	200001c4 	.word	0x200001c4

08008158 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800815e:	f3ef 8305 	mrs	r3, IPSR
 8008162:	60bb      	str	r3, [r7, #8]
  return(result);
 8008164:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10f      	bne.n	800818a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800816a:	f3ef 8310 	mrs	r3, PRIMASK
 800816e:	607b      	str	r3, [r7, #4]
  return(result);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d109      	bne.n	800818a <osKernelStart+0x32>
 8008176:	4b11      	ldr	r3, [pc, #68]	; (80081bc <osKernelStart+0x64>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2b02      	cmp	r3, #2
 800817c:	d109      	bne.n	8008192 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800817e:	f3ef 8311 	mrs	r3, BASEPRI
 8008182:	603b      	str	r3, [r7, #0]
  return(result);
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d003      	beq.n	8008192 <osKernelStart+0x3a>
    stat = osErrorISR;
 800818a:	f06f 0305 	mvn.w	r3, #5
 800818e:	60fb      	str	r3, [r7, #12]
 8008190:	e00e      	b.n	80081b0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8008192:	4b0a      	ldr	r3, [pc, #40]	; (80081bc <osKernelStart+0x64>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2b01      	cmp	r3, #1
 8008198:	d107      	bne.n	80081aa <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800819a:	4b08      	ldr	r3, [pc, #32]	; (80081bc <osKernelStart+0x64>)
 800819c:	2202      	movs	r2, #2
 800819e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80081a0:	f001 f9da 	bl	8009558 <vTaskStartScheduler>
      stat = osOK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	60fb      	str	r3, [r7, #12]
 80081a8:	e002      	b.n	80081b0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80081aa:	f04f 33ff 	mov.w	r3, #4294967295
 80081ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80081b0:	68fb      	ldr	r3, [r7, #12]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	200001c4 	.word	0x200001c4

080081c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b092      	sub	sp, #72	; 0x48
 80081c4:	af04      	add	r7, sp, #16
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80081cc:	2300      	movs	r3, #0
 80081ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081d0:	f3ef 8305 	mrs	r3, IPSR
 80081d4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f040 8094 	bne.w	8008306 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081de:	f3ef 8310 	mrs	r3, PRIMASK
 80081e2:	623b      	str	r3, [r7, #32]
  return(result);
 80081e4:	6a3b      	ldr	r3, [r7, #32]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f040 808d 	bne.w	8008306 <osThreadNew+0x146>
 80081ec:	4b48      	ldr	r3, [pc, #288]	; (8008310 <osThreadNew+0x150>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d106      	bne.n	8008202 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80081f4:	f3ef 8311 	mrs	r3, BASEPRI
 80081f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f040 8082 	bne.w	8008306 <osThreadNew+0x146>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d07e      	beq.n	8008306 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8008208:	2380      	movs	r3, #128	; 0x80
 800820a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800820c:	2318      	movs	r3, #24
 800820e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8008210:	2300      	movs	r3, #0
 8008212:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8008214:	f107 031b 	add.w	r3, r7, #27
 8008218:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800821a:	f04f 33ff 	mov.w	r3, #4294967295
 800821e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d045      	beq.n	80082b2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d002      	beq.n	8008234 <osThreadNew+0x74>
        name = attr->name;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d002      	beq.n	8008242 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	699b      	ldr	r3, [r3, #24]
 8008240:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008244:	2b00      	cmp	r3, #0
 8008246:	d008      	beq.n	800825a <osThreadNew+0x9a>
 8008248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824a:	2b38      	cmp	r3, #56	; 0x38
 800824c:	d805      	bhi.n	800825a <osThreadNew+0x9a>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	2b00      	cmp	r3, #0
 8008258:	d001      	beq.n	800825e <osThreadNew+0x9e>
        return (NULL);
 800825a:	2300      	movs	r3, #0
 800825c:	e054      	b.n	8008308 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d003      	beq.n	800826e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	089b      	lsrs	r3, r3, #2
 800826c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00e      	beq.n	8008294 <osThreadNew+0xd4>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	2b5b      	cmp	r3, #91	; 0x5b
 800827c:	d90a      	bls.n	8008294 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008282:	2b00      	cmp	r3, #0
 8008284:	d006      	beq.n	8008294 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d002      	beq.n	8008294 <osThreadNew+0xd4>
        mem = 1;
 800828e:	2301      	movs	r3, #1
 8008290:	62bb      	str	r3, [r7, #40]	; 0x28
 8008292:	e010      	b.n	80082b6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d10c      	bne.n	80082b6 <osThreadNew+0xf6>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d108      	bne.n	80082b6 <osThreadNew+0xf6>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d104      	bne.n	80082b6 <osThreadNew+0xf6>
          mem = 0;
 80082ac:	2300      	movs	r3, #0
 80082ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80082b0:	e001      	b.n	80082b6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80082b2:	2300      	movs	r3, #0
 80082b4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80082b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d110      	bne.n	80082de <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80082c4:	9202      	str	r2, [sp, #8]
 80082c6:	9301      	str	r3, [sp, #4]
 80082c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f000 ff74 	bl	80091c0 <xTaskCreateStatic>
 80082d8:	4603      	mov	r3, r0
 80082da:	617b      	str	r3, [r7, #20]
 80082dc:	e013      	b.n	8008306 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80082de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d110      	bne.n	8008306 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80082e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	f107 0314 	add.w	r3, r7, #20
 80082ec:	9301      	str	r3, [sp, #4]
 80082ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f000 ffbe 	bl	8009278 <xTaskCreate>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d001      	beq.n	8008306 <osThreadNew+0x146>
          hTask = NULL;
 8008302:	2300      	movs	r3, #0
 8008304:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008306:	697b      	ldr	r3, [r7, #20]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3738      	adds	r7, #56	; 0x38
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	200001c4 	.word	0x200001c4

08008314 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008314:	b580      	push	{r7, lr}
 8008316:	b086      	sub	sp, #24
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800831c:	f3ef 8305 	mrs	r3, IPSR
 8008320:	613b      	str	r3, [r7, #16]
  return(result);
 8008322:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008324:	2b00      	cmp	r3, #0
 8008326:	d10f      	bne.n	8008348 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008328:	f3ef 8310 	mrs	r3, PRIMASK
 800832c:	60fb      	str	r3, [r7, #12]
  return(result);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d109      	bne.n	8008348 <osDelay+0x34>
 8008334:	4b0d      	ldr	r3, [pc, #52]	; (800836c <osDelay+0x58>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b02      	cmp	r3, #2
 800833a:	d109      	bne.n	8008350 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800833c:	f3ef 8311 	mrs	r3, BASEPRI
 8008340:	60bb      	str	r3, [r7, #8]
  return(result);
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d003      	beq.n	8008350 <osDelay+0x3c>
    stat = osErrorISR;
 8008348:	f06f 0305 	mvn.w	r3, #5
 800834c:	617b      	str	r3, [r7, #20]
 800834e:	e007      	b.n	8008360 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008350:	2300      	movs	r3, #0
 8008352:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d002      	beq.n	8008360 <osDelay+0x4c>
      vTaskDelay(ticks);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f001 f8c8 	bl	80094f0 <vTaskDelay>
    }
  }

  return (stat);
 8008360:	697b      	ldr	r3, [r7, #20]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3718      	adds	r7, #24
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	200001c4 	.word	0x200001c4

08008370 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	4a06      	ldr	r2, [pc, #24]	; (8008398 <vApplicationGetIdleTaskMemory+0x28>)
 8008380:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	4a05      	ldr	r2, [pc, #20]	; (800839c <vApplicationGetIdleTaskMemory+0x2c>)
 8008386:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2280      	movs	r2, #128	; 0x80
 800838c:	601a      	str	r2, [r3, #0]
}
 800838e:	bf00      	nop
 8008390:	3714      	adds	r7, #20
 8008392:	46bd      	mov	sp, r7
 8008394:	bc80      	pop	{r7}
 8008396:	4770      	bx	lr
 8008398:	200001c8 	.word	0x200001c8
 800839c:	20000224 	.word	0x20000224

080083a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	4a07      	ldr	r2, [pc, #28]	; (80083cc <vApplicationGetTimerTaskMemory+0x2c>)
 80083b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	4a06      	ldr	r2, [pc, #24]	; (80083d0 <vApplicationGetTimerTaskMemory+0x30>)
 80083b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083be:	601a      	str	r2, [r3, #0]
}
 80083c0:	bf00      	nop
 80083c2:	3714      	adds	r7, #20
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bc80      	pop	{r7}
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	20000424 	.word	0x20000424
 80083d0:	20000480 	.word	0x20000480

080083d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f103 0208 	add.w	r2, r3, #8
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f04f 32ff 	mov.w	r2, #4294967295
 80083ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f103 0208 	add.w	r2, r3, #8
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f103 0208 	add.w	r2, r3, #8
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	bc80      	pop	{r7}
 8008410:	4770      	bx	lr

08008412 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008412:	b480      	push	{r7}
 8008414:	b083      	sub	sp, #12
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008420:	bf00      	nop
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	bc80      	pop	{r7}
 8008428:	4770      	bx	lr

0800842a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800842a:	b480      	push	{r7}
 800842c:	b085      	sub	sp, #20
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	689a      	ldr	r2, [r3, #8]
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	683a      	ldr	r2, [r7, #0]
 800844e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	1c5a      	adds	r2, r3, #1
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	601a      	str	r2, [r3, #0]
}
 8008466:	bf00      	nop
 8008468:	3714      	adds	r7, #20
 800846a:	46bd      	mov	sp, r7
 800846c:	bc80      	pop	{r7}
 800846e:	4770      	bx	lr

08008470 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008486:	d103      	bne.n	8008490 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	60fb      	str	r3, [r7, #12]
 800848e:	e00c      	b.n	80084aa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	3308      	adds	r3, #8
 8008494:	60fb      	str	r3, [r7, #12]
 8008496:	e002      	b.n	800849e <vListInsert+0x2e>
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	60fb      	str	r3, [r7, #12]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d2f6      	bcs.n	8008498 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	685a      	ldr	r2, [r3, #4]
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	683a      	ldr	r2, [r7, #0]
 80084c4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	1c5a      	adds	r2, r3, #1
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	601a      	str	r2, [r3, #0]
}
 80084d6:	bf00      	nop
 80084d8:	3714      	adds	r7, #20
 80084da:	46bd      	mov	sp, r7
 80084dc:	bc80      	pop	{r7}
 80084de:	4770      	bx	lr

080084e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	6892      	ldr	r2, [r2, #8]
 80084f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	6852      	ldr	r2, [r2, #4]
 8008500:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	429a      	cmp	r2, r3
 800850a:	d103      	bne.n	8008514 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	689a      	ldr	r2, [r3, #8]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	1e5a      	subs	r2, r3, #1
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3714      	adds	r7, #20
 800852c:	46bd      	mov	sp, r7
 800852e:	bc80      	pop	{r7}
 8008530:	4770      	bx	lr
	...

08008534 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10a      	bne.n	800855e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854c:	f383 8811 	msr	BASEPRI, r3
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800855a:	bf00      	nop
 800855c:	e7fe      	b.n	800855c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800855e:	f002 fa35 	bl	800a9cc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800856a:	68f9      	ldr	r1, [r7, #12]
 800856c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800856e:	fb01 f303 	mul.w	r3, r1, r3
 8008572:	441a      	add	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2200      	movs	r2, #0
 800857c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800858e:	3b01      	subs	r3, #1
 8008590:	68f9      	ldr	r1, [r7, #12]
 8008592:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008594:	fb01 f303 	mul.w	r3, r1, r3
 8008598:	441a      	add	r2, r3
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	22ff      	movs	r2, #255	; 0xff
 80085a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	22ff      	movs	r2, #255	; 0xff
 80085aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d114      	bne.n	80085de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d01a      	beq.n	80085f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	3310      	adds	r3, #16
 80085c0:	4618      	mov	r0, r3
 80085c2:	f001 fa53 	bl	8009a6c <xTaskRemoveFromEventList>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d012      	beq.n	80085f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80085cc:	4b0c      	ldr	r3, [pc, #48]	; (8008600 <xQueueGenericReset+0xcc>)
 80085ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	f3bf 8f4f 	dsb	sy
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	e009      	b.n	80085f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	3310      	adds	r3, #16
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7ff fef6 	bl	80083d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	3324      	adds	r3, #36	; 0x24
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7ff fef1 	bl	80083d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80085f2:	f002 fa1b 	bl	800aa2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80085f6:	2301      	movs	r3, #1
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	e000ed04 	.word	0xe000ed04

08008604 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008604:	b580      	push	{r7, lr}
 8008606:	b08e      	sub	sp, #56	; 0x38
 8008608:	af02      	add	r7, sp, #8
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	607a      	str	r2, [r7, #4]
 8008610:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d10a      	bne.n	800862e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861c:	f383 8811 	msr	BASEPRI, r3
 8008620:	f3bf 8f6f 	isb	sy
 8008624:	f3bf 8f4f 	dsb	sy
 8008628:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800862a:	bf00      	nop
 800862c:	e7fe      	b.n	800862c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10a      	bne.n	800864a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008638:	f383 8811 	msr	BASEPRI, r3
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008646:	bf00      	nop
 8008648:	e7fe      	b.n	8008648 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d002      	beq.n	8008656 <xQueueGenericCreateStatic+0x52>
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d001      	beq.n	800865a <xQueueGenericCreateStatic+0x56>
 8008656:	2301      	movs	r3, #1
 8008658:	e000      	b.n	800865c <xQueueGenericCreateStatic+0x58>
 800865a:	2300      	movs	r3, #0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d10a      	bne.n	8008676 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	623b      	str	r3, [r7, #32]
}
 8008672:	bf00      	nop
 8008674:	e7fe      	b.n	8008674 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d102      	bne.n	8008682 <xQueueGenericCreateStatic+0x7e>
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d101      	bne.n	8008686 <xQueueGenericCreateStatic+0x82>
 8008682:	2301      	movs	r3, #1
 8008684:	e000      	b.n	8008688 <xQueueGenericCreateStatic+0x84>
 8008686:	2300      	movs	r3, #0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d10a      	bne.n	80086a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800868c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008690:	f383 8811 	msr	BASEPRI, r3
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	f3bf 8f4f 	dsb	sy
 800869c:	61fb      	str	r3, [r7, #28]
}
 800869e:	bf00      	nop
 80086a0:	e7fe      	b.n	80086a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80086a2:	2350      	movs	r3, #80	; 0x50
 80086a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	2b50      	cmp	r3, #80	; 0x50
 80086aa:	d00a      	beq.n	80086c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80086ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b0:	f383 8811 	msr	BASEPRI, r3
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	61bb      	str	r3, [r7, #24]
}
 80086be:	bf00      	nop
 80086c0:	e7fe      	b.n	80086c0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80086c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00d      	beq.n	80086e8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80086cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086d4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80086d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086da:	9300      	str	r3, [sp, #0]
 80086dc:	4613      	mov	r3, r2
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	68b9      	ldr	r1, [r7, #8]
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f000 f843 	bl	800876e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80086e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3730      	adds	r7, #48	; 0x30
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b08a      	sub	sp, #40	; 0x28
 80086f6:	af02      	add	r7, sp, #8
 80086f8:	60f8      	str	r0, [r7, #12]
 80086fa:	60b9      	str	r1, [r7, #8]
 80086fc:	4613      	mov	r3, r2
 80086fe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10a      	bne.n	800871c <xQueueGenericCreate+0x2a>
	__asm volatile
 8008706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870a:	f383 8811 	msr	BASEPRI, r3
 800870e:	f3bf 8f6f 	isb	sy
 8008712:	f3bf 8f4f 	dsb	sy
 8008716:	613b      	str	r3, [r7, #16]
}
 8008718:	bf00      	nop
 800871a:	e7fe      	b.n	800871a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d102      	bne.n	8008728 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008722:	2300      	movs	r3, #0
 8008724:	61fb      	str	r3, [r7, #28]
 8008726:	e004      	b.n	8008732 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	fb02 f303 	mul.w	r3, r2, r3
 8008730:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	3350      	adds	r3, #80	; 0x50
 8008736:	4618      	mov	r0, r3
 8008738:	f002 fa48 	bl	800abcc <pvPortMalloc>
 800873c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00f      	beq.n	8008764 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	3350      	adds	r3, #80	; 0x50
 8008748:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	2200      	movs	r2, #0
 800874e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008752:	79fa      	ldrb	r2, [r7, #7]
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	4613      	mov	r3, r2
 800875a:	697a      	ldr	r2, [r7, #20]
 800875c:	68b9      	ldr	r1, [r7, #8]
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f000 f805 	bl	800876e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008764:	69bb      	ldr	r3, [r7, #24]
	}
 8008766:	4618      	mov	r0, r3
 8008768:	3720      	adds	r7, #32
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b084      	sub	sp, #16
 8008772:	af00      	add	r7, sp, #0
 8008774:	60f8      	str	r0, [r7, #12]
 8008776:	60b9      	str	r1, [r7, #8]
 8008778:	607a      	str	r2, [r7, #4]
 800877a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d103      	bne.n	800878a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	69ba      	ldr	r2, [r7, #24]
 8008786:	601a      	str	r2, [r3, #0]
 8008788:	e002      	b.n	8008790 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800879c:	2101      	movs	r1, #1
 800879e:	69b8      	ldr	r0, [r7, #24]
 80087a0:	f7ff fec8 	bl	8008534 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	78fa      	ldrb	r2, [r7, #3]
 80087a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80087ac:	bf00      	nop
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b08e      	sub	sp, #56	; 0x38
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
 80087c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80087c2:	2300      	movs	r3, #0
 80087c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80087ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d10a      	bne.n	80087e6 <xQueueGenericSend+0x32>
	__asm volatile
 80087d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d4:	f383 8811 	msr	BASEPRI, r3
 80087d8:	f3bf 8f6f 	isb	sy
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80087e2:	bf00      	nop
 80087e4:	e7fe      	b.n	80087e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d103      	bne.n	80087f4 <xQueueGenericSend+0x40>
 80087ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d101      	bne.n	80087f8 <xQueueGenericSend+0x44>
 80087f4:	2301      	movs	r3, #1
 80087f6:	e000      	b.n	80087fa <xQueueGenericSend+0x46>
 80087f8:	2300      	movs	r3, #0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d10a      	bne.n	8008814 <xQueueGenericSend+0x60>
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008810:	bf00      	nop
 8008812:	e7fe      	b.n	8008812 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	2b02      	cmp	r3, #2
 8008818:	d103      	bne.n	8008822 <xQueueGenericSend+0x6e>
 800881a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800881e:	2b01      	cmp	r3, #1
 8008820:	d101      	bne.n	8008826 <xQueueGenericSend+0x72>
 8008822:	2301      	movs	r3, #1
 8008824:	e000      	b.n	8008828 <xQueueGenericSend+0x74>
 8008826:	2300      	movs	r3, #0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10a      	bne.n	8008842 <xQueueGenericSend+0x8e>
	__asm volatile
 800882c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008830:	f383 8811 	msr	BASEPRI, r3
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	623b      	str	r3, [r7, #32]
}
 800883e:	bf00      	nop
 8008840:	e7fe      	b.n	8008840 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008842:	f001 fad5 	bl	8009df0 <xTaskGetSchedulerState>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d102      	bne.n	8008852 <xQueueGenericSend+0x9e>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d101      	bne.n	8008856 <xQueueGenericSend+0xa2>
 8008852:	2301      	movs	r3, #1
 8008854:	e000      	b.n	8008858 <xQueueGenericSend+0xa4>
 8008856:	2300      	movs	r3, #0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d10a      	bne.n	8008872 <xQueueGenericSend+0xbe>
	__asm volatile
 800885c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008860:	f383 8811 	msr	BASEPRI, r3
 8008864:	f3bf 8f6f 	isb	sy
 8008868:	f3bf 8f4f 	dsb	sy
 800886c:	61fb      	str	r3, [r7, #28]
}
 800886e:	bf00      	nop
 8008870:	e7fe      	b.n	8008870 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008872:	f002 f8ab 	bl	800a9cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008878:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800887a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800887e:	429a      	cmp	r2, r3
 8008880:	d302      	bcc.n	8008888 <xQueueGenericSend+0xd4>
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	2b02      	cmp	r3, #2
 8008886:	d129      	bne.n	80088dc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008888:	683a      	ldr	r2, [r7, #0]
 800888a:	68b9      	ldr	r1, [r7, #8]
 800888c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800888e:	f000 fb2a 	bl	8008ee6 <prvCopyDataToQueue>
 8008892:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008898:	2b00      	cmp	r3, #0
 800889a:	d010      	beq.n	80088be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800889c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889e:	3324      	adds	r3, #36	; 0x24
 80088a0:	4618      	mov	r0, r3
 80088a2:	f001 f8e3 	bl	8009a6c <xTaskRemoveFromEventList>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d013      	beq.n	80088d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80088ac:	4b3f      	ldr	r3, [pc, #252]	; (80089ac <xQueueGenericSend+0x1f8>)
 80088ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088b2:	601a      	str	r2, [r3, #0]
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	f3bf 8f6f 	isb	sy
 80088bc:	e00a      	b.n	80088d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80088be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d007      	beq.n	80088d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80088c4:	4b39      	ldr	r3, [pc, #228]	; (80089ac <xQueueGenericSend+0x1f8>)
 80088c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088ca:	601a      	str	r2, [r3, #0]
 80088cc:	f3bf 8f4f 	dsb	sy
 80088d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80088d4:	f002 f8aa 	bl	800aa2c <vPortExitCritical>
				return pdPASS;
 80088d8:	2301      	movs	r3, #1
 80088da:	e063      	b.n	80089a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d103      	bne.n	80088ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088e2:	f002 f8a3 	bl	800aa2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80088e6:	2300      	movs	r3, #0
 80088e8:	e05c      	b.n	80089a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d106      	bne.n	80088fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088f0:	f107 0314 	add.w	r3, r7, #20
 80088f4:	4618      	mov	r0, r3
 80088f6:	f001 f91d 	bl	8009b34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088fa:	2301      	movs	r3, #1
 80088fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088fe:	f002 f895 	bl	800aa2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008902:	f000 fe8f 	bl	8009624 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008906:	f002 f861 	bl	800a9cc <vPortEnterCritical>
 800890a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008910:	b25b      	sxtb	r3, r3
 8008912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008916:	d103      	bne.n	8008920 <xQueueGenericSend+0x16c>
 8008918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891a:	2200      	movs	r2, #0
 800891c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008922:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008926:	b25b      	sxtb	r3, r3
 8008928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892c:	d103      	bne.n	8008936 <xQueueGenericSend+0x182>
 800892e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008930:	2200      	movs	r2, #0
 8008932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008936:	f002 f879 	bl	800aa2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800893a:	1d3a      	adds	r2, r7, #4
 800893c:	f107 0314 	add.w	r3, r7, #20
 8008940:	4611      	mov	r1, r2
 8008942:	4618      	mov	r0, r3
 8008944:	f001 f90c 	bl	8009b60 <xTaskCheckForTimeOut>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d124      	bne.n	8008998 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800894e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008950:	f000 fbc1 	bl	80090d6 <prvIsQueueFull>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d018      	beq.n	800898c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800895a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895c:	3310      	adds	r3, #16
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	4611      	mov	r1, r2
 8008962:	4618      	mov	r0, r3
 8008964:	f001 f832 	bl	80099cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008968:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800896a:	f000 fb4c 	bl	8009006 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800896e:	f000 fe67 	bl	8009640 <xTaskResumeAll>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	f47f af7c 	bne.w	8008872 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800897a:	4b0c      	ldr	r3, [pc, #48]	; (80089ac <xQueueGenericSend+0x1f8>)
 800897c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008980:	601a      	str	r2, [r3, #0]
 8008982:	f3bf 8f4f 	dsb	sy
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	e772      	b.n	8008872 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800898c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800898e:	f000 fb3a 	bl	8009006 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008992:	f000 fe55 	bl	8009640 <xTaskResumeAll>
 8008996:	e76c      	b.n	8008872 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800899a:	f000 fb34 	bl	8009006 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800899e:	f000 fe4f 	bl	8009640 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80089a2:	2300      	movs	r3, #0
		}
	}
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3738      	adds	r7, #56	; 0x38
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	e000ed04 	.word	0xe000ed04

080089b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b08e      	sub	sp, #56	; 0x38
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
 80089bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80089c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d10a      	bne.n	80089de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80089c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089cc:	f383 8811 	msr	BASEPRI, r3
 80089d0:	f3bf 8f6f 	isb	sy
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80089da:	bf00      	nop
 80089dc:	e7fe      	b.n	80089dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d103      	bne.n	80089ec <xQueueGenericSendFromISR+0x3c>
 80089e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d101      	bne.n	80089f0 <xQueueGenericSendFromISR+0x40>
 80089ec:	2301      	movs	r3, #1
 80089ee:	e000      	b.n	80089f2 <xQueueGenericSendFromISR+0x42>
 80089f0:	2300      	movs	r3, #0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d10a      	bne.n	8008a0c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80089f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fa:	f383 8811 	msr	BASEPRI, r3
 80089fe:	f3bf 8f6f 	isb	sy
 8008a02:	f3bf 8f4f 	dsb	sy
 8008a06:	623b      	str	r3, [r7, #32]
}
 8008a08:	bf00      	nop
 8008a0a:	e7fe      	b.n	8008a0a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	d103      	bne.n	8008a1a <xQueueGenericSendFromISR+0x6a>
 8008a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d101      	bne.n	8008a1e <xQueueGenericSendFromISR+0x6e>
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e000      	b.n	8008a20 <xQueueGenericSendFromISR+0x70>
 8008a1e:	2300      	movs	r3, #0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d10a      	bne.n	8008a3a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a28:	f383 8811 	msr	BASEPRI, r3
 8008a2c:	f3bf 8f6f 	isb	sy
 8008a30:	f3bf 8f4f 	dsb	sy
 8008a34:	61fb      	str	r3, [r7, #28]
}
 8008a36:	bf00      	nop
 8008a38:	e7fe      	b.n	8008a38 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a3a:	f002 f889 	bl	800ab50 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008a3e:	f3ef 8211 	mrs	r2, BASEPRI
 8008a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a46:	f383 8811 	msr	BASEPRI, r3
 8008a4a:	f3bf 8f6f 	isb	sy
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	61ba      	str	r2, [r7, #24]
 8008a54:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a56:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a58:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d302      	bcc.n	8008a6c <xQueueGenericSendFromISR+0xbc>
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	2b02      	cmp	r3, #2
 8008a6a:	d12c      	bne.n	8008ac6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a76:	683a      	ldr	r2, [r7, #0]
 8008a78:	68b9      	ldr	r1, [r7, #8]
 8008a7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a7c:	f000 fa33 	bl	8008ee6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a80:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a88:	d112      	bne.n	8008ab0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d016      	beq.n	8008ac0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a94:	3324      	adds	r3, #36	; 0x24
 8008a96:	4618      	mov	r0, r3
 8008a98:	f000 ffe8 	bl	8009a6c <xTaskRemoveFromEventList>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00e      	beq.n	8008ac0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00b      	beq.n	8008ac0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	601a      	str	r2, [r3, #0]
 8008aae:	e007      	b.n	8008ac0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ab0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	b25a      	sxtb	r2, r3
 8008aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008ac4:	e001      	b.n	8008aca <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8008aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008acc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008ad4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3738      	adds	r7, #56	; 0x38
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b08c      	sub	sp, #48	; 0x30
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008aec:	2300      	movs	r3, #0
 8008aee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10a      	bne.n	8008b10 <xQueueReceive+0x30>
	__asm volatile
 8008afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	623b      	str	r3, [r7, #32]
}
 8008b0c:	bf00      	nop
 8008b0e:	e7fe      	b.n	8008b0e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d103      	bne.n	8008b1e <xQueueReceive+0x3e>
 8008b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d101      	bne.n	8008b22 <xQueueReceive+0x42>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e000      	b.n	8008b24 <xQueueReceive+0x44>
 8008b22:	2300      	movs	r3, #0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d10a      	bne.n	8008b3e <xQueueReceive+0x5e>
	__asm volatile
 8008b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2c:	f383 8811 	msr	BASEPRI, r3
 8008b30:	f3bf 8f6f 	isb	sy
 8008b34:	f3bf 8f4f 	dsb	sy
 8008b38:	61fb      	str	r3, [r7, #28]
}
 8008b3a:	bf00      	nop
 8008b3c:	e7fe      	b.n	8008b3c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b3e:	f001 f957 	bl	8009df0 <xTaskGetSchedulerState>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d102      	bne.n	8008b4e <xQueueReceive+0x6e>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d101      	bne.n	8008b52 <xQueueReceive+0x72>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e000      	b.n	8008b54 <xQueueReceive+0x74>
 8008b52:	2300      	movs	r3, #0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10a      	bne.n	8008b6e <xQueueReceive+0x8e>
	__asm volatile
 8008b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5c:	f383 8811 	msr	BASEPRI, r3
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	61bb      	str	r3, [r7, #24]
}
 8008b6a:	bf00      	nop
 8008b6c:	e7fe      	b.n	8008b6c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b6e:	f001 ff2d 	bl	800a9cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b76:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d01f      	beq.n	8008bbe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b7e:	68b9      	ldr	r1, [r7, #8]
 8008b80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b82:	f000 fa1a 	bl	8008fba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b88:	1e5a      	subs	r2, r3, #1
 8008b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00f      	beq.n	8008bb6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b98:	3310      	adds	r3, #16
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f000 ff66 	bl	8009a6c <xTaskRemoveFromEventList>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d007      	beq.n	8008bb6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ba6:	4b3d      	ldr	r3, [pc, #244]	; (8008c9c <xQueueReceive+0x1bc>)
 8008ba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bac:	601a      	str	r2, [r3, #0]
 8008bae:	f3bf 8f4f 	dsb	sy
 8008bb2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008bb6:	f001 ff39 	bl	800aa2c <vPortExitCritical>
				return pdPASS;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e069      	b.n	8008c92 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d103      	bne.n	8008bcc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008bc4:	f001 ff32 	bl	800aa2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	e062      	b.n	8008c92 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d106      	bne.n	8008be0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bd2:	f107 0310 	add.w	r3, r7, #16
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f000 ffac 	bl	8009b34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008be0:	f001 ff24 	bl	800aa2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008be4:	f000 fd1e 	bl	8009624 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008be8:	f001 fef0 	bl	800a9cc <vPortEnterCritical>
 8008bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bf2:	b25b      	sxtb	r3, r3
 8008bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bf8:	d103      	bne.n	8008c02 <xQueueReceive+0x122>
 8008bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c08:	b25b      	sxtb	r3, r3
 8008c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c0e:	d103      	bne.n	8008c18 <xQueueReceive+0x138>
 8008c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c12:	2200      	movs	r2, #0
 8008c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c18:	f001 ff08 	bl	800aa2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c1c:	1d3a      	adds	r2, r7, #4
 8008c1e:	f107 0310 	add.w	r3, r7, #16
 8008c22:	4611      	mov	r1, r2
 8008c24:	4618      	mov	r0, r3
 8008c26:	f000 ff9b 	bl	8009b60 <xTaskCheckForTimeOut>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d123      	bne.n	8008c78 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c32:	f000 fa3a 	bl	80090aa <prvIsQueueEmpty>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d017      	beq.n	8008c6c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3e:	3324      	adds	r3, #36	; 0x24
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	4611      	mov	r1, r2
 8008c44:	4618      	mov	r0, r3
 8008c46:	f000 fec1 	bl	80099cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c4c:	f000 f9db 	bl	8009006 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c50:	f000 fcf6 	bl	8009640 <xTaskResumeAll>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d189      	bne.n	8008b6e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008c5a:	4b10      	ldr	r3, [pc, #64]	; (8008c9c <xQueueReceive+0x1bc>)
 8008c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c60:	601a      	str	r2, [r3, #0]
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	e780      	b.n	8008b6e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c6e:	f000 f9ca 	bl	8009006 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c72:	f000 fce5 	bl	8009640 <xTaskResumeAll>
 8008c76:	e77a      	b.n	8008b6e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008c78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c7a:	f000 f9c4 	bl	8009006 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c7e:	f000 fcdf 	bl	8009640 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c84:	f000 fa11 	bl	80090aa <prvIsQueueEmpty>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f43f af6f 	beq.w	8008b6e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3730      	adds	r7, #48	; 0x30
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	e000ed04 	.word	0xe000ed04

08008ca0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b08e      	sub	sp, #56	; 0x38
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008caa:	2300      	movs	r3, #0
 8008cac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d10a      	bne.n	8008cd2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc0:	f383 8811 	msr	BASEPRI, r3
 8008cc4:	f3bf 8f6f 	isb	sy
 8008cc8:	f3bf 8f4f 	dsb	sy
 8008ccc:	623b      	str	r3, [r7, #32]
}
 8008cce:	bf00      	nop
 8008cd0:	e7fe      	b.n	8008cd0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00a      	beq.n	8008cf0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cde:	f383 8811 	msr	BASEPRI, r3
 8008ce2:	f3bf 8f6f 	isb	sy
 8008ce6:	f3bf 8f4f 	dsb	sy
 8008cea:	61fb      	str	r3, [r7, #28]
}
 8008cec:	bf00      	nop
 8008cee:	e7fe      	b.n	8008cee <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008cf0:	f001 f87e 	bl	8009df0 <xTaskGetSchedulerState>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d102      	bne.n	8008d00 <xQueueSemaphoreTake+0x60>
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d101      	bne.n	8008d04 <xQueueSemaphoreTake+0x64>
 8008d00:	2301      	movs	r3, #1
 8008d02:	e000      	b.n	8008d06 <xQueueSemaphoreTake+0x66>
 8008d04:	2300      	movs	r3, #0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d10a      	bne.n	8008d20 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0e:	f383 8811 	msr	BASEPRI, r3
 8008d12:	f3bf 8f6f 	isb	sy
 8008d16:	f3bf 8f4f 	dsb	sy
 8008d1a:	61bb      	str	r3, [r7, #24]
}
 8008d1c:	bf00      	nop
 8008d1e:	e7fe      	b.n	8008d1e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d20:	f001 fe54 	bl	800a9cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d28:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d024      	beq.n	8008d7a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d32:	1e5a      	subs	r2, r3, #1
 8008d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d36:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d104      	bne.n	8008d4a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008d40:	f001 f9d6 	bl	800a0f0 <pvTaskIncrementMutexHeldCount>
 8008d44:	4602      	mov	r2, r0
 8008d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d48:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00f      	beq.n	8008d72 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d54:	3310      	adds	r3, #16
 8008d56:	4618      	mov	r0, r3
 8008d58:	f000 fe88 	bl	8009a6c <xTaskRemoveFromEventList>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d007      	beq.n	8008d72 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d62:	4b54      	ldr	r3, [pc, #336]	; (8008eb4 <xQueueSemaphoreTake+0x214>)
 8008d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d68:	601a      	str	r2, [r3, #0]
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d72:	f001 fe5b 	bl	800aa2c <vPortExitCritical>
				return pdPASS;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e097      	b.n	8008eaa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d111      	bne.n	8008da4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00a      	beq.n	8008d9c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8a:	f383 8811 	msr	BASEPRI, r3
 8008d8e:	f3bf 8f6f 	isb	sy
 8008d92:	f3bf 8f4f 	dsb	sy
 8008d96:	617b      	str	r3, [r7, #20]
}
 8008d98:	bf00      	nop
 8008d9a:	e7fe      	b.n	8008d9a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008d9c:	f001 fe46 	bl	800aa2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008da0:	2300      	movs	r3, #0
 8008da2:	e082      	b.n	8008eaa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d106      	bne.n	8008db8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008daa:	f107 030c 	add.w	r3, r7, #12
 8008dae:	4618      	mov	r0, r3
 8008db0:	f000 fec0 	bl	8009b34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008db4:	2301      	movs	r3, #1
 8008db6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008db8:	f001 fe38 	bl	800aa2c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008dbc:	f000 fc32 	bl	8009624 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008dc0:	f001 fe04 	bl	800a9cc <vPortEnterCritical>
 8008dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dca:	b25b      	sxtb	r3, r3
 8008dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dd0:	d103      	bne.n	8008dda <xQueueSemaphoreTake+0x13a>
 8008dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ddc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008de0:	b25b      	sxtb	r3, r3
 8008de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de6:	d103      	bne.n	8008df0 <xQueueSemaphoreTake+0x150>
 8008de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dea:	2200      	movs	r2, #0
 8008dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008df0:	f001 fe1c 	bl	800aa2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008df4:	463a      	mov	r2, r7
 8008df6:	f107 030c 	add.w	r3, r7, #12
 8008dfa:	4611      	mov	r1, r2
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f000 feaf 	bl	8009b60 <xTaskCheckForTimeOut>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d132      	bne.n	8008e6e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e0a:	f000 f94e 	bl	80090aa <prvIsQueueEmpty>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d026      	beq.n	8008e62 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d109      	bne.n	8008e30 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008e1c:	f001 fdd6 	bl	800a9cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	4618      	mov	r0, r3
 8008e26:	f001 f801 	bl	8009e2c <xTaskPriorityInherit>
 8008e2a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008e2c:	f001 fdfe 	bl	800aa2c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e32:	3324      	adds	r3, #36	; 0x24
 8008e34:	683a      	ldr	r2, [r7, #0]
 8008e36:	4611      	mov	r1, r2
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f000 fdc7 	bl	80099cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e40:	f000 f8e1 	bl	8009006 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e44:	f000 fbfc 	bl	8009640 <xTaskResumeAll>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f47f af68 	bne.w	8008d20 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008e50:	4b18      	ldr	r3, [pc, #96]	; (8008eb4 <xQueueSemaphoreTake+0x214>)
 8008e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e56:	601a      	str	r2, [r3, #0]
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	f3bf 8f6f 	isb	sy
 8008e60:	e75e      	b.n	8008d20 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008e62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e64:	f000 f8cf 	bl	8009006 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e68:	f000 fbea 	bl	8009640 <xTaskResumeAll>
 8008e6c:	e758      	b.n	8008d20 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008e6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e70:	f000 f8c9 	bl	8009006 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e74:	f000 fbe4 	bl	8009640 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e7a:	f000 f916 	bl	80090aa <prvIsQueueEmpty>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f43f af4d 	beq.w	8008d20 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00d      	beq.n	8008ea8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008e8c:	f001 fd9e 	bl	800a9cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008e90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e92:	f000 f811 	bl	8008eb8 <prvGetDisinheritPriorityAfterTimeout>
 8008e96:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f001 f8a0 	bl	8009fe4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008ea4:	f001 fdc2 	bl	800aa2c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008ea8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3738      	adds	r7, #56	; 0x38
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	e000ed04 	.word	0xe000ed04

08008eb8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d006      	beq.n	8008ed6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008ed2:	60fb      	str	r3, [r7, #12]
 8008ed4:	e001      	b.n	8008eda <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008eda:	68fb      	ldr	r3, [r7, #12]
	}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3714      	adds	r7, #20
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bc80      	pop	{r7}
 8008ee4:	4770      	bx	lr

08008ee6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b086      	sub	sp, #24
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	60f8      	str	r0, [r7, #12]
 8008eee:	60b9      	str	r1, [r7, #8]
 8008ef0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10d      	bne.n	8008f20 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d14d      	bne.n	8008fa8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	4618      	mov	r0, r3
 8008f12:	f000 fff9 	bl	8009f08 <xTaskPriorityDisinherit>
 8008f16:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	605a      	str	r2, [r3, #4]
 8008f1e:	e043      	b.n	8008fa8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d119      	bne.n	8008f5a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6898      	ldr	r0, [r3, #8]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2e:	461a      	mov	r2, r3
 8008f30:	68b9      	ldr	r1, [r7, #8]
 8008f32:	f003 fa05 	bl	800c340 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	689a      	ldr	r2, [r3, #8]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3e:	441a      	add	r2, r3
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	689a      	ldr	r2, [r3, #8]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d32b      	bcc.n	8008fa8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	609a      	str	r2, [r3, #8]
 8008f58:	e026      	b.n	8008fa8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	68d8      	ldr	r0, [r3, #12]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f62:	461a      	mov	r2, r3
 8008f64:	68b9      	ldr	r1, [r7, #8]
 8008f66:	f003 f9eb 	bl	800c340 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	68da      	ldr	r2, [r3, #12]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f72:	425b      	negs	r3, r3
 8008f74:	441a      	add	r2, r3
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	68da      	ldr	r2, [r3, #12]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d207      	bcs.n	8008f96 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	685a      	ldr	r2, [r3, #4]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8e:	425b      	negs	r3, r3
 8008f90:	441a      	add	r2, r3
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	d105      	bne.n	8008fa8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d002      	beq.n	8008fa8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	3b01      	subs	r3, #1
 8008fa6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	1c5a      	adds	r2, r3, #1
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008fb0:	697b      	ldr	r3, [r7, #20]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3718      	adds	r7, #24
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b082      	sub	sp, #8
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d018      	beq.n	8008ffe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	68da      	ldr	r2, [r3, #12]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd4:	441a      	add	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	68da      	ldr	r2, [r3, #12]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d303      	bcc.n	8008fee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68d9      	ldr	r1, [r3, #12]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	6838      	ldr	r0, [r7, #0]
 8008ffa:	f003 f9a1 	bl	800c340 <memcpy>
	}
}
 8008ffe:	bf00      	nop
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800900e:	f001 fcdd 	bl	800a9cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009018:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800901a:	e011      	b.n	8009040 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009020:	2b00      	cmp	r3, #0
 8009022:	d012      	beq.n	800904a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	3324      	adds	r3, #36	; 0x24
 8009028:	4618      	mov	r0, r3
 800902a:	f000 fd1f 	bl	8009a6c <xTaskRemoveFromEventList>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d001      	beq.n	8009038 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009034:	f000 fdf6 	bl	8009c24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009038:	7bfb      	ldrb	r3, [r7, #15]
 800903a:	3b01      	subs	r3, #1
 800903c:	b2db      	uxtb	r3, r3
 800903e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009044:	2b00      	cmp	r3, #0
 8009046:	dce9      	bgt.n	800901c <prvUnlockQueue+0x16>
 8009048:	e000      	b.n	800904c <prvUnlockQueue+0x46>
					break;
 800904a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	22ff      	movs	r2, #255	; 0xff
 8009050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009054:	f001 fcea 	bl	800aa2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009058:	f001 fcb8 	bl	800a9cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009062:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009064:	e011      	b.n	800908a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d012      	beq.n	8009094 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	3310      	adds	r3, #16
 8009072:	4618      	mov	r0, r3
 8009074:	f000 fcfa 	bl	8009a6c <xTaskRemoveFromEventList>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d001      	beq.n	8009082 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800907e:	f000 fdd1 	bl	8009c24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009082:	7bbb      	ldrb	r3, [r7, #14]
 8009084:	3b01      	subs	r3, #1
 8009086:	b2db      	uxtb	r3, r3
 8009088:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800908a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800908e:	2b00      	cmp	r3, #0
 8009090:	dce9      	bgt.n	8009066 <prvUnlockQueue+0x60>
 8009092:	e000      	b.n	8009096 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009094:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	22ff      	movs	r2, #255	; 0xff
 800909a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800909e:	f001 fcc5 	bl	800aa2c <vPortExitCritical>
}
 80090a2:	bf00      	nop
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b084      	sub	sp, #16
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090b2:	f001 fc8b 	bl	800a9cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d102      	bne.n	80090c4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80090be:	2301      	movs	r3, #1
 80090c0:	60fb      	str	r3, [r7, #12]
 80090c2:	e001      	b.n	80090c8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80090c4:	2300      	movs	r3, #0
 80090c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090c8:	f001 fcb0 	bl	800aa2c <vPortExitCritical>

	return xReturn;
 80090cc:	68fb      	ldr	r3, [r7, #12]
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b084      	sub	sp, #16
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090de:	f001 fc75 	bl	800a9cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d102      	bne.n	80090f4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80090ee:	2301      	movs	r3, #1
 80090f0:	60fb      	str	r3, [r7, #12]
 80090f2:	e001      	b.n	80090f8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80090f4:	2300      	movs	r3, #0
 80090f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090f8:	f001 fc98 	bl	800aa2c <vPortExitCritical>

	return xReturn;
 80090fc:	68fb      	ldr	r3, [r7, #12]
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
	...

08009108 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009112:	2300      	movs	r3, #0
 8009114:	60fb      	str	r3, [r7, #12]
 8009116:	e014      	b.n	8009142 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009118:	4a0e      	ldr	r2, [pc, #56]	; (8009154 <vQueueAddToRegistry+0x4c>)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d10b      	bne.n	800913c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009124:	490b      	ldr	r1, [pc, #44]	; (8009154 <vQueueAddToRegistry+0x4c>)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	683a      	ldr	r2, [r7, #0]
 800912a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800912e:	4a09      	ldr	r2, [pc, #36]	; (8009154 <vQueueAddToRegistry+0x4c>)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	00db      	lsls	r3, r3, #3
 8009134:	4413      	add	r3, r2
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800913a:	e006      	b.n	800914a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	3301      	adds	r3, #1
 8009140:	60fb      	str	r3, [r7, #12]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2b07      	cmp	r3, #7
 8009146:	d9e7      	bls.n	8009118 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009148:	bf00      	nop
 800914a:	bf00      	nop
 800914c:	3714      	adds	r7, #20
 800914e:	46bd      	mov	sp, r7
 8009150:	bc80      	pop	{r7}
 8009152:	4770      	bx	lr
 8009154:	20003a9c 	.word	0x20003a9c

08009158 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009158:	b580      	push	{r7, lr}
 800915a:	b086      	sub	sp, #24
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009168:	f001 fc30 	bl	800a9cc <vPortEnterCritical>
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009172:	b25b      	sxtb	r3, r3
 8009174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009178:	d103      	bne.n	8009182 <vQueueWaitForMessageRestricted+0x2a>
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009188:	b25b      	sxtb	r3, r3
 800918a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800918e:	d103      	bne.n	8009198 <vQueueWaitForMessageRestricted+0x40>
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	2200      	movs	r2, #0
 8009194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009198:	f001 fc48 	bl	800aa2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d106      	bne.n	80091b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	3324      	adds	r3, #36	; 0x24
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	68b9      	ldr	r1, [r7, #8]
 80091ac:	4618      	mov	r0, r3
 80091ae:	f000 fc31 	bl	8009a14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80091b2:	6978      	ldr	r0, [r7, #20]
 80091b4:	f7ff ff27 	bl	8009006 <prvUnlockQueue>
	}
 80091b8:	bf00      	nop
 80091ba:	3718      	adds	r7, #24
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b08e      	sub	sp, #56	; 0x38
 80091c4:	af04      	add	r7, sp, #16
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
 80091cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80091ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d10a      	bne.n	80091ea <xTaskCreateStatic+0x2a>
	__asm volatile
 80091d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d8:	f383 8811 	msr	BASEPRI, r3
 80091dc:	f3bf 8f6f 	isb	sy
 80091e0:	f3bf 8f4f 	dsb	sy
 80091e4:	623b      	str	r3, [r7, #32]
}
 80091e6:	bf00      	nop
 80091e8:	e7fe      	b.n	80091e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80091ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d10a      	bne.n	8009206 <xTaskCreateStatic+0x46>
	__asm volatile
 80091f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f4:	f383 8811 	msr	BASEPRI, r3
 80091f8:	f3bf 8f6f 	isb	sy
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	61fb      	str	r3, [r7, #28]
}
 8009202:	bf00      	nop
 8009204:	e7fe      	b.n	8009204 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009206:	235c      	movs	r3, #92	; 0x5c
 8009208:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	2b5c      	cmp	r3, #92	; 0x5c
 800920e:	d00a      	beq.n	8009226 <xTaskCreateStatic+0x66>
	__asm volatile
 8009210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009214:	f383 8811 	msr	BASEPRI, r3
 8009218:	f3bf 8f6f 	isb	sy
 800921c:	f3bf 8f4f 	dsb	sy
 8009220:	61bb      	str	r3, [r7, #24]
}
 8009222:	bf00      	nop
 8009224:	e7fe      	b.n	8009224 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009228:	2b00      	cmp	r3, #0
 800922a:	d01e      	beq.n	800926a <xTaskCreateStatic+0xaa>
 800922c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800922e:	2b00      	cmp	r3, #0
 8009230:	d01b      	beq.n	800926a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009234:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009238:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800923a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800923c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923e:	2202      	movs	r2, #2
 8009240:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009244:	2300      	movs	r3, #0
 8009246:	9303      	str	r3, [sp, #12]
 8009248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924a:	9302      	str	r3, [sp, #8]
 800924c:	f107 0314 	add.w	r3, r7, #20
 8009250:	9301      	str	r3, [sp, #4]
 8009252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	68b9      	ldr	r1, [r7, #8]
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f000 f850 	bl	8009302 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009262:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009264:	f000 f8d4 	bl	8009410 <prvAddNewTaskToReadyList>
 8009268:	e001      	b.n	800926e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800926a:	2300      	movs	r3, #0
 800926c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800926e:	697b      	ldr	r3, [r7, #20]
	}
 8009270:	4618      	mov	r0, r3
 8009272:	3728      	adds	r7, #40	; 0x28
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009278:	b580      	push	{r7, lr}
 800927a:	b08c      	sub	sp, #48	; 0x30
 800927c:	af04      	add	r7, sp, #16
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	603b      	str	r3, [r7, #0]
 8009284:	4613      	mov	r3, r2
 8009286:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009288:	88fb      	ldrh	r3, [r7, #6]
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	4618      	mov	r0, r3
 800928e:	f001 fc9d 	bl	800abcc <pvPortMalloc>
 8009292:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00e      	beq.n	80092b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800929a:	205c      	movs	r0, #92	; 0x5c
 800929c:	f001 fc96 	bl	800abcc <pvPortMalloc>
 80092a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d003      	beq.n	80092b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	697a      	ldr	r2, [r7, #20]
 80092ac:	631a      	str	r2, [r3, #48]	; 0x30
 80092ae:	e005      	b.n	80092bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80092b0:	6978      	ldr	r0, [r7, #20]
 80092b2:	f001 fd4f 	bl	800ad54 <vPortFree>
 80092b6:	e001      	b.n	80092bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80092b8:	2300      	movs	r3, #0
 80092ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d017      	beq.n	80092f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80092ca:	88fa      	ldrh	r2, [r7, #6]
 80092cc:	2300      	movs	r3, #0
 80092ce:	9303      	str	r3, [sp, #12]
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	9302      	str	r3, [sp, #8]
 80092d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d6:	9301      	str	r3, [sp, #4]
 80092d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092da:	9300      	str	r3, [sp, #0]
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	68b9      	ldr	r1, [r7, #8]
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f000 f80e 	bl	8009302 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092e6:	69f8      	ldr	r0, [r7, #28]
 80092e8:	f000 f892 	bl	8009410 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80092ec:	2301      	movs	r3, #1
 80092ee:	61bb      	str	r3, [r7, #24]
 80092f0:	e002      	b.n	80092f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80092f2:	f04f 33ff 	mov.w	r3, #4294967295
 80092f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80092f8:	69bb      	ldr	r3, [r7, #24]
	}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3720      	adds	r7, #32
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b088      	sub	sp, #32
 8009306:	af00      	add	r7, sp, #0
 8009308:	60f8      	str	r0, [r7, #12]
 800930a:	60b9      	str	r1, [r7, #8]
 800930c:	607a      	str	r2, [r7, #4]
 800930e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009312:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	461a      	mov	r2, r3
 800931a:	21a5      	movs	r1, #165	; 0xa5
 800931c:	f003 f81e 	bl	800c35c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009322:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800932a:	3b01      	subs	r3, #1
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	4413      	add	r3, r2
 8009330:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	f023 0307 	bic.w	r3, r3, #7
 8009338:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	f003 0307 	and.w	r3, r3, #7
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00a      	beq.n	800935a <prvInitialiseNewTask+0x58>
	__asm volatile
 8009344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009348:	f383 8811 	msr	BASEPRI, r3
 800934c:	f3bf 8f6f 	isb	sy
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	617b      	str	r3, [r7, #20]
}
 8009356:	bf00      	nop
 8009358:	e7fe      	b.n	8009358 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800935a:	2300      	movs	r3, #0
 800935c:	61fb      	str	r3, [r7, #28]
 800935e:	e012      	b.n	8009386 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009360:	68ba      	ldr	r2, [r7, #8]
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	4413      	add	r3, r2
 8009366:	7819      	ldrb	r1, [r3, #0]
 8009368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	4413      	add	r3, r2
 800936e:	3334      	adds	r3, #52	; 0x34
 8009370:	460a      	mov	r2, r1
 8009372:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	4413      	add	r3, r2
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d006      	beq.n	800938e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	3301      	adds	r3, #1
 8009384:	61fb      	str	r3, [r7, #28]
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	2b0f      	cmp	r3, #15
 800938a:	d9e9      	bls.n	8009360 <prvInitialiseNewTask+0x5e>
 800938c:	e000      	b.n	8009390 <prvInitialiseNewTask+0x8e>
		{
			break;
 800938e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009392:	2200      	movs	r2, #0
 8009394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939a:	2b37      	cmp	r3, #55	; 0x37
 800939c:	d901      	bls.n	80093a2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800939e:	2337      	movs	r3, #55	; 0x37
 80093a0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80093a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093a6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80093a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093ac:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80093ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b0:	2200      	movs	r2, #0
 80093b2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80093b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b6:	3304      	adds	r3, #4
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7ff f82a 	bl	8008412 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80093be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c0:	3318      	adds	r3, #24
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7ff f825 	bl	8008412 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80093c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80093d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80093d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093dc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80093de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e0:	2200      	movs	r2, #0
 80093e2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80093e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e6:	2200      	movs	r2, #0
 80093e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80093ec:	683a      	ldr	r2, [r7, #0]
 80093ee:	68f9      	ldr	r1, [r7, #12]
 80093f0:	69b8      	ldr	r0, [r7, #24]
 80093f2:	f001 f9f7 	bl	800a7e4 <pxPortInitialiseStack>
 80093f6:	4602      	mov	r2, r0
 80093f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80093fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d002      	beq.n	8009408 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009406:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009408:	bf00      	nop
 800940a:	3720      	adds	r7, #32
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009418:	f001 fad8 	bl	800a9cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800941c:	4b2d      	ldr	r3, [pc, #180]	; (80094d4 <prvAddNewTaskToReadyList+0xc4>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	3301      	adds	r3, #1
 8009422:	4a2c      	ldr	r2, [pc, #176]	; (80094d4 <prvAddNewTaskToReadyList+0xc4>)
 8009424:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009426:	4b2c      	ldr	r3, [pc, #176]	; (80094d8 <prvAddNewTaskToReadyList+0xc8>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d109      	bne.n	8009442 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800942e:	4a2a      	ldr	r2, [pc, #168]	; (80094d8 <prvAddNewTaskToReadyList+0xc8>)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009434:	4b27      	ldr	r3, [pc, #156]	; (80094d4 <prvAddNewTaskToReadyList+0xc4>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2b01      	cmp	r3, #1
 800943a:	d110      	bne.n	800945e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800943c:	f000 fc16 	bl	8009c6c <prvInitialiseTaskLists>
 8009440:	e00d      	b.n	800945e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009442:	4b26      	ldr	r3, [pc, #152]	; (80094dc <prvAddNewTaskToReadyList+0xcc>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d109      	bne.n	800945e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800944a:	4b23      	ldr	r3, [pc, #140]	; (80094d8 <prvAddNewTaskToReadyList+0xc8>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009454:	429a      	cmp	r2, r3
 8009456:	d802      	bhi.n	800945e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009458:	4a1f      	ldr	r2, [pc, #124]	; (80094d8 <prvAddNewTaskToReadyList+0xc8>)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800945e:	4b20      	ldr	r3, [pc, #128]	; (80094e0 <prvAddNewTaskToReadyList+0xd0>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	3301      	adds	r3, #1
 8009464:	4a1e      	ldr	r2, [pc, #120]	; (80094e0 <prvAddNewTaskToReadyList+0xd0>)
 8009466:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009468:	4b1d      	ldr	r3, [pc, #116]	; (80094e0 <prvAddNewTaskToReadyList+0xd0>)
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009474:	4b1b      	ldr	r3, [pc, #108]	; (80094e4 <prvAddNewTaskToReadyList+0xd4>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	429a      	cmp	r2, r3
 800947a:	d903      	bls.n	8009484 <prvAddNewTaskToReadyList+0x74>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009480:	4a18      	ldr	r2, [pc, #96]	; (80094e4 <prvAddNewTaskToReadyList+0xd4>)
 8009482:	6013      	str	r3, [r2, #0]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009488:	4613      	mov	r3, r2
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	4413      	add	r3, r2
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	4a15      	ldr	r2, [pc, #84]	; (80094e8 <prvAddNewTaskToReadyList+0xd8>)
 8009492:	441a      	add	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	3304      	adds	r3, #4
 8009498:	4619      	mov	r1, r3
 800949a:	4610      	mov	r0, r2
 800949c:	f7fe ffc5 	bl	800842a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80094a0:	f001 fac4 	bl	800aa2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80094a4:	4b0d      	ldr	r3, [pc, #52]	; (80094dc <prvAddNewTaskToReadyList+0xcc>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00e      	beq.n	80094ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80094ac:	4b0a      	ldr	r3, [pc, #40]	; (80094d8 <prvAddNewTaskToReadyList+0xc8>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d207      	bcs.n	80094ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80094ba:	4b0c      	ldr	r3, [pc, #48]	; (80094ec <prvAddNewTaskToReadyList+0xdc>)
 80094bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094c0:	601a      	str	r2, [r3, #0]
 80094c2:	f3bf 8f4f 	dsb	sy
 80094c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094ca:	bf00      	nop
 80094cc:	3708      	adds	r7, #8
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	20000d54 	.word	0x20000d54
 80094d8:	20000880 	.word	0x20000880
 80094dc:	20000d60 	.word	0x20000d60
 80094e0:	20000d70 	.word	0x20000d70
 80094e4:	20000d5c 	.word	0x20000d5c
 80094e8:	20000884 	.word	0x20000884
 80094ec:	e000ed04 	.word	0xe000ed04

080094f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80094f8:	2300      	movs	r3, #0
 80094fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d017      	beq.n	8009532 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009502:	4b13      	ldr	r3, [pc, #76]	; (8009550 <vTaskDelay+0x60>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00a      	beq.n	8009520 <vTaskDelay+0x30>
	__asm volatile
 800950a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950e:	f383 8811 	msr	BASEPRI, r3
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	60bb      	str	r3, [r7, #8]
}
 800951c:	bf00      	nop
 800951e:	e7fe      	b.n	800951e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009520:	f000 f880 	bl	8009624 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009524:	2100      	movs	r1, #0
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 fdf6 	bl	800a118 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800952c:	f000 f888 	bl	8009640 <xTaskResumeAll>
 8009530:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d107      	bne.n	8009548 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009538:	4b06      	ldr	r3, [pc, #24]	; (8009554 <vTaskDelay+0x64>)
 800953a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800953e:	601a      	str	r2, [r3, #0]
 8009540:	f3bf 8f4f 	dsb	sy
 8009544:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009548:	bf00      	nop
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	20000d7c 	.word	0x20000d7c
 8009554:	e000ed04 	.word	0xe000ed04

08009558 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b08a      	sub	sp, #40	; 0x28
 800955c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800955e:	2300      	movs	r3, #0
 8009560:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009562:	2300      	movs	r3, #0
 8009564:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009566:	463a      	mov	r2, r7
 8009568:	1d39      	adds	r1, r7, #4
 800956a:	f107 0308 	add.w	r3, r7, #8
 800956e:	4618      	mov	r0, r3
 8009570:	f7fe fefe 	bl	8008370 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009574:	6839      	ldr	r1, [r7, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68ba      	ldr	r2, [r7, #8]
 800957a:	9202      	str	r2, [sp, #8]
 800957c:	9301      	str	r3, [sp, #4]
 800957e:	2300      	movs	r3, #0
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	2300      	movs	r3, #0
 8009584:	460a      	mov	r2, r1
 8009586:	4921      	ldr	r1, [pc, #132]	; (800960c <vTaskStartScheduler+0xb4>)
 8009588:	4821      	ldr	r0, [pc, #132]	; (8009610 <vTaskStartScheduler+0xb8>)
 800958a:	f7ff fe19 	bl	80091c0 <xTaskCreateStatic>
 800958e:	4603      	mov	r3, r0
 8009590:	4a20      	ldr	r2, [pc, #128]	; (8009614 <vTaskStartScheduler+0xbc>)
 8009592:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009594:	4b1f      	ldr	r3, [pc, #124]	; (8009614 <vTaskStartScheduler+0xbc>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d002      	beq.n	80095a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800959c:	2301      	movs	r3, #1
 800959e:	617b      	str	r3, [r7, #20]
 80095a0:	e001      	b.n	80095a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80095a2:	2300      	movs	r3, #0
 80095a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d102      	bne.n	80095b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80095ac:	f000 fe08 	bl	800a1c0 <xTimerCreateTimerTask>
 80095b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d116      	bne.n	80095e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80095b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095bc:	f383 8811 	msr	BASEPRI, r3
 80095c0:	f3bf 8f6f 	isb	sy
 80095c4:	f3bf 8f4f 	dsb	sy
 80095c8:	613b      	str	r3, [r7, #16]
}
 80095ca:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80095cc:	4b12      	ldr	r3, [pc, #72]	; (8009618 <vTaskStartScheduler+0xc0>)
 80095ce:	f04f 32ff 	mov.w	r2, #4294967295
 80095d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80095d4:	4b11      	ldr	r3, [pc, #68]	; (800961c <vTaskStartScheduler+0xc4>)
 80095d6:	2201      	movs	r2, #1
 80095d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80095da:	4b11      	ldr	r3, [pc, #68]	; (8009620 <vTaskStartScheduler+0xc8>)
 80095dc:	2200      	movs	r2, #0
 80095de:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80095e0:	f001 f982 	bl	800a8e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80095e4:	e00e      	b.n	8009604 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ec:	d10a      	bne.n	8009604 <vTaskStartScheduler+0xac>
	__asm volatile
 80095ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f2:	f383 8811 	msr	BASEPRI, r3
 80095f6:	f3bf 8f6f 	isb	sy
 80095fa:	f3bf 8f4f 	dsb	sy
 80095fe:	60fb      	str	r3, [r7, #12]
}
 8009600:	bf00      	nop
 8009602:	e7fe      	b.n	8009602 <vTaskStartScheduler+0xaa>
}
 8009604:	bf00      	nop
 8009606:	3718      	adds	r7, #24
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	0800c3a0 	.word	0x0800c3a0
 8009610:	08009c3d 	.word	0x08009c3d
 8009614:	20000d78 	.word	0x20000d78
 8009618:	20000d74 	.word	0x20000d74
 800961c:	20000d60 	.word	0x20000d60
 8009620:	20000d58 	.word	0x20000d58

08009624 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009624:	b480      	push	{r7}
 8009626:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009628:	4b04      	ldr	r3, [pc, #16]	; (800963c <vTaskSuspendAll+0x18>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	3301      	adds	r3, #1
 800962e:	4a03      	ldr	r2, [pc, #12]	; (800963c <vTaskSuspendAll+0x18>)
 8009630:	6013      	str	r3, [r2, #0]
}
 8009632:	bf00      	nop
 8009634:	46bd      	mov	sp, r7
 8009636:	bc80      	pop	{r7}
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	20000d7c 	.word	0x20000d7c

08009640 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009646:	2300      	movs	r3, #0
 8009648:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800964a:	2300      	movs	r3, #0
 800964c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800964e:	4b42      	ldr	r3, [pc, #264]	; (8009758 <xTaskResumeAll+0x118>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10a      	bne.n	800966c <xTaskResumeAll+0x2c>
	__asm volatile
 8009656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965a:	f383 8811 	msr	BASEPRI, r3
 800965e:	f3bf 8f6f 	isb	sy
 8009662:	f3bf 8f4f 	dsb	sy
 8009666:	603b      	str	r3, [r7, #0]
}
 8009668:	bf00      	nop
 800966a:	e7fe      	b.n	800966a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800966c:	f001 f9ae 	bl	800a9cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009670:	4b39      	ldr	r3, [pc, #228]	; (8009758 <xTaskResumeAll+0x118>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	3b01      	subs	r3, #1
 8009676:	4a38      	ldr	r2, [pc, #224]	; (8009758 <xTaskResumeAll+0x118>)
 8009678:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800967a:	4b37      	ldr	r3, [pc, #220]	; (8009758 <xTaskResumeAll+0x118>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d162      	bne.n	8009748 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009682:	4b36      	ldr	r3, [pc, #216]	; (800975c <xTaskResumeAll+0x11c>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d05e      	beq.n	8009748 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800968a:	e02f      	b.n	80096ec <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800968c:	4b34      	ldr	r3, [pc, #208]	; (8009760 <xTaskResumeAll+0x120>)
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	3318      	adds	r3, #24
 8009698:	4618      	mov	r0, r3
 800969a:	f7fe ff21 	bl	80084e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	3304      	adds	r3, #4
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fe ff1c 	bl	80084e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ac:	4b2d      	ldr	r3, [pc, #180]	; (8009764 <xTaskResumeAll+0x124>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d903      	bls.n	80096bc <xTaskResumeAll+0x7c>
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b8:	4a2a      	ldr	r2, [pc, #168]	; (8009764 <xTaskResumeAll+0x124>)
 80096ba:	6013      	str	r3, [r2, #0]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c0:	4613      	mov	r3, r2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	4413      	add	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4a27      	ldr	r2, [pc, #156]	; (8009768 <xTaskResumeAll+0x128>)
 80096ca:	441a      	add	r2, r3
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	3304      	adds	r3, #4
 80096d0:	4619      	mov	r1, r3
 80096d2:	4610      	mov	r0, r2
 80096d4:	f7fe fea9 	bl	800842a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096dc:	4b23      	ldr	r3, [pc, #140]	; (800976c <xTaskResumeAll+0x12c>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d302      	bcc.n	80096ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80096e6:	4b22      	ldr	r3, [pc, #136]	; (8009770 <xTaskResumeAll+0x130>)
 80096e8:	2201      	movs	r2, #1
 80096ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096ec:	4b1c      	ldr	r3, [pc, #112]	; (8009760 <xTaskResumeAll+0x120>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d1cb      	bne.n	800968c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d001      	beq.n	80096fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80096fa:	f000 fb55 	bl	8009da8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80096fe:	4b1d      	ldr	r3, [pc, #116]	; (8009774 <xTaskResumeAll+0x134>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d010      	beq.n	800972c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800970a:	f000 f845 	bl	8009798 <xTaskIncrementTick>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d002      	beq.n	800971a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009714:	4b16      	ldr	r3, [pc, #88]	; (8009770 <xTaskResumeAll+0x130>)
 8009716:	2201      	movs	r2, #1
 8009718:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	3b01      	subs	r3, #1
 800971e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1f1      	bne.n	800970a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009726:	4b13      	ldr	r3, [pc, #76]	; (8009774 <xTaskResumeAll+0x134>)
 8009728:	2200      	movs	r2, #0
 800972a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800972c:	4b10      	ldr	r3, [pc, #64]	; (8009770 <xTaskResumeAll+0x130>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d009      	beq.n	8009748 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009734:	2301      	movs	r3, #1
 8009736:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009738:	4b0f      	ldr	r3, [pc, #60]	; (8009778 <xTaskResumeAll+0x138>)
 800973a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800973e:	601a      	str	r2, [r3, #0]
 8009740:	f3bf 8f4f 	dsb	sy
 8009744:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009748:	f001 f970 	bl	800aa2c <vPortExitCritical>

	return xAlreadyYielded;
 800974c:	68bb      	ldr	r3, [r7, #8]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	20000d7c 	.word	0x20000d7c
 800975c:	20000d54 	.word	0x20000d54
 8009760:	20000d14 	.word	0x20000d14
 8009764:	20000d5c 	.word	0x20000d5c
 8009768:	20000884 	.word	0x20000884
 800976c:	20000880 	.word	0x20000880
 8009770:	20000d68 	.word	0x20000d68
 8009774:	20000d64 	.word	0x20000d64
 8009778:	e000ed04 	.word	0xe000ed04

0800977c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009782:	4b04      	ldr	r3, [pc, #16]	; (8009794 <xTaskGetTickCount+0x18>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009788:	687b      	ldr	r3, [r7, #4]
}
 800978a:	4618      	mov	r0, r3
 800978c:	370c      	adds	r7, #12
 800978e:	46bd      	mov	sp, r7
 8009790:	bc80      	pop	{r7}
 8009792:	4770      	bx	lr
 8009794:	20000d58 	.word	0x20000d58

08009798 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b086      	sub	sp, #24
 800979c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800979e:	2300      	movs	r3, #0
 80097a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097a2:	4b51      	ldr	r3, [pc, #324]	; (80098e8 <xTaskIncrementTick+0x150>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f040 808e 	bne.w	80098c8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80097ac:	4b4f      	ldr	r3, [pc, #316]	; (80098ec <xTaskIncrementTick+0x154>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	3301      	adds	r3, #1
 80097b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80097b4:	4a4d      	ldr	r2, [pc, #308]	; (80098ec <xTaskIncrementTick+0x154>)
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d120      	bne.n	8009802 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80097c0:	4b4b      	ldr	r3, [pc, #300]	; (80098f0 <xTaskIncrementTick+0x158>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00a      	beq.n	80097e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80097ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ce:	f383 8811 	msr	BASEPRI, r3
 80097d2:	f3bf 8f6f 	isb	sy
 80097d6:	f3bf 8f4f 	dsb	sy
 80097da:	603b      	str	r3, [r7, #0]
}
 80097dc:	bf00      	nop
 80097de:	e7fe      	b.n	80097de <xTaskIncrementTick+0x46>
 80097e0:	4b43      	ldr	r3, [pc, #268]	; (80098f0 <xTaskIncrementTick+0x158>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	60fb      	str	r3, [r7, #12]
 80097e6:	4b43      	ldr	r3, [pc, #268]	; (80098f4 <xTaskIncrementTick+0x15c>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a41      	ldr	r2, [pc, #260]	; (80098f0 <xTaskIncrementTick+0x158>)
 80097ec:	6013      	str	r3, [r2, #0]
 80097ee:	4a41      	ldr	r2, [pc, #260]	; (80098f4 <xTaskIncrementTick+0x15c>)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6013      	str	r3, [r2, #0]
 80097f4:	4b40      	ldr	r3, [pc, #256]	; (80098f8 <xTaskIncrementTick+0x160>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	3301      	adds	r3, #1
 80097fa:	4a3f      	ldr	r2, [pc, #252]	; (80098f8 <xTaskIncrementTick+0x160>)
 80097fc:	6013      	str	r3, [r2, #0]
 80097fe:	f000 fad3 	bl	8009da8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009802:	4b3e      	ldr	r3, [pc, #248]	; (80098fc <xTaskIncrementTick+0x164>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	693a      	ldr	r2, [r7, #16]
 8009808:	429a      	cmp	r2, r3
 800980a:	d34e      	bcc.n	80098aa <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800980c:	4b38      	ldr	r3, [pc, #224]	; (80098f0 <xTaskIncrementTick+0x158>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d101      	bne.n	800981a <xTaskIncrementTick+0x82>
 8009816:	2301      	movs	r3, #1
 8009818:	e000      	b.n	800981c <xTaskIncrementTick+0x84>
 800981a:	2300      	movs	r3, #0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d004      	beq.n	800982a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009820:	4b36      	ldr	r3, [pc, #216]	; (80098fc <xTaskIncrementTick+0x164>)
 8009822:	f04f 32ff 	mov.w	r2, #4294967295
 8009826:	601a      	str	r2, [r3, #0]
					break;
 8009828:	e03f      	b.n	80098aa <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800982a:	4b31      	ldr	r3, [pc, #196]	; (80098f0 <xTaskIncrementTick+0x158>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800983a:	693a      	ldr	r2, [r7, #16]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	429a      	cmp	r2, r3
 8009840:	d203      	bcs.n	800984a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009842:	4a2e      	ldr	r2, [pc, #184]	; (80098fc <xTaskIncrementTick+0x164>)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6013      	str	r3, [r2, #0]
						break;
 8009848:	e02f      	b.n	80098aa <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	3304      	adds	r3, #4
 800984e:	4618      	mov	r0, r3
 8009850:	f7fe fe46 	bl	80084e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009858:	2b00      	cmp	r3, #0
 800985a:	d004      	beq.n	8009866 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	3318      	adds	r3, #24
 8009860:	4618      	mov	r0, r3
 8009862:	f7fe fe3d 	bl	80084e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800986a:	4b25      	ldr	r3, [pc, #148]	; (8009900 <xTaskIncrementTick+0x168>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	429a      	cmp	r2, r3
 8009870:	d903      	bls.n	800987a <xTaskIncrementTick+0xe2>
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009876:	4a22      	ldr	r2, [pc, #136]	; (8009900 <xTaskIncrementTick+0x168>)
 8009878:	6013      	str	r3, [r2, #0]
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800987e:	4613      	mov	r3, r2
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	4413      	add	r3, r2
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	4a1f      	ldr	r2, [pc, #124]	; (8009904 <xTaskIncrementTick+0x16c>)
 8009888:	441a      	add	r2, r3
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	3304      	adds	r3, #4
 800988e:	4619      	mov	r1, r3
 8009890:	4610      	mov	r0, r2
 8009892:	f7fe fdca 	bl	800842a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800989a:	4b1b      	ldr	r3, [pc, #108]	; (8009908 <xTaskIncrementTick+0x170>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d3b3      	bcc.n	800980c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80098a4:	2301      	movs	r3, #1
 80098a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098a8:	e7b0      	b.n	800980c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80098aa:	4b17      	ldr	r3, [pc, #92]	; (8009908 <xTaskIncrementTick+0x170>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098b0:	4914      	ldr	r1, [pc, #80]	; (8009904 <xTaskIncrementTick+0x16c>)
 80098b2:	4613      	mov	r3, r2
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	4413      	add	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	440b      	add	r3, r1
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d907      	bls.n	80098d2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80098c2:	2301      	movs	r3, #1
 80098c4:	617b      	str	r3, [r7, #20]
 80098c6:	e004      	b.n	80098d2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80098c8:	4b10      	ldr	r3, [pc, #64]	; (800990c <xTaskIncrementTick+0x174>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	3301      	adds	r3, #1
 80098ce:	4a0f      	ldr	r2, [pc, #60]	; (800990c <xTaskIncrementTick+0x174>)
 80098d0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80098d2:	4b0f      	ldr	r3, [pc, #60]	; (8009910 <xTaskIncrementTick+0x178>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d001      	beq.n	80098de <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80098da:	2301      	movs	r3, #1
 80098dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80098de:	697b      	ldr	r3, [r7, #20]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3718      	adds	r7, #24
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	20000d7c 	.word	0x20000d7c
 80098ec:	20000d58 	.word	0x20000d58
 80098f0:	20000d0c 	.word	0x20000d0c
 80098f4:	20000d10 	.word	0x20000d10
 80098f8:	20000d6c 	.word	0x20000d6c
 80098fc:	20000d74 	.word	0x20000d74
 8009900:	20000d5c 	.word	0x20000d5c
 8009904:	20000884 	.word	0x20000884
 8009908:	20000880 	.word	0x20000880
 800990c:	20000d64 	.word	0x20000d64
 8009910:	20000d68 	.word	0x20000d68

08009914 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009914:	b480      	push	{r7}
 8009916:	b085      	sub	sp, #20
 8009918:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800991a:	4b27      	ldr	r3, [pc, #156]	; (80099b8 <vTaskSwitchContext+0xa4>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d003      	beq.n	800992a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009922:	4b26      	ldr	r3, [pc, #152]	; (80099bc <vTaskSwitchContext+0xa8>)
 8009924:	2201      	movs	r2, #1
 8009926:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009928:	e041      	b.n	80099ae <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800992a:	4b24      	ldr	r3, [pc, #144]	; (80099bc <vTaskSwitchContext+0xa8>)
 800992c:	2200      	movs	r2, #0
 800992e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009930:	4b23      	ldr	r3, [pc, #140]	; (80099c0 <vTaskSwitchContext+0xac>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	60fb      	str	r3, [r7, #12]
 8009936:	e010      	b.n	800995a <vTaskSwitchContext+0x46>
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d10a      	bne.n	8009954 <vTaskSwitchContext+0x40>
	__asm volatile
 800993e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009942:	f383 8811 	msr	BASEPRI, r3
 8009946:	f3bf 8f6f 	isb	sy
 800994a:	f3bf 8f4f 	dsb	sy
 800994e:	607b      	str	r3, [r7, #4]
}
 8009950:	bf00      	nop
 8009952:	e7fe      	b.n	8009952 <vTaskSwitchContext+0x3e>
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	3b01      	subs	r3, #1
 8009958:	60fb      	str	r3, [r7, #12]
 800995a:	491a      	ldr	r1, [pc, #104]	; (80099c4 <vTaskSwitchContext+0xb0>)
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	4613      	mov	r3, r2
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4413      	add	r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	440b      	add	r3, r1
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d0e4      	beq.n	8009938 <vTaskSwitchContext+0x24>
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	4613      	mov	r3, r2
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	4413      	add	r3, r2
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4a12      	ldr	r2, [pc, #72]	; (80099c4 <vTaskSwitchContext+0xb0>)
 800997a:	4413      	add	r3, r2
 800997c:	60bb      	str	r3, [r7, #8]
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	685a      	ldr	r2, [r3, #4]
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	605a      	str	r2, [r3, #4]
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	685a      	ldr	r2, [r3, #4]
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	3308      	adds	r3, #8
 8009990:	429a      	cmp	r2, r3
 8009992:	d104      	bne.n	800999e <vTaskSwitchContext+0x8a>
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	605a      	str	r2, [r3, #4]
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	4a08      	ldr	r2, [pc, #32]	; (80099c8 <vTaskSwitchContext+0xb4>)
 80099a6:	6013      	str	r3, [r2, #0]
 80099a8:	4a05      	ldr	r2, [pc, #20]	; (80099c0 <vTaskSwitchContext+0xac>)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6013      	str	r3, [r2, #0]
}
 80099ae:	bf00      	nop
 80099b0:	3714      	adds	r7, #20
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bc80      	pop	{r7}
 80099b6:	4770      	bx	lr
 80099b8:	20000d7c 	.word	0x20000d7c
 80099bc:	20000d68 	.word	0x20000d68
 80099c0:	20000d5c 	.word	0x20000d5c
 80099c4:	20000884 	.word	0x20000884
 80099c8:	20000880 	.word	0x20000880

080099cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d10a      	bne.n	80099f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80099dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e0:	f383 8811 	msr	BASEPRI, r3
 80099e4:	f3bf 8f6f 	isb	sy
 80099e8:	f3bf 8f4f 	dsb	sy
 80099ec:	60fb      	str	r3, [r7, #12]
}
 80099ee:	bf00      	nop
 80099f0:	e7fe      	b.n	80099f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099f2:	4b07      	ldr	r3, [pc, #28]	; (8009a10 <vTaskPlaceOnEventList+0x44>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	3318      	adds	r3, #24
 80099f8:	4619      	mov	r1, r3
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f7fe fd38 	bl	8008470 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a00:	2101      	movs	r1, #1
 8009a02:	6838      	ldr	r0, [r7, #0]
 8009a04:	f000 fb88 	bl	800a118 <prvAddCurrentTaskToDelayedList>
}
 8009a08:	bf00      	nop
 8009a0a:	3710      	adds	r7, #16
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	20000880 	.word	0x20000880

08009a14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b086      	sub	sp, #24
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d10a      	bne.n	8009a3c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2a:	f383 8811 	msr	BASEPRI, r3
 8009a2e:	f3bf 8f6f 	isb	sy
 8009a32:	f3bf 8f4f 	dsb	sy
 8009a36:	617b      	str	r3, [r7, #20]
}
 8009a38:	bf00      	nop
 8009a3a:	e7fe      	b.n	8009a3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a3c:	4b0a      	ldr	r3, [pc, #40]	; (8009a68 <vTaskPlaceOnEventListRestricted+0x54>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	3318      	adds	r3, #24
 8009a42:	4619      	mov	r1, r3
 8009a44:	68f8      	ldr	r0, [r7, #12]
 8009a46:	f7fe fcf0 	bl	800842a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d002      	beq.n	8009a56 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009a50:	f04f 33ff 	mov.w	r3, #4294967295
 8009a54:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009a56:	6879      	ldr	r1, [r7, #4]
 8009a58:	68b8      	ldr	r0, [r7, #8]
 8009a5a:	f000 fb5d 	bl	800a118 <prvAddCurrentTaskToDelayedList>
	}
 8009a5e:	bf00      	nop
 8009a60:	3718      	adds	r7, #24
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	20000880 	.word	0x20000880

08009a6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	68db      	ldr	r3, [r3, #12]
 8009a7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d10a      	bne.n	8009a98 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a86:	f383 8811 	msr	BASEPRI, r3
 8009a8a:	f3bf 8f6f 	isb	sy
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	60fb      	str	r3, [r7, #12]
}
 8009a94:	bf00      	nop
 8009a96:	e7fe      	b.n	8009a96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	3318      	adds	r3, #24
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7fe fd1f 	bl	80084e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009aa2:	4b1e      	ldr	r3, [pc, #120]	; (8009b1c <xTaskRemoveFromEventList+0xb0>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d11d      	bne.n	8009ae6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	3304      	adds	r3, #4
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7fe fd16 	bl	80084e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ab8:	4b19      	ldr	r3, [pc, #100]	; (8009b20 <xTaskRemoveFromEventList+0xb4>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d903      	bls.n	8009ac8 <xTaskRemoveFromEventList+0x5c>
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac4:	4a16      	ldr	r2, [pc, #88]	; (8009b20 <xTaskRemoveFromEventList+0xb4>)
 8009ac6:	6013      	str	r3, [r2, #0]
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009acc:	4613      	mov	r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	4413      	add	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4a13      	ldr	r2, [pc, #76]	; (8009b24 <xTaskRemoveFromEventList+0xb8>)
 8009ad6:	441a      	add	r2, r3
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	3304      	adds	r3, #4
 8009adc:	4619      	mov	r1, r3
 8009ade:	4610      	mov	r0, r2
 8009ae0:	f7fe fca3 	bl	800842a <vListInsertEnd>
 8009ae4:	e005      	b.n	8009af2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	3318      	adds	r3, #24
 8009aea:	4619      	mov	r1, r3
 8009aec:	480e      	ldr	r0, [pc, #56]	; (8009b28 <xTaskRemoveFromEventList+0xbc>)
 8009aee:	f7fe fc9c 	bl	800842a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af6:	4b0d      	ldr	r3, [pc, #52]	; (8009b2c <xTaskRemoveFromEventList+0xc0>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d905      	bls.n	8009b0c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009b00:	2301      	movs	r3, #1
 8009b02:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009b04:	4b0a      	ldr	r3, [pc, #40]	; (8009b30 <xTaskRemoveFromEventList+0xc4>)
 8009b06:	2201      	movs	r2, #1
 8009b08:	601a      	str	r2, [r3, #0]
 8009b0a:	e001      	b.n	8009b10 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009b10:	697b      	ldr	r3, [r7, #20]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3718      	adds	r7, #24
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	20000d7c 	.word	0x20000d7c
 8009b20:	20000d5c 	.word	0x20000d5c
 8009b24:	20000884 	.word	0x20000884
 8009b28:	20000d14 	.word	0x20000d14
 8009b2c:	20000880 	.word	0x20000880
 8009b30:	20000d68 	.word	0x20000d68

08009b34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b3c:	4b06      	ldr	r3, [pc, #24]	; (8009b58 <vTaskInternalSetTimeOutState+0x24>)
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b44:	4b05      	ldr	r3, [pc, #20]	; (8009b5c <vTaskInternalSetTimeOutState+0x28>)
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	605a      	str	r2, [r3, #4]
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bc80      	pop	{r7}
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop
 8009b58:	20000d6c 	.word	0x20000d6c
 8009b5c:	20000d58 	.word	0x20000d58

08009b60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b088      	sub	sp, #32
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d10a      	bne.n	8009b86 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b74:	f383 8811 	msr	BASEPRI, r3
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	f3bf 8f4f 	dsb	sy
 8009b80:	613b      	str	r3, [r7, #16]
}
 8009b82:	bf00      	nop
 8009b84:	e7fe      	b.n	8009b84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d10a      	bne.n	8009ba2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b90:	f383 8811 	msr	BASEPRI, r3
 8009b94:	f3bf 8f6f 	isb	sy
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	60fb      	str	r3, [r7, #12]
}
 8009b9e:	bf00      	nop
 8009ba0:	e7fe      	b.n	8009ba0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009ba2:	f000 ff13 	bl	800a9cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009ba6:	4b1d      	ldr	r3, [pc, #116]	; (8009c1c <xTaskCheckForTimeOut+0xbc>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	69ba      	ldr	r2, [r7, #24]
 8009bb2:	1ad3      	subs	r3, r2, r3
 8009bb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bbe:	d102      	bne.n	8009bc6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	61fb      	str	r3, [r7, #28]
 8009bc4:	e023      	b.n	8009c0e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	4b15      	ldr	r3, [pc, #84]	; (8009c20 <xTaskCheckForTimeOut+0xc0>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d007      	beq.n	8009be2 <xTaskCheckForTimeOut+0x82>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	69ba      	ldr	r2, [r7, #24]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d302      	bcc.n	8009be2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	61fb      	str	r3, [r7, #28]
 8009be0:	e015      	b.n	8009c0e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	697a      	ldr	r2, [r7, #20]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d20b      	bcs.n	8009c04 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	1ad2      	subs	r2, r2, r3
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f7ff ff9b 	bl	8009b34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	61fb      	str	r3, [r7, #28]
 8009c02:	e004      	b.n	8009c0e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	2200      	movs	r2, #0
 8009c08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009c0e:	f000 ff0d 	bl	800aa2c <vPortExitCritical>

	return xReturn;
 8009c12:	69fb      	ldr	r3, [r7, #28]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3720      	adds	r7, #32
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	20000d58 	.word	0x20000d58
 8009c20:	20000d6c 	.word	0x20000d6c

08009c24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c24:	b480      	push	{r7}
 8009c26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c28:	4b03      	ldr	r3, [pc, #12]	; (8009c38 <vTaskMissedYield+0x14>)
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	601a      	str	r2, [r3, #0]
}
 8009c2e:	bf00      	nop
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bc80      	pop	{r7}
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	20000d68 	.word	0x20000d68

08009c3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c44:	f000 f852 	bl	8009cec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c48:	4b06      	ldr	r3, [pc, #24]	; (8009c64 <prvIdleTask+0x28>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d9f9      	bls.n	8009c44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c50:	4b05      	ldr	r3, [pc, #20]	; (8009c68 <prvIdleTask+0x2c>)
 8009c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c56:	601a      	str	r2, [r3, #0]
 8009c58:	f3bf 8f4f 	dsb	sy
 8009c5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c60:	e7f0      	b.n	8009c44 <prvIdleTask+0x8>
 8009c62:	bf00      	nop
 8009c64:	20000884 	.word	0x20000884
 8009c68:	e000ed04 	.word	0xe000ed04

08009c6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c72:	2300      	movs	r3, #0
 8009c74:	607b      	str	r3, [r7, #4]
 8009c76:	e00c      	b.n	8009c92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4413      	add	r3, r2
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4a12      	ldr	r2, [pc, #72]	; (8009ccc <prvInitialiseTaskLists+0x60>)
 8009c84:	4413      	add	r3, r2
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7fe fba4 	bl	80083d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	607b      	str	r3, [r7, #4]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2b37      	cmp	r3, #55	; 0x37
 8009c96:	d9ef      	bls.n	8009c78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c98:	480d      	ldr	r0, [pc, #52]	; (8009cd0 <prvInitialiseTaskLists+0x64>)
 8009c9a:	f7fe fb9b 	bl	80083d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c9e:	480d      	ldr	r0, [pc, #52]	; (8009cd4 <prvInitialiseTaskLists+0x68>)
 8009ca0:	f7fe fb98 	bl	80083d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009ca4:	480c      	ldr	r0, [pc, #48]	; (8009cd8 <prvInitialiseTaskLists+0x6c>)
 8009ca6:	f7fe fb95 	bl	80083d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009caa:	480c      	ldr	r0, [pc, #48]	; (8009cdc <prvInitialiseTaskLists+0x70>)
 8009cac:	f7fe fb92 	bl	80083d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009cb0:	480b      	ldr	r0, [pc, #44]	; (8009ce0 <prvInitialiseTaskLists+0x74>)
 8009cb2:	f7fe fb8f 	bl	80083d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009cb6:	4b0b      	ldr	r3, [pc, #44]	; (8009ce4 <prvInitialiseTaskLists+0x78>)
 8009cb8:	4a05      	ldr	r2, [pc, #20]	; (8009cd0 <prvInitialiseTaskLists+0x64>)
 8009cba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009cbc:	4b0a      	ldr	r3, [pc, #40]	; (8009ce8 <prvInitialiseTaskLists+0x7c>)
 8009cbe:	4a05      	ldr	r2, [pc, #20]	; (8009cd4 <prvInitialiseTaskLists+0x68>)
 8009cc0:	601a      	str	r2, [r3, #0]
}
 8009cc2:	bf00      	nop
 8009cc4:	3708      	adds	r7, #8
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	20000884 	.word	0x20000884
 8009cd0:	20000ce4 	.word	0x20000ce4
 8009cd4:	20000cf8 	.word	0x20000cf8
 8009cd8:	20000d14 	.word	0x20000d14
 8009cdc:	20000d28 	.word	0x20000d28
 8009ce0:	20000d40 	.word	0x20000d40
 8009ce4:	20000d0c 	.word	0x20000d0c
 8009ce8:	20000d10 	.word	0x20000d10

08009cec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cf2:	e019      	b.n	8009d28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009cf4:	f000 fe6a 	bl	800a9cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009cf8:	4b10      	ldr	r3, [pc, #64]	; (8009d3c <prvCheckTasksWaitingTermination+0x50>)
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	3304      	adds	r3, #4
 8009d04:	4618      	mov	r0, r3
 8009d06:	f7fe fbeb 	bl	80084e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d0a:	4b0d      	ldr	r3, [pc, #52]	; (8009d40 <prvCheckTasksWaitingTermination+0x54>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	3b01      	subs	r3, #1
 8009d10:	4a0b      	ldr	r2, [pc, #44]	; (8009d40 <prvCheckTasksWaitingTermination+0x54>)
 8009d12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d14:	4b0b      	ldr	r3, [pc, #44]	; (8009d44 <prvCheckTasksWaitingTermination+0x58>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	4a0a      	ldr	r2, [pc, #40]	; (8009d44 <prvCheckTasksWaitingTermination+0x58>)
 8009d1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009d1e:	f000 fe85 	bl	800aa2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 f810 	bl	8009d48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d28:	4b06      	ldr	r3, [pc, #24]	; (8009d44 <prvCheckTasksWaitingTermination+0x58>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d1e1      	bne.n	8009cf4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d30:	bf00      	nop
 8009d32:	bf00      	nop
 8009d34:	3708      	adds	r7, #8
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	20000d28 	.word	0x20000d28
 8009d40:	20000d54 	.word	0x20000d54
 8009d44:	20000d3c 	.word	0x20000d3c

08009d48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d108      	bne.n	8009d6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f000 fff8 	bl	800ad54 <vPortFree>
				vPortFree( pxTCB );
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 fff5 	bl	800ad54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d6a:	e018      	b.n	8009d9e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d103      	bne.n	8009d7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 ffec 	bl	800ad54 <vPortFree>
	}
 8009d7c:	e00f      	b.n	8009d9e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009d84:	2b02      	cmp	r3, #2
 8009d86:	d00a      	beq.n	8009d9e <prvDeleteTCB+0x56>
	__asm volatile
 8009d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8c:	f383 8811 	msr	BASEPRI, r3
 8009d90:	f3bf 8f6f 	isb	sy
 8009d94:	f3bf 8f4f 	dsb	sy
 8009d98:	60fb      	str	r3, [r7, #12]
}
 8009d9a:	bf00      	nop
 8009d9c:	e7fe      	b.n	8009d9c <prvDeleteTCB+0x54>
	}
 8009d9e:	bf00      	nop
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
	...

08009da8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009da8:	b480      	push	{r7}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dae:	4b0e      	ldr	r3, [pc, #56]	; (8009de8 <prvResetNextTaskUnblockTime+0x40>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d101      	bne.n	8009dbc <prvResetNextTaskUnblockTime+0x14>
 8009db8:	2301      	movs	r3, #1
 8009dba:	e000      	b.n	8009dbe <prvResetNextTaskUnblockTime+0x16>
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d004      	beq.n	8009dcc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009dc2:	4b0a      	ldr	r3, [pc, #40]	; (8009dec <prvResetNextTaskUnblockTime+0x44>)
 8009dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8009dc8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009dca:	e008      	b.n	8009dde <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009dcc:	4b06      	ldr	r3, [pc, #24]	; (8009de8 <prvResetNextTaskUnblockTime+0x40>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	4a04      	ldr	r2, [pc, #16]	; (8009dec <prvResetNextTaskUnblockTime+0x44>)
 8009ddc:	6013      	str	r3, [r2, #0]
}
 8009dde:	bf00      	nop
 8009de0:	370c      	adds	r7, #12
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bc80      	pop	{r7}
 8009de6:	4770      	bx	lr
 8009de8:	20000d0c 	.word	0x20000d0c
 8009dec:	20000d74 	.word	0x20000d74

08009df0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009df6:	4b0b      	ldr	r3, [pc, #44]	; (8009e24 <xTaskGetSchedulerState+0x34>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d102      	bne.n	8009e04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	607b      	str	r3, [r7, #4]
 8009e02:	e008      	b.n	8009e16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e04:	4b08      	ldr	r3, [pc, #32]	; (8009e28 <xTaskGetSchedulerState+0x38>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d102      	bne.n	8009e12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e0c:	2302      	movs	r3, #2
 8009e0e:	607b      	str	r3, [r7, #4]
 8009e10:	e001      	b.n	8009e16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e12:	2300      	movs	r3, #0
 8009e14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009e16:	687b      	ldr	r3, [r7, #4]
	}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	370c      	adds	r7, #12
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bc80      	pop	{r7}
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	20000d60 	.word	0x20000d60
 8009e28:	20000d7c 	.word	0x20000d7c

08009e2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d056      	beq.n	8009ef0 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e46:	4b2d      	ldr	r3, [pc, #180]	; (8009efc <xTaskPriorityInherit+0xd0>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d246      	bcs.n	8009ede <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	699b      	ldr	r3, [r3, #24]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	db06      	blt.n	8009e66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e58:	4b28      	ldr	r3, [pc, #160]	; (8009efc <xTaskPriorityInherit+0xd0>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	6959      	ldr	r1, [r3, #20]
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e6e:	4613      	mov	r3, r2
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	4413      	add	r3, r2
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	4a22      	ldr	r2, [pc, #136]	; (8009f00 <xTaskPriorityInherit+0xd4>)
 8009e78:	4413      	add	r3, r2
 8009e7a:	4299      	cmp	r1, r3
 8009e7c:	d101      	bne.n	8009e82 <xTaskPriorityInherit+0x56>
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e000      	b.n	8009e84 <xTaskPriorityInherit+0x58>
 8009e82:	2300      	movs	r3, #0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d022      	beq.n	8009ece <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	3304      	adds	r3, #4
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7fe fb27 	bl	80084e0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009e92:	4b1a      	ldr	r3, [pc, #104]	; (8009efc <xTaskPriorityInherit+0xd0>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea0:	4b18      	ldr	r3, [pc, #96]	; (8009f04 <xTaskPriorityInherit+0xd8>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d903      	bls.n	8009eb0 <xTaskPriorityInherit+0x84>
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eac:	4a15      	ldr	r2, [pc, #84]	; (8009f04 <xTaskPriorityInherit+0xd8>)
 8009eae:	6013      	str	r3, [r2, #0]
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eb4:	4613      	mov	r3, r2
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	4413      	add	r3, r2
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	4a10      	ldr	r2, [pc, #64]	; (8009f00 <xTaskPriorityInherit+0xd4>)
 8009ebe:	441a      	add	r2, r3
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	3304      	adds	r3, #4
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	4610      	mov	r0, r2
 8009ec8:	f7fe faaf 	bl	800842a <vListInsertEnd>
 8009ecc:	e004      	b.n	8009ed8 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009ece:	4b0b      	ldr	r3, [pc, #44]	; (8009efc <xTaskPriorityInherit+0xd0>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	60fb      	str	r3, [r7, #12]
 8009edc:	e008      	b.n	8009ef0 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ee2:	4b06      	ldr	r3, [pc, #24]	; (8009efc <xTaskPriorityInherit+0xd0>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d201      	bcs.n	8009ef0 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009eec:	2301      	movs	r3, #1
 8009eee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
	}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	20000880 	.word	0x20000880
 8009f00:	20000884 	.word	0x20000884
 8009f04:	20000d5c 	.word	0x20000d5c

08009f08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009f14:	2300      	movs	r3, #0
 8009f16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d056      	beq.n	8009fcc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009f1e:	4b2e      	ldr	r3, [pc, #184]	; (8009fd8 <xTaskPriorityDisinherit+0xd0>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	693a      	ldr	r2, [r7, #16]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d00a      	beq.n	8009f3e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2c:	f383 8811 	msr	BASEPRI, r3
 8009f30:	f3bf 8f6f 	isb	sy
 8009f34:	f3bf 8f4f 	dsb	sy
 8009f38:	60fb      	str	r3, [r7, #12]
}
 8009f3a:	bf00      	nop
 8009f3c:	e7fe      	b.n	8009f3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d10a      	bne.n	8009f5c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4a:	f383 8811 	msr	BASEPRI, r3
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	60bb      	str	r3, [r7, #8]
}
 8009f58:	bf00      	nop
 8009f5a:	e7fe      	b.n	8009f5a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f60:	1e5a      	subs	r2, r3, #1
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d02c      	beq.n	8009fcc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d128      	bne.n	8009fcc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	3304      	adds	r3, #4
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7fe faae 	bl	80084e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f9c:	4b0f      	ldr	r3, [pc, #60]	; (8009fdc <xTaskPriorityDisinherit+0xd4>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d903      	bls.n	8009fac <xTaskPriorityDisinherit+0xa4>
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa8:	4a0c      	ldr	r2, [pc, #48]	; (8009fdc <xTaskPriorityDisinherit+0xd4>)
 8009faa:	6013      	str	r3, [r2, #0]
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fb0:	4613      	mov	r3, r2
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	4413      	add	r3, r2
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4a09      	ldr	r2, [pc, #36]	; (8009fe0 <xTaskPriorityDisinherit+0xd8>)
 8009fba:	441a      	add	r2, r3
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	3304      	adds	r3, #4
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	4610      	mov	r0, r2
 8009fc4:	f7fe fa31 	bl	800842a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009fcc:	697b      	ldr	r3, [r7, #20]
	}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3718      	adds	r7, #24
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	20000880 	.word	0x20000880
 8009fdc:	20000d5c 	.word	0x20000d5c
 8009fe0:	20000884 	.word	0x20000884

08009fe4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b088      	sub	sp, #32
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d06f      	beq.n	800a0dc <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a000:	2b00      	cmp	r3, #0
 800a002:	d10a      	bne.n	800a01a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a008:	f383 8811 	msr	BASEPRI, r3
 800a00c:	f3bf 8f6f 	isb	sy
 800a010:	f3bf 8f4f 	dsb	sy
 800a014:	60fb      	str	r3, [r7, #12]
}
 800a016:	bf00      	nop
 800a018:	e7fe      	b.n	800a018 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a01e:	683a      	ldr	r2, [r7, #0]
 800a020:	429a      	cmp	r2, r3
 800a022:	d902      	bls.n	800a02a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	61fb      	str	r3, [r7, #28]
 800a028:	e002      	b.n	800a030 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a02e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a030:	69bb      	ldr	r3, [r7, #24]
 800a032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a034:	69fa      	ldr	r2, [r7, #28]
 800a036:	429a      	cmp	r2, r3
 800a038:	d050      	beq.n	800a0dc <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a03e:	697a      	ldr	r2, [r7, #20]
 800a040:	429a      	cmp	r2, r3
 800a042:	d14b      	bne.n	800a0dc <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a044:	4b27      	ldr	r3, [pc, #156]	; (800a0e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	69ba      	ldr	r2, [r7, #24]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d10a      	bne.n	800a064 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	60bb      	str	r3, [r7, #8]
}
 800a060:	bf00      	nop
 800a062:	e7fe      	b.n	800a062 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a068:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	69fa      	ldr	r2, [r7, #28]
 800a06e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a070:	69bb      	ldr	r3, [r7, #24]
 800a072:	699b      	ldr	r3, [r3, #24]
 800a074:	2b00      	cmp	r3, #0
 800a076:	db04      	blt.n	800a082 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a078:	69fb      	ldr	r3, [r7, #28]
 800a07a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	6959      	ldr	r1, [r3, #20]
 800a086:	693a      	ldr	r2, [r7, #16]
 800a088:	4613      	mov	r3, r2
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	4413      	add	r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	4a15      	ldr	r2, [pc, #84]	; (800a0e8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a092:	4413      	add	r3, r2
 800a094:	4299      	cmp	r1, r3
 800a096:	d101      	bne.n	800a09c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800a098:	2301      	movs	r3, #1
 800a09a:	e000      	b.n	800a09e <vTaskPriorityDisinheritAfterTimeout+0xba>
 800a09c:	2300      	movs	r3, #0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d01c      	beq.n	800a0dc <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0a2:	69bb      	ldr	r3, [r7, #24]
 800a0a4:	3304      	adds	r3, #4
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7fe fa1a 	bl	80084e0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a0ac:	69bb      	ldr	r3, [r7, #24]
 800a0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0b0:	4b0e      	ldr	r3, [pc, #56]	; (800a0ec <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d903      	bls.n	800a0c0 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0bc:	4a0b      	ldr	r2, [pc, #44]	; (800a0ec <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a0be:	6013      	str	r3, [r2, #0]
 800a0c0:	69bb      	ldr	r3, [r7, #24]
 800a0c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0c4:	4613      	mov	r3, r2
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	4413      	add	r3, r2
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	4a06      	ldr	r2, [pc, #24]	; (800a0e8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a0ce:	441a      	add	r2, r3
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	3304      	adds	r3, #4
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	4610      	mov	r0, r2
 800a0d8:	f7fe f9a7 	bl	800842a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a0dc:	bf00      	nop
 800a0de:	3720      	adds	r7, #32
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	20000880 	.word	0x20000880
 800a0e8:	20000884 	.word	0x20000884
 800a0ec:	20000d5c 	.word	0x20000d5c

0800a0f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800a0f0:	b480      	push	{r7}
 800a0f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a0f4:	4b07      	ldr	r3, [pc, #28]	; (800a114 <pvTaskIncrementMutexHeldCount+0x24>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d004      	beq.n	800a106 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a0fc:	4b05      	ldr	r3, [pc, #20]	; (800a114 <pvTaskIncrementMutexHeldCount+0x24>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a102:	3201      	adds	r2, #1
 800a104:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a106:	4b03      	ldr	r3, [pc, #12]	; (800a114 <pvTaskIncrementMutexHeldCount+0x24>)
 800a108:	681b      	ldr	r3, [r3, #0]
	}
 800a10a:	4618      	mov	r0, r3
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bc80      	pop	{r7}
 800a110:	4770      	bx	lr
 800a112:	bf00      	nop
 800a114:	20000880 	.word	0x20000880

0800a118 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a122:	4b21      	ldr	r3, [pc, #132]	; (800a1a8 <prvAddCurrentTaskToDelayedList+0x90>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a128:	4b20      	ldr	r3, [pc, #128]	; (800a1ac <prvAddCurrentTaskToDelayedList+0x94>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	3304      	adds	r3, #4
 800a12e:	4618      	mov	r0, r3
 800a130:	f7fe f9d6 	bl	80084e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a13a:	d10a      	bne.n	800a152 <prvAddCurrentTaskToDelayedList+0x3a>
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d007      	beq.n	800a152 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a142:	4b1a      	ldr	r3, [pc, #104]	; (800a1ac <prvAddCurrentTaskToDelayedList+0x94>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	3304      	adds	r3, #4
 800a148:	4619      	mov	r1, r3
 800a14a:	4819      	ldr	r0, [pc, #100]	; (800a1b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800a14c:	f7fe f96d 	bl	800842a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a150:	e026      	b.n	800a1a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4413      	add	r3, r2
 800a158:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a15a:	4b14      	ldr	r3, [pc, #80]	; (800a1ac <prvAddCurrentTaskToDelayedList+0x94>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	68ba      	ldr	r2, [r7, #8]
 800a160:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a162:	68ba      	ldr	r2, [r7, #8]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	429a      	cmp	r2, r3
 800a168:	d209      	bcs.n	800a17e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a16a:	4b12      	ldr	r3, [pc, #72]	; (800a1b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	4b0f      	ldr	r3, [pc, #60]	; (800a1ac <prvAddCurrentTaskToDelayedList+0x94>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	3304      	adds	r3, #4
 800a174:	4619      	mov	r1, r3
 800a176:	4610      	mov	r0, r2
 800a178:	f7fe f97a 	bl	8008470 <vListInsert>
}
 800a17c:	e010      	b.n	800a1a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a17e:	4b0e      	ldr	r3, [pc, #56]	; (800a1b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	4b0a      	ldr	r3, [pc, #40]	; (800a1ac <prvAddCurrentTaskToDelayedList+0x94>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	3304      	adds	r3, #4
 800a188:	4619      	mov	r1, r3
 800a18a:	4610      	mov	r0, r2
 800a18c:	f7fe f970 	bl	8008470 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a190:	4b0a      	ldr	r3, [pc, #40]	; (800a1bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	68ba      	ldr	r2, [r7, #8]
 800a196:	429a      	cmp	r2, r3
 800a198:	d202      	bcs.n	800a1a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a19a:	4a08      	ldr	r2, [pc, #32]	; (800a1bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	6013      	str	r3, [r2, #0]
}
 800a1a0:	bf00      	nop
 800a1a2:	3710      	adds	r7, #16
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	20000d58 	.word	0x20000d58
 800a1ac:	20000880 	.word	0x20000880
 800a1b0:	20000d40 	.word	0x20000d40
 800a1b4:	20000d10 	.word	0x20000d10
 800a1b8:	20000d0c 	.word	0x20000d0c
 800a1bc:	20000d74 	.word	0x20000d74

0800a1c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b08a      	sub	sp, #40	; 0x28
 800a1c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a1ca:	f000 facb 	bl	800a764 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a1ce:	4b1c      	ldr	r3, [pc, #112]	; (800a240 <xTimerCreateTimerTask+0x80>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d021      	beq.n	800a21a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a1de:	1d3a      	adds	r2, r7, #4
 800a1e0:	f107 0108 	add.w	r1, r7, #8
 800a1e4:	f107 030c 	add.w	r3, r7, #12
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f7fe f8d9 	bl	80083a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a1ee:	6879      	ldr	r1, [r7, #4]
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	68fa      	ldr	r2, [r7, #12]
 800a1f4:	9202      	str	r2, [sp, #8]
 800a1f6:	9301      	str	r3, [sp, #4]
 800a1f8:	2302      	movs	r3, #2
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	460a      	mov	r2, r1
 800a200:	4910      	ldr	r1, [pc, #64]	; (800a244 <xTimerCreateTimerTask+0x84>)
 800a202:	4811      	ldr	r0, [pc, #68]	; (800a248 <xTimerCreateTimerTask+0x88>)
 800a204:	f7fe ffdc 	bl	80091c0 <xTaskCreateStatic>
 800a208:	4603      	mov	r3, r0
 800a20a:	4a10      	ldr	r2, [pc, #64]	; (800a24c <xTimerCreateTimerTask+0x8c>)
 800a20c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a20e:	4b0f      	ldr	r3, [pc, #60]	; (800a24c <xTimerCreateTimerTask+0x8c>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d001      	beq.n	800a21a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a216:	2301      	movs	r3, #1
 800a218:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d10a      	bne.n	800a236 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a224:	f383 8811 	msr	BASEPRI, r3
 800a228:	f3bf 8f6f 	isb	sy
 800a22c:	f3bf 8f4f 	dsb	sy
 800a230:	613b      	str	r3, [r7, #16]
}
 800a232:	bf00      	nop
 800a234:	e7fe      	b.n	800a234 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a236:	697b      	ldr	r3, [r7, #20]
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3718      	adds	r7, #24
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	20000db0 	.word	0x20000db0
 800a244:	0800c3a8 	.word	0x0800c3a8
 800a248:	0800a36d 	.word	0x0800a36d
 800a24c:	20000db4 	.word	0x20000db4

0800a250 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b08a      	sub	sp, #40	; 0x28
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	607a      	str	r2, [r7, #4]
 800a25c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a25e:	2300      	movs	r3, #0
 800a260:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d10a      	bne.n	800a27e <xTimerGenericCommand+0x2e>
	__asm volatile
 800a268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26c:	f383 8811 	msr	BASEPRI, r3
 800a270:	f3bf 8f6f 	isb	sy
 800a274:	f3bf 8f4f 	dsb	sy
 800a278:	623b      	str	r3, [r7, #32]
}
 800a27a:	bf00      	nop
 800a27c:	e7fe      	b.n	800a27c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a27e:	4b1a      	ldr	r3, [pc, #104]	; (800a2e8 <xTimerGenericCommand+0x98>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d02a      	beq.n	800a2dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	2b05      	cmp	r3, #5
 800a296:	dc18      	bgt.n	800a2ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a298:	f7ff fdaa 	bl	8009df0 <xTaskGetSchedulerState>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b02      	cmp	r3, #2
 800a2a0:	d109      	bne.n	800a2b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a2a2:	4b11      	ldr	r3, [pc, #68]	; (800a2e8 <xTimerGenericCommand+0x98>)
 800a2a4:	6818      	ldr	r0, [r3, #0]
 800a2a6:	f107 0110 	add.w	r1, r7, #16
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2ae:	f7fe fa81 	bl	80087b4 <xQueueGenericSend>
 800a2b2:	6278      	str	r0, [r7, #36]	; 0x24
 800a2b4:	e012      	b.n	800a2dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a2b6:	4b0c      	ldr	r3, [pc, #48]	; (800a2e8 <xTimerGenericCommand+0x98>)
 800a2b8:	6818      	ldr	r0, [r3, #0]
 800a2ba:	f107 0110 	add.w	r1, r7, #16
 800a2be:	2300      	movs	r3, #0
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f7fe fa77 	bl	80087b4 <xQueueGenericSend>
 800a2c6:	6278      	str	r0, [r7, #36]	; 0x24
 800a2c8:	e008      	b.n	800a2dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a2ca:	4b07      	ldr	r3, [pc, #28]	; (800a2e8 <xTimerGenericCommand+0x98>)
 800a2cc:	6818      	ldr	r0, [r3, #0]
 800a2ce:	f107 0110 	add.w	r1, r7, #16
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	683a      	ldr	r2, [r7, #0]
 800a2d6:	f7fe fb6b 	bl	80089b0 <xQueueGenericSendFromISR>
 800a2da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3728      	adds	r7, #40	; 0x28
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	20000db0 	.word	0x20000db0

0800a2ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b088      	sub	sp, #32
 800a2f0:	af02      	add	r7, sp, #8
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a2f6:	4b1c      	ldr	r3, [pc, #112]	; (800a368 <prvProcessExpiredTimer+0x7c>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	3304      	adds	r3, #4
 800a304:	4618      	mov	r0, r3
 800a306:	f7fe f8eb 	bl	80084e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	69db      	ldr	r3, [r3, #28]
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d122      	bne.n	800a358 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	699a      	ldr	r2, [r3, #24]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	18d1      	adds	r1, r2, r3
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	683a      	ldr	r2, [r7, #0]
 800a31e:	6978      	ldr	r0, [r7, #20]
 800a320:	f000 f8c8 	bl	800a4b4 <prvInsertTimerInActiveList>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d016      	beq.n	800a358 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a32a:	2300      	movs	r3, #0
 800a32c:	9300      	str	r3, [sp, #0]
 800a32e:	2300      	movs	r3, #0
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	2100      	movs	r1, #0
 800a334:	6978      	ldr	r0, [r7, #20]
 800a336:	f7ff ff8b 	bl	800a250 <xTimerGenericCommand>
 800a33a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d10a      	bne.n	800a358 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800a342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a346:	f383 8811 	msr	BASEPRI, r3
 800a34a:	f3bf 8f6f 	isb	sy
 800a34e:	f3bf 8f4f 	dsb	sy
 800a352:	60fb      	str	r3, [r7, #12]
}
 800a354:	bf00      	nop
 800a356:	e7fe      	b.n	800a356 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35c:	6978      	ldr	r0, [r7, #20]
 800a35e:	4798      	blx	r3
}
 800a360:	bf00      	nop
 800a362:	3718      	adds	r7, #24
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	20000da8 	.word	0x20000da8

0800a36c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a374:	f107 0308 	add.w	r3, r7, #8
 800a378:	4618      	mov	r0, r3
 800a37a:	f000 f857 	bl	800a42c <prvGetNextExpireTime>
 800a37e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	4619      	mov	r1, r3
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f000 f803 	bl	800a390 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a38a:	f000 f8d5 	bl	800a538 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a38e:	e7f1      	b.n	800a374 <prvTimerTask+0x8>

0800a390 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a39a:	f7ff f943 	bl	8009624 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a39e:	f107 0308 	add.w	r3, r7, #8
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f000 f866 	bl	800a474 <prvSampleTimeNow>
 800a3a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d130      	bne.n	800a412 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10a      	bne.n	800a3cc <prvProcessTimerOrBlockTask+0x3c>
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d806      	bhi.n	800a3cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a3be:	f7ff f93f 	bl	8009640 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a3c2:	68f9      	ldr	r1, [r7, #12]
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f7ff ff91 	bl	800a2ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a3ca:	e024      	b.n	800a416 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d008      	beq.n	800a3e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a3d2:	4b13      	ldr	r3, [pc, #76]	; (800a420 <prvProcessTimerOrBlockTask+0x90>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	bf0c      	ite	eq
 800a3dc:	2301      	moveq	r3, #1
 800a3de:	2300      	movne	r3, #0
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a3e4:	4b0f      	ldr	r3, [pc, #60]	; (800a424 <prvProcessTimerOrBlockTask+0x94>)
 800a3e6:	6818      	ldr	r0, [r3, #0]
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	1ad3      	subs	r3, r2, r3
 800a3ee:	683a      	ldr	r2, [r7, #0]
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	f7fe feb1 	bl	8009158 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a3f6:	f7ff f923 	bl	8009640 <xTaskResumeAll>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d10a      	bne.n	800a416 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a400:	4b09      	ldr	r3, [pc, #36]	; (800a428 <prvProcessTimerOrBlockTask+0x98>)
 800a402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a406:	601a      	str	r2, [r3, #0]
 800a408:	f3bf 8f4f 	dsb	sy
 800a40c:	f3bf 8f6f 	isb	sy
}
 800a410:	e001      	b.n	800a416 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a412:	f7ff f915 	bl	8009640 <xTaskResumeAll>
}
 800a416:	bf00      	nop
 800a418:	3710      	adds	r7, #16
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	20000dac 	.word	0x20000dac
 800a424:	20000db0 	.word	0x20000db0
 800a428:	e000ed04 	.word	0xe000ed04

0800a42c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a42c:	b480      	push	{r7}
 800a42e:	b085      	sub	sp, #20
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a434:	4b0e      	ldr	r3, [pc, #56]	; (800a470 <prvGetNextExpireTime+0x44>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	bf0c      	ite	eq
 800a43e:	2301      	moveq	r3, #1
 800a440:	2300      	movne	r3, #0
 800a442:	b2db      	uxtb	r3, r3
 800a444:	461a      	mov	r2, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d105      	bne.n	800a45e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a452:	4b07      	ldr	r3, [pc, #28]	; (800a470 <prvGetNextExpireTime+0x44>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	60fb      	str	r3, [r7, #12]
 800a45c:	e001      	b.n	800a462 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a45e:	2300      	movs	r3, #0
 800a460:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a462:	68fb      	ldr	r3, [r7, #12]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3714      	adds	r7, #20
 800a468:	46bd      	mov	sp, r7
 800a46a:	bc80      	pop	{r7}
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	20000da8 	.word	0x20000da8

0800a474 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a47c:	f7ff f97e 	bl	800977c <xTaskGetTickCount>
 800a480:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a482:	4b0b      	ldr	r3, [pc, #44]	; (800a4b0 <prvSampleTimeNow+0x3c>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d205      	bcs.n	800a498 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a48c:	f000 f908 	bl	800a6a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2201      	movs	r2, #1
 800a494:	601a      	str	r2, [r3, #0]
 800a496:	e002      	b.n	800a49e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2200      	movs	r2, #0
 800a49c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a49e:	4a04      	ldr	r2, [pc, #16]	; (800a4b0 <prvSampleTimeNow+0x3c>)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	20000db8 	.word	0x20000db8

0800a4b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b086      	sub	sp, #24
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	607a      	str	r2, [r7, #4]
 800a4c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	68ba      	ldr	r2, [r7, #8]
 800a4ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	68fa      	ldr	r2, [r7, #12]
 800a4d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a4d2:	68ba      	ldr	r2, [r7, #8]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d812      	bhi.n	800a500 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	1ad2      	subs	r2, r2, r3
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	699b      	ldr	r3, [r3, #24]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d302      	bcc.n	800a4ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	617b      	str	r3, [r7, #20]
 800a4ec:	e01b      	b.n	800a526 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a4ee:	4b10      	ldr	r3, [pc, #64]	; (800a530 <prvInsertTimerInActiveList+0x7c>)
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	3304      	adds	r3, #4
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	4610      	mov	r0, r2
 800a4fa:	f7fd ffb9 	bl	8008470 <vListInsert>
 800a4fe:	e012      	b.n	800a526 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	429a      	cmp	r2, r3
 800a506:	d206      	bcs.n	800a516 <prvInsertTimerInActiveList+0x62>
 800a508:	68ba      	ldr	r2, [r7, #8]
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d302      	bcc.n	800a516 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a510:	2301      	movs	r3, #1
 800a512:	617b      	str	r3, [r7, #20]
 800a514:	e007      	b.n	800a526 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a516:	4b07      	ldr	r3, [pc, #28]	; (800a534 <prvInsertTimerInActiveList+0x80>)
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	3304      	adds	r3, #4
 800a51e:	4619      	mov	r1, r3
 800a520:	4610      	mov	r0, r2
 800a522:	f7fd ffa5 	bl	8008470 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a526:	697b      	ldr	r3, [r7, #20]
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3718      	adds	r7, #24
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	20000dac 	.word	0x20000dac
 800a534:	20000da8 	.word	0x20000da8

0800a538 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b08e      	sub	sp, #56	; 0x38
 800a53c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a53e:	e09d      	b.n	800a67c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2b00      	cmp	r3, #0
 800a544:	da18      	bge.n	800a578 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a546:	1d3b      	adds	r3, r7, #4
 800a548:	3304      	adds	r3, #4
 800a54a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d10a      	bne.n	800a568 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a556:	f383 8811 	msr	BASEPRI, r3
 800a55a:	f3bf 8f6f 	isb	sy
 800a55e:	f3bf 8f4f 	dsb	sy
 800a562:	61fb      	str	r3, [r7, #28]
}
 800a564:	bf00      	nop
 800a566:	e7fe      	b.n	800a566 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a56e:	6850      	ldr	r0, [r2, #4]
 800a570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a572:	6892      	ldr	r2, [r2, #8]
 800a574:	4611      	mov	r1, r2
 800a576:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	db7d      	blt.n	800a67a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a584:	695b      	ldr	r3, [r3, #20]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d004      	beq.n	800a594 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a58c:	3304      	adds	r3, #4
 800a58e:	4618      	mov	r0, r3
 800a590:	f7fd ffa6 	bl	80084e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a594:	463b      	mov	r3, r7
 800a596:	4618      	mov	r0, r3
 800a598:	f7ff ff6c 	bl	800a474 <prvSampleTimeNow>
 800a59c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2b09      	cmp	r3, #9
 800a5a2:	d86b      	bhi.n	800a67c <prvProcessReceivedCommands+0x144>
 800a5a4:	a201      	add	r2, pc, #4	; (adr r2, 800a5ac <prvProcessReceivedCommands+0x74>)
 800a5a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5aa:	bf00      	nop
 800a5ac:	0800a5d5 	.word	0x0800a5d5
 800a5b0:	0800a5d5 	.word	0x0800a5d5
 800a5b4:	0800a5d5 	.word	0x0800a5d5
 800a5b8:	0800a67d 	.word	0x0800a67d
 800a5bc:	0800a631 	.word	0x0800a631
 800a5c0:	0800a669 	.word	0x0800a669
 800a5c4:	0800a5d5 	.word	0x0800a5d5
 800a5c8:	0800a5d5 	.word	0x0800a5d5
 800a5cc:	0800a67d 	.word	0x0800a67d
 800a5d0:	0800a631 	.word	0x0800a631
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a5d4:	68ba      	ldr	r2, [r7, #8]
 800a5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d8:	699b      	ldr	r3, [r3, #24]
 800a5da:	18d1      	adds	r1, r2, r3
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5e2:	f7ff ff67 	bl	800a4b4 <prvInsertTimerInActiveList>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d047      	beq.n	800a67c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5f2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f6:	69db      	ldr	r3, [r3, #28]
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d13f      	bne.n	800a67c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a5fc:	68ba      	ldr	r2, [r7, #8]
 800a5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a600:	699b      	ldr	r3, [r3, #24]
 800a602:	441a      	add	r2, r3
 800a604:	2300      	movs	r3, #0
 800a606:	9300      	str	r3, [sp, #0]
 800a608:	2300      	movs	r3, #0
 800a60a:	2100      	movs	r1, #0
 800a60c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a60e:	f7ff fe1f 	bl	800a250 <xTimerGenericCommand>
 800a612:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a614:	6a3b      	ldr	r3, [r7, #32]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d130      	bne.n	800a67c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800a61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61e:	f383 8811 	msr	BASEPRI, r3
 800a622:	f3bf 8f6f 	isb	sy
 800a626:	f3bf 8f4f 	dsb	sy
 800a62a:	61bb      	str	r3, [r7, #24]
}
 800a62c:	bf00      	nop
 800a62e:	e7fe      	b.n	800a62e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a630:	68ba      	ldr	r2, [r7, #8]
 800a632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a634:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a638:	699b      	ldr	r3, [r3, #24]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d10a      	bne.n	800a654 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800a63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a642:	f383 8811 	msr	BASEPRI, r3
 800a646:	f3bf 8f6f 	isb	sy
 800a64a:	f3bf 8f4f 	dsb	sy
 800a64e:	617b      	str	r3, [r7, #20]
}
 800a650:	bf00      	nop
 800a652:	e7fe      	b.n	800a652 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a656:	699a      	ldr	r2, [r3, #24]
 800a658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65a:	18d1      	adds	r1, r2, r3
 800a65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a662:	f7ff ff27 	bl	800a4b4 <prvInsertTimerInActiveList>
					break;
 800a666:	e009      	b.n	800a67c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d104      	bne.n	800a67c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800a672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a674:	f000 fb6e 	bl	800ad54 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a678:	e000      	b.n	800a67c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a67a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a67c:	4b07      	ldr	r3, [pc, #28]	; (800a69c <prvProcessReceivedCommands+0x164>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	1d39      	adds	r1, r7, #4
 800a682:	2200      	movs	r2, #0
 800a684:	4618      	mov	r0, r3
 800a686:	f7fe fa2b 	bl	8008ae0 <xQueueReceive>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	f47f af57 	bne.w	800a540 <prvProcessReceivedCommands+0x8>
	}
}
 800a692:	bf00      	nop
 800a694:	bf00      	nop
 800a696:	3730      	adds	r7, #48	; 0x30
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	20000db0 	.word	0x20000db0

0800a6a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b088      	sub	sp, #32
 800a6a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a6a6:	e045      	b.n	800a734 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6a8:	4b2c      	ldr	r3, [pc, #176]	; (800a75c <prvSwitchTimerLists+0xbc>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6b2:	4b2a      	ldr	r3, [pc, #168]	; (800a75c <prvSwitchTimerLists+0xbc>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	3304      	adds	r3, #4
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f7fd ff0d 	bl	80084e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ca:	68f8      	ldr	r0, [r7, #12]
 800a6cc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	69db      	ldr	r3, [r3, #28]
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d12e      	bne.n	800a734 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	699b      	ldr	r3, [r3, #24]
 800a6da:	693a      	ldr	r2, [r7, #16]
 800a6dc:	4413      	add	r3, r2
 800a6de:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a6e0:	68ba      	ldr	r2, [r7, #8]
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d90e      	bls.n	800a706 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	68ba      	ldr	r2, [r7, #8]
 800a6ec:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6f4:	4b19      	ldr	r3, [pc, #100]	; (800a75c <prvSwitchTimerLists+0xbc>)
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	3304      	adds	r3, #4
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	4610      	mov	r0, r2
 800a700:	f7fd feb6 	bl	8008470 <vListInsert>
 800a704:	e016      	b.n	800a734 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a706:	2300      	movs	r3, #0
 800a708:	9300      	str	r3, [sp, #0]
 800a70a:	2300      	movs	r3, #0
 800a70c:	693a      	ldr	r2, [r7, #16]
 800a70e:	2100      	movs	r1, #0
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f7ff fd9d 	bl	800a250 <xTimerGenericCommand>
 800a716:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d10a      	bne.n	800a734 <prvSwitchTimerLists+0x94>
	__asm volatile
 800a71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a722:	f383 8811 	msr	BASEPRI, r3
 800a726:	f3bf 8f6f 	isb	sy
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	603b      	str	r3, [r7, #0]
}
 800a730:	bf00      	nop
 800a732:	e7fe      	b.n	800a732 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a734:	4b09      	ldr	r3, [pc, #36]	; (800a75c <prvSwitchTimerLists+0xbc>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d1b4      	bne.n	800a6a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a73e:	4b07      	ldr	r3, [pc, #28]	; (800a75c <prvSwitchTimerLists+0xbc>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a744:	4b06      	ldr	r3, [pc, #24]	; (800a760 <prvSwitchTimerLists+0xc0>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a04      	ldr	r2, [pc, #16]	; (800a75c <prvSwitchTimerLists+0xbc>)
 800a74a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a74c:	4a04      	ldr	r2, [pc, #16]	; (800a760 <prvSwitchTimerLists+0xc0>)
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	6013      	str	r3, [r2, #0]
}
 800a752:	bf00      	nop
 800a754:	3718      	adds	r7, #24
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	20000da8 	.word	0x20000da8
 800a760:	20000dac 	.word	0x20000dac

0800a764 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a76a:	f000 f92f 	bl	800a9cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a76e:	4b15      	ldr	r3, [pc, #84]	; (800a7c4 <prvCheckForValidListAndQueue+0x60>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d120      	bne.n	800a7b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a776:	4814      	ldr	r0, [pc, #80]	; (800a7c8 <prvCheckForValidListAndQueue+0x64>)
 800a778:	f7fd fe2c 	bl	80083d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a77c:	4813      	ldr	r0, [pc, #76]	; (800a7cc <prvCheckForValidListAndQueue+0x68>)
 800a77e:	f7fd fe29 	bl	80083d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a782:	4b13      	ldr	r3, [pc, #76]	; (800a7d0 <prvCheckForValidListAndQueue+0x6c>)
 800a784:	4a10      	ldr	r2, [pc, #64]	; (800a7c8 <prvCheckForValidListAndQueue+0x64>)
 800a786:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a788:	4b12      	ldr	r3, [pc, #72]	; (800a7d4 <prvCheckForValidListAndQueue+0x70>)
 800a78a:	4a10      	ldr	r2, [pc, #64]	; (800a7cc <prvCheckForValidListAndQueue+0x68>)
 800a78c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a78e:	2300      	movs	r3, #0
 800a790:	9300      	str	r3, [sp, #0]
 800a792:	4b11      	ldr	r3, [pc, #68]	; (800a7d8 <prvCheckForValidListAndQueue+0x74>)
 800a794:	4a11      	ldr	r2, [pc, #68]	; (800a7dc <prvCheckForValidListAndQueue+0x78>)
 800a796:	2110      	movs	r1, #16
 800a798:	200a      	movs	r0, #10
 800a79a:	f7fd ff33 	bl	8008604 <xQueueGenericCreateStatic>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	4a08      	ldr	r2, [pc, #32]	; (800a7c4 <prvCheckForValidListAndQueue+0x60>)
 800a7a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a7a4:	4b07      	ldr	r3, [pc, #28]	; (800a7c4 <prvCheckForValidListAndQueue+0x60>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d005      	beq.n	800a7b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a7ac:	4b05      	ldr	r3, [pc, #20]	; (800a7c4 <prvCheckForValidListAndQueue+0x60>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	490b      	ldr	r1, [pc, #44]	; (800a7e0 <prvCheckForValidListAndQueue+0x7c>)
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7fe fca8 	bl	8009108 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a7b8:	f000 f938 	bl	800aa2c <vPortExitCritical>
}
 800a7bc:	bf00      	nop
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	20000db0 	.word	0x20000db0
 800a7c8:	20000d80 	.word	0x20000d80
 800a7cc:	20000d94 	.word	0x20000d94
 800a7d0:	20000da8 	.word	0x20000da8
 800a7d4:	20000dac 	.word	0x20000dac
 800a7d8:	20000e5c 	.word	0x20000e5c
 800a7dc:	20000dbc 	.word	0x20000dbc
 800a7e0:	0800c3b0 	.word	0x0800c3b0

0800a7e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b085      	sub	sp, #20
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	60b9      	str	r1, [r7, #8]
 800a7ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	3b04      	subs	r3, #4
 800a7f4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a7fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	3b04      	subs	r3, #4
 800a802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	f023 0201 	bic.w	r2, r3, #1
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	3b04      	subs	r3, #4
 800a812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a814:	4a08      	ldr	r2, [pc, #32]	; (800a838 <pxPortInitialiseStack+0x54>)
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	3b14      	subs	r3, #20
 800a81e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	3b20      	subs	r3, #32
 800a82a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a82c:	68fb      	ldr	r3, [r7, #12]
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3714      	adds	r7, #20
 800a832:	46bd      	mov	sp, r7
 800a834:	bc80      	pop	{r7}
 800a836:	4770      	bx	lr
 800a838:	0800a83d 	.word	0x0800a83d

0800a83c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a83c:	b480      	push	{r7}
 800a83e:	b085      	sub	sp, #20
 800a840:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a842:	2300      	movs	r3, #0
 800a844:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a846:	4b12      	ldr	r3, [pc, #72]	; (800a890 <prvTaskExitError+0x54>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a84e:	d00a      	beq.n	800a866 <prvTaskExitError+0x2a>
	__asm volatile
 800a850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a854:	f383 8811 	msr	BASEPRI, r3
 800a858:	f3bf 8f6f 	isb	sy
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	60fb      	str	r3, [r7, #12]
}
 800a862:	bf00      	nop
 800a864:	e7fe      	b.n	800a864 <prvTaskExitError+0x28>
	__asm volatile
 800a866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86a:	f383 8811 	msr	BASEPRI, r3
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	f3bf 8f4f 	dsb	sy
 800a876:	60bb      	str	r3, [r7, #8]
}
 800a878:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a87a:	bf00      	nop
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d0fc      	beq.n	800a87c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a882:	bf00      	nop
 800a884:	bf00      	nop
 800a886:	3714      	adds	r7, #20
 800a888:	46bd      	mov	sp, r7
 800a88a:	bc80      	pop	{r7}
 800a88c:	4770      	bx	lr
 800a88e:	bf00      	nop
 800a890:	2000011c 	.word	0x2000011c
	...

0800a8a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a8a0:	4b07      	ldr	r3, [pc, #28]	; (800a8c0 <pxCurrentTCBConst2>)
 800a8a2:	6819      	ldr	r1, [r3, #0]
 800a8a4:	6808      	ldr	r0, [r1, #0]
 800a8a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a8aa:	f380 8809 	msr	PSP, r0
 800a8ae:	f3bf 8f6f 	isb	sy
 800a8b2:	f04f 0000 	mov.w	r0, #0
 800a8b6:	f380 8811 	msr	BASEPRI, r0
 800a8ba:	f04e 0e0d 	orr.w	lr, lr, #13
 800a8be:	4770      	bx	lr

0800a8c0 <pxCurrentTCBConst2>:
 800a8c0:	20000880 	.word	0x20000880
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a8c4:	bf00      	nop
 800a8c6:	bf00      	nop

0800a8c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a8c8:	4806      	ldr	r0, [pc, #24]	; (800a8e4 <prvPortStartFirstTask+0x1c>)
 800a8ca:	6800      	ldr	r0, [r0, #0]
 800a8cc:	6800      	ldr	r0, [r0, #0]
 800a8ce:	f380 8808 	msr	MSP, r0
 800a8d2:	b662      	cpsie	i
 800a8d4:	b661      	cpsie	f
 800a8d6:	f3bf 8f4f 	dsb	sy
 800a8da:	f3bf 8f6f 	isb	sy
 800a8de:	df00      	svc	0
 800a8e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a8e2:	bf00      	nop
 800a8e4:	e000ed08 	.word	0xe000ed08

0800a8e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a8ee:	4b32      	ldr	r3, [pc, #200]	; (800a9b8 <xPortStartScheduler+0xd0>)
 800a8f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	22ff      	movs	r2, #255	; 0xff
 800a8fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	b2db      	uxtb	r3, r3
 800a906:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a908:	78fb      	ldrb	r3, [r7, #3]
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a910:	b2da      	uxtb	r2, r3
 800a912:	4b2a      	ldr	r3, [pc, #168]	; (800a9bc <xPortStartScheduler+0xd4>)
 800a914:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a916:	4b2a      	ldr	r3, [pc, #168]	; (800a9c0 <xPortStartScheduler+0xd8>)
 800a918:	2207      	movs	r2, #7
 800a91a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a91c:	e009      	b.n	800a932 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a91e:	4b28      	ldr	r3, [pc, #160]	; (800a9c0 <xPortStartScheduler+0xd8>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	3b01      	subs	r3, #1
 800a924:	4a26      	ldr	r2, [pc, #152]	; (800a9c0 <xPortStartScheduler+0xd8>)
 800a926:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a928:	78fb      	ldrb	r3, [r7, #3]
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	005b      	lsls	r3, r3, #1
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a932:	78fb      	ldrb	r3, [r7, #3]
 800a934:	b2db      	uxtb	r3, r3
 800a936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a93a:	2b80      	cmp	r3, #128	; 0x80
 800a93c:	d0ef      	beq.n	800a91e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a93e:	4b20      	ldr	r3, [pc, #128]	; (800a9c0 <xPortStartScheduler+0xd8>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f1c3 0307 	rsb	r3, r3, #7
 800a946:	2b04      	cmp	r3, #4
 800a948:	d00a      	beq.n	800a960 <xPortStartScheduler+0x78>
	__asm volatile
 800a94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94e:	f383 8811 	msr	BASEPRI, r3
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	f3bf 8f4f 	dsb	sy
 800a95a:	60bb      	str	r3, [r7, #8]
}
 800a95c:	bf00      	nop
 800a95e:	e7fe      	b.n	800a95e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a960:	4b17      	ldr	r3, [pc, #92]	; (800a9c0 <xPortStartScheduler+0xd8>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	021b      	lsls	r3, r3, #8
 800a966:	4a16      	ldr	r2, [pc, #88]	; (800a9c0 <xPortStartScheduler+0xd8>)
 800a968:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a96a:	4b15      	ldr	r3, [pc, #84]	; (800a9c0 <xPortStartScheduler+0xd8>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a972:	4a13      	ldr	r2, [pc, #76]	; (800a9c0 <xPortStartScheduler+0xd8>)
 800a974:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	b2da      	uxtb	r2, r3
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a97e:	4b11      	ldr	r3, [pc, #68]	; (800a9c4 <xPortStartScheduler+0xdc>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a10      	ldr	r2, [pc, #64]	; (800a9c4 <xPortStartScheduler+0xdc>)
 800a984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a988:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a98a:	4b0e      	ldr	r3, [pc, #56]	; (800a9c4 <xPortStartScheduler+0xdc>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a0d      	ldr	r2, [pc, #52]	; (800a9c4 <xPortStartScheduler+0xdc>)
 800a990:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a994:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a996:	f000 f8b9 	bl	800ab0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a99a:	4b0b      	ldr	r3, [pc, #44]	; (800a9c8 <xPortStartScheduler+0xe0>)
 800a99c:	2200      	movs	r2, #0
 800a99e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a9a0:	f7ff ff92 	bl	800a8c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a9a4:	f7fe ffb6 	bl	8009914 <vTaskSwitchContext>
	prvTaskExitError();
 800a9a8:	f7ff ff48 	bl	800a83c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	e000e400 	.word	0xe000e400
 800a9bc:	20000eac 	.word	0x20000eac
 800a9c0:	20000eb0 	.word	0x20000eb0
 800a9c4:	e000ed20 	.word	0xe000ed20
 800a9c8:	2000011c 	.word	0x2000011c

0800a9cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
	__asm volatile
 800a9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d6:	f383 8811 	msr	BASEPRI, r3
 800a9da:	f3bf 8f6f 	isb	sy
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	607b      	str	r3, [r7, #4]
}
 800a9e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a9e6:	4b0f      	ldr	r3, [pc, #60]	; (800aa24 <vPortEnterCritical+0x58>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	4a0d      	ldr	r2, [pc, #52]	; (800aa24 <vPortEnterCritical+0x58>)
 800a9ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a9f0:	4b0c      	ldr	r3, [pc, #48]	; (800aa24 <vPortEnterCritical+0x58>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d10f      	bne.n	800aa18 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a9f8:	4b0b      	ldr	r3, [pc, #44]	; (800aa28 <vPortEnterCritical+0x5c>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00a      	beq.n	800aa18 <vPortEnterCritical+0x4c>
	__asm volatile
 800aa02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa06:	f383 8811 	msr	BASEPRI, r3
 800aa0a:	f3bf 8f6f 	isb	sy
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	603b      	str	r3, [r7, #0]
}
 800aa14:	bf00      	nop
 800aa16:	e7fe      	b.n	800aa16 <vPortEnterCritical+0x4a>
	}
}
 800aa18:	bf00      	nop
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bc80      	pop	{r7}
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop
 800aa24:	2000011c 	.word	0x2000011c
 800aa28:	e000ed04 	.word	0xe000ed04

0800aa2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa32:	4b11      	ldr	r3, [pc, #68]	; (800aa78 <vPortExitCritical+0x4c>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10a      	bne.n	800aa50 <vPortExitCritical+0x24>
	__asm volatile
 800aa3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa3e:	f383 8811 	msr	BASEPRI, r3
 800aa42:	f3bf 8f6f 	isb	sy
 800aa46:	f3bf 8f4f 	dsb	sy
 800aa4a:	607b      	str	r3, [r7, #4]
}
 800aa4c:	bf00      	nop
 800aa4e:	e7fe      	b.n	800aa4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aa50:	4b09      	ldr	r3, [pc, #36]	; (800aa78 <vPortExitCritical+0x4c>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	3b01      	subs	r3, #1
 800aa56:	4a08      	ldr	r2, [pc, #32]	; (800aa78 <vPortExitCritical+0x4c>)
 800aa58:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aa5a:	4b07      	ldr	r3, [pc, #28]	; (800aa78 <vPortExitCritical+0x4c>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d105      	bne.n	800aa6e <vPortExitCritical+0x42>
 800aa62:	2300      	movs	r3, #0
 800aa64:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	f383 8811 	msr	BASEPRI, r3
}
 800aa6c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aa6e:	bf00      	nop
 800aa70:	370c      	adds	r7, #12
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bc80      	pop	{r7}
 800aa76:	4770      	bx	lr
 800aa78:	2000011c 	.word	0x2000011c
 800aa7c:	00000000 	.word	0x00000000

0800aa80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa80:	f3ef 8009 	mrs	r0, PSP
 800aa84:	f3bf 8f6f 	isb	sy
 800aa88:	4b0d      	ldr	r3, [pc, #52]	; (800aac0 <pxCurrentTCBConst>)
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800aa90:	6010      	str	r0, [r2, #0]
 800aa92:	e92d 4008 	stmdb	sp!, {r3, lr}
 800aa96:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aa9a:	f380 8811 	msr	BASEPRI, r0
 800aa9e:	f7fe ff39 	bl	8009914 <vTaskSwitchContext>
 800aaa2:	f04f 0000 	mov.w	r0, #0
 800aaa6:	f380 8811 	msr	BASEPRI, r0
 800aaaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800aaae:	6819      	ldr	r1, [r3, #0]
 800aab0:	6808      	ldr	r0, [r1, #0]
 800aab2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800aab6:	f380 8809 	msr	PSP, r0
 800aaba:	f3bf 8f6f 	isb	sy
 800aabe:	4770      	bx	lr

0800aac0 <pxCurrentTCBConst>:
 800aac0:	20000880 	.word	0x20000880
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aac4:	bf00      	nop
 800aac6:	bf00      	nop

0800aac8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
	__asm volatile
 800aace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad2:	f383 8811 	msr	BASEPRI, r3
 800aad6:	f3bf 8f6f 	isb	sy
 800aada:	f3bf 8f4f 	dsb	sy
 800aade:	607b      	str	r3, [r7, #4]
}
 800aae0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aae2:	f7fe fe59 	bl	8009798 <xTaskIncrementTick>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d003      	beq.n	800aaf4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aaec:	4b06      	ldr	r3, [pc, #24]	; (800ab08 <SysTick_Handler+0x40>)
 800aaee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaf2:	601a      	str	r2, [r3, #0]
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	f383 8811 	msr	BASEPRI, r3
}
 800aafe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ab00:	bf00      	nop
 800ab02:	3708      	adds	r7, #8
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	e000ed04 	.word	0xe000ed04

0800ab0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab10:	4b0a      	ldr	r3, [pc, #40]	; (800ab3c <vPortSetupTimerInterrupt+0x30>)
 800ab12:	2200      	movs	r2, #0
 800ab14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab16:	4b0a      	ldr	r3, [pc, #40]	; (800ab40 <vPortSetupTimerInterrupt+0x34>)
 800ab18:	2200      	movs	r2, #0
 800ab1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab1c:	4b09      	ldr	r3, [pc, #36]	; (800ab44 <vPortSetupTimerInterrupt+0x38>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a09      	ldr	r2, [pc, #36]	; (800ab48 <vPortSetupTimerInterrupt+0x3c>)
 800ab22:	fba2 2303 	umull	r2, r3, r2, r3
 800ab26:	099b      	lsrs	r3, r3, #6
 800ab28:	4a08      	ldr	r2, [pc, #32]	; (800ab4c <vPortSetupTimerInterrupt+0x40>)
 800ab2a:	3b01      	subs	r3, #1
 800ab2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ab2e:	4b03      	ldr	r3, [pc, #12]	; (800ab3c <vPortSetupTimerInterrupt+0x30>)
 800ab30:	2207      	movs	r2, #7
 800ab32:	601a      	str	r2, [r3, #0]
}
 800ab34:	bf00      	nop
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bc80      	pop	{r7}
 800ab3a:	4770      	bx	lr
 800ab3c:	e000e010 	.word	0xe000e010
 800ab40:	e000e018 	.word	0xe000e018
 800ab44:	20000000 	.word	0x20000000
 800ab48:	10624dd3 	.word	0x10624dd3
 800ab4c:	e000e014 	.word	0xe000e014

0800ab50 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab50:	b480      	push	{r7}
 800ab52:	b085      	sub	sp, #20
 800ab54:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab56:	f3ef 8305 	mrs	r3, IPSR
 800ab5a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2b0f      	cmp	r3, #15
 800ab60:	d914      	bls.n	800ab8c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab62:	4a16      	ldr	r2, [pc, #88]	; (800abbc <vPortValidateInterruptPriority+0x6c>)
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	4413      	add	r3, r2
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab6c:	4b14      	ldr	r3, [pc, #80]	; (800abc0 <vPortValidateInterruptPriority+0x70>)
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	7afa      	ldrb	r2, [r7, #11]
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d20a      	bcs.n	800ab8c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ab76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7a:	f383 8811 	msr	BASEPRI, r3
 800ab7e:	f3bf 8f6f 	isb	sy
 800ab82:	f3bf 8f4f 	dsb	sy
 800ab86:	607b      	str	r3, [r7, #4]
}
 800ab88:	bf00      	nop
 800ab8a:	e7fe      	b.n	800ab8a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab8c:	4b0d      	ldr	r3, [pc, #52]	; (800abc4 <vPortValidateInterruptPriority+0x74>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ab94:	4b0c      	ldr	r3, [pc, #48]	; (800abc8 <vPortValidateInterruptPriority+0x78>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d90a      	bls.n	800abb2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ab9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba0:	f383 8811 	msr	BASEPRI, r3
 800aba4:	f3bf 8f6f 	isb	sy
 800aba8:	f3bf 8f4f 	dsb	sy
 800abac:	603b      	str	r3, [r7, #0]
}
 800abae:	bf00      	nop
 800abb0:	e7fe      	b.n	800abb0 <vPortValidateInterruptPriority+0x60>
	}
 800abb2:	bf00      	nop
 800abb4:	3714      	adds	r7, #20
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bc80      	pop	{r7}
 800abba:	4770      	bx	lr
 800abbc:	e000e3f0 	.word	0xe000e3f0
 800abc0:	20000eac 	.word	0x20000eac
 800abc4:	e000ed0c 	.word	0xe000ed0c
 800abc8:	20000eb0 	.word	0x20000eb0

0800abcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b08a      	sub	sp, #40	; 0x28
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800abd4:	2300      	movs	r3, #0
 800abd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800abd8:	f7fe fd24 	bl	8009624 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800abdc:	4b58      	ldr	r3, [pc, #352]	; (800ad40 <pvPortMalloc+0x174>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d101      	bne.n	800abe8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800abe4:	f000 f910 	bl	800ae08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800abe8:	4b56      	ldr	r3, [pc, #344]	; (800ad44 <pvPortMalloc+0x178>)
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	4013      	ands	r3, r2
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	f040 808e 	bne.w	800ad12 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d01d      	beq.n	800ac38 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800abfc:	2208      	movs	r2, #8
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	4413      	add	r3, r2
 800ac02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f003 0307 	and.w	r3, r3, #7
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d014      	beq.n	800ac38 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f023 0307 	bic.w	r3, r3, #7
 800ac14:	3308      	adds	r3, #8
 800ac16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f003 0307 	and.w	r3, r3, #7
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d00a      	beq.n	800ac38 <pvPortMalloc+0x6c>
	__asm volatile
 800ac22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac26:	f383 8811 	msr	BASEPRI, r3
 800ac2a:	f3bf 8f6f 	isb	sy
 800ac2e:	f3bf 8f4f 	dsb	sy
 800ac32:	617b      	str	r3, [r7, #20]
}
 800ac34:	bf00      	nop
 800ac36:	e7fe      	b.n	800ac36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d069      	beq.n	800ad12 <pvPortMalloc+0x146>
 800ac3e:	4b42      	ldr	r3, [pc, #264]	; (800ad48 <pvPortMalloc+0x17c>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d864      	bhi.n	800ad12 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac48:	4b40      	ldr	r3, [pc, #256]	; (800ad4c <pvPortMalloc+0x180>)
 800ac4a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ac4c:	4b3f      	ldr	r3, [pc, #252]	; (800ad4c <pvPortMalloc+0x180>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac52:	e004      	b.n	800ac5e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ac54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac56:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d903      	bls.n	800ac70 <pvPortMalloc+0xa4>
 800ac68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d1f1      	bne.n	800ac54 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac70:	4b33      	ldr	r3, [pc, #204]	; (800ad40 <pvPortMalloc+0x174>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d04b      	beq.n	800ad12 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac7a:	6a3b      	ldr	r3, [r7, #32]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2208      	movs	r2, #8
 800ac80:	4413      	add	r3, r2
 800ac82:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	6a3b      	ldr	r3, [r7, #32]
 800ac8a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8e:	685a      	ldr	r2, [r3, #4]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	1ad2      	subs	r2, r2, r3
 800ac94:	2308      	movs	r3, #8
 800ac96:	005b      	lsls	r3, r3, #1
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d91f      	bls.n	800acdc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	4413      	add	r3, r2
 800aca2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aca4:	69bb      	ldr	r3, [r7, #24]
 800aca6:	f003 0307 	and.w	r3, r3, #7
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d00a      	beq.n	800acc4 <pvPortMalloc+0xf8>
	__asm volatile
 800acae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb2:	f383 8811 	msr	BASEPRI, r3
 800acb6:	f3bf 8f6f 	isb	sy
 800acba:	f3bf 8f4f 	dsb	sy
 800acbe:	613b      	str	r3, [r7, #16]
}
 800acc0:	bf00      	nop
 800acc2:	e7fe      	b.n	800acc2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800acc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc6:	685a      	ldr	r2, [r3, #4]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	1ad2      	subs	r2, r2, r3
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800acd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800acd6:	69b8      	ldr	r0, [r7, #24]
 800acd8:	f000 f8f8 	bl	800aecc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800acdc:	4b1a      	ldr	r3, [pc, #104]	; (800ad48 <pvPortMalloc+0x17c>)
 800acde:	681a      	ldr	r2, [r3, #0]
 800ace0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	1ad3      	subs	r3, r2, r3
 800ace6:	4a18      	ldr	r2, [pc, #96]	; (800ad48 <pvPortMalloc+0x17c>)
 800ace8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800acea:	4b17      	ldr	r3, [pc, #92]	; (800ad48 <pvPortMalloc+0x17c>)
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	4b18      	ldr	r3, [pc, #96]	; (800ad50 <pvPortMalloc+0x184>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d203      	bcs.n	800acfe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800acf6:	4b14      	ldr	r3, [pc, #80]	; (800ad48 <pvPortMalloc+0x17c>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4a15      	ldr	r2, [pc, #84]	; (800ad50 <pvPortMalloc+0x184>)
 800acfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800acfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad00:	685a      	ldr	r2, [r3, #4]
 800ad02:	4b10      	ldr	r3, [pc, #64]	; (800ad44 <pvPortMalloc+0x178>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	431a      	orrs	r2, r3
 800ad08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ad0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0e:	2200      	movs	r2, #0
 800ad10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ad12:	f7fe fc95 	bl	8009640 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad16:	69fb      	ldr	r3, [r7, #28]
 800ad18:	f003 0307 	and.w	r3, r3, #7
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d00a      	beq.n	800ad36 <pvPortMalloc+0x16a>
	__asm volatile
 800ad20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad24:	f383 8811 	msr	BASEPRI, r3
 800ad28:	f3bf 8f6f 	isb	sy
 800ad2c:	f3bf 8f4f 	dsb	sy
 800ad30:	60fb      	str	r3, [r7, #12]
}
 800ad32:	bf00      	nop
 800ad34:	e7fe      	b.n	800ad34 <pvPortMalloc+0x168>
	return pvReturn;
 800ad36:	69fb      	ldr	r3, [r7, #28]
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3728      	adds	r7, #40	; 0x28
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}
 800ad40:	200036bc 	.word	0x200036bc
 800ad44:	200036c8 	.word	0x200036c8
 800ad48:	200036c0 	.word	0x200036c0
 800ad4c:	200036b4 	.word	0x200036b4
 800ad50:	200036c4 	.word	0x200036c4

0800ad54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b086      	sub	sp, #24
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d048      	beq.n	800adf8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ad66:	2308      	movs	r3, #8
 800ad68:	425b      	negs	r3, r3
 800ad6a:	697a      	ldr	r2, [r7, #20]
 800ad6c:	4413      	add	r3, r2
 800ad6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	685a      	ldr	r2, [r3, #4]
 800ad78:	4b21      	ldr	r3, [pc, #132]	; (800ae00 <vPortFree+0xac>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4013      	ands	r3, r2
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d10a      	bne.n	800ad98 <vPortFree+0x44>
	__asm volatile
 800ad82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad86:	f383 8811 	msr	BASEPRI, r3
 800ad8a:	f3bf 8f6f 	isb	sy
 800ad8e:	f3bf 8f4f 	dsb	sy
 800ad92:	60fb      	str	r3, [r7, #12]
}
 800ad94:	bf00      	nop
 800ad96:	e7fe      	b.n	800ad96 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d00a      	beq.n	800adb6 <vPortFree+0x62>
	__asm volatile
 800ada0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada4:	f383 8811 	msr	BASEPRI, r3
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	60bb      	str	r3, [r7, #8]
}
 800adb2:	bf00      	nop
 800adb4:	e7fe      	b.n	800adb4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	685a      	ldr	r2, [r3, #4]
 800adba:	4b11      	ldr	r3, [pc, #68]	; (800ae00 <vPortFree+0xac>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4013      	ands	r3, r2
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d019      	beq.n	800adf8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d115      	bne.n	800adf8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	685a      	ldr	r2, [r3, #4]
 800add0:	4b0b      	ldr	r3, [pc, #44]	; (800ae00 <vPortFree+0xac>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	43db      	mvns	r3, r3
 800add6:	401a      	ands	r2, r3
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800addc:	f7fe fc22 	bl	8009624 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	685a      	ldr	r2, [r3, #4]
 800ade4:	4b07      	ldr	r3, [pc, #28]	; (800ae04 <vPortFree+0xb0>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4413      	add	r3, r2
 800adea:	4a06      	ldr	r2, [pc, #24]	; (800ae04 <vPortFree+0xb0>)
 800adec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800adee:	6938      	ldr	r0, [r7, #16]
 800adf0:	f000 f86c 	bl	800aecc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800adf4:	f7fe fc24 	bl	8009640 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800adf8:	bf00      	nop
 800adfa:	3718      	adds	r7, #24
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}
 800ae00:	200036c8 	.word	0x200036c8
 800ae04:	200036c0 	.word	0x200036c0

0800ae08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ae0e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ae12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ae14:	4b27      	ldr	r3, [pc, #156]	; (800aeb4 <prvHeapInit+0xac>)
 800ae16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f003 0307 	and.w	r3, r3, #7
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d00c      	beq.n	800ae3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	3307      	adds	r3, #7
 800ae26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f023 0307 	bic.w	r3, r3, #7
 800ae2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae30:	68ba      	ldr	r2, [r7, #8]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	1ad3      	subs	r3, r2, r3
 800ae36:	4a1f      	ldr	r2, [pc, #124]	; (800aeb4 <prvHeapInit+0xac>)
 800ae38:	4413      	add	r3, r2
 800ae3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae40:	4a1d      	ldr	r2, [pc, #116]	; (800aeb8 <prvHeapInit+0xb0>)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae46:	4b1c      	ldr	r3, [pc, #112]	; (800aeb8 <prvHeapInit+0xb0>)
 800ae48:	2200      	movs	r2, #0
 800ae4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	68ba      	ldr	r2, [r7, #8]
 800ae50:	4413      	add	r3, r2
 800ae52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae54:	2208      	movs	r2, #8
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	1a9b      	subs	r3, r3, r2
 800ae5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f023 0307 	bic.w	r3, r3, #7
 800ae62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	4a15      	ldr	r2, [pc, #84]	; (800aebc <prvHeapInit+0xb4>)
 800ae68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae6a:	4b14      	ldr	r3, [pc, #80]	; (800aebc <prvHeapInit+0xb4>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae72:	4b12      	ldr	r3, [pc, #72]	; (800aebc <prvHeapInit+0xb4>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2200      	movs	r2, #0
 800ae78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	1ad2      	subs	r2, r2, r3
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae88:	4b0c      	ldr	r3, [pc, #48]	; (800aebc <prvHeapInit+0xb4>)
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	4a0a      	ldr	r2, [pc, #40]	; (800aec0 <prvHeapInit+0xb8>)
 800ae96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	4a09      	ldr	r2, [pc, #36]	; (800aec4 <prvHeapInit+0xbc>)
 800ae9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aea0:	4b09      	ldr	r3, [pc, #36]	; (800aec8 <prvHeapInit+0xc0>)
 800aea2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aea6:	601a      	str	r2, [r3, #0]
}
 800aea8:	bf00      	nop
 800aeaa:	3714      	adds	r7, #20
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bc80      	pop	{r7}
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop
 800aeb4:	20000eb4 	.word	0x20000eb4
 800aeb8:	200036b4 	.word	0x200036b4
 800aebc:	200036bc 	.word	0x200036bc
 800aec0:	200036c4 	.word	0x200036c4
 800aec4:	200036c0 	.word	0x200036c0
 800aec8:	200036c8 	.word	0x200036c8

0800aecc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aecc:	b480      	push	{r7}
 800aece:	b085      	sub	sp, #20
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aed4:	4b27      	ldr	r3, [pc, #156]	; (800af74 <prvInsertBlockIntoFreeList+0xa8>)
 800aed6:	60fb      	str	r3, [r7, #12]
 800aed8:	e002      	b.n	800aee0 <prvInsertBlockIntoFreeList+0x14>
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	60fb      	str	r3, [r7, #12]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d8f7      	bhi.n	800aeda <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	68ba      	ldr	r2, [r7, #8]
 800aef4:	4413      	add	r3, r2
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d108      	bne.n	800af0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	685a      	ldr	r2, [r3, #4]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	441a      	add	r2, r3
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	68ba      	ldr	r2, [r7, #8]
 800af18:	441a      	add	r2, r3
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	429a      	cmp	r2, r3
 800af20:	d118      	bne.n	800af54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	4b14      	ldr	r3, [pc, #80]	; (800af78 <prvInsertBlockIntoFreeList+0xac>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d00d      	beq.n	800af4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	685a      	ldr	r2, [r3, #4]
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	441a      	add	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	601a      	str	r2, [r3, #0]
 800af48:	e008      	b.n	800af5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af4a:	4b0b      	ldr	r3, [pc, #44]	; (800af78 <prvInsertBlockIntoFreeList+0xac>)
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	601a      	str	r2, [r3, #0]
 800af52:	e003      	b.n	800af5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af5c:	68fa      	ldr	r2, [r7, #12]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	429a      	cmp	r2, r3
 800af62:	d002      	beq.n	800af6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	687a      	ldr	r2, [r7, #4]
 800af68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af6a:	bf00      	nop
 800af6c:	3714      	adds	r7, #20
 800af6e:	46bd      	mov	sp, r7
 800af70:	bc80      	pop	{r7}
 800af72:	4770      	bx	lr
 800af74:	200036b4 	.word	0x200036b4
 800af78:	200036bc 	.word	0x200036bc

0800af7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800af80:	2200      	movs	r2, #0
 800af82:	4912      	ldr	r1, [pc, #72]	; (800afcc <MX_USB_DEVICE_Init+0x50>)
 800af84:	4812      	ldr	r0, [pc, #72]	; (800afd0 <MX_USB_DEVICE_Init+0x54>)
 800af86:	f7fc f81b 	bl	8006fc0 <USBD_Init>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d001      	beq.n	800af94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800af90:	f7f5 fe5a 	bl	8000c48 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800af94:	490f      	ldr	r1, [pc, #60]	; (800afd4 <MX_USB_DEVICE_Init+0x58>)
 800af96:	480e      	ldr	r0, [pc, #56]	; (800afd0 <MX_USB_DEVICE_Init+0x54>)
 800af98:	f7fc f83d 	bl	8007016 <USBD_RegisterClass>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d001      	beq.n	800afa6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800afa2:	f7f5 fe51 	bl	8000c48 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800afa6:	490c      	ldr	r1, [pc, #48]	; (800afd8 <MX_USB_DEVICE_Init+0x5c>)
 800afa8:	4809      	ldr	r0, [pc, #36]	; (800afd0 <MX_USB_DEVICE_Init+0x54>)
 800afaa:	f7fb ff9d 	bl	8006ee8 <USBD_CDC_RegisterInterface>
 800afae:	4603      	mov	r3, r0
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d001      	beq.n	800afb8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800afb4:	f7f5 fe48 	bl	8000c48 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800afb8:	4805      	ldr	r0, [pc, #20]	; (800afd0 <MX_USB_DEVICE_Init+0x54>)
 800afba:	f7fc f845 	bl	8007048 <USBD_Start>
 800afbe:	4603      	mov	r3, r0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d001      	beq.n	800afc8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800afc4:	f7f5 fe40 	bl	8000c48 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800afc8:	bf00      	nop
 800afca:	bd80      	pop	{r7, pc}
 800afcc:	20000130 	.word	0x20000130
 800afd0:	20003adc 	.word	0x20003adc
 800afd4:	20000018 	.word	0x20000018
 800afd8:	20000120 	.word	0x20000120

0800afdc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800afe0:	2200      	movs	r2, #0
 800afe2:	4905      	ldr	r1, [pc, #20]	; (800aff8 <CDC_Init_FS+0x1c>)
 800afe4:	4805      	ldr	r0, [pc, #20]	; (800affc <CDC_Init_FS+0x20>)
 800afe6:	f7fb ff95 	bl	8006f14 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800afea:	4905      	ldr	r1, [pc, #20]	; (800b000 <CDC_Init_FS+0x24>)
 800afec:	4803      	ldr	r0, [pc, #12]	; (800affc <CDC_Init_FS+0x20>)
 800afee:	f7fb ffaa 	bl	8006f46 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aff2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	20003da4 	.word	0x20003da4
 800affc:	20003adc 	.word	0x20003adc
 800b000:	20003da0 	.word	0x20003da0

0800b004 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b004:	b480      	push	{r7}
 800b006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b008:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bc80      	pop	{r7}
 800b010:	4770      	bx	lr
	...

0800b014 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
 800b01a:	4603      	mov	r3, r0
 800b01c:	6039      	str	r1, [r7, #0]
 800b01e:	71fb      	strb	r3, [r7, #7]
 800b020:	4613      	mov	r3, r2
 800b022:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b024:	79fb      	ldrb	r3, [r7, #7]
 800b026:	2b23      	cmp	r3, #35	; 0x23
 800b028:	d84a      	bhi.n	800b0c0 <CDC_Control_FS+0xac>
 800b02a:	a201      	add	r2, pc, #4	; (adr r2, 800b030 <CDC_Control_FS+0x1c>)
 800b02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b030:	0800b0c1 	.word	0x0800b0c1
 800b034:	0800b0c1 	.word	0x0800b0c1
 800b038:	0800b0c1 	.word	0x0800b0c1
 800b03c:	0800b0c1 	.word	0x0800b0c1
 800b040:	0800b0c1 	.word	0x0800b0c1
 800b044:	0800b0c1 	.word	0x0800b0c1
 800b048:	0800b0c1 	.word	0x0800b0c1
 800b04c:	0800b0c1 	.word	0x0800b0c1
 800b050:	0800b0c1 	.word	0x0800b0c1
 800b054:	0800b0c1 	.word	0x0800b0c1
 800b058:	0800b0c1 	.word	0x0800b0c1
 800b05c:	0800b0c1 	.word	0x0800b0c1
 800b060:	0800b0c1 	.word	0x0800b0c1
 800b064:	0800b0c1 	.word	0x0800b0c1
 800b068:	0800b0c1 	.word	0x0800b0c1
 800b06c:	0800b0c1 	.word	0x0800b0c1
 800b070:	0800b0c1 	.word	0x0800b0c1
 800b074:	0800b0c1 	.word	0x0800b0c1
 800b078:	0800b0c1 	.word	0x0800b0c1
 800b07c:	0800b0c1 	.word	0x0800b0c1
 800b080:	0800b0c1 	.word	0x0800b0c1
 800b084:	0800b0c1 	.word	0x0800b0c1
 800b088:	0800b0c1 	.word	0x0800b0c1
 800b08c:	0800b0c1 	.word	0x0800b0c1
 800b090:	0800b0c1 	.word	0x0800b0c1
 800b094:	0800b0c1 	.word	0x0800b0c1
 800b098:	0800b0c1 	.word	0x0800b0c1
 800b09c:	0800b0c1 	.word	0x0800b0c1
 800b0a0:	0800b0c1 	.word	0x0800b0c1
 800b0a4:	0800b0c1 	.word	0x0800b0c1
 800b0a8:	0800b0c1 	.word	0x0800b0c1
 800b0ac:	0800b0c1 	.word	0x0800b0c1
 800b0b0:	0800b0c1 	.word	0x0800b0c1
 800b0b4:	0800b0c1 	.word	0x0800b0c1
 800b0b8:	0800b0c1 	.word	0x0800b0c1
 800b0bc:	0800b0c1 	.word	0x0800b0c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b0c0:	bf00      	nop
  }

  return (USBD_OK);
 800b0c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	370c      	adds	r7, #12
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bc80      	pop	{r7}
 800b0cc:	4770      	bx	lr
 800b0ce:	bf00      	nop

0800b0d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b0da:	6879      	ldr	r1, [r7, #4]
 800b0dc:	4807      	ldr	r0, [pc, #28]	; (800b0fc <CDC_Receive_FS+0x2c>)
 800b0de:	f7fb ff32 	bl	8006f46 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b0e2:	4806      	ldr	r0, [pc, #24]	; (800b0fc <CDC_Receive_FS+0x2c>)
 800b0e4:	f7fb ff42 	bl	8006f6c <USBD_CDC_ReceivePacket>
  CI_getDataChannel_USB(*Buf);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7f5 fb47 	bl	8000780 <CI_getDataChannel_USB>
  return (USBD_OK);
 800b0f2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3708      	adds	r7, #8
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	20003adc 	.word	0x20003adc

0800b100 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b100:	b480      	push	{r7}
 800b102:	b083      	sub	sp, #12
 800b104:	af00      	add	r7, sp, #0
 800b106:	4603      	mov	r3, r0
 800b108:	6039      	str	r1, [r7, #0]
 800b10a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	2212      	movs	r2, #18
 800b110:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b112:	4b03      	ldr	r3, [pc, #12]	; (800b120 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b114:	4618      	mov	r0, r3
 800b116:	370c      	adds	r7, #12
 800b118:	46bd      	mov	sp, r7
 800b11a:	bc80      	pop	{r7}
 800b11c:	4770      	bx	lr
 800b11e:	bf00      	nop
 800b120:	2000014c 	.word	0x2000014c

0800b124 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b124:	b480      	push	{r7}
 800b126:	b083      	sub	sp, #12
 800b128:	af00      	add	r7, sp, #0
 800b12a:	4603      	mov	r3, r0
 800b12c:	6039      	str	r1, [r7, #0]
 800b12e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	2204      	movs	r2, #4
 800b134:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b136:	4b03      	ldr	r3, [pc, #12]	; (800b144 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b138:	4618      	mov	r0, r3
 800b13a:	370c      	adds	r7, #12
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bc80      	pop	{r7}
 800b140:	4770      	bx	lr
 800b142:	bf00      	nop
 800b144:	20000160 	.word	0x20000160

0800b148 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b082      	sub	sp, #8
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	4603      	mov	r3, r0
 800b150:	6039      	str	r1, [r7, #0]
 800b152:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b154:	79fb      	ldrb	r3, [r7, #7]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d105      	bne.n	800b166 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b15a:	683a      	ldr	r2, [r7, #0]
 800b15c:	4907      	ldr	r1, [pc, #28]	; (800b17c <USBD_FS_ProductStrDescriptor+0x34>)
 800b15e:	4808      	ldr	r0, [pc, #32]	; (800b180 <USBD_FS_ProductStrDescriptor+0x38>)
 800b160:	f7fc feea 	bl	8007f38 <USBD_GetString>
 800b164:	e004      	b.n	800b170 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b166:	683a      	ldr	r2, [r7, #0]
 800b168:	4904      	ldr	r1, [pc, #16]	; (800b17c <USBD_FS_ProductStrDescriptor+0x34>)
 800b16a:	4805      	ldr	r0, [pc, #20]	; (800b180 <USBD_FS_ProductStrDescriptor+0x38>)
 800b16c:	f7fc fee4 	bl	8007f38 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b170:	4b02      	ldr	r3, [pc, #8]	; (800b17c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b172:	4618      	mov	r0, r3
 800b174:	3708      	adds	r7, #8
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	20003db8 	.word	0x20003db8
 800b180:	0800c3b8 	.word	0x0800c3b8

0800b184 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	4603      	mov	r3, r0
 800b18c:	6039      	str	r1, [r7, #0]
 800b18e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b190:	683a      	ldr	r2, [r7, #0]
 800b192:	4904      	ldr	r1, [pc, #16]	; (800b1a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b194:	4804      	ldr	r0, [pc, #16]	; (800b1a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b196:	f7fc fecf 	bl	8007f38 <USBD_GetString>
  return USBD_StrDesc;
 800b19a:	4b02      	ldr	r3, [pc, #8]	; (800b1a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3708      	adds	r7, #8
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	20003db8 	.word	0x20003db8
 800b1a8:	0800c3cc 	.word	0x0800c3cc

0800b1ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	6039      	str	r1, [r7, #0]
 800b1b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	221a      	movs	r2, #26
 800b1bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b1be:	f000 f843 	bl	800b248 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b1c2:	4b02      	ldr	r3, [pc, #8]	; (800b1cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	20000164 	.word	0x20000164

0800b1d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	6039      	str	r1, [r7, #0]
 800b1da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b1dc:	79fb      	ldrb	r3, [r7, #7]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d105      	bne.n	800b1ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b1e2:	683a      	ldr	r2, [r7, #0]
 800b1e4:	4907      	ldr	r1, [pc, #28]	; (800b204 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b1e6:	4808      	ldr	r0, [pc, #32]	; (800b208 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b1e8:	f7fc fea6 	bl	8007f38 <USBD_GetString>
 800b1ec:	e004      	b.n	800b1f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b1ee:	683a      	ldr	r2, [r7, #0]
 800b1f0:	4904      	ldr	r1, [pc, #16]	; (800b204 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b1f2:	4805      	ldr	r0, [pc, #20]	; (800b208 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b1f4:	f7fc fea0 	bl	8007f38 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b1f8:	4b02      	ldr	r3, [pc, #8]	; (800b204 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3708      	adds	r7, #8
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	20003db8 	.word	0x20003db8
 800b208:	0800c3d8 	.word	0x0800c3d8

0800b20c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	4603      	mov	r3, r0
 800b214:	6039      	str	r1, [r7, #0]
 800b216:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b218:	79fb      	ldrb	r3, [r7, #7]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d105      	bne.n	800b22a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b21e:	683a      	ldr	r2, [r7, #0]
 800b220:	4907      	ldr	r1, [pc, #28]	; (800b240 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b222:	4808      	ldr	r0, [pc, #32]	; (800b244 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b224:	f7fc fe88 	bl	8007f38 <USBD_GetString>
 800b228:	e004      	b.n	800b234 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b22a:	683a      	ldr	r2, [r7, #0]
 800b22c:	4904      	ldr	r1, [pc, #16]	; (800b240 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b22e:	4805      	ldr	r0, [pc, #20]	; (800b244 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b230:	f7fc fe82 	bl	8007f38 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b234:	4b02      	ldr	r3, [pc, #8]	; (800b240 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b236:	4618      	mov	r0, r3
 800b238:	3708      	adds	r7, #8
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	20003db8 	.word	0x20003db8
 800b244:	0800c3e4 	.word	0x0800c3e4

0800b248 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b24e:	4b0f      	ldr	r3, [pc, #60]	; (800b28c <Get_SerialNum+0x44>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b254:	4b0e      	ldr	r3, [pc, #56]	; (800b290 <Get_SerialNum+0x48>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b25a:	4b0e      	ldr	r3, [pc, #56]	; (800b294 <Get_SerialNum+0x4c>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b260:	68fa      	ldr	r2, [r7, #12]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	4413      	add	r3, r2
 800b266:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d009      	beq.n	800b282 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b26e:	2208      	movs	r2, #8
 800b270:	4909      	ldr	r1, [pc, #36]	; (800b298 <Get_SerialNum+0x50>)
 800b272:	68f8      	ldr	r0, [r7, #12]
 800b274:	f000 f814 	bl	800b2a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b278:	2204      	movs	r2, #4
 800b27a:	4908      	ldr	r1, [pc, #32]	; (800b29c <Get_SerialNum+0x54>)
 800b27c:	68b8      	ldr	r0, [r7, #8]
 800b27e:	f000 f80f 	bl	800b2a0 <IntToUnicode>
  }
}
 800b282:	bf00      	nop
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	1ffff7e8 	.word	0x1ffff7e8
 800b290:	1ffff7ec 	.word	0x1ffff7ec
 800b294:	1ffff7f0 	.word	0x1ffff7f0
 800b298:	20000166 	.word	0x20000166
 800b29c:	20000176 	.word	0x20000176

0800b2a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b087      	sub	sp, #28
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	4613      	mov	r3, r2
 800b2ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	75fb      	strb	r3, [r7, #23]
 800b2b6:	e027      	b.n	800b308 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	0f1b      	lsrs	r3, r3, #28
 800b2bc:	2b09      	cmp	r3, #9
 800b2be:	d80b      	bhi.n	800b2d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	0f1b      	lsrs	r3, r3, #28
 800b2c4:	b2da      	uxtb	r2, r3
 800b2c6:	7dfb      	ldrb	r3, [r7, #23]
 800b2c8:	005b      	lsls	r3, r3, #1
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	440b      	add	r3, r1
 800b2d0:	3230      	adds	r2, #48	; 0x30
 800b2d2:	b2d2      	uxtb	r2, r2
 800b2d4:	701a      	strb	r2, [r3, #0]
 800b2d6:	e00a      	b.n	800b2ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	0f1b      	lsrs	r3, r3, #28
 800b2dc:	b2da      	uxtb	r2, r3
 800b2de:	7dfb      	ldrb	r3, [r7, #23]
 800b2e0:	005b      	lsls	r3, r3, #1
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	440b      	add	r3, r1
 800b2e8:	3237      	adds	r2, #55	; 0x37
 800b2ea:	b2d2      	uxtb	r2, r2
 800b2ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	011b      	lsls	r3, r3, #4
 800b2f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b2f4:	7dfb      	ldrb	r3, [r7, #23]
 800b2f6:	005b      	lsls	r3, r3, #1
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	68ba      	ldr	r2, [r7, #8]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	2200      	movs	r2, #0
 800b300:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b302:	7dfb      	ldrb	r3, [r7, #23]
 800b304:	3301      	adds	r3, #1
 800b306:	75fb      	strb	r3, [r7, #23]
 800b308:	7dfa      	ldrb	r2, [r7, #23]
 800b30a:	79fb      	ldrb	r3, [r7, #7]
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d3d3      	bcc.n	800b2b8 <IntToUnicode+0x18>
  }
}
 800b310:	bf00      	nop
 800b312:	bf00      	nop
 800b314:	371c      	adds	r7, #28
 800b316:	46bd      	mov	sp, r7
 800b318:	bc80      	pop	{r7}
 800b31a:	4770      	bx	lr

0800b31c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4a0d      	ldr	r2, [pc, #52]	; (800b360 <HAL_PCD_MspInit+0x44>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d113      	bne.n	800b356 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b32e:	4b0d      	ldr	r3, [pc, #52]	; (800b364 <HAL_PCD_MspInit+0x48>)
 800b330:	69db      	ldr	r3, [r3, #28]
 800b332:	4a0c      	ldr	r2, [pc, #48]	; (800b364 <HAL_PCD_MspInit+0x48>)
 800b334:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b338:	61d3      	str	r3, [r2, #28]
 800b33a:	4b0a      	ldr	r3, [pc, #40]	; (800b364 <HAL_PCD_MspInit+0x48>)
 800b33c:	69db      	ldr	r3, [r3, #28]
 800b33e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b342:	60fb      	str	r3, [r7, #12]
 800b344:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800b346:	2200      	movs	r2, #0
 800b348:	2105      	movs	r1, #5
 800b34a:	2014      	movs	r0, #20
 800b34c:	f7f5 ff77 	bl	800123e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b350:	2014      	movs	r0, #20
 800b352:	f7f5 ff90 	bl	8001276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b356:	bf00      	nop
 800b358:	3710      	adds	r7, #16
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	40005c00 	.word	0x40005c00
 800b364:	40021000 	.word	0x40021000

0800b368 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b082      	sub	sp, #8
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b37c:	4619      	mov	r1, r3
 800b37e:	4610      	mov	r0, r2
 800b380:	f7fb feaa 	bl	80070d8 <USBD_LL_SetupStage>
}
 800b384:	bf00      	nop
 800b386:	3708      	adds	r7, #8
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	460b      	mov	r3, r1
 800b396:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b39e:	78fa      	ldrb	r2, [r7, #3]
 800b3a0:	6879      	ldr	r1, [r7, #4]
 800b3a2:	4613      	mov	r3, r2
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	4413      	add	r3, r2
 800b3a8:	00db      	lsls	r3, r3, #3
 800b3aa:	440b      	add	r3, r1
 800b3ac:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	78fb      	ldrb	r3, [r7, #3]
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	f7fb fedc 	bl	8007172 <USBD_LL_DataOutStage>
}
 800b3ba:	bf00      	nop
 800b3bc:	3708      	adds	r7, #8
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}

0800b3c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b082      	sub	sp, #8
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b3d4:	78fa      	ldrb	r2, [r7, #3]
 800b3d6:	6879      	ldr	r1, [r7, #4]
 800b3d8:	4613      	mov	r3, r2
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	4413      	add	r3, r2
 800b3de:	00db      	lsls	r3, r3, #3
 800b3e0:	440b      	add	r3, r1
 800b3e2:	333c      	adds	r3, #60	; 0x3c
 800b3e4:	681a      	ldr	r2, [r3, #0]
 800b3e6:	78fb      	ldrb	r3, [r7, #3]
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	f7fb ff33 	bl	8007254 <USBD_LL_DataInStage>
}
 800b3ee:	bf00      	nop
 800b3f0:	3708      	adds	r7, #8
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b082      	sub	sp, #8
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b404:	4618      	mov	r0, r3
 800b406:	f7fc f843 	bl	8007490 <USBD_LL_SOF>
}
 800b40a:	bf00      	nop
 800b40c:	3708      	adds	r7, #8
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b412:	b580      	push	{r7, lr}
 800b414:	b084      	sub	sp, #16
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b41a:	2301      	movs	r3, #1
 800b41c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	689b      	ldr	r3, [r3, #8]
 800b422:	2b02      	cmp	r3, #2
 800b424:	d001      	beq.n	800b42a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b426:	f7f5 fc0f 	bl	8000c48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b430:	7bfa      	ldrb	r2, [r7, #15]
 800b432:	4611      	mov	r1, r2
 800b434:	4618      	mov	r0, r3
 800b436:	f7fb fff3 	bl	8007420 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b440:	4618      	mov	r0, r3
 800b442:	f7fb ffac 	bl	800739e <USBD_LL_Reset>
}
 800b446:	bf00      	nop
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
	...

0800b450 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b082      	sub	sp, #8
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b45e:	4618      	mov	r0, r3
 800b460:	f7fb ffed 	bl	800743e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	699b      	ldr	r3, [r3, #24]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d005      	beq.n	800b478 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b46c:	4b04      	ldr	r3, [pc, #16]	; (800b480 <HAL_PCD_SuspendCallback+0x30>)
 800b46e:	691b      	ldr	r3, [r3, #16]
 800b470:	4a03      	ldr	r2, [pc, #12]	; (800b480 <HAL_PCD_SuspendCallback+0x30>)
 800b472:	f043 0306 	orr.w	r3, r3, #6
 800b476:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b478:	bf00      	nop
 800b47a:	3708      	adds	r7, #8
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	e000ed00 	.word	0xe000ed00

0800b484 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b492:	4618      	mov	r0, r3
 800b494:	f7fb ffe7 	bl	8007466 <USBD_LL_Resume>
}
 800b498:	bf00      	nop
 800b49a:	3708      	adds	r7, #8
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b4a8:	4a28      	ldr	r2, [pc, #160]	; (800b54c <USBD_LL_Init+0xac>)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	4a26      	ldr	r2, [pc, #152]	; (800b54c <USBD_LL_Init+0xac>)
 800b4b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b4b8:	4b24      	ldr	r3, [pc, #144]	; (800b54c <USBD_LL_Init+0xac>)
 800b4ba:	4a25      	ldr	r2, [pc, #148]	; (800b550 <USBD_LL_Init+0xb0>)
 800b4bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b4be:	4b23      	ldr	r3, [pc, #140]	; (800b54c <USBD_LL_Init+0xac>)
 800b4c0:	2208      	movs	r2, #8
 800b4c2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b4c4:	4b21      	ldr	r3, [pc, #132]	; (800b54c <USBD_LL_Init+0xac>)
 800b4c6:	2202      	movs	r2, #2
 800b4c8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b4ca:	4b20      	ldr	r3, [pc, #128]	; (800b54c <USBD_LL_Init+0xac>)
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b4d0:	4b1e      	ldr	r3, [pc, #120]	; (800b54c <USBD_LL_Init+0xac>)
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b4d6:	4b1d      	ldr	r3, [pc, #116]	; (800b54c <USBD_LL_Init+0xac>)
 800b4d8:	2200      	movs	r2, #0
 800b4da:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b4dc:	481b      	ldr	r0, [pc, #108]	; (800b54c <USBD_LL_Init+0xac>)
 800b4de:	f7f6 fa7b 	bl	80019d8 <HAL_PCD_Init>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d001      	beq.n	800b4ec <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b4e8:	f7f5 fbae 	bl	8000c48 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b4f2:	2318      	movs	r3, #24
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	2100      	movs	r1, #0
 800b4f8:	f7f7 fdbd 	bl	8003076 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b502:	2358      	movs	r3, #88	; 0x58
 800b504:	2200      	movs	r2, #0
 800b506:	2180      	movs	r1, #128	; 0x80
 800b508:	f7f7 fdb5 	bl	8003076 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b512:	23c0      	movs	r3, #192	; 0xc0
 800b514:	2200      	movs	r2, #0
 800b516:	2181      	movs	r1, #129	; 0x81
 800b518:	f7f7 fdad 	bl	8003076 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b522:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b526:	2200      	movs	r2, #0
 800b528:	2101      	movs	r1, #1
 800b52a:	f7f7 fda4 	bl	8003076 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b534:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b538:	2200      	movs	r2, #0
 800b53a:	2182      	movs	r1, #130	; 0x82
 800b53c:	f7f7 fd9b 	bl	8003076 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b540:	2300      	movs	r3, #0
}
 800b542:	4618      	mov	r0, r3
 800b544:	3708      	adds	r7, #8
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	20003df8 	.word	0x20003df8
 800b550:	40005c00 	.word	0x40005c00

0800b554 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b55c:	2300      	movs	r3, #0
 800b55e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b560:	2300      	movs	r3, #0
 800b562:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7f6 fb3f 	bl	8001bee <HAL_PCD_Start>
 800b570:	4603      	mov	r3, r0
 800b572:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b574:	7bfb      	ldrb	r3, [r7, #15]
 800b576:	4618      	mov	r0, r3
 800b578:	f000 f94e 	bl	800b818 <USBD_Get_USB_Status>
 800b57c:	4603      	mov	r3, r0
 800b57e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b580:	7bbb      	ldrb	r3, [r7, #14]
}
 800b582:	4618      	mov	r0, r3
 800b584:	3710      	adds	r7, #16
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}

0800b58a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b084      	sub	sp, #16
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
 800b592:	4608      	mov	r0, r1
 800b594:	4611      	mov	r1, r2
 800b596:	461a      	mov	r2, r3
 800b598:	4603      	mov	r3, r0
 800b59a:	70fb      	strb	r3, [r7, #3]
 800b59c:	460b      	mov	r3, r1
 800b59e:	70bb      	strb	r3, [r7, #2]
 800b5a0:	4613      	mov	r3, r2
 800b5a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b5b2:	78bb      	ldrb	r3, [r7, #2]
 800b5b4:	883a      	ldrh	r2, [r7, #0]
 800b5b6:	78f9      	ldrb	r1, [r7, #3]
 800b5b8:	f7f6 fcb9 	bl	8001f2e <HAL_PCD_EP_Open>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5c0:	7bfb      	ldrb	r3, [r7, #15]
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f000 f928 	bl	800b818 <USBD_Get_USB_Status>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3710      	adds	r7, #16
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}

0800b5d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5d6:	b580      	push	{r7, lr}
 800b5d8:	b084      	sub	sp, #16
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
 800b5de:	460b      	mov	r3, r1
 800b5e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5f0:	78fa      	ldrb	r2, [r7, #3]
 800b5f2:	4611      	mov	r1, r2
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f7f6 fd00 	bl	8001ffa <HAL_PCD_EP_Close>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5fe:	7bfb      	ldrb	r3, [r7, #15]
 800b600:	4618      	mov	r0, r3
 800b602:	f000 f909 	bl	800b818 <USBD_Get_USB_Status>
 800b606:	4603      	mov	r3, r0
 800b608:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b60a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3710      	adds	r7, #16
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b084      	sub	sp, #16
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	460b      	mov	r3, r1
 800b61e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b620:	2300      	movs	r3, #0
 800b622:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b624:	2300      	movs	r3, #0
 800b626:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b62e:	78fa      	ldrb	r2, [r7, #3]
 800b630:	4611      	mov	r1, r2
 800b632:	4618      	mov	r0, r3
 800b634:	f7f6 fdc0 	bl	80021b8 <HAL_PCD_EP_SetStall>
 800b638:	4603      	mov	r3, r0
 800b63a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b63c:	7bfb      	ldrb	r3, [r7, #15]
 800b63e:	4618      	mov	r0, r3
 800b640:	f000 f8ea 	bl	800b818 <USBD_Get_USB_Status>
 800b644:	4603      	mov	r3, r0
 800b646:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b648:	7bbb      	ldrb	r3, [r7, #14]
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3710      	adds	r7, #16
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b652:	b580      	push	{r7, lr}
 800b654:	b084      	sub	sp, #16
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
 800b65a:	460b      	mov	r3, r1
 800b65c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b65e:	2300      	movs	r3, #0
 800b660:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b662:	2300      	movs	r3, #0
 800b664:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b66c:	78fa      	ldrb	r2, [r7, #3]
 800b66e:	4611      	mov	r1, r2
 800b670:	4618      	mov	r0, r3
 800b672:	f7f6 fe01 	bl	8002278 <HAL_PCD_EP_ClrStall>
 800b676:	4603      	mov	r3, r0
 800b678:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b67a:	7bfb      	ldrb	r3, [r7, #15]
 800b67c:	4618      	mov	r0, r3
 800b67e:	f000 f8cb 	bl	800b818 <USBD_Get_USB_Status>
 800b682:	4603      	mov	r3, r0
 800b684:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b686:	7bbb      	ldrb	r3, [r7, #14]
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3710      	adds	r7, #16
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b690:	b480      	push	{r7}
 800b692:	b085      	sub	sp, #20
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	460b      	mov	r3, r1
 800b69a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b6a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b6a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	da0c      	bge.n	800b6c6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b6ac:	78fb      	ldrb	r3, [r7, #3]
 800b6ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6b2:	68f9      	ldr	r1, [r7, #12]
 800b6b4:	1c5a      	adds	r2, r3, #1
 800b6b6:	4613      	mov	r3, r2
 800b6b8:	009b      	lsls	r3, r3, #2
 800b6ba:	4413      	add	r3, r2
 800b6bc:	00db      	lsls	r3, r3, #3
 800b6be:	440b      	add	r3, r1
 800b6c0:	3302      	adds	r3, #2
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	e00b      	b.n	800b6de <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b6c6:	78fb      	ldrb	r3, [r7, #3]
 800b6c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b6cc:	68f9      	ldr	r1, [r7, #12]
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	009b      	lsls	r3, r3, #2
 800b6d2:	4413      	add	r3, r2
 800b6d4:	00db      	lsls	r3, r3, #3
 800b6d6:	440b      	add	r3, r1
 800b6d8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b6dc:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3714      	adds	r7, #20
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bc80      	pop	{r7}
 800b6e6:	4770      	bx	lr

0800b6e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b084      	sub	sp, #16
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b702:	78fa      	ldrb	r2, [r7, #3]
 800b704:	4611      	mov	r1, r2
 800b706:	4618      	mov	r0, r3
 800b708:	f7f6 fbec 	bl	8001ee4 <HAL_PCD_SetAddress>
 800b70c:	4603      	mov	r3, r0
 800b70e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b710:	7bfb      	ldrb	r3, [r7, #15]
 800b712:	4618      	mov	r0, r3
 800b714:	f000 f880 	bl	800b818 <USBD_Get_USB_Status>
 800b718:	4603      	mov	r3, r0
 800b71a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b71c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3710      	adds	r7, #16
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}

0800b726 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b726:	b580      	push	{r7, lr}
 800b728:	b086      	sub	sp, #24
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	60f8      	str	r0, [r7, #12]
 800b72e:	607a      	str	r2, [r7, #4]
 800b730:	461a      	mov	r2, r3
 800b732:	460b      	mov	r3, r1
 800b734:	72fb      	strb	r3, [r7, #11]
 800b736:	4613      	mov	r3, r2
 800b738:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b73a:	2300      	movs	r3, #0
 800b73c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b73e:	2300      	movs	r3, #0
 800b740:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b748:	893b      	ldrh	r3, [r7, #8]
 800b74a:	7af9      	ldrb	r1, [r7, #11]
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	f7f6 fcf0 	bl	8002132 <HAL_PCD_EP_Transmit>
 800b752:	4603      	mov	r3, r0
 800b754:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b756:	7dfb      	ldrb	r3, [r7, #23]
 800b758:	4618      	mov	r0, r3
 800b75a:	f000 f85d 	bl	800b818 <USBD_Get_USB_Status>
 800b75e:	4603      	mov	r3, r0
 800b760:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b762:	7dbb      	ldrb	r3, [r7, #22]
}
 800b764:	4618      	mov	r0, r3
 800b766:	3718      	adds	r7, #24
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b086      	sub	sp, #24
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	607a      	str	r2, [r7, #4]
 800b776:	461a      	mov	r2, r3
 800b778:	460b      	mov	r3, r1
 800b77a:	72fb      	strb	r3, [r7, #11]
 800b77c:	4613      	mov	r3, r2
 800b77e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b780:	2300      	movs	r3, #0
 800b782:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b784:	2300      	movs	r3, #0
 800b786:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b78e:	893b      	ldrh	r3, [r7, #8]
 800b790:	7af9      	ldrb	r1, [r7, #11]
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	f7f6 fc79 	bl	800208a <HAL_PCD_EP_Receive>
 800b798:	4603      	mov	r3, r0
 800b79a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b79c:	7dfb      	ldrb	r3, [r7, #23]
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f000 f83a 	bl	800b818 <USBD_Get_USB_Status>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b7a8:	7dbb      	ldrb	r3, [r7, #22]
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3718      	adds	r7, #24
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b082      	sub	sp, #8
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
 800b7ba:	460b      	mov	r3, r1
 800b7bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7c4:	78fa      	ldrb	r2, [r7, #3]
 800b7c6:	4611      	mov	r1, r2
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7f6 fc9b 	bl	8002104 <HAL_PCD_EP_GetRxCount>
 800b7ce:	4603      	mov	r3, r0
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3708      	adds	r7, #8
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b7e0:	4b02      	ldr	r3, [pc, #8]	; (800b7ec <USBD_static_malloc+0x14>)
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	370c      	adds	r7, #12
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bc80      	pop	{r7}
 800b7ea:	4770      	bx	lr
 800b7ec:	200036cc 	.word	0x200036cc

0800b7f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b083      	sub	sp, #12
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]

}
 800b7f8:	bf00      	nop
 800b7fa:	370c      	adds	r7, #12
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bc80      	pop	{r7}
 800b800:	4770      	bx	lr

0800b802 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b802:	b480      	push	{r7}
 800b804:	b083      	sub	sp, #12
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
 800b80a:	460b      	mov	r3, r1
 800b80c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b80e:	bf00      	nop
 800b810:	370c      	adds	r7, #12
 800b812:	46bd      	mov	sp, r7
 800b814:	bc80      	pop	{r7}
 800b816:	4770      	bx	lr

0800b818 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b818:	b480      	push	{r7}
 800b81a:	b085      	sub	sp, #20
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	4603      	mov	r3, r0
 800b820:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b822:	2300      	movs	r3, #0
 800b824:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b826:	79fb      	ldrb	r3, [r7, #7]
 800b828:	2b03      	cmp	r3, #3
 800b82a:	d817      	bhi.n	800b85c <USBD_Get_USB_Status+0x44>
 800b82c:	a201      	add	r2, pc, #4	; (adr r2, 800b834 <USBD_Get_USB_Status+0x1c>)
 800b82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b832:	bf00      	nop
 800b834:	0800b845 	.word	0x0800b845
 800b838:	0800b84b 	.word	0x0800b84b
 800b83c:	0800b851 	.word	0x0800b851
 800b840:	0800b857 	.word	0x0800b857
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b844:	2300      	movs	r3, #0
 800b846:	73fb      	strb	r3, [r7, #15]
    break;
 800b848:	e00b      	b.n	800b862 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b84a:	2302      	movs	r3, #2
 800b84c:	73fb      	strb	r3, [r7, #15]
    break;
 800b84e:	e008      	b.n	800b862 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b850:	2301      	movs	r3, #1
 800b852:	73fb      	strb	r3, [r7, #15]
    break;
 800b854:	e005      	b.n	800b862 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b856:	2302      	movs	r3, #2
 800b858:	73fb      	strb	r3, [r7, #15]
    break;
 800b85a:	e002      	b.n	800b862 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b85c:	2302      	movs	r3, #2
 800b85e:	73fb      	strb	r3, [r7, #15]
    break;
 800b860:	bf00      	nop
  }
  return usb_status;
 800b862:	7bfb      	ldrb	r3, [r7, #15]
}
 800b864:	4618      	mov	r0, r3
 800b866:	3714      	adds	r7, #20
 800b868:	46bd      	mov	sp, r7
 800b86a:	bc80      	pop	{r7}
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop

0800b870 <MDI_writeSmallDataWithRegister>:
 * @brief Write small data to Motor Driver
 * @param uartChannel -> get uart channel
 * @param data -> data to write
 * @return none
 */
void MDI_writeSmallDataWithRegister(UART_HandleTypeDef *uartChannel, uint8_t data){
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	460b      	mov	r3, r1
 800b87a:	70fb      	strb	r3, [r7, #3]
	while((uartChannel->Instance->SR & USART_SR_TXE)!=USART_SR_TXE);
 800b87c:	bf00      	nop
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b888:	2b80      	cmp	r3, #128	; 0x80
 800b88a:	d1f8      	bne.n	800b87e <MDI_writeSmallDataWithRegister+0xe>
	uartChannel->Instance->DR=data;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	78fa      	ldrb	r2, [r7, #3]
 800b892:	605a      	str	r2, [r3, #4]
	while((uartChannel->Instance->SR & USART_SR_TC)!=USART_SR_TC);
 800b894:	bf00      	nop
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8a0:	2b40      	cmp	r3, #64	; 0x40
 800b8a2:	d1f8      	bne.n	800b896 <MDI_writeSmallDataWithRegister+0x26>
}
 800b8a4:	bf00      	nop
 800b8a6:	bf00      	nop
 800b8a8:	370c      	adds	r7, #12
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bc80      	pop	{r7}
 800b8ae:	4770      	bx	lr

0800b8b0 <MDI_sendDataChannel1Ver2>:
 * @param kd -> get Pid kd value
 * @param factor -> get factor of Pid elements
 * @return none
 */
void MDI_sendDataChannel1Ver2(uint16_t angleVal, uint8_t kp, uint8_t ki,
		uint8_t kd, uint8_t factor) {
 800b8b0:	b590      	push	{r4, r7, lr}
 800b8b2:	b089      	sub	sp, #36	; 0x24
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	4604      	mov	r4, r0
 800b8b8:	4608      	mov	r0, r1
 800b8ba:	4611      	mov	r1, r2
 800b8bc:	461a      	mov	r2, r3
 800b8be:	4623      	mov	r3, r4
 800b8c0:	80fb      	strh	r3, [r7, #6]
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	717b      	strb	r3, [r7, #5]
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	713b      	strb	r3, [r7, #4]
 800b8ca:	4613      	mov	r3, r2
 800b8cc:	70fb      	strb	r3, [r7, #3]
	uint16_t checksumTmp = 0;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	83bb      	strh	r3, [r7, #28]
	uint8_t tmpArr[] = { angleVal >> 8, angleVal & 0xFF };
 800b8d2:	88fb      	ldrh	r3, [r7, #6]
 800b8d4:	0a1b      	lsrs	r3, r3, #8
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	b2db      	uxtb	r3, r3
 800b8da:	763b      	strb	r3, [r7, #24]
 800b8dc:	88fb      	ldrh	r3, [r7, #6]
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	767b      	strb	r3, [r7, #25]
	checksumTmp += tmpArr[0];
 800b8e2:	7e3b      	ldrb	r3, [r7, #24]
 800b8e4:	b29a      	uxth	r2, r3
 800b8e6:	8bbb      	ldrh	r3, [r7, #28]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	83bb      	strh	r3, [r7, #28]
	checksumTmp += tmpArr[1];
 800b8ec:	7e7b      	ldrb	r3, [r7, #25]
 800b8ee:	b29a      	uxth	r2, r3
 800b8f0:	8bbb      	ldrh	r3, [r7, #28]
 800b8f2:	4413      	add	r3, r2
 800b8f4:	83bb      	strh	r3, [r7, #28]
	checksumTmp += kp;
 800b8f6:	797b      	ldrb	r3, [r7, #5]
 800b8f8:	b29a      	uxth	r2, r3
 800b8fa:	8bbb      	ldrh	r3, [r7, #28]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	83bb      	strh	r3, [r7, #28]
	checksumTmp += ki;
 800b900:	793b      	ldrb	r3, [r7, #4]
 800b902:	b29a      	uxth	r2, r3
 800b904:	8bbb      	ldrh	r3, [r7, #28]
 800b906:	4413      	add	r3, r2
 800b908:	83bb      	strh	r3, [r7, #28]
	checksumTmp += kd;
 800b90a:	78fb      	ldrb	r3, [r7, #3]
 800b90c:	b29a      	uxth	r2, r3
 800b90e:	8bbb      	ldrh	r3, [r7, #28]
 800b910:	4413      	add	r3, r2
 800b912:	83bb      	strh	r3, [r7, #28]
	checksumTmp += factor;
 800b914:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b918:	b29a      	uxth	r2, r3
 800b91a:	8bbb      	ldrh	r3, [r7, #28]
 800b91c:	4413      	add	r3, r2
 800b91e:	83bb      	strh	r3, [r7, #28]
	uint8_t tmp = checksumTmp % 256;
 800b920:	8bbb      	ldrh	r3, [r7, #28]
 800b922:	76fb      	strb	r3, [r7, #27]
	uint8_t tmpComp = ~tmp;
 800b924:	7efb      	ldrb	r3, [r7, #27]
 800b926:	43db      	mvns	r3, r3
 800b928:	76bb      	strb	r3, [r7, #26]
	uint8_t sendBuff[10] = { 0XFF, 0XFF, tmpArr[0], tmpArr[1], kp, ki, kd,
 800b92a:	23ff      	movs	r3, #255	; 0xff
 800b92c:	733b      	strb	r3, [r7, #12]
 800b92e:	23ff      	movs	r3, #255	; 0xff
 800b930:	737b      	strb	r3, [r7, #13]
 800b932:	7e3b      	ldrb	r3, [r7, #24]
 800b934:	73bb      	strb	r3, [r7, #14]
 800b936:	7e7b      	ldrb	r3, [r7, #25]
 800b938:	73fb      	strb	r3, [r7, #15]
 800b93a:	797b      	ldrb	r3, [r7, #5]
 800b93c:	743b      	strb	r3, [r7, #16]
 800b93e:	793b      	ldrb	r3, [r7, #4]
 800b940:	747b      	strb	r3, [r7, #17]
 800b942:	78fb      	ldrb	r3, [r7, #3]
 800b944:	74bb      	strb	r3, [r7, #18]
 800b946:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b94a:	74fb      	strb	r3, [r7, #19]
 800b94c:	7efb      	ldrb	r3, [r7, #27]
 800b94e:	753b      	strb	r3, [r7, #20]
 800b950:	7ebb      	ldrb	r3, [r7, #26]
 800b952:	757b      	strb	r3, [r7, #21]
			factor, tmp, tmpComp };
	for (uint8_t counter = 0; counter < 10; counter++) {
 800b954:	2300      	movs	r3, #0
 800b956:	77fb      	strb	r3, [r7, #31]
 800b958:	e00f      	b.n	800b97a <MDI_sendDataChannel1Ver2+0xca>
		MDI_writeSmallDataWithRegister(&MDI_channel1TX, sendBuff[counter]);
 800b95a:	7ffb      	ldrb	r3, [r7, #31]
 800b95c:	f107 0220 	add.w	r2, r7, #32
 800b960:	4413      	add	r3, r2
 800b962:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800b966:	4619      	mov	r1, r3
 800b968:	4808      	ldr	r0, [pc, #32]	; (800b98c <MDI_sendDataChannel1Ver2+0xdc>)
 800b96a:	f7ff ff81 	bl	800b870 <MDI_writeSmallDataWithRegister>
#if SEND_VAL_CHECK==0
		vTaskDelay(1);
 800b96e:	2001      	movs	r0, #1
 800b970:	f7fd fdbe 	bl	80094f0 <vTaskDelay>
	for (uint8_t counter = 0; counter < 10; counter++) {
 800b974:	7ffb      	ldrb	r3, [r7, #31]
 800b976:	3301      	adds	r3, #1
 800b978:	77fb      	strb	r3, [r7, #31]
 800b97a:	7ffb      	ldrb	r3, [r7, #31]
 800b97c:	2b09      	cmp	r3, #9
 800b97e:	d9ec      	bls.n	800b95a <MDI_sendDataChannel1Ver2+0xaa>
#elif SEND_VAL_CHECK==1
		vTaskDelay(50);
#endif
	}
}
 800b980:	bf00      	nop
 800b982:	bf00      	nop
 800b984:	3724      	adds	r7, #36	; 0x24
 800b986:	46bd      	mov	sp, r7
 800b988:	bd90      	pop	{r4, r7, pc}
 800b98a:	bf00      	nop
 800b98c:	200039fc 	.word	0x200039fc

0800b990 <MDI_enableGetDataChannel1>:
uint8_t  getTmpCH1 = 0;
/**
 * @brief set enable for MDI channel 1 receive
 * @return none
 */
void MDI_enableGetDataChannel1(void){
 800b990:	b580      	push	{r7, lr}
 800b992:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&MDI_channel1RX,&getTmpCH1,1);
 800b994:	2201      	movs	r2, #1
 800b996:	4903      	ldr	r1, [pc, #12]	; (800b9a4 <MDI_enableGetDataChannel1+0x14>)
 800b998:	4803      	ldr	r0, [pc, #12]	; (800b9a8 <MDI_enableGetDataChannel1+0x18>)
 800b99a:	f7f8 fb46 	bl	800402a <HAL_UART_Receive_IT>
}
 800b99e:	bf00      	nop
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	200038ec 	.word	0x200038ec
 800b9a8:	200039fc 	.word	0x200039fc

0800b9ac <MDI_getDataChannel1_IT>:
static uint8_t tmpArr1[10];
/**
 * @brief get to Motor Driver 1 values
 * @return none
 */
void MDI_getDataChannel1_IT(UART_HandleTypeDef *callBackHandle) {
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b086      	sub	sp, #24
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
	volatile UART_HandleTypeDef *tmpHandle;
	tmpHandle = &MDI_channel1RX;
 800b9b4:	4b3b      	ldr	r3, [pc, #236]	; (800baa4 <MDI_getDataChannel1_IT+0xf8>)
 800b9b6:	613b      	str	r3, [r7, #16]
	if(callBackHandle->Instance == tmpHandle->Instance){
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d16a      	bne.n	800ba9a <MDI_getDataChannel1_IT+0xee>
		static uint8_t counter = 0, getTmpBeff = 0;
			if (0xFF == getTmpCH1 && 0xFF == getTmpBeff) {
 800b9c4:	4b38      	ldr	r3, [pc, #224]	; (800baa8 <MDI_getDataChannel1_IT+0xfc>)
 800b9c6:	781b      	ldrb	r3, [r3, #0]
 800b9c8:	2bff      	cmp	r3, #255	; 0xff
 800b9ca:	d10c      	bne.n	800b9e6 <MDI_getDataChannel1_IT+0x3a>
 800b9cc:	4b37      	ldr	r3, [pc, #220]	; (800baac <MDI_getDataChannel1_IT+0x100>)
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	2bff      	cmp	r3, #255	; 0xff
 800b9d2:	d108      	bne.n	800b9e6 <MDI_getDataChannel1_IT+0x3a>
					tmpArr1[0] = 0xFF;
 800b9d4:	4b36      	ldr	r3, [pc, #216]	; (800bab0 <MDI_getDataChannel1_IT+0x104>)
 800b9d6:	22ff      	movs	r2, #255	; 0xff
 800b9d8:	701a      	strb	r2, [r3, #0]
					tmpArr1[1] = 0xFF;
 800b9da:	4b35      	ldr	r3, [pc, #212]	; (800bab0 <MDI_getDataChannel1_IT+0x104>)
 800b9dc:	22ff      	movs	r2, #255	; 0xff
 800b9de:	705a      	strb	r2, [r3, #1]
					counter = 1;
 800b9e0:	4b34      	ldr	r3, [pc, #208]	; (800bab4 <MDI_getDataChannel1_IT+0x108>)
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	701a      	strb	r2, [r3, #0]
				}
				tmpArr1[counter] = getTmpCH1;
 800b9e6:	4b33      	ldr	r3, [pc, #204]	; (800bab4 <MDI_getDataChannel1_IT+0x108>)
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	4b2e      	ldr	r3, [pc, #184]	; (800baa8 <MDI_getDataChannel1_IT+0xfc>)
 800b9ee:	7819      	ldrb	r1, [r3, #0]
 800b9f0:	4b2f      	ldr	r3, [pc, #188]	; (800bab0 <MDI_getDataChannel1_IT+0x104>)
 800b9f2:	5499      	strb	r1, [r3, r2]
				getTmpBeff = getTmpCH1;
 800b9f4:	4b2c      	ldr	r3, [pc, #176]	; (800baa8 <MDI_getDataChannel1_IT+0xfc>)
 800b9f6:	781a      	ldrb	r2, [r3, #0]
 800b9f8:	4b2c      	ldr	r3, [pc, #176]	; (800baac <MDI_getDataChannel1_IT+0x100>)
 800b9fa:	701a      	strb	r2, [r3, #0]
				counter++;
 800b9fc:	4b2d      	ldr	r3, [pc, #180]	; (800bab4 <MDI_getDataChannel1_IT+0x108>)
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	3301      	adds	r3, #1
 800ba02:	b2da      	uxtb	r2, r3
 800ba04:	4b2b      	ldr	r3, [pc, #172]	; (800bab4 <MDI_getDataChannel1_IT+0x108>)
 800ba06:	701a      	strb	r2, [r3, #0]
				if (counter > 9) {
 800ba08:	4b2a      	ldr	r3, [pc, #168]	; (800bab4 <MDI_getDataChannel1_IT+0x108>)
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	2b09      	cmp	r3, #9
 800ba0e:	d93f      	bls.n	800ba90 <MDI_getDataChannel1_IT+0xe4>
					counter = 0;
 800ba10:	4b28      	ldr	r3, [pc, #160]	; (800bab4 <MDI_getDataChannel1_IT+0x108>)
 800ba12:	2200      	movs	r2, #0
 800ba14:	701a      	strb	r2, [r3, #0]
					uint16_t checksumTmp = 0;
 800ba16:	2300      	movs	r3, #0
 800ba18:	82fb      	strh	r3, [r7, #22]
					for (uint8_t c = 2; c < 8; c++)
 800ba1a:	2302      	movs	r3, #2
 800ba1c:	757b      	strb	r3, [r7, #21]
 800ba1e:	e009      	b.n	800ba34 <MDI_getDataChannel1_IT+0x88>
						checksumTmp += tmpArr1[c];
 800ba20:	7d7b      	ldrb	r3, [r7, #21]
 800ba22:	4a23      	ldr	r2, [pc, #140]	; (800bab0 <MDI_getDataChannel1_IT+0x104>)
 800ba24:	5cd3      	ldrb	r3, [r2, r3]
 800ba26:	b29a      	uxth	r2, r3
 800ba28:	8afb      	ldrh	r3, [r7, #22]
 800ba2a:	4413      	add	r3, r2
 800ba2c:	82fb      	strh	r3, [r7, #22]
					for (uint8_t c = 2; c < 8; c++)
 800ba2e:	7d7b      	ldrb	r3, [r7, #21]
 800ba30:	3301      	adds	r3, #1
 800ba32:	757b      	strb	r3, [r7, #21]
 800ba34:	7d7b      	ldrb	r3, [r7, #21]
 800ba36:	2b07      	cmp	r3, #7
 800ba38:	d9f2      	bls.n	800ba20 <MDI_getDataChannel1_IT+0x74>
					uint8_t tmp = checksumTmp % 256;
 800ba3a:	8afb      	ldrh	r3, [r7, #22]
 800ba3c:	73fb      	strb	r3, [r7, #15]
					uint8_t tmpComp = ~tmp;
 800ba3e:	7bfb      	ldrb	r3, [r7, #15]
 800ba40:	43db      	mvns	r3, r3
 800ba42:	73bb      	strb	r3, [r7, #14]
					if (tmp == tmpArr1[8] && tmpComp == tmpArr1[9]) {
 800ba44:	4b1a      	ldr	r3, [pc, #104]	; (800bab0 <MDI_getDataChannel1_IT+0x104>)
 800ba46:	7a1b      	ldrb	r3, [r3, #8]
 800ba48:	7bfa      	ldrb	r2, [r7, #15]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d120      	bne.n	800ba90 <MDI_getDataChannel1_IT+0xe4>
 800ba4e:	4b18      	ldr	r3, [pc, #96]	; (800bab0 <MDI_getDataChannel1_IT+0x104>)
 800ba50:	7a5b      	ldrb	r3, [r3, #9]
 800ba52:	7bba      	ldrb	r2, [r7, #14]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d11b      	bne.n	800ba90 <MDI_getDataChannel1_IT+0xe4>
						driver1.angle = ((uint16_t) tmpArr1[2] << 8) | tmpArr1[3];
 800ba58:	4b15      	ldr	r3, [pc, #84]	; (800bab0 <MDI_getDataChannel1_IT+0x104>)
 800ba5a:	789b      	ldrb	r3, [r3, #2]
 800ba5c:	021b      	lsls	r3, r3, #8
 800ba5e:	b21a      	sxth	r2, r3
 800ba60:	4b13      	ldr	r3, [pc, #76]	; (800bab0 <MDI_getDataChannel1_IT+0x104>)
 800ba62:	78db      	ldrb	r3, [r3, #3]
 800ba64:	b21b      	sxth	r3, r3
 800ba66:	4313      	orrs	r3, r2
 800ba68:	b21b      	sxth	r3, r3
 800ba6a:	b29a      	uxth	r2, r3
 800ba6c:	4b12      	ldr	r3, [pc, #72]	; (800bab8 <MDI_getDataChannel1_IT+0x10c>)
 800ba6e:	809a      	strh	r2, [r3, #4]
						driver1.pid_kp = tmpArr1[4];
 800ba70:	4b0f      	ldr	r3, [pc, #60]	; (800bab0 <MDI_getDataChannel1_IT+0x104>)
 800ba72:	791a      	ldrb	r2, [r3, #4]
 800ba74:	4b10      	ldr	r3, [pc, #64]	; (800bab8 <MDI_getDataChannel1_IT+0x10c>)
 800ba76:	709a      	strb	r2, [r3, #2]
						driver1.pid_ki = tmpArr1[5];
 800ba78:	4b0d      	ldr	r3, [pc, #52]	; (800bab0 <MDI_getDataChannel1_IT+0x104>)
 800ba7a:	795a      	ldrb	r2, [r3, #5]
 800ba7c:	4b0e      	ldr	r3, [pc, #56]	; (800bab8 <MDI_getDataChannel1_IT+0x10c>)
 800ba7e:	705a      	strb	r2, [r3, #1]
						driver1.pid_kd = tmpArr1[6];
 800ba80:	4b0b      	ldr	r3, [pc, #44]	; (800bab0 <MDI_getDataChannel1_IT+0x104>)
 800ba82:	799a      	ldrb	r2, [r3, #6]
 800ba84:	4b0c      	ldr	r3, [pc, #48]	; (800bab8 <MDI_getDataChannel1_IT+0x10c>)
 800ba86:	701a      	strb	r2, [r3, #0]
						driver1.factor = tmpArr1[7];
 800ba88:	4b09      	ldr	r3, [pc, #36]	; (800bab0 <MDI_getDataChannel1_IT+0x104>)
 800ba8a:	79da      	ldrb	r2, [r3, #7]
 800ba8c:	4b0a      	ldr	r3, [pc, #40]	; (800bab8 <MDI_getDataChannel1_IT+0x10c>)
 800ba8e:	70da      	strb	r2, [r3, #3]
					}
				}
				HAL_UART_Receive_IT(callBackHandle, &getTmpCH1, 1);
 800ba90:	2201      	movs	r2, #1
 800ba92:	4905      	ldr	r1, [pc, #20]	; (800baa8 <MDI_getDataChannel1_IT+0xfc>)
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f7f8 fac8 	bl	800402a <HAL_UART_Receive_IT>
	}
}
 800ba9a:	bf00      	nop
 800ba9c:	3718      	adds	r7, #24
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
 800baa2:	bf00      	nop
 800baa4:	200039fc 	.word	0x200039fc
 800baa8:	200038ec 	.word	0x200038ec
 800baac:	2000390c 	.word	0x2000390c
 800bab0:	200038f0 	.word	0x200038f0
 800bab4:	2000390d 	.word	0x2000390d
 800bab8:	200040ec 	.word	0x200040ec

0800babc <MDI_sendDataChannel2Ver2>:
 * @param kd -> get Pid kd value
 * @param factor -> get factor of Pid elements
 * @return none
 */
void MDI_sendDataChannel2Ver2(int16_t speed, uint8_t kp, uint8_t ki,uint8_t kd,
		uint8_t soft_k, uint8_t soft_f) {
 800babc:	b590      	push	{r4, r7, lr}
 800babe:	b089      	sub	sp, #36	; 0x24
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	4604      	mov	r4, r0
 800bac4:	4608      	mov	r0, r1
 800bac6:	4611      	mov	r1, r2
 800bac8:	461a      	mov	r2, r3
 800baca:	4623      	mov	r3, r4
 800bacc:	80fb      	strh	r3, [r7, #6]
 800bace:	4603      	mov	r3, r0
 800bad0:	717b      	strb	r3, [r7, #5]
 800bad2:	460b      	mov	r3, r1
 800bad4:	713b      	strb	r3, [r7, #4]
 800bad6:	4613      	mov	r3, r2
 800bad8:	70fb      	strb	r3, [r7, #3]
	uint16_t checksumTmp = 0;
 800bada:	2300      	movs	r3, #0
 800badc:	83bb      	strh	r3, [r7, #28]
	uint8_t tmpArr[] = { speed >> 8, speed & 0xFF };
 800bade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bae2:	121b      	asrs	r3, r3, #8
 800bae4:	b21b      	sxth	r3, r3
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	763b      	strb	r3, [r7, #24]
 800baea:	88fb      	ldrh	r3, [r7, #6]
 800baec:	b2db      	uxtb	r3, r3
 800baee:	767b      	strb	r3, [r7, #25]
	checksumTmp += tmpArr[0];
 800baf0:	7e3b      	ldrb	r3, [r7, #24]
 800baf2:	b29a      	uxth	r2, r3
 800baf4:	8bbb      	ldrh	r3, [r7, #28]
 800baf6:	4413      	add	r3, r2
 800baf8:	83bb      	strh	r3, [r7, #28]
	checksumTmp += tmpArr[1];
 800bafa:	7e7b      	ldrb	r3, [r7, #25]
 800bafc:	b29a      	uxth	r2, r3
 800bafe:	8bbb      	ldrh	r3, [r7, #28]
 800bb00:	4413      	add	r3, r2
 800bb02:	83bb      	strh	r3, [r7, #28]
	checksumTmp += kp;
 800bb04:	797b      	ldrb	r3, [r7, #5]
 800bb06:	b29a      	uxth	r2, r3
 800bb08:	8bbb      	ldrh	r3, [r7, #28]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	83bb      	strh	r3, [r7, #28]
	checksumTmp += ki;
 800bb0e:	793b      	ldrb	r3, [r7, #4]
 800bb10:	b29a      	uxth	r2, r3
 800bb12:	8bbb      	ldrh	r3, [r7, #28]
 800bb14:	4413      	add	r3, r2
 800bb16:	83bb      	strh	r3, [r7, #28]
	checksumTmp += kd;
 800bb18:	78fb      	ldrb	r3, [r7, #3]
 800bb1a:	b29a      	uxth	r2, r3
 800bb1c:	8bbb      	ldrh	r3, [r7, #28]
 800bb1e:	4413      	add	r3, r2
 800bb20:	83bb      	strh	r3, [r7, #28]
	checksumTmp += soft_k;
 800bb22:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800bb26:	b29a      	uxth	r2, r3
 800bb28:	8bbb      	ldrh	r3, [r7, #28]
 800bb2a:	4413      	add	r3, r2
 800bb2c:	83bb      	strh	r3, [r7, #28]
	checksumTmp += soft_f;
 800bb2e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800bb32:	b29a      	uxth	r2, r3
 800bb34:	8bbb      	ldrh	r3, [r7, #28]
 800bb36:	4413      	add	r3, r2
 800bb38:	83bb      	strh	r3, [r7, #28]
	uint8_t tmp = checksumTmp % 256;
 800bb3a:	8bbb      	ldrh	r3, [r7, #28]
 800bb3c:	76fb      	strb	r3, [r7, #27]
	uint8_t tmpComp = ~tmp;
 800bb3e:	7efb      	ldrb	r3, [r7, #27]
 800bb40:	43db      	mvns	r3, r3
 800bb42:	76bb      	strb	r3, [r7, #26]
	uint8_t sendBuff[11] = { 0XFF, 0XFF,kp, tmpArr[0],ki, tmpArr[1], kd,
 800bb44:	23ff      	movs	r3, #255	; 0xff
 800bb46:	733b      	strb	r3, [r7, #12]
 800bb48:	23ff      	movs	r3, #255	; 0xff
 800bb4a:	737b      	strb	r3, [r7, #13]
 800bb4c:	797b      	ldrb	r3, [r7, #5]
 800bb4e:	73bb      	strb	r3, [r7, #14]
 800bb50:	7e3b      	ldrb	r3, [r7, #24]
 800bb52:	73fb      	strb	r3, [r7, #15]
 800bb54:	793b      	ldrb	r3, [r7, #4]
 800bb56:	743b      	strb	r3, [r7, #16]
 800bb58:	7e7b      	ldrb	r3, [r7, #25]
 800bb5a:	747b      	strb	r3, [r7, #17]
 800bb5c:	78fb      	ldrb	r3, [r7, #3]
 800bb5e:	74bb      	strb	r3, [r7, #18]
 800bb60:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800bb64:	74fb      	strb	r3, [r7, #19]
 800bb66:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800bb6a:	753b      	strb	r3, [r7, #20]
 800bb6c:	7efb      	ldrb	r3, [r7, #27]
 800bb6e:	757b      	strb	r3, [r7, #21]
 800bb70:	7ebb      	ldrb	r3, [r7, #26]
 800bb72:	75bb      	strb	r3, [r7, #22]
			soft_k,soft_f, tmp, tmpComp };
	for (uint8_t counter = 0; counter < 11; counter++) {
 800bb74:	2300      	movs	r3, #0
 800bb76:	77fb      	strb	r3, [r7, #31]
 800bb78:	e00f      	b.n	800bb9a <MDI_sendDataChannel2Ver2+0xde>
		MDI_writeSmallDataWithRegister(&MDI_channel2TX, sendBuff[counter]);
 800bb7a:	7ffb      	ldrb	r3, [r7, #31]
 800bb7c:	f107 0220 	add.w	r2, r7, #32
 800bb80:	4413      	add	r3, r2
 800bb82:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800bb86:	4619      	mov	r1, r3
 800bb88:	4808      	ldr	r0, [pc, #32]	; (800bbac <MDI_sendDataChannel2Ver2+0xf0>)
 800bb8a:	f7ff fe71 	bl	800b870 <MDI_writeSmallDataWithRegister>
	#if SEND_VAL_CHECK==0
		vTaskDelay(1);
 800bb8e:	2001      	movs	r0, #1
 800bb90:	f7fd fcae 	bl	80094f0 <vTaskDelay>
	for (uint8_t counter = 0; counter < 11; counter++) {
 800bb94:	7ffb      	ldrb	r3, [r7, #31]
 800bb96:	3301      	adds	r3, #1
 800bb98:	77fb      	strb	r3, [r7, #31]
 800bb9a:	7ffb      	ldrb	r3, [r7, #31]
 800bb9c:	2b0a      	cmp	r3, #10
 800bb9e:	d9ec      	bls.n	800bb7a <MDI_sendDataChannel2Ver2+0xbe>
	#elif SEND_VAL_CHECK==1
		vTaskDelay(50);
	#endif
	}
}
 800bba0:	bf00      	nop
 800bba2:	bf00      	nop
 800bba4:	3724      	adds	r7, #36	; 0x24
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd90      	pop	{r4, r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	20003938 	.word	0x20003938

0800bbb0 <MDI_enableGetDataChannel2>:
/**
 * @brief set enable for MDI channel 2 receive
 * @return none
 */
uint8_t  getTmpCH2 = 0;
void MDI_enableGetDataChannel2(void){
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&MDI_channel2RX,&getTmpCH2,1);
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	4903      	ldr	r1, [pc, #12]	; (800bbc4 <MDI_enableGetDataChannel2+0x14>)
 800bbb8:	4803      	ldr	r0, [pc, #12]	; (800bbc8 <MDI_enableGetDataChannel2+0x18>)
 800bbba:	f7f8 fa36 	bl	800402a <HAL_UART_Receive_IT>
}
 800bbbe:	bf00      	nop
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	200038fa 	.word	0x200038fa
 800bbc8:	20003938 	.word	0x20003938

0800bbcc <MDI_getDataChannel2_IT>:
/**
 * @brief get to Motor Driver 2 values
 * @return callBackHandle-> get u(s)art handle
 */
static uint8_t tmpArr2[16];
void MDI_getDataChannel2_IT(UART_HandleTypeDef *callBackHandle) {
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b086      	sub	sp, #24
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
	volatile UART_HandleTypeDef *tmpHandle;
	tmpHandle = &MDI_channel2RX;
 800bbd4:	4b44      	ldr	r3, [pc, #272]	; (800bce8 <MDI_getDataChannel2_IT+0x11c>)
 800bbd6:	613b      	str	r3, [r7, #16]
	if(callBackHandle->Instance == tmpHandle->Instance){
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d17d      	bne.n	800bce0 <MDI_getDataChannel2_IT+0x114>
		static uint8_t counter = 0, getTmpBeff = 0;
			if (0xFF == getTmpCH2 && 0xFF == getTmpBeff) {
 800bbe4:	4b41      	ldr	r3, [pc, #260]	; (800bcec <MDI_getDataChannel2_IT+0x120>)
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	2bff      	cmp	r3, #255	; 0xff
 800bbea:	d10c      	bne.n	800bc06 <MDI_getDataChannel2_IT+0x3a>
 800bbec:	4b40      	ldr	r3, [pc, #256]	; (800bcf0 <MDI_getDataChannel2_IT+0x124>)
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	2bff      	cmp	r3, #255	; 0xff
 800bbf2:	d108      	bne.n	800bc06 <MDI_getDataChannel2_IT+0x3a>
				tmpArr2[0] = 0xFF;
 800bbf4:	4b3f      	ldr	r3, [pc, #252]	; (800bcf4 <MDI_getDataChannel2_IT+0x128>)
 800bbf6:	22ff      	movs	r2, #255	; 0xff
 800bbf8:	701a      	strb	r2, [r3, #0]
				tmpArr2[1] = 0xFF;
 800bbfa:	4b3e      	ldr	r3, [pc, #248]	; (800bcf4 <MDI_getDataChannel2_IT+0x128>)
 800bbfc:	22ff      	movs	r2, #255	; 0xff
 800bbfe:	705a      	strb	r2, [r3, #1]
				counter = 1;
 800bc00:	4b3d      	ldr	r3, [pc, #244]	; (800bcf8 <MDI_getDataChannel2_IT+0x12c>)
 800bc02:	2201      	movs	r2, #1
 800bc04:	701a      	strb	r2, [r3, #0]
			}
			tmpArr2[counter] = getTmpCH2;
 800bc06:	4b3c      	ldr	r3, [pc, #240]	; (800bcf8 <MDI_getDataChannel2_IT+0x12c>)
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	4b37      	ldr	r3, [pc, #220]	; (800bcec <MDI_getDataChannel2_IT+0x120>)
 800bc0e:	7819      	ldrb	r1, [r3, #0]
 800bc10:	4b38      	ldr	r3, [pc, #224]	; (800bcf4 <MDI_getDataChannel2_IT+0x128>)
 800bc12:	5499      	strb	r1, [r3, r2]
			getTmpBeff = getTmpCH2;
 800bc14:	4b35      	ldr	r3, [pc, #212]	; (800bcec <MDI_getDataChannel2_IT+0x120>)
 800bc16:	781a      	ldrb	r2, [r3, #0]
 800bc18:	4b35      	ldr	r3, [pc, #212]	; (800bcf0 <MDI_getDataChannel2_IT+0x124>)
 800bc1a:	701a      	strb	r2, [r3, #0]
			counter++;
 800bc1c:	4b36      	ldr	r3, [pc, #216]	; (800bcf8 <MDI_getDataChannel2_IT+0x12c>)
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	3301      	adds	r3, #1
 800bc22:	b2da      	uxtb	r2, r3
 800bc24:	4b34      	ldr	r3, [pc, #208]	; (800bcf8 <MDI_getDataChannel2_IT+0x12c>)
 800bc26:	701a      	strb	r2, [r3, #0]
			if (counter > 15) {
 800bc28:	4b33      	ldr	r3, [pc, #204]	; (800bcf8 <MDI_getDataChannel2_IT+0x12c>)
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	2b0f      	cmp	r3, #15
 800bc2e:	d952      	bls.n	800bcd6 <MDI_getDataChannel2_IT+0x10a>
				counter = 0;
 800bc30:	4b31      	ldr	r3, [pc, #196]	; (800bcf8 <MDI_getDataChannel2_IT+0x12c>)
 800bc32:	2200      	movs	r2, #0
 800bc34:	701a      	strb	r2, [r3, #0]
				uint16_t checksumTmp = 0;
 800bc36:	2300      	movs	r3, #0
 800bc38:	82fb      	strh	r3, [r7, #22]
				for (uint8_t c = 2; c < 14; c++)
 800bc3a:	2302      	movs	r3, #2
 800bc3c:	757b      	strb	r3, [r7, #21]
 800bc3e:	e009      	b.n	800bc54 <MDI_getDataChannel2_IT+0x88>
					checksumTmp += tmpArr2[c];
 800bc40:	7d7b      	ldrb	r3, [r7, #21]
 800bc42:	4a2c      	ldr	r2, [pc, #176]	; (800bcf4 <MDI_getDataChannel2_IT+0x128>)
 800bc44:	5cd3      	ldrb	r3, [r2, r3]
 800bc46:	b29a      	uxth	r2, r3
 800bc48:	8afb      	ldrh	r3, [r7, #22]
 800bc4a:	4413      	add	r3, r2
 800bc4c:	82fb      	strh	r3, [r7, #22]
				for (uint8_t c = 2; c < 14; c++)
 800bc4e:	7d7b      	ldrb	r3, [r7, #21]
 800bc50:	3301      	adds	r3, #1
 800bc52:	757b      	strb	r3, [r7, #21]
 800bc54:	7d7b      	ldrb	r3, [r7, #21]
 800bc56:	2b0d      	cmp	r3, #13
 800bc58:	d9f2      	bls.n	800bc40 <MDI_getDataChannel2_IT+0x74>
				uint8_t tmp = checksumTmp % 256;
 800bc5a:	8afb      	ldrh	r3, [r7, #22]
 800bc5c:	73fb      	strb	r3, [r7, #15]
				uint8_t tmpComp = ~tmp;
 800bc5e:	7bfb      	ldrb	r3, [r7, #15]
 800bc60:	43db      	mvns	r3, r3
 800bc62:	73bb      	strb	r3, [r7, #14]
				if (tmp == tmpArr2[14] && tmpComp == tmpArr2[15]) {
 800bc64:	4b23      	ldr	r3, [pc, #140]	; (800bcf4 <MDI_getDataChannel2_IT+0x128>)
 800bc66:	7b9b      	ldrb	r3, [r3, #14]
 800bc68:	7bfa      	ldrb	r2, [r7, #15]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d133      	bne.n	800bcd6 <MDI_getDataChannel2_IT+0x10a>
 800bc6e:	4b21      	ldr	r3, [pc, #132]	; (800bcf4 <MDI_getDataChannel2_IT+0x128>)
 800bc70:	7bdb      	ldrb	r3, [r3, #15]
 800bc72:	7bba      	ldrb	r2, [r7, #14]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d12e      	bne.n	800bcd6 <MDI_getDataChannel2_IT+0x10a>
					travelMotor.encoder =(((tmpArr2[7] << 24)) | ((tmpArr2[9]<< 16)) | ((tmpArr2[11]<< 8)) | (tmpArr2[13] & 0xFF));
 800bc78:	4b1e      	ldr	r3, [pc, #120]	; (800bcf4 <MDI_getDataChannel2_IT+0x128>)
 800bc7a:	79db      	ldrb	r3, [r3, #7]
 800bc7c:	061a      	lsls	r2, r3, #24
 800bc7e:	4b1d      	ldr	r3, [pc, #116]	; (800bcf4 <MDI_getDataChannel2_IT+0x128>)
 800bc80:	7a5b      	ldrb	r3, [r3, #9]
 800bc82:	041b      	lsls	r3, r3, #16
 800bc84:	431a      	orrs	r2, r3
 800bc86:	4b1b      	ldr	r3, [pc, #108]	; (800bcf4 <MDI_getDataChannel2_IT+0x128>)
 800bc88:	7adb      	ldrb	r3, [r3, #11]
 800bc8a:	021b      	lsls	r3, r3, #8
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	4a19      	ldr	r2, [pc, #100]	; (800bcf4 <MDI_getDataChannel2_IT+0x128>)
 800bc90:	7b52      	ldrb	r2, [r2, #13]
 800bc92:	4313      	orrs	r3, r2
 800bc94:	4a19      	ldr	r2, [pc, #100]	; (800bcfc <MDI_getDataChannel2_IT+0x130>)
 800bc96:	6093      	str	r3, [r2, #8]
					travelMotor.speed = ( (tmpArr2[3] << 8) |(tmpArr2[5] & 0xFF));
 800bc98:	4b16      	ldr	r3, [pc, #88]	; (800bcf4 <MDI_getDataChannel2_IT+0x128>)
 800bc9a:	78db      	ldrb	r3, [r3, #3]
 800bc9c:	021b      	lsls	r3, r3, #8
 800bc9e:	b21a      	sxth	r2, r3
 800bca0:	4b14      	ldr	r3, [pc, #80]	; (800bcf4 <MDI_getDataChannel2_IT+0x128>)
 800bca2:	795b      	ldrb	r3, [r3, #5]
 800bca4:	b21b      	sxth	r3, r3
 800bca6:	4313      	orrs	r3, r2
 800bca8:	b21a      	sxth	r2, r3
 800bcaa:	4b14      	ldr	r3, [pc, #80]	; (800bcfc <MDI_getDataChannel2_IT+0x130>)
 800bcac:	809a      	strh	r2, [r3, #4]
					travelMotor.pid_kp = tmpArr2[2];
 800bcae:	4b11      	ldr	r3, [pc, #68]	; (800bcf4 <MDI_getDataChannel2_IT+0x128>)
 800bcb0:	789a      	ldrb	r2, [r3, #2]
 800bcb2:	4b12      	ldr	r3, [pc, #72]	; (800bcfc <MDI_getDataChannel2_IT+0x130>)
 800bcb4:	701a      	strb	r2, [r3, #0]
					travelMotor.pid_ki = tmpArr2[4];
 800bcb6:	4b0f      	ldr	r3, [pc, #60]	; (800bcf4 <MDI_getDataChannel2_IT+0x128>)
 800bcb8:	791a      	ldrb	r2, [r3, #4]
 800bcba:	4b10      	ldr	r3, [pc, #64]	; (800bcfc <MDI_getDataChannel2_IT+0x130>)
 800bcbc:	705a      	strb	r2, [r3, #1]
					travelMotor.pid_kd = tmpArr2[6];
 800bcbe:	4b0d      	ldr	r3, [pc, #52]	; (800bcf4 <MDI_getDataChannel2_IT+0x128>)
 800bcc0:	799a      	ldrb	r2, [r3, #6]
 800bcc2:	4b0e      	ldr	r3, [pc, #56]	; (800bcfc <MDI_getDataChannel2_IT+0x130>)
 800bcc4:	709a      	strb	r2, [r3, #2]
					travelMotor.soft_k = tmpArr2[8];
 800bcc6:	4b0b      	ldr	r3, [pc, #44]	; (800bcf4 <MDI_getDataChannel2_IT+0x128>)
 800bcc8:	7a1a      	ldrb	r2, [r3, #8]
 800bcca:	4b0c      	ldr	r3, [pc, #48]	; (800bcfc <MDI_getDataChannel2_IT+0x130>)
 800bccc:	71da      	strb	r2, [r3, #7]
					travelMotor.soft_f = tmpArr2[10];
 800bcce:	4b09      	ldr	r3, [pc, #36]	; (800bcf4 <MDI_getDataChannel2_IT+0x128>)
 800bcd0:	7a9a      	ldrb	r2, [r3, #10]
 800bcd2:	4b0a      	ldr	r3, [pc, #40]	; (800bcfc <MDI_getDataChannel2_IT+0x130>)
 800bcd4:	719a      	strb	r2, [r3, #6]
				}
			}
			HAL_UART_Receive_IT(callBackHandle, &getTmpCH2, 1);
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	4904      	ldr	r1, [pc, #16]	; (800bcec <MDI_getDataChannel2_IT+0x120>)
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f7f8 f9a5 	bl	800402a <HAL_UART_Receive_IT>
	}
}
 800bce0:	bf00      	nop
 800bce2:	3718      	adds	r7, #24
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	20003938 	.word	0x20003938
 800bcec:	200038fa 	.word	0x200038fa
 800bcf0:	2000390e 	.word	0x2000390e
 800bcf4:	200038fc 	.word	0x200038fc
 800bcf8:	2000390f 	.word	0x2000390f
 800bcfc:	2000410c 	.word	0x2000410c

0800bd00 <getDriver1ReceiveVal>:
}
uint16_t getDriver2angle(void) {
	return driver2.factor;
}

mD_interface getDriver1ReceiveVal(void) {
 800bd00:	b480      	push	{r7}
 800bd02:	b083      	sub	sp, #12
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
	return driver1;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	4a05      	ldr	r2, [pc, #20]	; (800bd20 <getDriver1ReceiveVal+0x20>)
 800bd0c:	6811      	ldr	r1, [r2, #0]
 800bd0e:	6019      	str	r1, [r3, #0]
 800bd10:	8892      	ldrh	r2, [r2, #4]
 800bd12:	809a      	strh	r2, [r3, #4]
}
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	370c      	adds	r7, #12
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bc80      	pop	{r7}
 800bd1c:	4770      	bx	lr
 800bd1e:	bf00      	nop
 800bd20:	200040ec 	.word	0x200040ec

0800bd24 <getDriver2ReceiveVal>:
tMD_interface getDriver2ReceiveVal(void) {
 800bd24:	b480      	push	{r7}
 800bd26:	b083      	sub	sp, #12
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
	return travelMotor;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	4a04      	ldr	r2, [pc, #16]	; (800bd40 <getDriver2ReceiveVal+0x1c>)
 800bd30:	ca07      	ldmia	r2, {r0, r1, r2}
 800bd32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	370c      	adds	r7, #12
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bc80      	pop	{r7}
 800bd3e:	4770      	bx	lr
 800bd40:	2000410c 	.word	0x2000410c

0800bd44 <HAL_UART_RxCpltCallback>:
xSemaphoreHandle uart1SemphrHandle=NULL;
xSemaphoreHandle uart2SemphrHandle=NULL;
xSemaphoreHandle uart3SemphrHandle=NULL;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
	MDI_getDataChannel1_IT(huart);
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f7ff fe2d 	bl	800b9ac <MDI_getDataChannel1_IT>
	MDI_getDataChannel2_IT(huart);
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f7ff ff3a 	bl	800bbcc <MDI_getDataChannel2_IT>
	CI_getDataChannel_IT(huart);
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f7f4 fc8b 	bl	8000674 <CI_getDataChannel_IT>
}
 800bd5e:	bf00      	nop
 800bd60:	3708      	adds	r7, #8
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
	...

0800bd68 <tasks_init>:

void tasks_init(void){
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af02      	add	r7, sp, #8
	 * @param usStackDepth-> stack size
	 * @param pvParameters-> function parameters
	 * @param uxPriority -> Priority
	 * @param pxCreatedTask -> handle so id
	 * */
	vSemaphoreCreateBinary(uart1SemphrHandle);
 800bd6e:	2203      	movs	r2, #3
 800bd70:	2100      	movs	r1, #0
 800bd72:	2001      	movs	r0, #1
 800bd74:	f7fc fcbd 	bl	80086f2 <xQueueGenericCreate>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	4a52      	ldr	r2, [pc, #328]	; (800bec4 <tasks_init+0x15c>)
 800bd7c:	6013      	str	r3, [r2, #0]
 800bd7e:	4b51      	ldr	r3, [pc, #324]	; (800bec4 <tasks_init+0x15c>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d006      	beq.n	800bd94 <tasks_init+0x2c>
 800bd86:	4b4f      	ldr	r3, [pc, #316]	; (800bec4 <tasks_init+0x15c>)
 800bd88:	6818      	ldr	r0, [r3, #0]
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	2100      	movs	r1, #0
 800bd90:	f7fc fd10 	bl	80087b4 <xQueueGenericSend>
	vSemaphoreCreateBinary(uart2SemphrHandle);
 800bd94:	2203      	movs	r2, #3
 800bd96:	2100      	movs	r1, #0
 800bd98:	2001      	movs	r0, #1
 800bd9a:	f7fc fcaa 	bl	80086f2 <xQueueGenericCreate>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	4a49      	ldr	r2, [pc, #292]	; (800bec8 <tasks_init+0x160>)
 800bda2:	6013      	str	r3, [r2, #0]
 800bda4:	4b48      	ldr	r3, [pc, #288]	; (800bec8 <tasks_init+0x160>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d006      	beq.n	800bdba <tasks_init+0x52>
 800bdac:	4b46      	ldr	r3, [pc, #280]	; (800bec8 <tasks_init+0x160>)
 800bdae:	6818      	ldr	r0, [r3, #0]
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	2100      	movs	r1, #0
 800bdb6:	f7fc fcfd 	bl	80087b4 <xQueueGenericSend>
	vSemaphoreCreateBinary(uart3SemphrHandle);
 800bdba:	2203      	movs	r2, #3
 800bdbc:	2100      	movs	r1, #0
 800bdbe:	2001      	movs	r0, #1
 800bdc0:	f7fc fc97 	bl	80086f2 <xQueueGenericCreate>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	4a41      	ldr	r2, [pc, #260]	; (800becc <tasks_init+0x164>)
 800bdc8:	6013      	str	r3, [r2, #0]
 800bdca:	4b40      	ldr	r3, [pc, #256]	; (800becc <tasks_init+0x164>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d006      	beq.n	800bde0 <tasks_init+0x78>
 800bdd2:	4b3e      	ldr	r3, [pc, #248]	; (800becc <tasks_init+0x164>)
 800bdd4:	6818      	ldr	r0, [r3, #0]
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	2200      	movs	r2, #0
 800bdda:	2100      	movs	r1, #0
 800bddc:	f7fc fcea 	bl	80087b4 <xQueueGenericSend>


	if(uart1SemphrHandle!=NULL && uart2SemphrHandle!=NULL && uart3SemphrHandle!=NULL){
 800bde0:	4b38      	ldr	r3, [pc, #224]	; (800bec4 <tasks_init+0x15c>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d069      	beq.n	800bebc <tasks_init+0x154>
 800bde8:	4b37      	ldr	r3, [pc, #220]	; (800bec8 <tasks_init+0x160>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d065      	beq.n	800bebc <tasks_init+0x154>
 800bdf0:	4b36      	ldr	r3, [pc, #216]	; (800becc <tasks_init+0x164>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d061      	beq.n	800bebc <tasks_init+0x154>


		xTaskCreate(computerValTask, "calc Uart 3val", configMINIMAL_STACK_SIZE, NULL,  55, NULL);
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	9301      	str	r3, [sp, #4]
 800bdfc:	2337      	movs	r3, #55	; 0x37
 800bdfe:	9300      	str	r3, [sp, #0]
 800be00:	2300      	movs	r3, #0
 800be02:	2280      	movs	r2, #128	; 0x80
 800be04:	4932      	ldr	r1, [pc, #200]	; (800bed0 <tasks_init+0x168>)
 800be06:	4833      	ldr	r0, [pc, #204]	; (800bed4 <tasks_init+0x16c>)
 800be08:	f7fd fa36 	bl	8009278 <xTaskCreate>
		xTaskCreate(computerGetTask, "send Uart 3", configMINIMAL_STACK_SIZE, NULL,  55, NULL);
 800be0c:	2300      	movs	r3, #0
 800be0e:	9301      	str	r3, [sp, #4]
 800be10:	2337      	movs	r3, #55	; 0x37
 800be12:	9300      	str	r3, [sp, #0]
 800be14:	2300      	movs	r3, #0
 800be16:	2280      	movs	r2, #128	; 0x80
 800be18:	492f      	ldr	r1, [pc, #188]	; (800bed8 <tasks_init+0x170>)
 800be1a:	4830      	ldr	r0, [pc, #192]	; (800bedc <tasks_init+0x174>)
 800be1c:	f7fd fa2c 	bl	8009278 <xTaskCreate>
	//	xTaskCreate(computerSendTask, "get Uart 3", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);

		xTaskCreate(sendDataUart1Task, "send Uart 1", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 800be20:	2300      	movs	r3, #0
 800be22:	9301      	str	r3, [sp, #4]
 800be24:	2337      	movs	r3, #55	; 0x37
 800be26:	9300      	str	r3, [sp, #0]
 800be28:	2300      	movs	r3, #0
 800be2a:	2280      	movs	r2, #128	; 0x80
 800be2c:	492c      	ldr	r1, [pc, #176]	; (800bee0 <tasks_init+0x178>)
 800be2e:	482d      	ldr	r0, [pc, #180]	; (800bee4 <tasks_init+0x17c>)
 800be30:	f7fd fa22 	bl	8009278 <xTaskCreate>
		xTaskCreate(sendDataUart2Task, "send Uart 2", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 800be34:	2300      	movs	r3, #0
 800be36:	9301      	str	r3, [sp, #4]
 800be38:	2337      	movs	r3, #55	; 0x37
 800be3a:	9300      	str	r3, [sp, #0]
 800be3c:	2300      	movs	r3, #0
 800be3e:	2280      	movs	r2, #128	; 0x80
 800be40:	4929      	ldr	r1, [pc, #164]	; (800bee8 <tasks_init+0x180>)
 800be42:	482a      	ldr	r0, [pc, #168]	; (800beec <tasks_init+0x184>)
 800be44:	f7fd fa18 	bl	8009278 <xTaskCreate>

		xTaskCreate(getDataUart1Task, "get Uart 1", configMINIMAL_STACK_SIZE, NULL,  55, NULL);
 800be48:	2300      	movs	r3, #0
 800be4a:	9301      	str	r3, [sp, #4]
 800be4c:	2337      	movs	r3, #55	; 0x37
 800be4e:	9300      	str	r3, [sp, #0]
 800be50:	2300      	movs	r3, #0
 800be52:	2280      	movs	r2, #128	; 0x80
 800be54:	4926      	ldr	r1, [pc, #152]	; (800bef0 <tasks_init+0x188>)
 800be56:	4827      	ldr	r0, [pc, #156]	; (800bef4 <tasks_init+0x18c>)
 800be58:	f7fd fa0e 	bl	8009278 <xTaskCreate>
		xTaskCreate(getDataUart2Task, "get Uart 2", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 800be5c:	2300      	movs	r3, #0
 800be5e:	9301      	str	r3, [sp, #4]
 800be60:	2337      	movs	r3, #55	; 0x37
 800be62:	9300      	str	r3, [sp, #0]
 800be64:	2300      	movs	r3, #0
 800be66:	2280      	movs	r2, #128	; 0x80
 800be68:	4923      	ldr	r1, [pc, #140]	; (800bef8 <tasks_init+0x190>)
 800be6a:	4824      	ldr	r0, [pc, #144]	; (800befc <tasks_init+0x194>)
 800be6c:	f7fd fa04 	bl	8009278 <xTaskCreate>

		xTaskCreate(readSwitchsTask, "read switchs", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 800be70:	2300      	movs	r3, #0
 800be72:	9301      	str	r3, [sp, #4]
 800be74:	2337      	movs	r3, #55	; 0x37
 800be76:	9300      	str	r3, [sp, #0]
 800be78:	2300      	movs	r3, #0
 800be7a:	2280      	movs	r2, #128	; 0x80
 800be7c:	4920      	ldr	r1, [pc, #128]	; (800bf00 <tasks_init+0x198>)
 800be7e:	4821      	ldr	r0, [pc, #132]	; (800bf04 <tasks_init+0x19c>)
 800be80:	f7fd f9fa 	bl	8009278 <xTaskCreate>
		xTaskCreate(writeRelaysTask, "write relays", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 800be84:	2300      	movs	r3, #0
 800be86:	9301      	str	r3, [sp, #4]
 800be88:	2337      	movs	r3, #55	; 0x37
 800be8a:	9300      	str	r3, [sp, #0]
 800be8c:	2300      	movs	r3, #0
 800be8e:	2280      	movs	r2, #128	; 0x80
 800be90:	491d      	ldr	r1, [pc, #116]	; (800bf08 <tasks_init+0x1a0>)
 800be92:	481e      	ldr	r0, [pc, #120]	; (800bf0c <tasks_init+0x1a4>)
 800be94:	f7fd f9f0 	bl	8009278 <xTaskCreate>


		xTaskCreate(ledTestTask, "led task", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 800be98:	2300      	movs	r3, #0
 800be9a:	9301      	str	r3, [sp, #4]
 800be9c:	2337      	movs	r3, #55	; 0x37
 800be9e:	9300      	str	r3, [sp, #0]
 800bea0:	2300      	movs	r3, #0
 800bea2:	2280      	movs	r2, #128	; 0x80
 800bea4:	491a      	ldr	r1, [pc, #104]	; (800bf10 <tasks_init+0x1a8>)
 800bea6:	481b      	ldr	r0, [pc, #108]	; (800bf14 <tasks_init+0x1ac>)
 800bea8:	f7fd f9e6 	bl	8009278 <xTaskCreate>


		 MX_USB_DEVICE_Init();
 800beac:	f7ff f866 	bl	800af7c <MX_USB_DEVICE_Init>

		driverInit();
 800beb0:	f000 f9c4 	bl	800c23c <driverInit>
		IO_init();
 800beb4:	f7fa fc7a 	bl	80067ac <IO_init>
		vTaskStartScheduler();
 800beb8:	f7fd fb4e 	bl	8009558 <vTaskStartScheduler>
	}
}
 800bebc:	bf00      	nop
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	bf00      	nop
 800bec4:	20003910 	.word	0x20003910
 800bec8:	20003914 	.word	0x20003914
 800becc:	20003918 	.word	0x20003918
 800bed0:	0800c3f4 	.word	0x0800c3f4
 800bed4:	0800bf85 	.word	0x0800bf85
 800bed8:	0800c404 	.word	0x0800c404
 800bedc:	0800bf55 	.word	0x0800bf55
 800bee0:	0800c410 	.word	0x0800c410
 800bee4:	0800c119 	.word	0x0800c119
 800bee8:	0800c41c 	.word	0x0800c41c
 800beec:	0800c175 	.word	0x0800c175
 800bef0:	0800c428 	.word	0x0800c428
 800bef4:	0800c1dd 	.word	0x0800c1dd
 800bef8:	0800c434 	.word	0x0800c434
 800befc:	0800c20d 	.word	0x0800c20d
 800bf00:	0800c440 	.word	0x0800c440
 800bf04:	0800bf19 	.word	0x0800bf19
 800bf08:	0800c450 	.word	0x0800c450
 800bf0c:	0800bf27 	.word	0x0800bf27
 800bf10:	0800c460 	.word	0x0800c460
 800bf14:	0800bf35 	.word	0x0800bf35

0800bf18 <readSwitchsTask>:

void readSwitchsTask(void *params){
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
	while(1){
		IO_readInputSwitchs();
 800bf20:	f7fa fc7c 	bl	800681c <IO_readInputSwitchs>
 800bf24:	e7fc      	b.n	800bf20 <readSwitchsTask+0x8>

0800bf26 <writeRelaysTask>:
	}
}
void writeRelaysTask(void *params){
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b082      	sub	sp, #8
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]
	while(1){
		IO_testInputOutput();
 800bf2e:	f7fa fcdf 	bl	80068f0 <IO_testInputOutput>
 800bf32:	e7fc      	b.n	800bf2e <writeRelaysTask+0x8>

0800bf34 <ledTestTask>:
	}
}
void ledTestTask(void *params){
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b082      	sub	sp, #8
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 800bf3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bf40:	4803      	ldr	r0, [pc, #12]	; (800bf50 <ledTestTask+0x1c>)
 800bf42:	f7f5 fd30 	bl	80019a6 <HAL_GPIO_TogglePin>

		vTaskDelay(500);
 800bf46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bf4a:	f7fd fad1 	bl	80094f0 <vTaskDelay>
		HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 800bf4e:	e7f5      	b.n	800bf3c <ledTestTask+0x8>
 800bf50:	40011000 	.word	0x40011000

0800bf54 <computerGetTask>:
	}
}



void computerGetTask(void *params){
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(uart3SemphrHandle, portMAX_DELAY);
 800bf5c:	4b08      	ldr	r3, [pc, #32]	; (800bf80 <computerGetTask+0x2c>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f04f 31ff 	mov.w	r1, #4294967295
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7fc fe9b 	bl	8008ca0 <xQueueSemaphoreTake>
		CI_enableGetDataChannel();
 800bf6a:	f7f4 fb75 	bl	8000658 <CI_enableGetDataChannel>
		xSemaphoreGive(uart3SemphrHandle);
 800bf6e:	4b04      	ldr	r3, [pc, #16]	; (800bf80 <computerGetTask+0x2c>)
 800bf70:	6818      	ldr	r0, [r3, #0]
 800bf72:	2300      	movs	r3, #0
 800bf74:	2200      	movs	r2, #0
 800bf76:	2100      	movs	r1, #0
 800bf78:	f7fc fc1c 	bl	80087b4 <xQueueGenericSend>
		xSemaphoreTake(uart3SemphrHandle, portMAX_DELAY);
 800bf7c:	e7ee      	b.n	800bf5c <computerGetTask+0x8>
 800bf7e:	bf00      	nop
 800bf80:	20003918 	.word	0x20003918

0800bf84 <computerValTask>:
	}
}
void computerValTask(void *params){
 800bf84:	b590      	push	{r4, r7, lr}
 800bf86:	b09d      	sub	sp, #116	; 0x74
 800bf88:	af02      	add	r7, sp, #8
 800bf8a:	6078      	str	r0, [r7, #4]
	while(1){
		llsendComputerVals.drive_speed=(int32_t)(getDriver2ReceiveVal().speed)*10000;
 800bf8c:	f107 0308 	add.w	r3, r7, #8
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7ff fec7 	bl	800bd24 <getDriver2ReceiveVal>
 800bf96:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800bf9a:	461a      	mov	r2, r3
 800bf9c:	f242 7310 	movw	r3, #10000	; 0x2710
 800bfa0:	fb03 f302 	mul.w	r3, r3, r2
 800bfa4:	4a59      	ldr	r2, [pc, #356]	; (800c10c <computerValTask+0x188>)
 800bfa6:	6053      	str	r3, [r2, #4]
			llsendComputerVals.steer_pos =(int32_t)(getDriver1ReceiveVal().angle)*10000;
 800bfa8:	f107 0314 	add.w	r3, r7, #20
 800bfac:	4618      	mov	r0, r3
 800bfae:	f7ff fea7 	bl	800bd00 <getDriver1ReceiveVal>
 800bfb2:	8b3b      	ldrh	r3, [r7, #24]
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	f242 7310 	movw	r3, #10000	; 0x2710
 800bfba:	fb03 f302 	mul.w	r3, r3, r2
 800bfbe:	4a53      	ldr	r2, [pc, #332]	; (800c10c <computerValTask+0x188>)
 800bfc0:	6013      	str	r3, [r2, #0]
			if(getDriver2ReceiveVal().encoder<0){
 800bfc2:	f107 031c 	add.w	r3, r7, #28
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7ff feac 	bl	800bd24 <getDriver2ReceiveVal>
 800bfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	da47      	bge.n	800c062 <computerValTask+0xde>
				int intToUint =getDriver2ReceiveVal().encoder;
 800bfd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7ff fea4 	bl	800bd24 <getDriver2ReceiveVal>
 800bfdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfde:	663b      	str	r3, [r7, #96]	; 0x60
				intToUint=(~intToUint+1);
 800bfe0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bfe2:	425b      	negs	r3, r3
 800bfe4:	663b      	str	r3, [r7, #96]	; 0x60
				uint16_t tmp =(intToUint/800);
 800bfe6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bfe8:	4a49      	ldr	r2, [pc, #292]	; (800c110 <computerValTask+0x18c>)
 800bfea:	fb82 1203 	smull	r1, r2, r2, r3
 800bfee:	1212      	asrs	r2, r2, #8
 800bff0:	17db      	asrs	r3, r3, #31
 800bff2:	1ad3      	subs	r3, r2, r3
 800bff4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
				uint16_t tmp2=(intToUint%800);
 800bff8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bffa:	4a45      	ldr	r2, [pc, #276]	; (800c110 <computerValTask+0x18c>)
 800bffc:	fb82 1203 	smull	r1, r2, r2, r3
 800c000:	1211      	asrs	r1, r2, #8
 800c002:	17da      	asrs	r2, r3, #31
 800c004:	1a8a      	subs	r2, r1, r2
 800c006:	f44f 7148 	mov.w	r1, #800	; 0x320
 800c00a:	fb01 f202 	mul.w	r2, r1, r2
 800c00e:	1a9a      	subs	r2, r3, r2
 800c010:	4613      	mov	r3, r2
 800c012:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				llsendComputerVals.drive_pos= -(tmp+valuesMapforFloat(tmp2,0,800,0.0f,1.0f))*10000;
 800c016:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7f4 f952 	bl	80002c4 <__aeabi_i2f>
 800c020:	4604      	mov	r4, r0
 800c022:	f8b7 005c 	ldrh.w	r0, [r7, #92]	; 0x5c
 800c026:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c02a:	9300      	str	r3, [sp, #0]
 800c02c:	f04f 0300 	mov.w	r3, #0
 800c030:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c034:	2100      	movs	r1, #0
 800c036:	f000 f92d 	bl	800c294 <valuesMapforFloat>
 800c03a:	4603      	mov	r3, r0
 800c03c:	4619      	mov	r1, r3
 800c03e:	4620      	mov	r0, r4
 800c040:	f7f4 f88c 	bl	800015c <__addsf3>
 800c044:	4603      	mov	r3, r0
 800c046:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c04a:	4932      	ldr	r1, [pc, #200]	; (800c114 <computerValTask+0x190>)
 800c04c:	4618      	mov	r0, r3
 800c04e:	f7f4 f98d 	bl	800036c <__aeabi_fmul>
 800c052:	4603      	mov	r3, r0
 800c054:	4618      	mov	r0, r3
 800c056:	f7f4 fad9 	bl	800060c <__aeabi_f2iz>
 800c05a:	4603      	mov	r3, r0
 800c05c:	4a2b      	ldr	r2, [pc, #172]	; (800c10c <computerValTask+0x188>)
 800c05e:	6093      	str	r3, [r2, #8]
 800c060:	e044      	b.n	800c0ec <computerValTask+0x168>
			}
			else {
				uint16_t tmp =((getDriver2ReceiveVal().encoder)/800);
 800c062:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c066:	4618      	mov	r0, r3
 800c068:	f7ff fe5c 	bl	800bd24 <getDriver2ReceiveVal>
 800c06c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c06e:	4a28      	ldr	r2, [pc, #160]	; (800c110 <computerValTask+0x18c>)
 800c070:	fb82 1203 	smull	r1, r2, r2, r3
 800c074:	1212      	asrs	r2, r2, #8
 800c076:	17db      	asrs	r3, r3, #31
 800c078:	1ad3      	subs	r3, r2, r3
 800c07a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
				uint16_t tmp2=((getDriver2ReceiveVal().encoder)%800);
 800c07e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c082:	4618      	mov	r0, r3
 800c084:	f7ff fe4e 	bl	800bd24 <getDriver2ReceiveVal>
 800c088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c08a:	4a21      	ldr	r2, [pc, #132]	; (800c110 <computerValTask+0x18c>)
 800c08c:	fb82 1203 	smull	r1, r2, r2, r3
 800c090:	1211      	asrs	r1, r2, #8
 800c092:	17da      	asrs	r2, r3, #31
 800c094:	1a8a      	subs	r2, r1, r2
 800c096:	f44f 7148 	mov.w	r1, #800	; 0x320
 800c09a:	fb01 f202 	mul.w	r2, r1, r2
 800c09e:	1a9a      	subs	r2, r3, r2
 800c0a0:	4613      	mov	r3, r2
 800c0a2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
				llsendComputerVals.drive_pos= (tmp+valuesMapforFloat(tmp2,0,800,0.0f,1.0f))*10000;
 800c0a6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f7f4 f90a 	bl	80002c4 <__aeabi_i2f>
 800c0b0:	4604      	mov	r4, r0
 800c0b2:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800c0b6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c0ba:	9300      	str	r3, [sp, #0]
 800c0bc:	f04f 0300 	mov.w	r3, #0
 800c0c0:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c0c4:	2100      	movs	r1, #0
 800c0c6:	f000 f8e5 	bl	800c294 <valuesMapforFloat>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	4620      	mov	r0, r4
 800c0d0:	f7f4 f844 	bl	800015c <__addsf3>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	490f      	ldr	r1, [pc, #60]	; (800c114 <computerValTask+0x190>)
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7f4 f947 	bl	800036c <__aeabi_fmul>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7f4 fa93 	bl	800060c <__aeabi_f2iz>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	4a08      	ldr	r2, [pc, #32]	; (800c10c <computerValTask+0x188>)
 800c0ea:	6093      	str	r3, [r2, #8]
			}
			llsendComputerVals.switch_vals=IO_inputsBitsPackageToByte(IO_getInputOutputsVal());
 800c0ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7fa fca9 	bl	8006a48 <IO_getInputOutputsVal>
 800c0f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c0fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c0fc:	f7fa fc18 	bl	8006930 <IO_inputsBitsPackageToByte>
 800c100:	4603      	mov	r3, r0
 800c102:	461a      	mov	r2, r3
 800c104:	4b01      	ldr	r3, [pc, #4]	; (800c10c <computerValTask+0x188>)
 800c106:	731a      	strb	r2, [r3, #12]
		llsendComputerVals.drive_speed=(int32_t)(getDriver2ReceiveVal().speed)*10000;
 800c108:	e740      	b.n	800bf8c <computerValTask+0x8>
 800c10a:	bf00      	nop
 800c10c:	2000413c 	.word	0x2000413c
 800c110:	51eb851f 	.word	0x51eb851f
 800c114:	461c4000 	.word	0x461c4000

0800c118 <sendDataUart1Task>:

	/*	CDC_Transmit_FS(test, sizeof(test));
		vTaskDelay(10);*/
	}
}
void sendDataUart1Task(void *params){
 800c118:	b590      	push	{r4, r7, lr}
 800c11a:	b08b      	sub	sp, #44	; 0x2c
 800c11c:	af02      	add	r7, sp, #8
 800c11e:	6078      	str	r0, [r7, #4]

	while(1){
		if(getComputerVals().size)	driveDriver.angle=(uint16_t)((getComputerVals().steer_pos)/10000);
 800c120:	f107 0308 	add.w	r3, r7, #8
 800c124:	4618      	mov	r0, r3
 800c126:	f7f4 fb9d 	bl	8000864 <getComputerVals>
 800c12a:	893b      	ldrh	r3, [r7, #8]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d00e      	beq.n	800c14e <sendDataUart1Task+0x36>
 800c130:	f107 0314 	add.w	r3, r7, #20
 800c134:	4618      	mov	r0, r3
 800c136:	f7f4 fb95 	bl	8000864 <getComputerVals>
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	4a0b      	ldr	r2, [pc, #44]	; (800c16c <sendDataUart1Task+0x54>)
 800c13e:	fb82 1203 	smull	r1, r2, r2, r3
 800c142:	1312      	asrs	r2, r2, #12
 800c144:	17db      	asrs	r3, r3, #31
 800c146:	1ad3      	subs	r3, r2, r3
 800c148:	b29a      	uxth	r2, r3
 800c14a:	4b09      	ldr	r3, [pc, #36]	; (800c170 <sendDataUart1Task+0x58>)
 800c14c:	809a      	strh	r2, [r3, #4]
			MDI_sendDataChannel1Ver2(driveDriver.angle,driveDriver.pid_kp,driveDriver.pid_ki,driveDriver.pid_kd,driveDriver.factor);
 800c14e:	4b08      	ldr	r3, [pc, #32]	; (800c170 <sendDataUart1Task+0x58>)
 800c150:	8898      	ldrh	r0, [r3, #4]
 800c152:	4b07      	ldr	r3, [pc, #28]	; (800c170 <sendDataUart1Task+0x58>)
 800c154:	7899      	ldrb	r1, [r3, #2]
 800c156:	4b06      	ldr	r3, [pc, #24]	; (800c170 <sendDataUart1Task+0x58>)
 800c158:	785a      	ldrb	r2, [r3, #1]
 800c15a:	4b05      	ldr	r3, [pc, #20]	; (800c170 <sendDataUart1Task+0x58>)
 800c15c:	781c      	ldrb	r4, [r3, #0]
 800c15e:	4b04      	ldr	r3, [pc, #16]	; (800c170 <sendDataUart1Task+0x58>)
 800c160:	78db      	ldrb	r3, [r3, #3]
 800c162:	9300      	str	r3, [sp, #0]
 800c164:	4623      	mov	r3, r4
 800c166:	f7ff fba3 	bl	800b8b0 <MDI_sendDataChannel1Ver2>
		if(getComputerVals().size)	driveDriver.angle=(uint16_t)((getComputerVals().steer_pos)/10000);
 800c16a:	e7d9      	b.n	800c120 <sendDataUart1Task+0x8>
 800c16c:	68db8bad 	.word	0x68db8bad
 800c170:	2000414c 	.word	0x2000414c

0800c174 <sendDataUart2Task>:

	}
}
void sendDataUart2Task(void *params){
 800c174:	b5b0      	push	{r4, r5, r7, lr}
 800c176:	b08a      	sub	sp, #40	; 0x28
 800c178:	af02      	add	r7, sp, #8
 800c17a:	6078      	str	r0, [r7, #4]
	while(1){
		if(getComputerVals().size)	travelDriver.speed=(int16_t)((getComputerVals().drive_speed)/10000);
 800c17c:	f107 0308 	add.w	r3, r7, #8
 800c180:	4618      	mov	r0, r3
 800c182:	f7f4 fb6f 	bl	8000864 <getComputerVals>
 800c186:	893b      	ldrh	r3, [r7, #8]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d00e      	beq.n	800c1aa <sendDataUart2Task+0x36>
 800c18c:	f107 0314 	add.w	r3, r7, #20
 800c190:	4618      	mov	r0, r3
 800c192:	f7f4 fb67 	bl	8000864 <getComputerVals>
 800c196:	69fb      	ldr	r3, [r7, #28]
 800c198:	4a0e      	ldr	r2, [pc, #56]	; (800c1d4 <sendDataUart2Task+0x60>)
 800c19a:	fb82 1203 	smull	r1, r2, r2, r3
 800c19e:	1312      	asrs	r2, r2, #12
 800c1a0:	17db      	asrs	r3, r3, #31
 800c1a2:	1ad3      	subs	r3, r2, r3
 800c1a4:	b21a      	sxth	r2, r3
 800c1a6:	4b0c      	ldr	r3, [pc, #48]	; (800c1d8 <sendDataUart2Task+0x64>)
 800c1a8:	809a      	strh	r2, [r3, #4]
				MDI_sendDataChannel2Ver2(travelDriver.speed,travelDriver.pid_kp,travelDriver.pid_ki,travelDriver.pid_kd,travelDriver.soft_k,travelDriver.soft_f);
 800c1aa:	4b0b      	ldr	r3, [pc, #44]	; (800c1d8 <sendDataUart2Task+0x64>)
 800c1ac:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 800c1b0:	4b09      	ldr	r3, [pc, #36]	; (800c1d8 <sendDataUart2Task+0x64>)
 800c1b2:	7819      	ldrb	r1, [r3, #0]
 800c1b4:	4b08      	ldr	r3, [pc, #32]	; (800c1d8 <sendDataUart2Task+0x64>)
 800c1b6:	785c      	ldrb	r4, [r3, #1]
 800c1b8:	4b07      	ldr	r3, [pc, #28]	; (800c1d8 <sendDataUart2Task+0x64>)
 800c1ba:	789d      	ldrb	r5, [r3, #2]
 800c1bc:	4b06      	ldr	r3, [pc, #24]	; (800c1d8 <sendDataUart2Task+0x64>)
 800c1be:	79db      	ldrb	r3, [r3, #7]
 800c1c0:	4a05      	ldr	r2, [pc, #20]	; (800c1d8 <sendDataUart2Task+0x64>)
 800c1c2:	7992      	ldrb	r2, [r2, #6]
 800c1c4:	9201      	str	r2, [sp, #4]
 800c1c6:	9300      	str	r3, [sp, #0]
 800c1c8:	462b      	mov	r3, r5
 800c1ca:	4622      	mov	r2, r4
 800c1cc:	f7ff fc76 	bl	800babc <MDI_sendDataChannel2Ver2>
		if(getComputerVals().size)	travelDriver.speed=(int16_t)((getComputerVals().drive_speed)/10000);
 800c1d0:	e7d4      	b.n	800c17c <sendDataUart2Task+0x8>
 800c1d2:	bf00      	nop
 800c1d4:	68db8bad 	.word	0x68db8bad
 800c1d8:	20004130 	.word	0x20004130

0800c1dc <getDataUart1Task>:
	}
}
void getDataUart1Task(void *params){
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b082      	sub	sp, #8
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(uart1SemphrHandle, portMAX_DELAY);
 800c1e4:	4b08      	ldr	r3, [pc, #32]	; (800c208 <getDataUart1Task+0x2c>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f04f 31ff 	mov.w	r1, #4294967295
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f7fc fd57 	bl	8008ca0 <xQueueSemaphoreTake>
		MDI_enableGetDataChannel1();
 800c1f2:	f7ff fbcd 	bl	800b990 <MDI_enableGetDataChannel1>
		xSemaphoreGive(uart1SemphrHandle);
 800c1f6:	4b04      	ldr	r3, [pc, #16]	; (800c208 <getDataUart1Task+0x2c>)
 800c1f8:	6818      	ldr	r0, [r3, #0]
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	2100      	movs	r1, #0
 800c200:	f7fc fad8 	bl	80087b4 <xQueueGenericSend>
		xSemaphoreTake(uart1SemphrHandle, portMAX_DELAY);
 800c204:	e7ee      	b.n	800c1e4 <getDataUart1Task+0x8>
 800c206:	bf00      	nop
 800c208:	20003910 	.word	0x20003910

0800c20c <getDataUart2Task>:

	}
}
void getDataUart2Task(void *params){
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(uart2SemphrHandle, portMAX_DELAY);
 800c214:	4b08      	ldr	r3, [pc, #32]	; (800c238 <getDataUart2Task+0x2c>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	f04f 31ff 	mov.w	r1, #4294967295
 800c21c:	4618      	mov	r0, r3
 800c21e:	f7fc fd3f 	bl	8008ca0 <xQueueSemaphoreTake>
		MDI_enableGetDataChannel2();
 800c222:	f7ff fcc5 	bl	800bbb0 <MDI_enableGetDataChannel2>
		xSemaphoreGive(uart2SemphrHandle);
 800c226:	4b04      	ldr	r3, [pc, #16]	; (800c238 <getDataUart2Task+0x2c>)
 800c228:	6818      	ldr	r0, [r3, #0]
 800c22a:	2300      	movs	r3, #0
 800c22c:	2200      	movs	r2, #0
 800c22e:	2100      	movs	r1, #0
 800c230:	f7fc fac0 	bl	80087b4 <xQueueGenericSend>
		xSemaphoreTake(uart2SemphrHandle, portMAX_DELAY);
 800c234:	e7ee      	b.n	800c214 <getDataUart2Task+0x8>
 800c236:	bf00      	nop
 800c238:	20003914 	.word	0x20003914

0800c23c <driverInit>:
	}
}

void driverInit(void){
 800c23c:	b480      	push	{r7}
 800c23e:	af00      	add	r7, sp, #0
	driveDriver.angle=500;
 800c240:	4b12      	ldr	r3, [pc, #72]	; (800c28c <driverInit+0x50>)
 800c242:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800c246:	809a      	strh	r2, [r3, #4]
	driveDriver.pid_kp=100;
 800c248:	4b10      	ldr	r3, [pc, #64]	; (800c28c <driverInit+0x50>)
 800c24a:	2264      	movs	r2, #100	; 0x64
 800c24c:	709a      	strb	r2, [r3, #2]
	driveDriver.pid_ki=1;
 800c24e:	4b0f      	ldr	r3, [pc, #60]	; (800c28c <driverInit+0x50>)
 800c250:	2201      	movs	r2, #1
 800c252:	705a      	strb	r2, [r3, #1]
	driveDriver.pid_kd=200;
 800c254:	4b0d      	ldr	r3, [pc, #52]	; (800c28c <driverInit+0x50>)
 800c256:	22c8      	movs	r2, #200	; 0xc8
 800c258:	701a      	strb	r2, [r3, #0]
	driveDriver.factor=100;
 800c25a:	4b0c      	ldr	r3, [pc, #48]	; (800c28c <driverInit+0x50>)
 800c25c:	2264      	movs	r2, #100	; 0x64
 800c25e:	70da      	strb	r2, [r3, #3]

	travelDriver.speed =0;
 800c260:	4b0b      	ldr	r3, [pc, #44]	; (800c290 <driverInit+0x54>)
 800c262:	2200      	movs	r2, #0
 800c264:	809a      	strh	r2, [r3, #4]
	travelDriver.pid_kp=70;
 800c266:	4b0a      	ldr	r3, [pc, #40]	; (800c290 <driverInit+0x54>)
 800c268:	2246      	movs	r2, #70	; 0x46
 800c26a:	701a      	strb	r2, [r3, #0]
	travelDriver.pid_ki=1;
 800c26c:	4b08      	ldr	r3, [pc, #32]	; (800c290 <driverInit+0x54>)
 800c26e:	2201      	movs	r2, #1
 800c270:	705a      	strb	r2, [r3, #1]
	travelDriver.pid_kd=1;
 800c272:	4b07      	ldr	r3, [pc, #28]	; (800c290 <driverInit+0x54>)
 800c274:	2201      	movs	r2, #1
 800c276:	709a      	strb	r2, [r3, #2]
	travelDriver.soft_k =1;
 800c278:	4b05      	ldr	r3, [pc, #20]	; (800c290 <driverInit+0x54>)
 800c27a:	2201      	movs	r2, #1
 800c27c:	71da      	strb	r2, [r3, #7]
	travelDriver.soft_f =1;
 800c27e:	4b04      	ldr	r3, [pc, #16]	; (800c290 <driverInit+0x54>)
 800c280:	2201      	movs	r2, #1
 800c282:	719a      	strb	r2, [r3, #6]

}
 800c284:	bf00      	nop
 800c286:	46bd      	mov	sp, r7
 800c288:	bc80      	pop	{r7}
 800c28a:	4770      	bx	lr
 800c28c:	2000414c 	.word	0x2000414c
 800c290:	20004130 	.word	0x20004130

0800c294 <valuesMapforFloat>:
	return (inValue - inMin)*(outMax - outMin) / (inMax - inMin) + outMin;
}
int16_t valuesMapFloat(float inValue, float inMin, float inMax, int16_t outMin, int16_t outMax) {
	return (inValue - inMin)*(outMax - outMin) / (inMax - inMin) + outMin;
}
float valuesMapforFloat(uint16_t inValue, uint16_t inMin, uint16_t inMax, float outMin, float outMax) {
 800c294:	b590      	push	{r4, r7, lr}
 800c296:	b085      	sub	sp, #20
 800c298:	af00      	add	r7, sp, #0
 800c29a:	607b      	str	r3, [r7, #4]
 800c29c:	4603      	mov	r3, r0
 800c29e:	81fb      	strh	r3, [r7, #14]
 800c2a0:	460b      	mov	r3, r1
 800c2a2:	81bb      	strh	r3, [r7, #12]
 800c2a4:	4613      	mov	r3, r2
 800c2a6:	817b      	strh	r3, [r7, #10]
	return (inValue - inMin)*(outMax - outMin) / (inMax - inMin) + outMin;
 800c2a8:	89fa      	ldrh	r2, [r7, #14]
 800c2aa:	89bb      	ldrh	r3, [r7, #12]
 800c2ac:	1ad3      	subs	r3, r2, r3
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7f4 f808 	bl	80002c4 <__aeabi_i2f>
 800c2b4:	4604      	mov	r4, r0
 800c2b6:	6879      	ldr	r1, [r7, #4]
 800c2b8:	6a38      	ldr	r0, [r7, #32]
 800c2ba:	f7f3 ff4d 	bl	8000158 <__aeabi_fsub>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	4619      	mov	r1, r3
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	f7f4 f852 	bl	800036c <__aeabi_fmul>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	461c      	mov	r4, r3
 800c2cc:	897a      	ldrh	r2, [r7, #10]
 800c2ce:	89bb      	ldrh	r3, [r7, #12]
 800c2d0:	1ad3      	subs	r3, r2, r3
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7f3 fff6 	bl	80002c4 <__aeabi_i2f>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	4619      	mov	r1, r3
 800c2dc:	4620      	mov	r0, r4
 800c2de:	f7f4 f8f9 	bl	80004d4 <__aeabi_fdiv>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	6879      	ldr	r1, [r7, #4]
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f7f3 ff38 	bl	800015c <__addsf3>
 800c2ec:	4603      	mov	r3, r0
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3714      	adds	r7, #20
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd90      	pop	{r4, r7, pc}
	...

0800c2f8 <__libc_init_array>:
 800c2f8:	b570      	push	{r4, r5, r6, lr}
 800c2fa:	2600      	movs	r6, #0
 800c2fc:	4d0c      	ldr	r5, [pc, #48]	; (800c330 <__libc_init_array+0x38>)
 800c2fe:	4c0d      	ldr	r4, [pc, #52]	; (800c334 <__libc_init_array+0x3c>)
 800c300:	1b64      	subs	r4, r4, r5
 800c302:	10a4      	asrs	r4, r4, #2
 800c304:	42a6      	cmp	r6, r4
 800c306:	d109      	bne.n	800c31c <__libc_init_array+0x24>
 800c308:	f000 f830 	bl	800c36c <_init>
 800c30c:	2600      	movs	r6, #0
 800c30e:	4d0a      	ldr	r5, [pc, #40]	; (800c338 <__libc_init_array+0x40>)
 800c310:	4c0a      	ldr	r4, [pc, #40]	; (800c33c <__libc_init_array+0x44>)
 800c312:	1b64      	subs	r4, r4, r5
 800c314:	10a4      	asrs	r4, r4, #2
 800c316:	42a6      	cmp	r6, r4
 800c318:	d105      	bne.n	800c326 <__libc_init_array+0x2e>
 800c31a:	bd70      	pop	{r4, r5, r6, pc}
 800c31c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c320:	4798      	blx	r3
 800c322:	3601      	adds	r6, #1
 800c324:	e7ee      	b.n	800c304 <__libc_init_array+0xc>
 800c326:	f855 3b04 	ldr.w	r3, [r5], #4
 800c32a:	4798      	blx	r3
 800c32c:	3601      	adds	r6, #1
 800c32e:	e7f2      	b.n	800c316 <__libc_init_array+0x1e>
 800c330:	0800c4b8 	.word	0x0800c4b8
 800c334:	0800c4b8 	.word	0x0800c4b8
 800c338:	0800c4b8 	.word	0x0800c4b8
 800c33c:	0800c4bc 	.word	0x0800c4bc

0800c340 <memcpy>:
 800c340:	440a      	add	r2, r1
 800c342:	4291      	cmp	r1, r2
 800c344:	f100 33ff 	add.w	r3, r0, #4294967295
 800c348:	d100      	bne.n	800c34c <memcpy+0xc>
 800c34a:	4770      	bx	lr
 800c34c:	b510      	push	{r4, lr}
 800c34e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c352:	4291      	cmp	r1, r2
 800c354:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c358:	d1f9      	bne.n	800c34e <memcpy+0xe>
 800c35a:	bd10      	pop	{r4, pc}

0800c35c <memset>:
 800c35c:	4603      	mov	r3, r0
 800c35e:	4402      	add	r2, r0
 800c360:	4293      	cmp	r3, r2
 800c362:	d100      	bne.n	800c366 <memset+0xa>
 800c364:	4770      	bx	lr
 800c366:	f803 1b01 	strb.w	r1, [r3], #1
 800c36a:	e7f9      	b.n	800c360 <memset+0x4>

0800c36c <_init>:
 800c36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c36e:	bf00      	nop
 800c370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c372:	bc08      	pop	{r3}
 800c374:	469e      	mov	lr, r3
 800c376:	4770      	bx	lr

0800c378 <_fini>:
 800c378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c37a:	bf00      	nop
 800c37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c37e:	bc08      	pop	{r3}
 800c380:	469e      	mov	lr, r3
 800c382:	4770      	bx	lr
