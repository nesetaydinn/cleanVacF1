
testF1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c458  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800c568  0800c568  0001c568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6a8  0800c6a8  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800c6a8  0800c6a8  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c6a8  0800c6a8  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6a8  0800c6a8  0001c6a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6ac  0800c6ac  0001c6ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800c6b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003fd4  20000180  0800c830  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004154  0800c830  00024154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002989d  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000583f  00000000  00000000  00049a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c50  00000000  00000000  0004f288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a08  00000000  00000000  00050ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8ae  00000000  00000000  000528e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021685  00000000  00000000  0007018e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a073  00000000  00000000  00091813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012b886  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000754c  00000000  00000000  0012b8dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c550 	.word	0x0800c550

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	0800c550 	.word	0x0800c550

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__aeabi_f2iz>:
 800060c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000610:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000614:	d30f      	bcc.n	8000636 <__aeabi_f2iz+0x2a>
 8000616:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800061a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061e:	d90d      	bls.n	800063c <__aeabi_f2iz+0x30>
 8000620:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000628:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800062c:	fa23 f002 	lsr.w	r0, r3, r2
 8000630:	bf18      	it	ne
 8000632:	4240      	negne	r0, r0
 8000634:	4770      	bx	lr
 8000636:	f04f 0000 	mov.w	r0, #0
 800063a:	4770      	bx	lr
 800063c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000640:	d101      	bne.n	8000646 <__aeabi_f2iz+0x3a>
 8000642:	0242      	lsls	r2, r0, #9
 8000644:	d105      	bne.n	8000652 <__aeabi_f2iz+0x46>
 8000646:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800064a:	bf08      	it	eq
 800064c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000650:	4770      	bx	lr
 8000652:	f04f 0000 	mov.w	r0, #0
 8000656:	4770      	bx	lr

08000658 <CI_sendDataChannel>:
 * @param batt_per-> battery percent value
 * @return none
 */
uint32_t time1,time2,deltaTime;
void CI_sendDataChannel(uint16_t lenght, int32_t steer_poss,
		int32_t driver_poss, int32_t driver_speed,uint8_t inputStatus,uint8_t batt_per){
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
 800065e:	60b9      	str	r1, [r7, #8]
 8000660:	607a      	str	r2, [r7, #4]
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	4603      	mov	r3, r0
 8000666:	81fb      	strh	r3, [r7, #14]
	time1=HAL_GetTick();
 8000668:	f000 fda4 	bl	80011b4 <HAL_GetTick>
 800066c:	4603      	mov	r3, r0
 800066e:	4a34      	ldr	r2, [pc, #208]	; (8000740 <CI_sendDataChannel+0xe8>)
 8000670:	6013      	str	r3, [r2, #0]
	uint8_t sendBuff[] = { 0x43, 0X64,
 8000672:	2343      	movs	r3, #67	; 0x43
 8000674:	753b      	strb	r3, [r7, #20]
 8000676:	2364      	movs	r3, #100	; 0x64
 8000678:	757b      	strb	r3, [r7, #21]
 800067a:	89fb      	ldrh	r3, [r7, #14]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	75bb      	strb	r3, [r7, #22]
 8000680:	89fb      	ldrh	r3, [r7, #14]
 8000682:	0a1b      	lsrs	r3, r3, #8
 8000684:	b29b      	uxth	r3, r3
 8000686:	b2db      	uxtb	r3, r3
 8000688:	75fb      	strb	r3, [r7, #23]
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	763b      	strb	r3, [r7, #24]
			lenght & 0xFF,lenght >> 8,
			steer_poss & 0xFF,steer_poss >> 8,steer_poss >> 16,steer_poss >> 24,
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	121b      	asrs	r3, r3, #8
	uint8_t sendBuff[] = { 0x43, 0X64,
 8000694:	b2db      	uxtb	r3, r3
 8000696:	767b      	strb	r3, [r7, #25]
			steer_poss & 0xFF,steer_poss >> 8,steer_poss >> 16,steer_poss >> 24,
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	141b      	asrs	r3, r3, #16
	uint8_t sendBuff[] = { 0x43, 0X64,
 800069c:	b2db      	uxtb	r3, r3
 800069e:	76bb      	strb	r3, [r7, #26]
			steer_poss & 0xFF,steer_poss >> 8,steer_poss >> 16,steer_poss >> 24,
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	161b      	asrs	r3, r3, #24
	uint8_t sendBuff[] = { 0x43, 0X64,
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	76fb      	strb	r3, [r7, #27]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	773b      	strb	r3, [r7, #28]
			driver_poss & 0xFF,driver_poss >> 8,driver_poss >> 16,driver_poss >> 24,
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	121b      	asrs	r3, r3, #8
	uint8_t sendBuff[] = { 0x43, 0X64,
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	777b      	strb	r3, [r7, #29]
			driver_poss & 0xFF,driver_poss >> 8,driver_poss >> 16,driver_poss >> 24,
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	141b      	asrs	r3, r3, #16
	uint8_t sendBuff[] = { 0x43, 0X64,
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	77bb      	strb	r3, [r7, #30]
			driver_poss & 0xFF,driver_poss >> 8,driver_poss >> 16,driver_poss >> 24,
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	161b      	asrs	r3, r3, #24
	uint8_t sendBuff[] = { 0x43, 0X64,
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	77fb      	strb	r3, [r7, #31]
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f887 3020 	strb.w	r3, [r7, #32]
			driver_speed & 0xFF,driver_speed >> 8,driver_speed >> 16,driver_speed >> 24,
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	121b      	asrs	r3, r3, #8
	uint8_t sendBuff[] = { 0x43, 0X64,
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			driver_speed & 0xFF,driver_speed >> 8,driver_speed >> 16,driver_speed >> 24,
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	141b      	asrs	r3, r3, #16
	uint8_t sendBuff[] = { 0x43, 0X64,
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			driver_speed & 0xFF,driver_speed >> 8,driver_speed >> 16,driver_speed >> 24,
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	161b      	asrs	r3, r3, #24
	uint8_t sendBuff[] = { 0x43, 0X64,
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80006ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80006f0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80006f4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80006f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			inputStatus,batt_per };
	//uint8_t * tmp =;
	CDC_Transmit_FS(sendBuff, 20);
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	2114      	movs	r1, #20
 8000702:	4618      	mov	r0, r3
 8000704:	f00a fda4 	bl	800b250 <CDC_Transmit_FS>
	#if SEND_VAL_CHECK==1
		vTaskDelay(50);
	#endif

	}*/
	time2=HAL_GetTick();
 8000708:	f000 fd54 	bl	80011b4 <HAL_GetTick>
 800070c:	4603      	mov	r3, r0
 800070e:	4a0d      	ldr	r2, [pc, #52]	; (8000744 <CI_sendDataChannel+0xec>)
 8000710:	6013      	str	r3, [r2, #0]
	deltaTime=time2-time1;
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <CI_sendDataChannel+0xec>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <CI_sendDataChannel+0xe8>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	1ad3      	subs	r3, r2, r3
 800071c:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <CI_sendDataChannel+0xf0>)
 800071e:	6013      	str	r3, [r2, #0]
	if(deltaTime<10) vTaskDelay((10-deltaTime));
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <CI_sendDataChannel+0xf0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b09      	cmp	r3, #9
 8000726:	d806      	bhi.n	8000736 <CI_sendDataChannel+0xde>
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <CI_sendDataChannel+0xf0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f1c3 030a 	rsb	r3, r3, #10
 8000730:	4618      	mov	r0, r3
 8000732:	f008 ff87 	bl	8009644 <vTaskDelay>
}
 8000736:	bf00      	nop
 8000738:	3728      	adds	r7, #40	; 0x28
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	2000391c 	.word	0x2000391c
 8000744:	2000392c 	.word	0x2000392c
 8000748:	20003930 	.word	0x20003930

0800074c <CI_enableGetDataChannel>:
uint8_t  getTmpCH = 0;
/**
 * @brief set enable for MDI channel 1 receive
 * @return none
 */
void CI_enableGetDataChannel(void){
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&ComputerChannel,&getTmpCH,1);
 8000750:	2201      	movs	r2, #1
 8000752:	4903      	ldr	r1, [pc, #12]	; (8000760 <CI_enableGetDataChannel+0x14>)
 8000754:	4803      	ldr	r0, [pc, #12]	; (8000764 <CI_enableGetDataChannel+0x18>)
 8000756:	f003 fce2 	bl	800411e <HAL_UART_Receive_IT>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2000019c 	.word	0x2000019c
 8000764:	200039bc 	.word	0x200039bc

08000768 <CI_getDataChannel_IT>:
static uint8_t tmpArr[13];
/**
 * @brief get to Motor Driver 1 values
 * @return none
 */
void CI_getDataChannel_IT(UART_HandleTypeDef *callBackHandle) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	volatile UART_HandleTypeDef *tmpHandle;
	tmpHandle = &ComputerChannel;
 8000770:	4b3a      	ldr	r3, [pc, #232]	; (800085c <CI_getDataChannel_IT+0xf4>)
 8000772:	60fb      	str	r3, [r7, #12]
	if(callBackHandle->Instance == tmpHandle->Instance){
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	429a      	cmp	r2, r3
 800077e:	d168      	bne.n	8000852 <CI_getDataChannel_IT+0xea>
		static uint8_t counter = 0, getTmpBeff = 0;
			if (0x64 == getTmpCH && 0x43 == getTmpBeff) {
 8000780:	4b37      	ldr	r3, [pc, #220]	; (8000860 <CI_getDataChannel_IT+0xf8>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b64      	cmp	r3, #100	; 0x64
 8000786:	d10c      	bne.n	80007a2 <CI_getDataChannel_IT+0x3a>
 8000788:	4b36      	ldr	r3, [pc, #216]	; (8000864 <CI_getDataChannel_IT+0xfc>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b43      	cmp	r3, #67	; 0x43
 800078e:	d108      	bne.n	80007a2 <CI_getDataChannel_IT+0x3a>
				tmpArr[0] = 0x43;
 8000790:	4b35      	ldr	r3, [pc, #212]	; (8000868 <CI_getDataChannel_IT+0x100>)
 8000792:	2243      	movs	r2, #67	; 0x43
 8000794:	701a      	strb	r2, [r3, #0]
				tmpArr[1] = 0x64;
 8000796:	4b34      	ldr	r3, [pc, #208]	; (8000868 <CI_getDataChannel_IT+0x100>)
 8000798:	2264      	movs	r2, #100	; 0x64
 800079a:	705a      	strb	r2, [r3, #1]
					counter = 1;
 800079c:	4b33      	ldr	r3, [pc, #204]	; (800086c <CI_getDataChannel_IT+0x104>)
 800079e:	2201      	movs	r2, #1
 80007a0:	701a      	strb	r2, [r3, #0]
				}
			tmpArr[counter] = getTmpCH;
 80007a2:	4b32      	ldr	r3, [pc, #200]	; (800086c <CI_getDataChannel_IT+0x104>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	461a      	mov	r2, r3
 80007a8:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <CI_getDataChannel_IT+0xf8>)
 80007aa:	7819      	ldrb	r1, [r3, #0]
 80007ac:	4b2e      	ldr	r3, [pc, #184]	; (8000868 <CI_getDataChannel_IT+0x100>)
 80007ae:	5499      	strb	r1, [r3, r2]
				getTmpBeff = getTmpCH;
 80007b0:	4b2b      	ldr	r3, [pc, #172]	; (8000860 <CI_getDataChannel_IT+0xf8>)
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	4b2b      	ldr	r3, [pc, #172]	; (8000864 <CI_getDataChannel_IT+0xfc>)
 80007b6:	701a      	strb	r2, [r3, #0]
				counter++;
 80007b8:	4b2c      	ldr	r3, [pc, #176]	; (800086c <CI_getDataChannel_IT+0x104>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	3301      	adds	r3, #1
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	4b2a      	ldr	r3, [pc, #168]	; (800086c <CI_getDataChannel_IT+0x104>)
 80007c2:	701a      	strb	r2, [r3, #0]
				if (counter > 12) {
 80007c4:	4b29      	ldr	r3, [pc, #164]	; (800086c <CI_getDataChannel_IT+0x104>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b0c      	cmp	r3, #12
 80007ca:	d93d      	bls.n	8000848 <CI_getDataChannel_IT+0xe0>
					counter = 0;
 80007cc:	4b27      	ldr	r3, [pc, #156]	; (800086c <CI_getDataChannel_IT+0x104>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	701a      	strb	r2, [r3, #0]
					if (0x43 == tmpArr[0] && 0x64 == tmpArr[1]) {
 80007d2:	4b25      	ldr	r3, [pc, #148]	; (8000868 <CI_getDataChannel_IT+0x100>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b43      	cmp	r3, #67	; 0x43
 80007d8:	d136      	bne.n	8000848 <CI_getDataChannel_IT+0xe0>
 80007da:	4b23      	ldr	r3, [pc, #140]	; (8000868 <CI_getDataChannel_IT+0x100>)
 80007dc:	785b      	ldrb	r3, [r3, #1]
 80007de:	2b64      	cmp	r3, #100	; 0x64
 80007e0:	d132      	bne.n	8000848 <CI_getDataChannel_IT+0xe0>
						getVals.size=(tmpArr[2] & 0xFF )| (tmpArr[3] << 8);
 80007e2:	4b21      	ldr	r3, [pc, #132]	; (8000868 <CI_getDataChannel_IT+0x100>)
 80007e4:	789b      	ldrb	r3, [r3, #2]
 80007e6:	b21a      	sxth	r2, r3
 80007e8:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <CI_getDataChannel_IT+0x100>)
 80007ea:	78db      	ldrb	r3, [r3, #3]
 80007ec:	021b      	lsls	r3, r3, #8
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b21b      	sxth	r3, r3
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <CI_getDataChannel_IT+0x108>)
 80007f8:	801a      	strh	r2, [r3, #0]
						getVals.steer_pos=(tmpArr[4] & 0xFF )| (tmpArr[5] << 8) | (tmpArr[6] << 16) | (tmpArr[7] << 24);
 80007fa:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <CI_getDataChannel_IT+0x100>)
 80007fc:	791b      	ldrb	r3, [r3, #4]
 80007fe:	461a      	mov	r2, r3
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <CI_getDataChannel_IT+0x100>)
 8000802:	795b      	ldrb	r3, [r3, #5]
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	431a      	orrs	r2, r3
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <CI_getDataChannel_IT+0x100>)
 800080a:	799b      	ldrb	r3, [r3, #6]
 800080c:	041b      	lsls	r3, r3, #16
 800080e:	431a      	orrs	r2, r3
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <CI_getDataChannel_IT+0x100>)
 8000812:	79db      	ldrb	r3, [r3, #7]
 8000814:	061b      	lsls	r3, r3, #24
 8000816:	4313      	orrs	r3, r2
 8000818:	4a15      	ldr	r2, [pc, #84]	; (8000870 <CI_getDataChannel_IT+0x108>)
 800081a:	6053      	str	r3, [r2, #4]
						getVals.drive_speed=(tmpArr[8] & 0xFF) | (tmpArr[9] << 8) | (tmpArr[10] << 16) | (tmpArr[11] << 24);
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <CI_getDataChannel_IT+0x100>)
 800081e:	7a1b      	ldrb	r3, [r3, #8]
 8000820:	461a      	mov	r2, r3
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <CI_getDataChannel_IT+0x100>)
 8000824:	7a5b      	ldrb	r3, [r3, #9]
 8000826:	021b      	lsls	r3, r3, #8
 8000828:	431a      	orrs	r2, r3
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <CI_getDataChannel_IT+0x100>)
 800082c:	7a9b      	ldrb	r3, [r3, #10]
 800082e:	041b      	lsls	r3, r3, #16
 8000830:	431a      	orrs	r2, r3
 8000832:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <CI_getDataChannel_IT+0x100>)
 8000834:	7adb      	ldrb	r3, [r3, #11]
 8000836:	061b      	lsls	r3, r3, #24
 8000838:	4313      	orrs	r3, r2
 800083a:	4a0d      	ldr	r2, [pc, #52]	; (8000870 <CI_getDataChannel_IT+0x108>)
 800083c:	6093      	str	r3, [r2, #8]
						IO_outputByteToBitsPackage(tmpArr[12]);
 800083e:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <CI_getDataChannel_IT+0x100>)
 8000840:	7b1b      	ldrb	r3, [r3, #12]
 8000842:	4618      	mov	r0, r3
 8000844:	f006 f920 	bl	8006a88 <IO_outputByteToBitsPackage>

					}

				}
				HAL_UART_Receive_IT(callBackHandle, &getTmpCH, 1);
 8000848:	2201      	movs	r2, #1
 800084a:	4905      	ldr	r1, [pc, #20]	; (8000860 <CI_getDataChannel_IT+0xf8>)
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f003 fc66 	bl	800411e <HAL_UART_Receive_IT>
	}
}
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200039bc 	.word	0x200039bc
 8000860:	2000019c 	.word	0x2000019c
 8000864:	200001bd 	.word	0x200001bd
 8000868:	200001a0 	.word	0x200001a0
 800086c:	200001be 	.word	0x200001be
 8000870:	20003920 	.word	0x20003920

08000874 <CI_getDataChannel_USB>:
static uint8_t tmpArrUSB[13];
/**
 * @brief get to Motor Driver 1 values
 * @return none
 */
void CI_getDataChannel_USB(uint8_t byte) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]

		static uint8_t counter = 0, getTmpBeff = 0;
			if (0x64 == byte && 0x43 == getTmpBeff) {
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b64      	cmp	r3, #100	; 0x64
 8000882:	d10c      	bne.n	800089e <CI_getDataChannel_USB+0x2a>
 8000884:	4b30      	ldr	r3, [pc, #192]	; (8000948 <CI_getDataChannel_USB+0xd4>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b43      	cmp	r3, #67	; 0x43
 800088a:	d108      	bne.n	800089e <CI_getDataChannel_USB+0x2a>
				tmpArrUSB[0] = 0x43;
 800088c:	4b2f      	ldr	r3, [pc, #188]	; (800094c <CI_getDataChannel_USB+0xd8>)
 800088e:	2243      	movs	r2, #67	; 0x43
 8000890:	701a      	strb	r2, [r3, #0]
				tmpArrUSB[1] = 0x64;
 8000892:	4b2e      	ldr	r3, [pc, #184]	; (800094c <CI_getDataChannel_USB+0xd8>)
 8000894:	2264      	movs	r2, #100	; 0x64
 8000896:	705a      	strb	r2, [r3, #1]
					counter = 1;
 8000898:	4b2d      	ldr	r3, [pc, #180]	; (8000950 <CI_getDataChannel_USB+0xdc>)
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
				}
			tmpArrUSB[counter] = byte;
 800089e:	4b2c      	ldr	r3, [pc, #176]	; (8000950 <CI_getDataChannel_USB+0xdc>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	4619      	mov	r1, r3
 80008a4:	4a29      	ldr	r2, [pc, #164]	; (800094c <CI_getDataChannel_USB+0xd8>)
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	5453      	strb	r3, [r2, r1]
				getTmpBeff = byte;
 80008aa:	4a27      	ldr	r2, [pc, #156]	; (8000948 <CI_getDataChannel_USB+0xd4>)
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	7013      	strb	r3, [r2, #0]
				counter++;
 80008b0:	4b27      	ldr	r3, [pc, #156]	; (8000950 <CI_getDataChannel_USB+0xdc>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	3301      	adds	r3, #1
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	4b25      	ldr	r3, [pc, #148]	; (8000950 <CI_getDataChannel_USB+0xdc>)
 80008ba:	701a      	strb	r2, [r3, #0]
				if (counter > 12) {
 80008bc:	4b24      	ldr	r3, [pc, #144]	; (8000950 <CI_getDataChannel_USB+0xdc>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b0c      	cmp	r3, #12
 80008c2:	d93d      	bls.n	8000940 <CI_getDataChannel_USB+0xcc>
					counter = 0;
 80008c4:	4b22      	ldr	r3, [pc, #136]	; (8000950 <CI_getDataChannel_USB+0xdc>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
					if (0x43 == tmpArrUSB[0] && 0x64 == tmpArrUSB[1]) {
 80008ca:	4b20      	ldr	r3, [pc, #128]	; (800094c <CI_getDataChannel_USB+0xd8>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b43      	cmp	r3, #67	; 0x43
 80008d0:	d136      	bne.n	8000940 <CI_getDataChannel_USB+0xcc>
 80008d2:	4b1e      	ldr	r3, [pc, #120]	; (800094c <CI_getDataChannel_USB+0xd8>)
 80008d4:	785b      	ldrb	r3, [r3, #1]
 80008d6:	2b64      	cmp	r3, #100	; 0x64
 80008d8:	d132      	bne.n	8000940 <CI_getDataChannel_USB+0xcc>
						getVals.size=(tmpArrUSB[2] & 0xFF )| (tmpArrUSB[3] << 8);
 80008da:	4b1c      	ldr	r3, [pc, #112]	; (800094c <CI_getDataChannel_USB+0xd8>)
 80008dc:	789b      	ldrb	r3, [r3, #2]
 80008de:	b21a      	sxth	r2, r3
 80008e0:	4b1a      	ldr	r3, [pc, #104]	; (800094c <CI_getDataChannel_USB+0xd8>)
 80008e2:	78db      	ldrb	r3, [r3, #3]
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	b21b      	sxth	r3, r3
 80008e8:	4313      	orrs	r3, r2
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <CI_getDataChannel_USB+0xe0>)
 80008f0:	801a      	strh	r2, [r3, #0]
						getVals.steer_pos=(tmpArrUSB[4] & 0xFF )| (tmpArrUSB[5] << 8) | (tmpArrUSB[6] << 16) | (tmpArrUSB[7] << 24);
 80008f2:	4b16      	ldr	r3, [pc, #88]	; (800094c <CI_getDataChannel_USB+0xd8>)
 80008f4:	791b      	ldrb	r3, [r3, #4]
 80008f6:	461a      	mov	r2, r3
 80008f8:	4b14      	ldr	r3, [pc, #80]	; (800094c <CI_getDataChannel_USB+0xd8>)
 80008fa:	795b      	ldrb	r3, [r3, #5]
 80008fc:	021b      	lsls	r3, r3, #8
 80008fe:	431a      	orrs	r2, r3
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <CI_getDataChannel_USB+0xd8>)
 8000902:	799b      	ldrb	r3, [r3, #6]
 8000904:	041b      	lsls	r3, r3, #16
 8000906:	431a      	orrs	r2, r3
 8000908:	4b10      	ldr	r3, [pc, #64]	; (800094c <CI_getDataChannel_USB+0xd8>)
 800090a:	79db      	ldrb	r3, [r3, #7]
 800090c:	061b      	lsls	r3, r3, #24
 800090e:	4313      	orrs	r3, r2
 8000910:	4a10      	ldr	r2, [pc, #64]	; (8000954 <CI_getDataChannel_USB+0xe0>)
 8000912:	6053      	str	r3, [r2, #4]
						getVals.drive_speed=(tmpArrUSB[8] & 0xFF) | (tmpArrUSB[9] << 8) | (tmpArrUSB[10] << 16) | (tmpArrUSB[11] << 24);
 8000914:	4b0d      	ldr	r3, [pc, #52]	; (800094c <CI_getDataChannel_USB+0xd8>)
 8000916:	7a1b      	ldrb	r3, [r3, #8]
 8000918:	461a      	mov	r2, r3
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <CI_getDataChannel_USB+0xd8>)
 800091c:	7a5b      	ldrb	r3, [r3, #9]
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	431a      	orrs	r2, r3
 8000922:	4b0a      	ldr	r3, [pc, #40]	; (800094c <CI_getDataChannel_USB+0xd8>)
 8000924:	7a9b      	ldrb	r3, [r3, #10]
 8000926:	041b      	lsls	r3, r3, #16
 8000928:	431a      	orrs	r2, r3
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <CI_getDataChannel_USB+0xd8>)
 800092c:	7adb      	ldrb	r3, [r3, #11]
 800092e:	061b      	lsls	r3, r3, #24
 8000930:	4313      	orrs	r3, r2
 8000932:	4a08      	ldr	r2, [pc, #32]	; (8000954 <CI_getDataChannel_USB+0xe0>)
 8000934:	6093      	str	r3, [r2, #8]
						IO_outputByteToBitsPackage(tmpArrUSB[12]);
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <CI_getDataChannel_USB+0xd8>)
 8000938:	7b1b      	ldrb	r3, [r3, #12]
 800093a:	4618      	mov	r0, r3
 800093c:	f006 f8a4 	bl	8006a88 <IO_outputByteToBitsPackage>

					}

				}

}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200001bf 	.word	0x200001bf
 800094c:	200001b0 	.word	0x200001b0
 8000950:	200001c0 	.word	0x200001c0
 8000954:	20003920 	.word	0x20003920

08000958 <getComputerVals>:

Com_interface getComputerVals(void) {return getVals;}
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a04      	ldr	r2, [pc, #16]	; (8000974 <getComputerVals+0x1c>)
 8000964:	ca07      	ldmia	r2, {r0, r1, r2}
 8000966:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	20003920 	.word	0x20003920

08000978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097c:	f000 fbf2 	bl	8001164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000980:	f000 f820 	bl	80009c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000984:	f000 f914 	bl	8000bb0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000988:	f000 f8f4 	bl	8000b74 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800098c:	f000 f874 	bl	8000a78 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000990:	f000 f89c 	bl	8000acc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000994:	f000 f8c4 	bl	8000b20 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  tasks_init();
 8000998:	f00b fab4 	bl	800bf04 <tasks_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800099c:	f007 fc54 	bl	8008248 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009a0:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <main+0x40>)
 80009a2:	2100      	movs	r1, #0
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <main+0x44>)
 80009a6:	f007 fcb5 	bl	8008314 <osThreadNew>
 80009aa:	4603      	mov	r3, r0
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <main+0x48>)
 80009ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009b0:	f007 fc7c 	bl	80082ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <main+0x3c>
 80009b6:	bf00      	nop
 80009b8:	0800c66c 	.word	0x0800c66c
 80009bc:	08000d05 	.word	0x08000d05
 80009c0:	20003934 	.word	0x20003934

080009c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b094      	sub	sp, #80	; 0x50
 80009c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ce:	2228      	movs	r2, #40	; 0x28
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f00b fdb4 	bl	800c540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009f4:	2301      	movs	r3, #1
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a02:	2301      	movs	r3, #1
 8000a04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a06:	2302      	movs	r3, #2
 8000a08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a10:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a14:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f002 fbe8 	bl	80031f0 <HAL_RCC_OscConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a26:	f000 f989 	bl	8000d3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a2a:	230f      	movs	r3, #15
 8000a2c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a3a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2102      	movs	r1, #2
 8000a46:	4618      	mov	r0, r3
 8000a48:	f002 fe52 	bl	80036f0 <HAL_RCC_ClockConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000a52:	f000 f973 	bl	8000d3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a56:	2310      	movs	r3, #16
 8000a58:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	4618      	mov	r0, r3
 8000a62:	f003 f80f 	bl	8003a84 <HAL_RCCEx_PeriphCLKConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000a6c:	f000 f966 	bl	8000d3c <Error_Handler>
  }
}
 8000a70:	bf00      	nop
 8000a72:	3750      	adds	r7, #80	; 0x50
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a7e:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <MX_USART1_UART_Init+0x50>)
 8000a80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000ab0:	f003 fae8 	bl	8004084 <HAL_UART_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aba:	f000 f93f 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200039bc 	.word	0x200039bc
 8000ac8:	40013800 	.word	0x40013800

08000acc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000ad2:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <MX_USART2_UART_Init+0x50>)
 8000ad4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000ad8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000adc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000af2:	220c      	movs	r2, #12
 8000af4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000b04:	f003 fabe 	bl	8004084 <HAL_UART_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b0e:	f000 f915 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200039fc 	.word	0x200039fc
 8000b1c:	40004400 	.word	0x40004400

08000b20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_USART3_UART_Init+0x4c>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <MX_USART3_UART_Init+0x50>)
 8000b28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <MX_USART3_UART_Init+0x4c>)
 8000b2c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000b30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_USART3_UART_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_USART3_UART_Init+0x4c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <MX_USART3_UART_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_USART3_UART_Init+0x4c>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <MX_USART3_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_USART3_UART_Init+0x4c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_USART3_UART_Init+0x4c>)
 8000b58:	f003 fa94 	bl	8004084 <HAL_UART_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b62:	f000 f8eb 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20003938 	.word	0x20003938
 8000b70:	40004800 	.word	0x40004800

08000b74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_DMA_Init+0x38>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	4a0b      	ldr	r2, [pc, #44]	; (8000bac <MX_DMA_Init+0x38>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6153      	str	r3, [r2, #20]
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_DMA_Init+0x38>)
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2105      	movs	r1, #5
 8000b96:	200e      	movs	r0, #14
 8000b98:	f000 fbcb 	bl	8001332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000b9c:	200e      	movs	r0, #14
 8000b9e:	f000 fbe4 	bl	800136a <HAL_NVIC_EnableIRQ>

}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40021000 	.word	0x40021000

08000bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb6:	f107 0310 	add.w	r3, r7, #16
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc4:	4b4b      	ldr	r3, [pc, #300]	; (8000cf4 <MX_GPIO_Init+0x144>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	4a4a      	ldr	r2, [pc, #296]	; (8000cf4 <MX_GPIO_Init+0x144>)
 8000bca:	f043 0310 	orr.w	r3, r3, #16
 8000bce:	6193      	str	r3, [r2, #24]
 8000bd0:	4b48      	ldr	r3, [pc, #288]	; (8000cf4 <MX_GPIO_Init+0x144>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f003 0310 	and.w	r3, r3, #16
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bdc:	4b45      	ldr	r3, [pc, #276]	; (8000cf4 <MX_GPIO_Init+0x144>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a44      	ldr	r2, [pc, #272]	; (8000cf4 <MX_GPIO_Init+0x144>)
 8000be2:	f043 0320 	orr.w	r3, r3, #32
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b42      	ldr	r3, [pc, #264]	; (8000cf4 <MX_GPIO_Init+0x144>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0320 	and.w	r3, r3, #32
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf4:	4b3f      	ldr	r3, [pc, #252]	; (8000cf4 <MX_GPIO_Init+0x144>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a3e      	ldr	r2, [pc, #248]	; (8000cf4 <MX_GPIO_Init+0x144>)
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b3c      	ldr	r3, [pc, #240]	; (8000cf4 <MX_GPIO_Init+0x144>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0304 	and.w	r3, r3, #4
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0c:	4b39      	ldr	r3, [pc, #228]	; (8000cf4 <MX_GPIO_Init+0x144>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a38      	ldr	r2, [pc, #224]	; (8000cf4 <MX_GPIO_Init+0x144>)
 8000c12:	f043 0308 	orr.w	r3, r3, #8
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b36      	ldr	r3, [pc, #216]	; (8000cf4 <MX_GPIO_Init+0x144>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0308 	and.w	r3, r3, #8
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2a:	4833      	ldr	r0, [pc, #204]	; (8000cf8 <MX_GPIO_Init+0x148>)
 8000c2c:	f000 ff1d 	bl	8001a6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, relay_1_Pin|relay_2_Pin|relay_3_Pin|relay_4_Pin, GPIO_PIN_SET);
 8000c30:	2201      	movs	r2, #1
 8000c32:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000c36:	4831      	ldr	r0, [pc, #196]	; (8000cfc <MX_GPIO_Init+0x14c>)
 8000c38:	f000 ff17 	bl	8001a6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, relay_5_Pin|relay_8_Pin, GPIO_PIN_SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8000c42:	482f      	ldr	r0, [pc, #188]	; (8000d00 <MX_GPIO_Init+0x150>)
 8000c44:	f000 ff11 	bl	8001a6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 8000c48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 0310 	add.w	r3, r7, #16
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4825      	ldr	r0, [pc, #148]	; (8000cf8 <MX_GPIO_Init+0x148>)
 8000c62:	f000 fd67 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pins : switch_7_Pin switch_6_Pin switch_5_Pin switch_3_Pin */
  GPIO_InitStruct.Pin = switch_7_Pin|switch_6_Pin|switch_5_Pin|switch_3_Pin;
 8000c66:	23b2      	movs	r3, #178	; 0xb2
 8000c68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	f107 0310 	add.w	r3, r7, #16
 8000c76:	4619      	mov	r1, r3
 8000c78:	4821      	ldr	r0, [pc, #132]	; (8000d00 <MX_GPIO_Init+0x150>)
 8000c7a:	f000 fd5b 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pins : switch_2_Pin switch_1_Pin switch_8_Pin */
  GPIO_InitStruct.Pin = switch_2_Pin|switch_1_Pin|switch_8_Pin;
 8000c7e:	230b      	movs	r3, #11
 8000c80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	4619      	mov	r1, r3
 8000c90:	481a      	ldr	r0, [pc, #104]	; (8000cfc <MX_GPIO_Init+0x14c>)
 8000c92:	f000 fd4f 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pins : relay_1_Pin relay_2_Pin relay_3_Pin relay_4_Pin */
  GPIO_InitStruct.Pin = relay_1_Pin|relay_2_Pin|relay_3_Pin|relay_4_Pin;
 8000c96:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	4619      	mov	r1, r3
 8000cae:	4813      	ldr	r0, [pc, #76]	; (8000cfc <MX_GPIO_Init+0x14c>)
 8000cb0:	f000 fd40 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pins : relay_5_Pin relay_8_Pin */
  GPIO_InitStruct.Pin = relay_5_Pin|relay_8_Pin;
 8000cb4:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000cb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0310 	add.w	r3, r7, #16
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480c      	ldr	r0, [pc, #48]	; (8000d00 <MX_GPIO_Init+0x150>)
 8000cce:	f000 fd31 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pin : switch_4_Pin */
  GPIO_InitStruct.Pin = switch_4_Pin;
 8000cd2:	2310      	movs	r3, #16
 8000cd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(switch_4_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_GPIO_Init+0x14c>)
 8000ce6:	f000 fd25 	bl	8001734 <HAL_GPIO_Init>

}
 8000cea:	bf00      	nop
 8000cec:	3720      	adds	r7, #32
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	40011000 	.word	0x40011000
 8000cfc:	40010c00 	.word	0x40010c00
 8000d00:	40010800 	.word	0x40010800

08000d04 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000d0c:	f00a f9de 	bl	800b0cc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d10:	2001      	movs	r0, #1
 8000d12:	f007 fba9 	bl	8008468 <osDelay>
 8000d16:	e7fb      	b.n	8000d10 <StartDefaultTask+0xc>

08000d18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d101      	bne.n	8000d2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d2a:	f000 fa31 	bl	8001190 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40012c00 	.word	0x40012c00

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <Error_Handler+0x8>
	...

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <HAL_MspInit+0x68>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	4a17      	ldr	r2, [pc, #92]	; (8000db0 <HAL_MspInit+0x68>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6193      	str	r3, [r2, #24]
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <HAL_MspInit+0x68>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_MspInit+0x68>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	4a11      	ldr	r2, [pc, #68]	; (8000db0 <HAL_MspInit+0x68>)
 8000d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d70:	61d3      	str	r3, [r2, #28]
 8000d72:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <HAL_MspInit+0x68>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	210f      	movs	r1, #15
 8000d82:	f06f 0001 	mvn.w	r0, #1
 8000d86:	f000 fad4 	bl	8001332 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <HAL_MspInit+0x6c>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <HAL_MspInit+0x6c>)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40010000 	.word	0x40010000

08000db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08c      	sub	sp, #48	; 0x30
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0320 	add.w	r3, r7, #32
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a72      	ldr	r2, [pc, #456]	; (8000f9c <HAL_UART_MspInit+0x1e4>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d160      	bne.n	8000e9a <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dd8:	4b71      	ldr	r3, [pc, #452]	; (8000fa0 <HAL_UART_MspInit+0x1e8>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a70      	ldr	r2, [pc, #448]	; (8000fa0 <HAL_UART_MspInit+0x1e8>)
 8000dde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b6e      	ldr	r3, [pc, #440]	; (8000fa0 <HAL_UART_MspInit+0x1e8>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dec:	61fb      	str	r3, [r7, #28]
 8000dee:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	4b6b      	ldr	r3, [pc, #428]	; (8000fa0 <HAL_UART_MspInit+0x1e8>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a6a      	ldr	r2, [pc, #424]	; (8000fa0 <HAL_UART_MspInit+0x1e8>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b68      	ldr	r3, [pc, #416]	; (8000fa0 <HAL_UART_MspInit+0x1e8>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	61bb      	str	r3, [r7, #24]
 8000e06:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	f107 0320 	add.w	r3, r7, #32
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4861      	ldr	r0, [pc, #388]	; (8000fa4 <HAL_UART_MspInit+0x1ec>)
 8000e1e:	f000 fc89 	bl	8001734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e30:	f107 0320 	add.w	r3, r7, #32
 8000e34:	4619      	mov	r1, r3
 8000e36:	485b      	ldr	r0, [pc, #364]	; (8000fa4 <HAL_UART_MspInit+0x1ec>)
 8000e38:	f000 fc7c 	bl	8001734 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000e3c:	4b5a      	ldr	r3, [pc, #360]	; (8000fa8 <HAL_UART_MspInit+0x1f0>)
 8000e3e:	4a5b      	ldr	r2, [pc, #364]	; (8000fac <HAL_UART_MspInit+0x1f4>)
 8000e40:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e42:	4b59      	ldr	r3, [pc, #356]	; (8000fa8 <HAL_UART_MspInit+0x1f0>)
 8000e44:	2210      	movs	r2, #16
 8000e46:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e48:	4b57      	ldr	r3, [pc, #348]	; (8000fa8 <HAL_UART_MspInit+0x1f0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e4e:	4b56      	ldr	r3, [pc, #344]	; (8000fa8 <HAL_UART_MspInit+0x1f0>)
 8000e50:	2280      	movs	r2, #128	; 0x80
 8000e52:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e54:	4b54      	ldr	r3, [pc, #336]	; (8000fa8 <HAL_UART_MspInit+0x1f0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e5a:	4b53      	ldr	r3, [pc, #332]	; (8000fa8 <HAL_UART_MspInit+0x1f0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8000e60:	4b51      	ldr	r3, [pc, #324]	; (8000fa8 <HAL_UART_MspInit+0x1f0>)
 8000e62:	2220      	movs	r2, #32
 8000e64:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e66:	4b50      	ldr	r3, [pc, #320]	; (8000fa8 <HAL_UART_MspInit+0x1f0>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000e6c:	484e      	ldr	r0, [pc, #312]	; (8000fa8 <HAL_UART_MspInit+0x1f0>)
 8000e6e:	f000 fa8b 	bl	8001388 <HAL_DMA_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000e78:	f7ff ff60 	bl	8000d3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a4a      	ldr	r2, [pc, #296]	; (8000fa8 <HAL_UART_MspInit+0x1f0>)
 8000e80:	631a      	str	r2, [r3, #48]	; 0x30
 8000e82:	4a49      	ldr	r2, [pc, #292]	; (8000fa8 <HAL_UART_MspInit+0x1f0>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2105      	movs	r1, #5
 8000e8c:	2025      	movs	r0, #37	; 0x25
 8000e8e:	f000 fa50 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e92:	2025      	movs	r0, #37	; 0x25
 8000e94:	f000 fa69 	bl	800136a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e98:	e07c      	b.n	8000f94 <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART2)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a44      	ldr	r2, [pc, #272]	; (8000fb0 <HAL_UART_MspInit+0x1f8>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d138      	bne.n	8000f16 <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ea4:	4b3e      	ldr	r3, [pc, #248]	; (8000fa0 <HAL_UART_MspInit+0x1e8>)
 8000ea6:	69db      	ldr	r3, [r3, #28]
 8000ea8:	4a3d      	ldr	r2, [pc, #244]	; (8000fa0 <HAL_UART_MspInit+0x1e8>)
 8000eaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eae:	61d3      	str	r3, [r2, #28]
 8000eb0:	4b3b      	ldr	r3, [pc, #236]	; (8000fa0 <HAL_UART_MspInit+0x1e8>)
 8000eb2:	69db      	ldr	r3, [r3, #28]
 8000eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebc:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <HAL_UART_MspInit+0x1e8>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a37      	ldr	r2, [pc, #220]	; (8000fa0 <HAL_UART_MspInit+0x1e8>)
 8000ec2:	f043 0304 	orr.w	r3, r3, #4
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b35      	ldr	r3, [pc, #212]	; (8000fa0 <HAL_UART_MspInit+0x1e8>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f003 0304 	and.w	r3, r3, #4
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000edc:	2303      	movs	r3, #3
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 0320 	add.w	r3, r7, #32
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	482f      	ldr	r0, [pc, #188]	; (8000fa4 <HAL_UART_MspInit+0x1ec>)
 8000ee8:	f000 fc24 	bl	8001734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000eec:	2308      	movs	r3, #8
 8000eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 0320 	add.w	r3, r7, #32
 8000efc:	4619      	mov	r1, r3
 8000efe:	4829      	ldr	r0, [pc, #164]	; (8000fa4 <HAL_UART_MspInit+0x1ec>)
 8000f00:	f000 fc18 	bl	8001734 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2105      	movs	r1, #5
 8000f08:	2026      	movs	r0, #38	; 0x26
 8000f0a:	f000 fa12 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f0e:	2026      	movs	r0, #38	; 0x26
 8000f10:	f000 fa2b 	bl	800136a <HAL_NVIC_EnableIRQ>
}
 8000f14:	e03e      	b.n	8000f94 <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART3)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a26      	ldr	r2, [pc, #152]	; (8000fb4 <HAL_UART_MspInit+0x1fc>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d139      	bne.n	8000f94 <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f20:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <HAL_UART_MspInit+0x1e8>)
 8000f22:	69db      	ldr	r3, [r3, #28]
 8000f24:	4a1e      	ldr	r2, [pc, #120]	; (8000fa0 <HAL_UART_MspInit+0x1e8>)
 8000f26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f2a:	61d3      	str	r3, [r2, #28]
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <HAL_UART_MspInit+0x1e8>)
 8000f2e:	69db      	ldr	r3, [r3, #28]
 8000f30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f38:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <HAL_UART_MspInit+0x1e8>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	4a18      	ldr	r2, [pc, #96]	; (8000fa0 <HAL_UART_MspInit+0x1e8>)
 8000f3e:	f043 0308 	orr.w	r3, r3, #8
 8000f42:	6193      	str	r3, [r2, #24]
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <HAL_UART_MspInit+0x1e8>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0308 	and.w	r3, r3, #8
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5e:	f107 0320 	add.w	r3, r7, #32
 8000f62:	4619      	mov	r1, r3
 8000f64:	4814      	ldr	r0, [pc, #80]	; (8000fb8 <HAL_UART_MspInit+0x200>)
 8000f66:	f000 fbe5 	bl	8001734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f78:	f107 0320 	add.w	r3, r7, #32
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <HAL_UART_MspInit+0x200>)
 8000f80:	f000 fbd8 	bl	8001734 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2105      	movs	r1, #5
 8000f88:	2027      	movs	r0, #39	; 0x27
 8000f8a:	f000 f9d2 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f8e:	2027      	movs	r0, #39	; 0x27
 8000f90:	f000 f9eb 	bl	800136a <HAL_NVIC_EnableIRQ>
}
 8000f94:	bf00      	nop
 8000f96:	3730      	adds	r7, #48	; 0x30
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40013800 	.word	0x40013800
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40010800 	.word	0x40010800
 8000fa8:	20003978 	.word	0x20003978
 8000fac:	40020044 	.word	0x40020044
 8000fb0:	40004400 	.word	0x40004400
 8000fb4:	40004800 	.word	0x40004800
 8000fb8:	40010c00 	.word	0x40010c00

08000fbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08c      	sub	sp, #48	; 0x30
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	2019      	movs	r0, #25
 8000fd2:	f000 f9ae 	bl	8001332 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000fd6:	2019      	movs	r0, #25
 8000fd8:	f000 f9c7 	bl	800136a <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000fdc:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <HAL_InitTick+0x9c>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	4a1d      	ldr	r2, [pc, #116]	; (8001058 <HAL_InitTick+0x9c>)
 8000fe2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fe6:	6193      	str	r3, [r2, #24]
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <HAL_InitTick+0x9c>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ff4:	f107 0210 	add.w	r2, r7, #16
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 fcf2 	bl	80039e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001004:	f002 fcdc 	bl	80039c0 <HAL_RCC_GetPCLK2Freq>
 8001008:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800100a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800100c:	4a13      	ldr	r2, [pc, #76]	; (800105c <HAL_InitTick+0xa0>)
 800100e:	fba2 2303 	umull	r2, r3, r2, r3
 8001012:	0c9b      	lsrs	r3, r3, #18
 8001014:	3b01      	subs	r3, #1
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <HAL_InitTick+0xa4>)
 800101a:	4a12      	ldr	r2, [pc, #72]	; (8001064 <HAL_InitTick+0xa8>)
 800101c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <HAL_InitTick+0xa4>)
 8001020:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001024:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001026:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <HAL_InitTick+0xa4>)
 8001028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_InitTick+0xa4>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <HAL_InitTick+0xa4>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001038:	4809      	ldr	r0, [pc, #36]	; (8001060 <HAL_InitTick+0xa4>)
 800103a:	f002 fdd9 	bl	8003bf0 <HAL_TIM_Base_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d104      	bne.n	800104e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001044:	4806      	ldr	r0, [pc, #24]	; (8001060 <HAL_InitTick+0xa4>)
 8001046:	f002 fe2b 	bl	8003ca0 <HAL_TIM_Base_Start_IT>
 800104a:	4603      	mov	r3, r0
 800104c:	e000      	b.n	8001050 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
}
 8001050:	4618      	mov	r0, r3
 8001052:	3730      	adds	r7, #48	; 0x30
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40021000 	.word	0x40021000
 800105c:	431bde83 	.word	0x431bde83
 8001060:	20003a3c 	.word	0x20003a3c
 8001064:	40012c00 	.word	0x40012c00

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800106c:	e7fe      	b.n	800106c <NMI_Handler+0x4>

0800106e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <HardFault_Handler+0x4>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <MemManage_Handler+0x4>

0800107a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <BusFault_Handler+0x4>

08001080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <UsageFault_Handler+0x4>

08001086 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
	...

08001094 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <DMA1_Channel4_IRQHandler+0x10>)
 800109a:	f000 fa45 	bl	8001528 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20003978 	.word	0x20003978

080010a8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80010ae:	f000 fe3e 	bl	8001d2e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20003df8 	.word	0x20003df8

080010bc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <TIM1_UP_IRQHandler+0x10>)
 80010c2:	f002 fe3f 	bl	8003d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20003a3c 	.word	0x20003a3c

080010d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <USART1_IRQHandler+0x10>)
 80010d6:	f003 f877 	bl	80041c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200039bc 	.word	0x200039bc

080010e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <USART2_IRQHandler+0x10>)
 80010ea:	f003 f86d 	bl	80041c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200039fc 	.word	0x200039fc

080010f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <USART3_IRQHandler+0x10>)
 80010fe:	f003 f863 	bl	80041c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20003938 	.word	0x20003938

0800110c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr

08001118 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001118:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800111a:	e003      	b.n	8001124 <LoopCopyDataInit>

0800111c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800111e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001120:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001122:	3104      	adds	r1, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001124:	480a      	ldr	r0, [pc, #40]	; (8001150 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001128:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800112a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800112c:	d3f6      	bcc.n	800111c <CopyDataInit>
  ldr r2, =_sbss
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001130:	e002      	b.n	8001138 <LoopFillZerobss>

08001132 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001134:	f842 3b04 	str.w	r3, [r2], #4

08001138 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800113a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800113c:	d3f9      	bcc.n	8001132 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800113e:	f7ff ffe5 	bl	800110c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001142:	f00b f9cb 	bl	800c4dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001146:	f7ff fc17 	bl	8000978 <main>
  bx lr
 800114a:	4770      	bx	lr
  ldr r3, =_sidata
 800114c:	0800c6b0 	.word	0x0800c6b0
  ldr r0, =_sdata
 8001150:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001154:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 8001158:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 800115c:	20004154 	.word	0x20004154

08001160 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC1_2_IRQHandler>
	...

08001164 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <HAL_Init+0x28>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a07      	ldr	r2, [pc, #28]	; (800118c <HAL_Init+0x28>)
 800116e:	f043 0310 	orr.w	r3, r3, #16
 8001172:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001174:	2003      	movs	r0, #3
 8001176:	f000 f8d1 	bl	800131c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800117a:	2000      	movs	r0, #0
 800117c:	f7ff ff1e 	bl	8000fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001180:	f7ff fde2 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40022000 	.word	0x40022000

08001190 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <HAL_IncTick+0x1c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <HAL_IncTick+0x20>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	4a03      	ldr	r2, [pc, #12]	; (80011b0 <HAL_IncTick+0x20>)
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	20000008 	.word	0x20000008
 80011b0:	20003a84 	.word	0x20003a84

080011b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return uwTick;
 80011b8:	4b02      	ldr	r3, [pc, #8]	; (80011c4 <HAL_GetTick+0x10>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	20003a84 	.word	0x20003a84

080011c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e4:	4013      	ands	r3, r2
 80011e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fa:	4a04      	ldr	r2, [pc, #16]	; (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	60d3      	str	r3, [r2, #12]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <__NVIC_GetPriorityGrouping+0x18>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	0a1b      	lsrs	r3, r3, #8
 800121a:	f003 0307 	and.w	r3, r3, #7
}
 800121e:	4618      	mov	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	db0b      	blt.n	8001256 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	f003 021f 	and.w	r2, r3, #31
 8001244:	4906      	ldr	r1, [pc, #24]	; (8001260 <__NVIC_EnableIRQ+0x34>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	095b      	lsrs	r3, r3, #5
 800124c:	2001      	movs	r0, #1
 800124e:	fa00 f202 	lsl.w	r2, r0, r2
 8001252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	e000e100 	.word	0xe000e100

08001264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001274:	2b00      	cmp	r3, #0
 8001276:	db0a      	blt.n	800128e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	b2da      	uxtb	r2, r3
 800127c:	490c      	ldr	r1, [pc, #48]	; (80012b0 <__NVIC_SetPriority+0x4c>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	0112      	lsls	r2, r2, #4
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	440b      	add	r3, r1
 8001288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800128c:	e00a      	b.n	80012a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4908      	ldr	r1, [pc, #32]	; (80012b4 <__NVIC_SetPriority+0x50>)
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	3b04      	subs	r3, #4
 800129c:	0112      	lsls	r2, r2, #4
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	440b      	add	r3, r1
 80012a2:	761a      	strb	r2, [r3, #24]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000e100 	.word	0xe000e100
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	; 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f1c3 0307 	rsb	r3, r3, #7
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	bf28      	it	cs
 80012d6:	2304      	movcs	r3, #4
 80012d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3304      	adds	r3, #4
 80012de:	2b06      	cmp	r3, #6
 80012e0:	d902      	bls.n	80012e8 <NVIC_EncodePriority+0x30>
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3b03      	subs	r3, #3
 80012e6:	e000      	b.n	80012ea <NVIC_EncodePriority+0x32>
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	f04f 32ff 	mov.w	r2, #4294967295
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43da      	mvns	r2, r3
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	401a      	ands	r2, r3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001300:	f04f 31ff 	mov.w	r1, #4294967295
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa01 f303 	lsl.w	r3, r1, r3
 800130a:	43d9      	mvns	r1, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	4313      	orrs	r3, r2
         );
}
 8001312:	4618      	mov	r0, r3
 8001314:	3724      	adds	r7, #36	; 0x24
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr

0800131c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff4f 	bl	80011c8 <__NVIC_SetPriorityGrouping>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001344:	f7ff ff64 	bl	8001210 <__NVIC_GetPriorityGrouping>
 8001348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	6978      	ldr	r0, [r7, #20]
 8001350:	f7ff ffb2 	bl	80012b8 <NVIC_EncodePriority>
 8001354:	4602      	mov	r2, r0
 8001356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff81 	bl	8001264 <__NVIC_SetPriority>
}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff57 	bl	800122c <__NVIC_EnableIRQ>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e043      	b.n	8001426 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b22      	ldr	r3, [pc, #136]	; (8001430 <HAL_DMA_Init+0xa8>)
 80013a6:	4413      	add	r3, r2
 80013a8:	4a22      	ldr	r2, [pc, #136]	; (8001434 <HAL_DMA_Init+0xac>)
 80013aa:	fba2 2303 	umull	r2, r3, r2, r3
 80013ae:	091b      	lsrs	r3, r3, #4
 80013b0:	009a      	lsls	r2, r3, #2
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a1f      	ldr	r2, [pc, #124]	; (8001438 <HAL_DMA_Init+0xb0>)
 80013ba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2202      	movs	r2, #2
 80013c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80013d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80013d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80013e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	bffdfff8 	.word	0xbffdfff8
 8001434:	cccccccd 	.word	0xcccccccd
 8001438:	40020000 	.word	0x40020000

0800143c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800144e:	2b02      	cmp	r3, #2
 8001450:	d005      	beq.n	800145e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2204      	movs	r2, #4
 8001456:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	73fb      	strb	r3, [r7, #15]
 800145c:	e051      	b.n	8001502 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 020e 	bic.w	r2, r2, #14
 800146c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 0201 	bic.w	r2, r2, #1
 800147c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a22      	ldr	r2, [pc, #136]	; (800150c <HAL_DMA_Abort_IT+0xd0>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d029      	beq.n	80014dc <HAL_DMA_Abort_IT+0xa0>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a20      	ldr	r2, [pc, #128]	; (8001510 <HAL_DMA_Abort_IT+0xd4>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d022      	beq.n	80014d8 <HAL_DMA_Abort_IT+0x9c>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a1f      	ldr	r2, [pc, #124]	; (8001514 <HAL_DMA_Abort_IT+0xd8>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d01a      	beq.n	80014d2 <HAL_DMA_Abort_IT+0x96>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a1d      	ldr	r2, [pc, #116]	; (8001518 <HAL_DMA_Abort_IT+0xdc>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d012      	beq.n	80014cc <HAL_DMA_Abort_IT+0x90>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a1c      	ldr	r2, [pc, #112]	; (800151c <HAL_DMA_Abort_IT+0xe0>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d00a      	beq.n	80014c6 <HAL_DMA_Abort_IT+0x8a>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a1a      	ldr	r2, [pc, #104]	; (8001520 <HAL_DMA_Abort_IT+0xe4>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d102      	bne.n	80014c0 <HAL_DMA_Abort_IT+0x84>
 80014ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014be:	e00e      	b.n	80014de <HAL_DMA_Abort_IT+0xa2>
 80014c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014c4:	e00b      	b.n	80014de <HAL_DMA_Abort_IT+0xa2>
 80014c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ca:	e008      	b.n	80014de <HAL_DMA_Abort_IT+0xa2>
 80014cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d0:	e005      	b.n	80014de <HAL_DMA_Abort_IT+0xa2>
 80014d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014d6:	e002      	b.n	80014de <HAL_DMA_Abort_IT+0xa2>
 80014d8:	2310      	movs	r3, #16
 80014da:	e000      	b.n	80014de <HAL_DMA_Abort_IT+0xa2>
 80014dc:	2301      	movs	r3, #1
 80014de:	4a11      	ldr	r2, [pc, #68]	; (8001524 <HAL_DMA_Abort_IT+0xe8>)
 80014e0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	4798      	blx	r3
    } 
  }
  return status;
 8001502:	7bfb      	ldrb	r3, [r7, #15]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40020008 	.word	0x40020008
 8001510:	4002001c 	.word	0x4002001c
 8001514:	40020030 	.word	0x40020030
 8001518:	40020044 	.word	0x40020044
 800151c:	40020058 	.word	0x40020058
 8001520:	4002006c 	.word	0x4002006c
 8001524:	40020000 	.word	0x40020000

08001528 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	2204      	movs	r2, #4
 8001546:	409a      	lsls	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4013      	ands	r3, r2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d04f      	beq.n	80015f0 <HAL_DMA_IRQHandler+0xc8>
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	2b00      	cmp	r3, #0
 8001558:	d04a      	beq.n	80015f0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0320 	and.w	r3, r3, #32
 8001564:	2b00      	cmp	r3, #0
 8001566:	d107      	bne.n	8001578 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0204 	bic.w	r2, r2, #4
 8001576:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a66      	ldr	r2, [pc, #408]	; (8001718 <HAL_DMA_IRQHandler+0x1f0>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d029      	beq.n	80015d6 <HAL_DMA_IRQHandler+0xae>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a65      	ldr	r2, [pc, #404]	; (800171c <HAL_DMA_IRQHandler+0x1f4>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d022      	beq.n	80015d2 <HAL_DMA_IRQHandler+0xaa>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a63      	ldr	r2, [pc, #396]	; (8001720 <HAL_DMA_IRQHandler+0x1f8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d01a      	beq.n	80015cc <HAL_DMA_IRQHandler+0xa4>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a62      	ldr	r2, [pc, #392]	; (8001724 <HAL_DMA_IRQHandler+0x1fc>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d012      	beq.n	80015c6 <HAL_DMA_IRQHandler+0x9e>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a60      	ldr	r2, [pc, #384]	; (8001728 <HAL_DMA_IRQHandler+0x200>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d00a      	beq.n	80015c0 <HAL_DMA_IRQHandler+0x98>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a5f      	ldr	r2, [pc, #380]	; (800172c <HAL_DMA_IRQHandler+0x204>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d102      	bne.n	80015ba <HAL_DMA_IRQHandler+0x92>
 80015b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015b8:	e00e      	b.n	80015d8 <HAL_DMA_IRQHandler+0xb0>
 80015ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80015be:	e00b      	b.n	80015d8 <HAL_DMA_IRQHandler+0xb0>
 80015c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80015c4:	e008      	b.n	80015d8 <HAL_DMA_IRQHandler+0xb0>
 80015c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015ca:	e005      	b.n	80015d8 <HAL_DMA_IRQHandler+0xb0>
 80015cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015d0:	e002      	b.n	80015d8 <HAL_DMA_IRQHandler+0xb0>
 80015d2:	2340      	movs	r3, #64	; 0x40
 80015d4:	e000      	b.n	80015d8 <HAL_DMA_IRQHandler+0xb0>
 80015d6:	2304      	movs	r3, #4
 80015d8:	4a55      	ldr	r2, [pc, #340]	; (8001730 <HAL_DMA_IRQHandler+0x208>)
 80015da:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 8094 	beq.w	800170e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80015ee:	e08e      	b.n	800170e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	2202      	movs	r2, #2
 80015f6:	409a      	lsls	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d056      	beq.n	80016ae <HAL_DMA_IRQHandler+0x186>
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d051      	beq.n	80016ae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0320 	and.w	r3, r3, #32
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10b      	bne.n	8001630 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 020a 	bic.w	r2, r2, #10
 8001626:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a38      	ldr	r2, [pc, #224]	; (8001718 <HAL_DMA_IRQHandler+0x1f0>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d029      	beq.n	800168e <HAL_DMA_IRQHandler+0x166>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a37      	ldr	r2, [pc, #220]	; (800171c <HAL_DMA_IRQHandler+0x1f4>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d022      	beq.n	800168a <HAL_DMA_IRQHandler+0x162>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a35      	ldr	r2, [pc, #212]	; (8001720 <HAL_DMA_IRQHandler+0x1f8>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d01a      	beq.n	8001684 <HAL_DMA_IRQHandler+0x15c>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a34      	ldr	r2, [pc, #208]	; (8001724 <HAL_DMA_IRQHandler+0x1fc>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d012      	beq.n	800167e <HAL_DMA_IRQHandler+0x156>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a32      	ldr	r2, [pc, #200]	; (8001728 <HAL_DMA_IRQHandler+0x200>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d00a      	beq.n	8001678 <HAL_DMA_IRQHandler+0x150>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a31      	ldr	r2, [pc, #196]	; (800172c <HAL_DMA_IRQHandler+0x204>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d102      	bne.n	8001672 <HAL_DMA_IRQHandler+0x14a>
 800166c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001670:	e00e      	b.n	8001690 <HAL_DMA_IRQHandler+0x168>
 8001672:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001676:	e00b      	b.n	8001690 <HAL_DMA_IRQHandler+0x168>
 8001678:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800167c:	e008      	b.n	8001690 <HAL_DMA_IRQHandler+0x168>
 800167e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001682:	e005      	b.n	8001690 <HAL_DMA_IRQHandler+0x168>
 8001684:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001688:	e002      	b.n	8001690 <HAL_DMA_IRQHandler+0x168>
 800168a:	2320      	movs	r3, #32
 800168c:	e000      	b.n	8001690 <HAL_DMA_IRQHandler+0x168>
 800168e:	2302      	movs	r3, #2
 8001690:	4a27      	ldr	r2, [pc, #156]	; (8001730 <HAL_DMA_IRQHandler+0x208>)
 8001692:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d034      	beq.n	800170e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80016ac:	e02f      	b.n	800170e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	2208      	movs	r2, #8
 80016b4:	409a      	lsls	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4013      	ands	r3, r2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d028      	beq.n	8001710 <HAL_DMA_IRQHandler+0x1e8>
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d023      	beq.n	8001710 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 020e 	bic.w	r2, r2, #14
 80016d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e0:	2101      	movs	r1, #1
 80016e2:	fa01 f202 	lsl.w	r2, r1, r2
 80016e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	2b00      	cmp	r3, #0
 8001704:	d004      	beq.n	8001710 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	4798      	blx	r3
    }
  }
  return;
 800170e:	bf00      	nop
 8001710:	bf00      	nop
}
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40020008 	.word	0x40020008
 800171c:	4002001c 	.word	0x4002001c
 8001720:	40020030 	.word	0x40020030
 8001724:	40020044 	.word	0x40020044
 8001728:	40020058 	.word	0x40020058
 800172c:	4002006c 	.word	0x4002006c
 8001730:	40020000 	.word	0x40020000

08001734 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001734:	b480      	push	{r7}
 8001736:	b08b      	sub	sp, #44	; 0x2c
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800173e:	2300      	movs	r3, #0
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001742:	2300      	movs	r3, #0
 8001744:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001746:	e169      	b.n	8001a1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001748:	2201      	movs	r2, #1
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	69fa      	ldr	r2, [r7, #28]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	429a      	cmp	r2, r3
 8001762:	f040 8158 	bne.w	8001a16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	4a9a      	ldr	r2, [pc, #616]	; (80019d4 <HAL_GPIO_Init+0x2a0>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d05e      	beq.n	800182e <HAL_GPIO_Init+0xfa>
 8001770:	4a98      	ldr	r2, [pc, #608]	; (80019d4 <HAL_GPIO_Init+0x2a0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d875      	bhi.n	8001862 <HAL_GPIO_Init+0x12e>
 8001776:	4a98      	ldr	r2, [pc, #608]	; (80019d8 <HAL_GPIO_Init+0x2a4>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d058      	beq.n	800182e <HAL_GPIO_Init+0xfa>
 800177c:	4a96      	ldr	r2, [pc, #600]	; (80019d8 <HAL_GPIO_Init+0x2a4>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d86f      	bhi.n	8001862 <HAL_GPIO_Init+0x12e>
 8001782:	4a96      	ldr	r2, [pc, #600]	; (80019dc <HAL_GPIO_Init+0x2a8>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d052      	beq.n	800182e <HAL_GPIO_Init+0xfa>
 8001788:	4a94      	ldr	r2, [pc, #592]	; (80019dc <HAL_GPIO_Init+0x2a8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d869      	bhi.n	8001862 <HAL_GPIO_Init+0x12e>
 800178e:	4a94      	ldr	r2, [pc, #592]	; (80019e0 <HAL_GPIO_Init+0x2ac>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d04c      	beq.n	800182e <HAL_GPIO_Init+0xfa>
 8001794:	4a92      	ldr	r2, [pc, #584]	; (80019e0 <HAL_GPIO_Init+0x2ac>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d863      	bhi.n	8001862 <HAL_GPIO_Init+0x12e>
 800179a:	4a92      	ldr	r2, [pc, #584]	; (80019e4 <HAL_GPIO_Init+0x2b0>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d046      	beq.n	800182e <HAL_GPIO_Init+0xfa>
 80017a0:	4a90      	ldr	r2, [pc, #576]	; (80019e4 <HAL_GPIO_Init+0x2b0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d85d      	bhi.n	8001862 <HAL_GPIO_Init+0x12e>
 80017a6:	2b12      	cmp	r3, #18
 80017a8:	d82a      	bhi.n	8001800 <HAL_GPIO_Init+0xcc>
 80017aa:	2b12      	cmp	r3, #18
 80017ac:	d859      	bhi.n	8001862 <HAL_GPIO_Init+0x12e>
 80017ae:	a201      	add	r2, pc, #4	; (adr r2, 80017b4 <HAL_GPIO_Init+0x80>)
 80017b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b4:	0800182f 	.word	0x0800182f
 80017b8:	08001809 	.word	0x08001809
 80017bc:	0800181b 	.word	0x0800181b
 80017c0:	0800185d 	.word	0x0800185d
 80017c4:	08001863 	.word	0x08001863
 80017c8:	08001863 	.word	0x08001863
 80017cc:	08001863 	.word	0x08001863
 80017d0:	08001863 	.word	0x08001863
 80017d4:	08001863 	.word	0x08001863
 80017d8:	08001863 	.word	0x08001863
 80017dc:	08001863 	.word	0x08001863
 80017e0:	08001863 	.word	0x08001863
 80017e4:	08001863 	.word	0x08001863
 80017e8:	08001863 	.word	0x08001863
 80017ec:	08001863 	.word	0x08001863
 80017f0:	08001863 	.word	0x08001863
 80017f4:	08001863 	.word	0x08001863
 80017f8:	08001811 	.word	0x08001811
 80017fc:	08001825 	.word	0x08001825
 8001800:	4a79      	ldr	r2, [pc, #484]	; (80019e8 <HAL_GPIO_Init+0x2b4>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d013      	beq.n	800182e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001806:	e02c      	b.n	8001862 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	623b      	str	r3, [r7, #32]
          break;
 800180e:	e029      	b.n	8001864 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	3304      	adds	r3, #4
 8001816:	623b      	str	r3, [r7, #32]
          break;
 8001818:	e024      	b.n	8001864 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	3308      	adds	r3, #8
 8001820:	623b      	str	r3, [r7, #32]
          break;
 8001822:	e01f      	b.n	8001864 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	330c      	adds	r3, #12
 800182a:	623b      	str	r3, [r7, #32]
          break;
 800182c:	e01a      	b.n	8001864 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d102      	bne.n	800183c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001836:	2304      	movs	r3, #4
 8001838:	623b      	str	r3, [r7, #32]
          break;
 800183a:	e013      	b.n	8001864 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d105      	bne.n	8001850 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001844:	2308      	movs	r3, #8
 8001846:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69fa      	ldr	r2, [r7, #28]
 800184c:	611a      	str	r2, [r3, #16]
          break;
 800184e:	e009      	b.n	8001864 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001850:	2308      	movs	r3, #8
 8001852:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	615a      	str	r2, [r3, #20]
          break;
 800185a:	e003      	b.n	8001864 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800185c:	2300      	movs	r3, #0
 800185e:	623b      	str	r3, [r7, #32]
          break;
 8001860:	e000      	b.n	8001864 <HAL_GPIO_Init+0x130>
          break;
 8001862:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	2bff      	cmp	r3, #255	; 0xff
 8001868:	d801      	bhi.n	800186e <HAL_GPIO_Init+0x13a>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	e001      	b.n	8001872 <HAL_GPIO_Init+0x13e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3304      	adds	r3, #4
 8001872:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	2bff      	cmp	r3, #255	; 0xff
 8001878:	d802      	bhi.n	8001880 <HAL_GPIO_Init+0x14c>
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	e002      	b.n	8001886 <HAL_GPIO_Init+0x152>
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	3b08      	subs	r3, #8
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	210f      	movs	r1, #15
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	fa01 f303 	lsl.w	r3, r1, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	401a      	ands	r2, r3
 8001898:	6a39      	ldr	r1, [r7, #32]
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	fa01 f303 	lsl.w	r3, r1, r3
 80018a0:	431a      	orrs	r2, r3
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 80b1 	beq.w	8001a16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018b4:	4b4d      	ldr	r3, [pc, #308]	; (80019ec <HAL_GPIO_Init+0x2b8>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	4a4c      	ldr	r2, [pc, #304]	; (80019ec <HAL_GPIO_Init+0x2b8>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6193      	str	r3, [r2, #24]
 80018c0:	4b4a      	ldr	r3, [pc, #296]	; (80019ec <HAL_GPIO_Init+0x2b8>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018cc:	4a48      	ldr	r2, [pc, #288]	; (80019f0 <HAL_GPIO_Init+0x2bc>)
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	089b      	lsrs	r3, r3, #2
 80018d2:	3302      	adds	r3, #2
 80018d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	220f      	movs	r2, #15
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	4013      	ands	r3, r2
 80018ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a40      	ldr	r2, [pc, #256]	; (80019f4 <HAL_GPIO_Init+0x2c0>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d013      	beq.n	8001920 <HAL_GPIO_Init+0x1ec>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a3f      	ldr	r2, [pc, #252]	; (80019f8 <HAL_GPIO_Init+0x2c4>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d00d      	beq.n	800191c <HAL_GPIO_Init+0x1e8>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a3e      	ldr	r2, [pc, #248]	; (80019fc <HAL_GPIO_Init+0x2c8>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d007      	beq.n	8001918 <HAL_GPIO_Init+0x1e4>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a3d      	ldr	r2, [pc, #244]	; (8001a00 <HAL_GPIO_Init+0x2cc>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d101      	bne.n	8001914 <HAL_GPIO_Init+0x1e0>
 8001910:	2303      	movs	r3, #3
 8001912:	e006      	b.n	8001922 <HAL_GPIO_Init+0x1ee>
 8001914:	2304      	movs	r3, #4
 8001916:	e004      	b.n	8001922 <HAL_GPIO_Init+0x1ee>
 8001918:	2302      	movs	r3, #2
 800191a:	e002      	b.n	8001922 <HAL_GPIO_Init+0x1ee>
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <HAL_GPIO_Init+0x1ee>
 8001920:	2300      	movs	r3, #0
 8001922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001924:	f002 0203 	and.w	r2, r2, #3
 8001928:	0092      	lsls	r2, r2, #2
 800192a:	4093      	lsls	r3, r2
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	4313      	orrs	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001932:	492f      	ldr	r1, [pc, #188]	; (80019f0 <HAL_GPIO_Init+0x2bc>)
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	089b      	lsrs	r3, r3, #2
 8001938:	3302      	adds	r3, #2
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d006      	beq.n	800195a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800194c:	4b2d      	ldr	r3, [pc, #180]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	492c      	ldr	r1, [pc, #176]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	600b      	str	r3, [r1, #0]
 8001958:	e006      	b.n	8001968 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800195a:	4b2a      	ldr	r3, [pc, #168]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	43db      	mvns	r3, r3
 8001962:	4928      	ldr	r1, [pc, #160]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 8001964:	4013      	ands	r3, r2
 8001966:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d006      	beq.n	8001982 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001974:	4b23      	ldr	r3, [pc, #140]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	4922      	ldr	r1, [pc, #136]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	604b      	str	r3, [r1, #4]
 8001980:	e006      	b.n	8001990 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001982:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	43db      	mvns	r3, r3
 800198a:	491e      	ldr	r1, [pc, #120]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 800198c:	4013      	ands	r3, r2
 800198e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d006      	beq.n	80019aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800199c:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	4918      	ldr	r1, [pc, #96]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	608b      	str	r3, [r1, #8]
 80019a8:	e006      	b.n	80019b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019aa:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	4914      	ldr	r1, [pc, #80]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d021      	beq.n	8001a08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	490e      	ldr	r1, [pc, #56]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	60cb      	str	r3, [r1, #12]
 80019d0:	e021      	b.n	8001a16 <HAL_GPIO_Init+0x2e2>
 80019d2:	bf00      	nop
 80019d4:	10320000 	.word	0x10320000
 80019d8:	10310000 	.word	0x10310000
 80019dc:	10220000 	.word	0x10220000
 80019e0:	10210000 	.word	0x10210000
 80019e4:	10120000 	.word	0x10120000
 80019e8:	10110000 	.word	0x10110000
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40010000 	.word	0x40010000
 80019f4:	40010800 	.word	0x40010800
 80019f8:	40010c00 	.word	0x40010c00
 80019fc:	40011000 	.word	0x40011000
 8001a00:	40011400 	.word	0x40011400
 8001a04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_GPIO_Init+0x304>)
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	4909      	ldr	r1, [pc, #36]	; (8001a38 <HAL_GPIO_Init+0x304>)
 8001a12:	4013      	ands	r3, r2
 8001a14:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	3301      	adds	r3, #1
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	fa22 f303 	lsr.w	r3, r2, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f47f ae8e 	bne.w	8001748 <HAL_GPIO_Init+0x14>
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	372c      	adds	r7, #44	; 0x2c
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	40010400 	.word	0x40010400

08001a3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	887b      	ldrh	r3, [r7, #2]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d002      	beq.n	8001a5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a54:	2301      	movs	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
 8001a58:	e001      	b.n	8001a5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr

08001a6a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	460b      	mov	r3, r1
 8001a74:	807b      	strh	r3, [r7, #2]
 8001a76:	4613      	mov	r3, r2
 8001a78:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a7a:	787b      	ldrb	r3, [r7, #1]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a80:	887a      	ldrh	r2, [r7, #2]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a86:	e003      	b.n	8001a90 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a88:	887b      	ldrh	r3, [r7, #2]
 8001a8a:	041a      	lsls	r2, r3, #16
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	611a      	str	r2, [r3, #16]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr

08001a9a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b085      	sub	sp, #20
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aac:	887a      	ldrh	r2, [r7, #2]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	041a      	lsls	r2, r3, #16
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	43d9      	mvns	r1, r3
 8001ab8:	887b      	ldrh	r3, [r7, #2]
 8001aba:	400b      	ands	r3, r1
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	611a      	str	r2, [r3, #16]
}
 8001ac2:	bf00      	nop
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ace:	b08b      	sub	sp, #44	; 0x2c
 8001ad0:	af06      	add	r7, sp, #24
 8001ad2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e0fd      	b.n	8001cda <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d106      	bne.n	8001af8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f009 fce0 	bl	800b4b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2203      	movs	r2, #3
 8001afc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f002 fe3d 	bl	8004784 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	687e      	ldr	r6, [r7, #4]
 8001b12:	466d      	mov	r5, sp
 8001b14:	f106 0410 	add.w	r4, r6, #16
 8001b18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b1c:	6823      	ldr	r3, [r4, #0]
 8001b1e:	602b      	str	r3, [r5, #0]
 8001b20:	1d33      	adds	r3, r6, #4
 8001b22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b24:	6838      	ldr	r0, [r7, #0]
 8001b26:	f002 fe07 	bl	8004738 <USB_CoreInit>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2202      	movs	r2, #2
 8001b34:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e0ce      	b.n	8001cda <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2100      	movs	r1, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 fe38 	bl	80047b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b48:	2300      	movs	r3, #0
 8001b4a:	73fb      	strb	r3, [r7, #15]
 8001b4c:	e04c      	b.n	8001be8 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	1c5a      	adds	r2, r3, #1
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	440b      	add	r3, r1
 8001b5e:	3301      	adds	r3, #1
 8001b60:	2201      	movs	r2, #1
 8001b62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	440b      	add	r3, r1
 8001b74:	7bfa      	ldrb	r2, [r7, #15]
 8001b76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b78:	7bfa      	ldrb	r2, [r7, #15]
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	b298      	uxth	r0, r3
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	440b      	add	r3, r1
 8001b8a:	3336      	adds	r3, #54	; 0x36
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	440b      	add	r3, r1
 8001ba0:	3303      	adds	r3, #3
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ba6:	7bfa      	ldrb	r2, [r7, #15]
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	4613      	mov	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	440b      	add	r3, r1
 8001bb4:	3338      	adds	r3, #56	; 0x38
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bba:	7bfa      	ldrb	r2, [r7, #15]
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	440b      	add	r3, r1
 8001bc8:	333c      	adds	r3, #60	; 0x3c
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bce:	7bfa      	ldrb	r2, [r7, #15]
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	440b      	add	r3, r1
 8001bdc:	3340      	adds	r3, #64	; 0x40
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	3301      	adds	r3, #1
 8001be6:	73fb      	strb	r3, [r7, #15]
 8001be8:	7bfa      	ldrb	r2, [r7, #15]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d3ad      	bcc.n	8001b4e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	73fb      	strb	r3, [r7, #15]
 8001bf6:	e044      	b.n	8001c82 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bf8:	7bfa      	ldrb	r2, [r7, #15]
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	440b      	add	r3, r1
 8001c06:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c0e:	7bfa      	ldrb	r2, [r7, #15]
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	440b      	add	r3, r1
 8001c1c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c20:	7bfa      	ldrb	r2, [r7, #15]
 8001c22:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c24:	7bfa      	ldrb	r2, [r7, #15]
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	440b      	add	r3, r1
 8001c32:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c3a:	7bfa      	ldrb	r2, [r7, #15]
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	440b      	add	r3, r1
 8001c48:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c50:	7bfa      	ldrb	r2, [r7, #15]
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	440b      	add	r3, r1
 8001c5e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c66:	7bfa      	ldrb	r2, [r7, #15]
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	440b      	add	r3, r1
 8001c74:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	73fb      	strb	r3, [r7, #15]
 8001c82:	7bfa      	ldrb	r2, [r7, #15]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d3b5      	bcc.n	8001bf8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	603b      	str	r3, [r7, #0]
 8001c92:	687e      	ldr	r6, [r7, #4]
 8001c94:	466d      	mov	r5, sp
 8001c96:	f106 0410 	add.w	r4, r6, #16
 8001c9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c9e:	6823      	ldr	r3, [r4, #0]
 8001ca0:	602b      	str	r3, [r5, #0]
 8001ca2:	1d33      	adds	r3, r6, #4
 8001ca4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ca6:	6838      	ldr	r0, [r7, #0]
 8001ca8:	f002 fd92 	bl	80047d0 <USB_DevInit>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d005      	beq.n	8001cbe <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e00d      	b.n	8001cda <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f004 fd2c 	bl	8006730 <USB_DevDisconnect>

  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ce2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_PCD_Start+0x16>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e016      	b.n	8001d26 <HAL_PCD_Start+0x44>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f002 fd27 	bl	8004758 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f009 fe46 	bl	800b99e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f004 fd00 	bl	800671c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b088      	sub	sp, #32
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f004 fd02 	bl	8006744 <USB_ReadInterrupts>
 8001d40:	4603      	mov	r3, r0
 8001d42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d4a:	d102      	bne.n	8001d52 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 fb61 	bl	8002414 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f004 fcf4 	bl	8006744 <USB_ReadInterrupts>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d66:	d112      	bne.n	8001d8e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d7a:	b292      	uxth	r2, r2
 8001d7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f009 fc14 	bl	800b5ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d86:	2100      	movs	r1, #0
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f925 	bl	8001fd8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f004 fcd6 	bl	8006744 <USB_ReadInterrupts>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001da2:	d10b      	bne.n	8001dbc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001db6:	b292      	uxth	r2, r2
 8001db8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f004 fcbf 	bl	8006744 <USB_ReadInterrupts>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dd0:	d10b      	bne.n	8001dea <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001de4:	b292      	uxth	r2, r2
 8001de6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f004 fca8 	bl	8006744 <USB_ReadInterrupts>
 8001df4:	4603      	mov	r3, r0
 8001df6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dfe:	d126      	bne.n	8001e4e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0204 	bic.w	r2, r2, #4
 8001e12:	b292      	uxth	r2, r2
 8001e14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0208 	bic.w	r2, r2, #8
 8001e2a:	b292      	uxth	r2, r2
 8001e2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f009 fbf5 	bl	800b620 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e48:	b292      	uxth	r2, r2
 8001e4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f004 fc76 	bl	8006744 <USB_ReadInterrupts>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e62:	f040 8084 	bne.w	8001f6e <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	77fb      	strb	r3, [r7, #31]
 8001e6a:	e011      	b.n	8001e90 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	7ffb      	ldrb	r3, [r7, #31]
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	441a      	add	r2, r3
 8001e78:	7ffb      	ldrb	r3, [r7, #31]
 8001e7a:	8812      	ldrh	r2, [r2, #0]
 8001e7c:	b292      	uxth	r2, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	f107 0120 	add.w	r1, r7, #32
 8001e84:	440b      	add	r3, r1
 8001e86:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001e8a:	7ffb      	ldrb	r3, [r7, #31]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	77fb      	strb	r3, [r7, #31]
 8001e90:	7ffb      	ldrb	r3, [r7, #31]
 8001e92:	2b07      	cmp	r3, #7
 8001e94:	d9ea      	bls.n	8001e6c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f042 0201 	orr.w	r2, r2, #1
 8001ea8:	b292      	uxth	r2, r2
 8001eaa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0201 	bic.w	r2, r2, #1
 8001ec0:	b292      	uxth	r2, r2
 8001ec2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001ec6:	bf00      	nop
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f6      	beq.n	8001ec8 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eec:	b292      	uxth	r2, r2
 8001eee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	77fb      	strb	r3, [r7, #31]
 8001ef6:	e010      	b.n	8001f1a <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001ef8:	7ffb      	ldrb	r3, [r7, #31]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	4611      	mov	r1, r2
 8001f00:	7ffa      	ldrb	r2, [r7, #31]
 8001f02:	0092      	lsls	r2, r2, #2
 8001f04:	440a      	add	r2, r1
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	f107 0120 	add.w	r1, r7, #32
 8001f0c:	440b      	add	r3, r1
 8001f0e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001f12:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001f14:	7ffb      	ldrb	r3, [r7, #31]
 8001f16:	3301      	adds	r3, #1
 8001f18:	77fb      	strb	r3, [r7, #31]
 8001f1a:	7ffb      	ldrb	r3, [r7, #31]
 8001f1c:	2b07      	cmp	r3, #7
 8001f1e:	d9eb      	bls.n	8001ef8 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0208 	orr.w	r2, r2, #8
 8001f32:	b292      	uxth	r2, r2
 8001f34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f4a:	b292      	uxth	r2, r2
 8001f4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0204 	orr.w	r2, r2, #4
 8001f62:	b292      	uxth	r2, r2
 8001f64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f009 fb3f 	bl	800b5ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f004 fbe6 	bl	8006744 <USB_ReadInterrupts>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f82:	d10e      	bne.n	8001fa2 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f96:	b292      	uxth	r2, r2
 8001f98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f009 faf8 	bl	800b592 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f004 fbcc 	bl	8006744 <USB_ReadInterrupts>
 8001fac:	4603      	mov	r3, r0
 8001fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fb6:	d10b      	bne.n	8001fd0 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fca:	b292      	uxth	r2, r2
 8001fcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	3720      	adds	r7, #32
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <HAL_PCD_SetAddress+0x1a>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e013      	b.n	800201a <HAL_PCD_SetAddress+0x42>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	78fa      	ldrb	r2, [r7, #3]
 8001ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	78fa      	ldrb	r2, [r7, #3]
 8002008:	4611      	mov	r1, r2
 800200a:	4618      	mov	r0, r3
 800200c:	f004 fb73 	bl	80066f6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	4608      	mov	r0, r1
 800202c:	4611      	mov	r1, r2
 800202e:	461a      	mov	r2, r3
 8002030:	4603      	mov	r3, r0
 8002032:	70fb      	strb	r3, [r7, #3]
 8002034:	460b      	mov	r3, r1
 8002036:	803b      	strh	r3, [r7, #0]
 8002038:	4613      	mov	r3, r2
 800203a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002040:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002044:	2b00      	cmp	r3, #0
 8002046:	da0e      	bge.n	8002066 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	4413      	add	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2201      	movs	r2, #1
 8002062:	705a      	strb	r2, [r3, #1]
 8002064:	e00e      	b.n	8002084 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	f003 0207 	and.w	r2, r3, #7
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	4413      	add	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	b2da      	uxtb	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002090:	883a      	ldrh	r2, [r7, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	78ba      	ldrb	r2, [r7, #2]
 800209a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	785b      	ldrb	r3, [r3, #1]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d004      	beq.n	80020ae <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020ae:	78bb      	ldrb	r3, [r7, #2]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d102      	bne.n	80020ba <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <HAL_PCD_EP_Open+0xa6>
 80020c4:	2302      	movs	r3, #2
 80020c6:	e00e      	b.n	80020e6 <HAL_PCD_EP_Open+0xc4>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68f9      	ldr	r1, [r7, #12]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f002 fb9a 	bl	8004810 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80020e4:	7afb      	ldrb	r3, [r7, #11]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b084      	sub	sp, #16
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	460b      	mov	r3, r1
 80020f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	da0e      	bge.n	8002120 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002102:	78fb      	ldrb	r3, [r7, #3]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2201      	movs	r2, #1
 800211c:	705a      	strb	r2, [r3, #1]
 800211e:	e00e      	b.n	800213e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	f003 0207 	and.w	r2, r3, #7
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	b2da      	uxtb	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <HAL_PCD_EP_Close+0x6a>
 8002154:	2302      	movs	r3, #2
 8002156:	e00e      	b.n	8002176 <HAL_PCD_EP_Close+0x88>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68f9      	ldr	r1, [r7, #12]
 8002166:	4618      	mov	r0, r3
 8002168:	f002 febc 	bl	8004ee4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b086      	sub	sp, #24
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	607a      	str	r2, [r7, #4]
 8002188:	603b      	str	r3, [r7, #0]
 800218a:	460b      	mov	r3, r1
 800218c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800218e:	7afb      	ldrb	r3, [r7, #11]
 8002190:	f003 0207 	and.w	r2, r3, #7
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	4413      	add	r3, r2
 80021a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2200      	movs	r2, #0
 80021b6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	2200      	movs	r2, #0
 80021bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021be:	7afb      	ldrb	r3, [r7, #11]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021ca:	7afb      	ldrb	r3, [r7, #11]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d106      	bne.n	80021e2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6979      	ldr	r1, [r7, #20]
 80021da:	4618      	mov	r0, r3
 80021dc:	f003 f86e 	bl	80052bc <USB_EPStartXfer>
 80021e0:	e005      	b.n	80021ee <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6979      	ldr	r1, [r7, #20]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f003 f867 	bl	80052bc <USB_EPStartXfer>
  }

  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002204:	78fb      	ldrb	r3, [r7, #3]
 8002206:	f003 0207 	and.w	r2, r3, #7
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	440b      	add	r3, r1
 8002216:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800221a:	681b      	ldr	r3, [r3, #0]
}
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr

08002226 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b086      	sub	sp, #24
 800222a:	af00      	add	r7, sp, #0
 800222c:	60f8      	str	r0, [r7, #12]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
 8002232:	460b      	mov	r3, r1
 8002234:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002236:	7afb      	ldrb	r3, [r7, #11]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4413      	add	r3, r2
 800224a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2200      	movs	r2, #0
 800226a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2201      	movs	r2, #1
 8002270:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002272:	7afb      	ldrb	r3, [r7, #11]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	b2da      	uxtb	r2, r3
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800227e:	7afb      	ldrb	r3, [r7, #11]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	2b00      	cmp	r3, #0
 8002286:	d106      	bne.n	8002296 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6979      	ldr	r1, [r7, #20]
 800228e:	4618      	mov	r0, r3
 8002290:	f003 f814 	bl	80052bc <USB_EPStartXfer>
 8002294:	e005      	b.n	80022a2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6979      	ldr	r1, [r7, #20]
 800229c:	4618      	mov	r0, r3
 800229e:	f003 f80d 	bl	80052bc <USB_EPStartXfer>
  }

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	f003 0207 	and.w	r2, r3, #7
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d901      	bls.n	80022ca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e04c      	b.n	8002364 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	da0e      	bge.n	80022f0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2201      	movs	r2, #1
 80022ec:	705a      	strb	r2, [r3, #1]
 80022ee:	e00c      	b.n	800230a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022f0:	78fa      	ldrb	r2, [r7, #3]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2201      	movs	r2, #1
 800230e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	b2da      	uxtb	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_PCD_EP_SetStall+0x7e>
 8002326:	2302      	movs	r3, #2
 8002328:	e01c      	b.n	8002364 <HAL_PCD_EP_SetStall+0xb8>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68f9      	ldr	r1, [r7, #12]
 8002338:	4618      	mov	r0, r3
 800233a:	f004 f8df 	bl	80064fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800233e:	78fb      	ldrb	r3, [r7, #3]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	2b00      	cmp	r3, #0
 8002346:	d108      	bne.n	800235a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002352:	4619      	mov	r1, r3
 8002354:	4610      	mov	r0, r2
 8002356:	f004 fa04 	bl	8006762 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	f003 020f 	and.w	r2, r3, #15
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	429a      	cmp	r2, r3
 8002384:	d901      	bls.n	800238a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e040      	b.n	800240c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800238a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800238e:	2b00      	cmp	r3, #0
 8002390:	da0e      	bge.n	80023b0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	4613      	mov	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2201      	movs	r2, #1
 80023ac:	705a      	strb	r2, [r3, #1]
 80023ae:	e00e      	b.n	80023ce <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	f003 0207 	and.w	r2, r3, #7
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <HAL_PCD_EP_ClrStall+0x82>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e00e      	b.n	800240c <HAL_PCD_EP_ClrStall+0xa0>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68f9      	ldr	r1, [r7, #12]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f004 f8cd 	bl	800659c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08e      	sub	sp, #56	; 0x38
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800241c:	e2df      	b.n	80029de <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002426:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002428:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800242a:	b2db      	uxtb	r3, r3
 800242c:	f003 030f 	and.w	r3, r3, #15
 8002430:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002434:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002438:	2b00      	cmp	r3, #0
 800243a:	f040 8158 	bne.w	80026ee <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800243e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002440:	f003 0310 	and.w	r3, r3, #16
 8002444:	2b00      	cmp	r3, #0
 8002446:	d152      	bne.n	80024ee <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	b29b      	uxth	r3, r3
 8002450:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002458:	81fb      	strh	r3, [r7, #14]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	89fb      	ldrh	r3, [r7, #14]
 8002460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002468:	b29b      	uxth	r3, r3
 800246a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3328      	adds	r3, #40	; 0x28
 8002470:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800247a:	b29b      	uxth	r3, r3
 800247c:	461a      	mov	r2, r3
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4413      	add	r3, r2
 8002486:	3302      	adds	r3, #2
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6812      	ldr	r2, [r2, #0]
 800248e:	4413      	add	r3, r2
 8002490:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	695a      	ldr	r2, [r3, #20]
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	441a      	add	r2, r3
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024ac:	2100      	movs	r1, #0
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f009 f855 	bl	800b55e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 828e 	beq.w	80029de <PCD_EP_ISR_Handler+0x5ca>
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f040 8289 	bne.w	80029de <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	b292      	uxth	r2, r2
 80024e0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024ec:	e277      	b.n	80029de <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80024fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002504:	2b00      	cmp	r3, #0
 8002506:	d034      	beq.n	8002572 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002510:	b29b      	uxth	r3, r3
 8002512:	461a      	mov	r2, r3
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	3306      	adds	r3, #6
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	4413      	add	r3, r2
 8002526:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6818      	ldr	r0, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002546:	b29b      	uxth	r3, r3
 8002548:	f004 f95b 	bl	8006802 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	b29a      	uxth	r2, r3
 8002554:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002558:	4013      	ands	r3, r2
 800255a:	823b      	strh	r3, [r7, #16]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	8a3a      	ldrh	r2, [r7, #16]
 8002562:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002566:	b292      	uxth	r2, r2
 8002568:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f008 ffca 	bl	800b504 <HAL_PCD_SetupStageCallback>
 8002570:	e235      	b.n	80029de <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002572:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002576:	2b00      	cmp	r3, #0
 8002578:	f280 8231 	bge.w	80029de <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	b29a      	uxth	r2, r3
 8002584:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002588:	4013      	ands	r3, r2
 800258a:	83bb      	strh	r3, [r7, #28]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	8bba      	ldrh	r2, [r7, #28]
 8002592:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002596:	b292      	uxth	r2, r2
 8002598:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4413      	add	r3, r2
 80025ae:	3306      	adds	r3, #6
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d019      	beq.n	8002602 <PCD_EP_ISR_Handler+0x1ee>
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d015      	beq.n	8002602 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	6959      	ldr	r1, [r3, #20]
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	f004 f90b 	bl	8006802 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	695a      	ldr	r2, [r3, #20]
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	441a      	add	r2, r3
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80025fa:	2100      	movs	r1, #0
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f008 ff93 	bl	800b528 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	61bb      	str	r3, [r7, #24]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002610:	b29b      	uxth	r3, r3
 8002612:	461a      	mov	r2, r3
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	4413      	add	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002620:	617b      	str	r3, [r7, #20]
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d112      	bne.n	8002650 <PCD_EP_ISR_Handler+0x23c>
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	b29b      	uxth	r3, r3
 8002630:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002634:	b29a      	uxth	r2, r3
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	801a      	strh	r2, [r3, #0]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	b29b      	uxth	r3, r3
 8002640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002648:	b29a      	uxth	r2, r3
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	801a      	strh	r2, [r3, #0]
 800264e:	e02f      	b.n	80026b0 <PCD_EP_ISR_Handler+0x29c>
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	2b3e      	cmp	r3, #62	; 0x3e
 8002656:	d813      	bhi.n	8002680 <PCD_EP_ISR_Handler+0x26c>
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	085b      	lsrs	r3, r3, #1
 800265e:	633b      	str	r3, [r7, #48]	; 0x30
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d002      	beq.n	8002672 <PCD_EP_ISR_Handler+0x25e>
 800266c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266e:	3301      	adds	r3, #1
 8002670:	633b      	str	r3, [r7, #48]	; 0x30
 8002672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002674:	b29b      	uxth	r3, r3
 8002676:	029b      	lsls	r3, r3, #10
 8002678:	b29a      	uxth	r2, r3
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	801a      	strh	r2, [r3, #0]
 800267e:	e017      	b.n	80026b0 <PCD_EP_ISR_Handler+0x29c>
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	095b      	lsrs	r3, r3, #5
 8002686:	633b      	str	r3, [r7, #48]	; 0x30
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	f003 031f 	and.w	r3, r3, #31
 8002690:	2b00      	cmp	r3, #0
 8002692:	d102      	bne.n	800269a <PCD_EP_ISR_Handler+0x286>
 8002694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002696:	3b01      	subs	r3, #1
 8002698:	633b      	str	r3, [r7, #48]	; 0x30
 800269a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269c:	b29b      	uxth	r3, r3
 800269e:	029b      	lsls	r3, r3, #10
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c0:	827b      	strh	r3, [r7, #18]
 80026c2:	8a7b      	ldrh	r3, [r7, #18]
 80026c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80026c8:	827b      	strh	r3, [r7, #18]
 80026ca:	8a7b      	ldrh	r3, [r7, #18]
 80026cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026d0:	827b      	strh	r3, [r7, #18]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	8a7b      	ldrh	r3, [r7, #18]
 80026d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	8013      	strh	r3, [r2, #0]
 80026ec:	e177      	b.n	80029de <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002700:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002704:	2b00      	cmp	r3, #0
 8002706:	f280 80ea 	bge.w	80028de <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	461a      	mov	r2, r3
 8002710:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	b29a      	uxth	r2, r3
 800271c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002720:	4013      	ands	r3, r2
 8002722:	853b      	strh	r3, [r7, #40]	; 0x28
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002734:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002738:	b292      	uxth	r2, r2
 800273a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800273c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	4413      	add	r3, r2
 8002750:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	7b1b      	ldrb	r3, [r3, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d122      	bne.n	80027a0 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002762:	b29b      	uxth	r3, r3
 8002764:	461a      	mov	r2, r3
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4413      	add	r3, r2
 800276e:	3306      	adds	r3, #6
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6812      	ldr	r2, [r2, #0]
 8002776:	4413      	add	r3, r2
 8002778:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002782:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002784:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 8087 	beq.w	800289a <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6818      	ldr	r0, [r3, #0]
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	6959      	ldr	r1, [r3, #20]
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	88da      	ldrh	r2, [r3, #6]
 8002798:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800279a:	f004 f832 	bl	8006802 <USB_ReadPMA>
 800279e:	e07c      	b.n	800289a <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	78db      	ldrb	r3, [r3, #3]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d108      	bne.n	80027ba <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80027a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027aa:	461a      	mov	r2, r3
 80027ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f923 	bl	80029fa <HAL_PCD_EP_DB_Receive>
 80027b4:	4603      	mov	r3, r0
 80027b6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80027b8:	e06f      	b.n	800289a <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d4:	847b      	strh	r3, [r7, #34]	; 0x22
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	441a      	add	r2, r3
 80027e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80027e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	b29b      	uxth	r3, r3
 800280c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d021      	beq.n	8002858 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800281c:	b29b      	uxth	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4413      	add	r3, r2
 8002828:	3302      	adds	r3, #2
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	4413      	add	r3, r2
 8002832:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800283c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800283e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002840:	2b00      	cmp	r3, #0
 8002842:	d02a      	beq.n	800289a <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	6959      	ldr	r1, [r3, #20]
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	891a      	ldrh	r2, [r3, #8]
 8002850:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002852:	f003 ffd6 	bl	8006802 <USB_ReadPMA>
 8002856:	e020      	b.n	800289a <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002860:	b29b      	uxth	r3, r3
 8002862:	461a      	mov	r2, r3
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	4413      	add	r3, r2
 800286c:	3306      	adds	r3, #6
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	4413      	add	r3, r2
 8002876:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002880:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002882:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	6959      	ldr	r1, [r3, #20]
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	895a      	ldrh	r2, [r3, #10]
 8002894:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002896:	f003 ffb4 	bl	8006802 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	69da      	ldr	r2, [r3, #28]
 800289e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028a0:	441a      	add	r2, r3
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	695a      	ldr	r2, [r3, #20]
 80028aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028ac:	441a      	add	r2, r3
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d004      	beq.n	80028c4 <PCD_EP_ISR_Handler+0x4b0>
 80028ba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d206      	bcs.n	80028d2 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	4619      	mov	r1, r3
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f008 fe2c 	bl	800b528 <HAL_PCD_DataOutStageCallback>
 80028d0:	e005      	b.n	80028de <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028d8:	4618      	mov	r0, r3
 80028da:	f002 fcef 	bl	80052bc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80028de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d07a      	beq.n	80029de <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80028e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	4413      	add	r3, r2
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	b29b      	uxth	r3, r3
 800290e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002916:	843b      	strh	r3, [r7, #32]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
 800291e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	441a      	add	r2, r3
 8002926:	8c3b      	ldrh	r3, [r7, #32]
 8002928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800292c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002930:	b29b      	uxth	r3, r3
 8002932:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	78db      	ldrb	r3, [r3, #3]
 8002938:	2b02      	cmp	r3, #2
 800293a:	d108      	bne.n	800294e <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002940:	2b02      	cmp	r3, #2
 8002942:	d146      	bne.n	80029d2 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002944:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294a:	2b00      	cmp	r3, #0
 800294c:	d141      	bne.n	80029d2 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002956:	b29b      	uxth	r3, r3
 8002958:	461a      	mov	r2, r3
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4413      	add	r3, r2
 8002962:	3302      	adds	r3, #2
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6812      	ldr	r2, [r2, #0]
 800296a:	4413      	add	r3, r2
 800296c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002976:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	699a      	ldr	r2, [r3, #24]
 800297c:	8bfb      	ldrh	r3, [r7, #30]
 800297e:	429a      	cmp	r2, r3
 8002980:	d906      	bls.n	8002990 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	699a      	ldr	r2, [r3, #24]
 8002986:	8bfb      	ldrh	r3, [r7, #30]
 8002988:	1ad2      	subs	r2, r2, r3
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	619a      	str	r2, [r3, #24]
 800298e:	e002      	b.n	8002996 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	2200      	movs	r2, #0
 8002994:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d106      	bne.n	80029ac <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	4619      	mov	r1, r3
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f008 fdda 	bl	800b55e <HAL_PCD_DataInStageCallback>
 80029aa:	e018      	b.n	80029de <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	695a      	ldr	r2, [r3, #20]
 80029b0:	8bfb      	ldrh	r3, [r7, #30]
 80029b2:	441a      	add	r2, r3
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	69da      	ldr	r2, [r3, #28]
 80029bc:	8bfb      	ldrh	r3, [r7, #30]
 80029be:	441a      	add	r2, r3
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029ca:	4618      	mov	r0, r3
 80029cc:	f002 fc76 	bl	80052bc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80029d0:	e005      	b.n	80029de <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80029d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029d4:	461a      	mov	r2, r3
 80029d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f91b 	bl	8002c14 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	b21b      	sxth	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f6ff ad17 	blt.w	800241e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3738      	adds	r7, #56	; 0x38
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b088      	sub	sp, #32
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	60f8      	str	r0, [r7, #12]
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	4613      	mov	r3, r2
 8002a06:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a08:	88fb      	ldrh	r3, [r7, #6]
 8002a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d07e      	beq.n	8002b10 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4413      	add	r3, r2
 8002a26:	3302      	adds	r3, #2
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	6812      	ldr	r2, [r2, #0]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a3a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	699a      	ldr	r2, [r3, #24]
 8002a40:	8b7b      	ldrh	r3, [r7, #26]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d306      	bcc.n	8002a54 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	699a      	ldr	r2, [r3, #24]
 8002a4a:	8b7b      	ldrh	r3, [r7, #26]
 8002a4c:	1ad2      	subs	r2, r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	619a      	str	r2, [r3, #24]
 8002a52:	e002      	b.n	8002a5a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2200      	movs	r2, #0
 8002a58:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d123      	bne.n	8002aaa <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7c:	833b      	strh	r3, [r7, #24]
 8002a7e:	8b3b      	ldrh	r3, [r7, #24]
 8002a80:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a84:	833b      	strh	r3, [r7, #24]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	441a      	add	r2, r3
 8002a94:	8b3b      	ldrh	r3, [r7, #24]
 8002a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002aaa:	88fb      	ldrh	r3, [r7, #6]
 8002aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01f      	beq.n	8002af4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ace:	82fb      	strh	r3, [r7, #22]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	441a      	add	r2, r3
 8002ade:	8afb      	ldrh	r3, [r7, #22]
 8002ae0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ae4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002af4:	8b7b      	ldrh	r3, [r7, #26]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 8087 	beq.w	8002c0a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6818      	ldr	r0, [r3, #0]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	6959      	ldr	r1, [r3, #20]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	891a      	ldrh	r2, [r3, #8]
 8002b08:	8b7b      	ldrh	r3, [r7, #26]
 8002b0a:	f003 fe7a 	bl	8006802 <USB_ReadPMA>
 8002b0e:	e07c      	b.n	8002c0a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	4413      	add	r3, r2
 8002b24:	3306      	adds	r3, #6
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b38:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	699a      	ldr	r2, [r3, #24]
 8002b3e:	8b7b      	ldrh	r3, [r7, #26]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d306      	bcc.n	8002b52 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	699a      	ldr	r2, [r3, #24]
 8002b48:	8b7b      	ldrh	r3, [r7, #26]
 8002b4a:	1ad2      	subs	r2, r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	619a      	str	r2, [r3, #24]
 8002b50:	e002      	b.n	8002b58 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2200      	movs	r2, #0
 8002b56:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d123      	bne.n	8002ba8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	461a      	mov	r2, r3
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7a:	83fb      	strh	r3, [r7, #30]
 8002b7c:	8bfb      	ldrh	r3, [r7, #30]
 8002b7e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b82:	83fb      	strh	r3, [r7, #30]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	441a      	add	r2, r3
 8002b92:	8bfb      	ldrh	r3, [r7, #30]
 8002b94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002ba8:	88fb      	ldrh	r3, [r7, #6]
 8002baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d11f      	bne.n	8002bf2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bcc:	83bb      	strh	r3, [r7, #28]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	441a      	add	r2, r3
 8002bdc:	8bbb      	ldrh	r3, [r7, #28]
 8002bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002bf2:	8b7b      	ldrh	r3, [r7, #26]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6818      	ldr	r0, [r3, #0]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	6959      	ldr	r1, [r3, #20]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	895a      	ldrh	r2, [r3, #10]
 8002c04:	8b7b      	ldrh	r3, [r7, #26]
 8002c06:	f003 fdfc 	bl	8006802 <USB_ReadPMA>
    }
  }

  return count;
 8002c0a:	8b7b      	ldrh	r3, [r7, #26]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3720      	adds	r7, #32
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b094      	sub	sp, #80	; 0x50
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 8138 	beq.w	8002e9e <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	461a      	mov	r2, r3
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4413      	add	r3, r2
 8002c42:	3302      	adds	r3, #2
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c56:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	699a      	ldr	r2, [r3, #24]
 8002c5e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d907      	bls.n	8002c76 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	699a      	ldr	r2, [r3, #24]
 8002c6a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002c6e:	1ad2      	subs	r2, r2, r3
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	619a      	str	r2, [r3, #24]
 8002c74:	e002      	b.n	8002c7c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d12c      	bne.n	8002cde <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	4619      	mov	r1, r3
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f008 fc67 	bl	800b55e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c90:	88fb      	ldrh	r3, [r7, #6]
 8002c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 823a 	beq.w	8003110 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb6:	82fb      	strh	r3, [r7, #22]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	441a      	add	r2, r3
 8002cc6:	8afb      	ldrh	r3, [r7, #22]
 8002cc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	8013      	strh	r3, [r2, #0]
 8002cdc:	e218      	b.n	8003110 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d01f      	beq.n	8002d28 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	461a      	mov	r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d02:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	441a      	add	r2, r3
 8002d12:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	f040 81ee 	bne.w	8003110 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	695a      	ldr	r2, [r3, #20]
 8002d38:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d3c:	441a      	add	r2, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	69da      	ldr	r2, [r3, #28]
 8002d46:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d4a:	441a      	add	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	6a1a      	ldr	r2, [r3, #32]
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d309      	bcc.n	8002d70 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	6a1a      	ldr	r2, [r3, #32]
 8002d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d68:	1ad2      	subs	r2, r2, r3
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	621a      	str	r2, [r3, #32]
 8002d6e:	e015      	b.n	8002d9c <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d107      	bne.n	8002d88 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8002d78:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d7c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d86:	e009      	b.n	8002d9c <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	785b      	ldrb	r3, [r3, #1]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d155      	bne.n	8002e50 <HAL_PCD_EP_DB_Transmit+0x23c>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	61fb      	str	r3, [r7, #28]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	461a      	mov	r2, r3
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	4413      	add	r3, r2
 8002dba:	61fb      	str	r3, [r7, #28]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	011a      	lsls	r2, r3, #4
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002dca:	61bb      	str	r3, [r7, #24]
 8002dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d112      	bne.n	8002df8 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	801a      	strh	r2, [r3, #0]
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	801a      	strh	r2, [r3, #0]
 8002df6:	e047      	b.n	8002e88 <HAL_PCD_EP_DB_Transmit+0x274>
 8002df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dfa:	2b3e      	cmp	r3, #62	; 0x3e
 8002dfc:	d811      	bhi.n	8002e22 <HAL_PCD_EP_DB_Transmit+0x20e>
 8002dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e00:	085b      	lsrs	r3, r3, #1
 8002e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d002      	beq.n	8002e14 <HAL_PCD_EP_DB_Transmit+0x200>
 8002e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e10:	3301      	adds	r3, #1
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	029b      	lsls	r3, r3, #10
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	801a      	strh	r2, [r3, #0]
 8002e20:	e032      	b.n	8002e88 <HAL_PCD_EP_DB_Transmit+0x274>
 8002e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e24:	095b      	lsrs	r3, r3, #5
 8002e26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e2a:	f003 031f 	and.w	r3, r3, #31
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d102      	bne.n	8002e38 <HAL_PCD_EP_DB_Transmit+0x224>
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	3b01      	subs	r3, #1
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	029b      	lsls	r3, r3, #10
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	801a      	strh	r2, [r3, #0]
 8002e4e:	e01b      	b.n	8002e88 <HAL_PCD_EP_DB_Transmit+0x274>
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	785b      	ldrb	r3, [r3, #1]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d117      	bne.n	8002e88 <HAL_PCD_EP_DB_Transmit+0x274>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	4413      	add	r3, r2
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	011a      	lsls	r2, r3, #4
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	4413      	add	r3, r2
 8002e7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e7e:	623b      	str	r3, [r7, #32]
 8002e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	6959      	ldr	r1, [r3, #20]
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	891a      	ldrh	r2, [r3, #8]
 8002e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	f003 fc6e 	bl	8006778 <USB_WritePMA>
 8002e9c:	e138      	b.n	8003110 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3306      	adds	r3, #6
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ec6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	699a      	ldr	r2, [r3, #24]
 8002ece:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d307      	bcc.n	8002ee6 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	699a      	ldr	r2, [r3, #24]
 8002eda:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ede:	1ad2      	subs	r2, r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	619a      	str	r2, [r3, #24]
 8002ee4:	e002      	b.n	8002eec <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d12e      	bne.n	8002f52 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	4619      	mov	r1, r3
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f008 fb2f 	bl	800b55e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f040 8102 	bne.w	8003110 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f26:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	441a      	add	r2, r3
 8002f38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	8013      	strh	r3, [r2, #0]
 8002f50:	e0de      	b.n	8003110 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d11f      	bne.n	8002f9c <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f76:	867b      	strh	r3, [r7, #50]	; 0x32
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	441a      	add	r2, r3
 8002f86:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002f88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	f040 80b4 	bne.w	8003110 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002fb0:	441a      	add	r2, r3
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	69da      	ldr	r2, [r3, #28]
 8002fba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002fbe:	441a      	add	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	6a1a      	ldr	r2, [r3, #32]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d309      	bcc.n	8002fe4 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	6a1a      	ldr	r2, [r3, #32]
 8002fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fdc:	1ad2      	subs	r2, r2, r3
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	621a      	str	r2, [r3, #32]
 8002fe2:	e015      	b.n	8003010 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d107      	bne.n	8002ffc <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8002fec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ff0:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ffa:	e009      	b.n	8003010 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2200      	movs	r2, #0
 8003006:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	643b      	str	r3, [r7, #64]	; 0x40
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	785b      	ldrb	r3, [r3, #1]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d155      	bne.n	80030ca <HAL_PCD_EP_DB_Transmit+0x4b6>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	63bb      	str	r3, [r7, #56]	; 0x38
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800302c:	b29b      	uxth	r3, r3
 800302e:	461a      	mov	r2, r3
 8003030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003032:	4413      	add	r3, r2
 8003034:	63bb      	str	r3, [r7, #56]	; 0x38
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	011a      	lsls	r2, r3, #4
 800303c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303e:	4413      	add	r3, r2
 8003040:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003044:	637b      	str	r3, [r7, #52]	; 0x34
 8003046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003048:	2b00      	cmp	r3, #0
 800304a:	d112      	bne.n	8003072 <HAL_PCD_EP_DB_Transmit+0x45e>
 800304c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	b29b      	uxth	r3, r3
 8003052:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003056:	b29a      	uxth	r2, r3
 8003058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305a:	801a      	strh	r2, [r3, #0]
 800305c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	b29b      	uxth	r3, r3
 8003062:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003066:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800306a:	b29a      	uxth	r2, r3
 800306c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306e:	801a      	strh	r2, [r3, #0]
 8003070:	e044      	b.n	80030fc <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003072:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003074:	2b3e      	cmp	r3, #62	; 0x3e
 8003076:	d811      	bhi.n	800309c <HAL_PCD_EP_DB_Transmit+0x488>
 8003078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800307a:	085b      	lsrs	r3, r3, #1
 800307c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800307e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <HAL_PCD_EP_DB_Transmit+0x47a>
 8003088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800308a:	3301      	adds	r3, #1
 800308c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800308e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003090:	b29b      	uxth	r3, r3
 8003092:	029b      	lsls	r3, r3, #10
 8003094:	b29a      	uxth	r2, r3
 8003096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003098:	801a      	strh	r2, [r3, #0]
 800309a:	e02f      	b.n	80030fc <HAL_PCD_EP_DB_Transmit+0x4e8>
 800309c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d102      	bne.n	80030b2 <HAL_PCD_EP_DB_Transmit+0x49e>
 80030ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ae:	3b01      	subs	r3, #1
 80030b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	029b      	lsls	r3, r3, #10
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c6:	801a      	strh	r2, [r3, #0]
 80030c8:	e018      	b.n	80030fc <HAL_PCD_EP_DB_Transmit+0x4e8>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	785b      	ldrb	r3, [r3, #1]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d114      	bne.n	80030fc <HAL_PCD_EP_DB_Transmit+0x4e8>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030da:	b29b      	uxth	r3, r3
 80030dc:	461a      	mov	r2, r3
 80030de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e0:	4413      	add	r3, r2
 80030e2:	643b      	str	r3, [r7, #64]	; 0x40
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	011a      	lsls	r2, r3, #4
 80030ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ec:	4413      	add	r3, r2
 80030ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030fa:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	6959      	ldr	r1, [r3, #20]
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	895a      	ldrh	r2, [r3, #10]
 8003108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800310a:	b29b      	uxth	r3, r3
 800310c:	f003 fb34 	bl	8006778 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	461a      	mov	r2, r3
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	b29b      	uxth	r3, r3
 8003122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800312a:	82bb      	strh	r3, [r7, #20]
 800312c:	8abb      	ldrh	r3, [r7, #20]
 800312e:	f083 0310 	eor.w	r3, r3, #16
 8003132:	82bb      	strh	r3, [r7, #20]
 8003134:	8abb      	ldrh	r3, [r7, #20]
 8003136:	f083 0320 	eor.w	r3, r3, #32
 800313a:	82bb      	strh	r3, [r7, #20]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	461a      	mov	r2, r3
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	441a      	add	r2, r3
 800314a:	8abb      	ldrh	r3, [r7, #20]
 800314c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800315c:	b29b      	uxth	r3, r3
 800315e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3750      	adds	r7, #80	; 0x50
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800316a:	b480      	push	{r7}
 800316c:	b087      	sub	sp, #28
 800316e:	af00      	add	r7, sp, #0
 8003170:	60f8      	str	r0, [r7, #12]
 8003172:	607b      	str	r3, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	817b      	strh	r3, [r7, #10]
 8003178:	4613      	mov	r3, r2
 800317a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800317c:	897b      	ldrh	r3, [r7, #10]
 800317e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003182:	b29b      	uxth	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00b      	beq.n	80031a0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003188:	897b      	ldrh	r3, [r7, #10]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	4413      	add	r3, r2
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	e009      	b.n	80031b4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031a0:	897a      	ldrh	r2, [r7, #10]
 80031a2:	4613      	mov	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4413      	add	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80031b4:	893b      	ldrh	r3, [r7, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d107      	bne.n	80031ca <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2200      	movs	r2, #0
 80031be:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	80da      	strh	r2, [r3, #6]
 80031c8:	e00b      	b.n	80031e2 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2201      	movs	r2, #1
 80031ce:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	0c1b      	lsrs	r3, r3, #16
 80031dc:	b29a      	uxth	r2, r3
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	371c      	adds	r7, #28
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr
	...

080031f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e26c      	b.n	80036dc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 8087 	beq.w	800331e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003210:	4b92      	ldr	r3, [pc, #584]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 030c 	and.w	r3, r3, #12
 8003218:	2b04      	cmp	r3, #4
 800321a:	d00c      	beq.n	8003236 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800321c:	4b8f      	ldr	r3, [pc, #572]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 030c 	and.w	r3, r3, #12
 8003224:	2b08      	cmp	r3, #8
 8003226:	d112      	bne.n	800324e <HAL_RCC_OscConfig+0x5e>
 8003228:	4b8c      	ldr	r3, [pc, #560]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003234:	d10b      	bne.n	800324e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003236:	4b89      	ldr	r3, [pc, #548]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d06c      	beq.n	800331c <HAL_RCC_OscConfig+0x12c>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d168      	bne.n	800331c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e246      	b.n	80036dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003256:	d106      	bne.n	8003266 <HAL_RCC_OscConfig+0x76>
 8003258:	4b80      	ldr	r3, [pc, #512]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a7f      	ldr	r2, [pc, #508]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 800325e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003262:	6013      	str	r3, [r2, #0]
 8003264:	e02e      	b.n	80032c4 <HAL_RCC_OscConfig+0xd4>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10c      	bne.n	8003288 <HAL_RCC_OscConfig+0x98>
 800326e:	4b7b      	ldr	r3, [pc, #492]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a7a      	ldr	r2, [pc, #488]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 8003274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	4b78      	ldr	r3, [pc, #480]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a77      	ldr	r2, [pc, #476]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 8003280:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	e01d      	b.n	80032c4 <HAL_RCC_OscConfig+0xd4>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003290:	d10c      	bne.n	80032ac <HAL_RCC_OscConfig+0xbc>
 8003292:	4b72      	ldr	r3, [pc, #456]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a71      	ldr	r2, [pc, #452]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 8003298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	4b6f      	ldr	r3, [pc, #444]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a6e      	ldr	r2, [pc, #440]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 80032a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	e00b      	b.n	80032c4 <HAL_RCC_OscConfig+0xd4>
 80032ac:	4b6b      	ldr	r3, [pc, #428]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a6a      	ldr	r2, [pc, #424]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 80032b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b6:	6013      	str	r3, [r2, #0]
 80032b8:	4b68      	ldr	r3, [pc, #416]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a67      	ldr	r2, [pc, #412]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 80032be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d013      	beq.n	80032f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032cc:	f7fd ff72 	bl	80011b4 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d4:	f7fd ff6e 	bl	80011b4 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b64      	cmp	r3, #100	; 0x64
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e1fa      	b.n	80036dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e6:	4b5d      	ldr	r3, [pc, #372]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0f0      	beq.n	80032d4 <HAL_RCC_OscConfig+0xe4>
 80032f2:	e014      	b.n	800331e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f4:	f7fd ff5e 	bl	80011b4 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032fc:	f7fd ff5a 	bl	80011b4 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b64      	cmp	r3, #100	; 0x64
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e1e6      	b.n	80036dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800330e:	4b53      	ldr	r3, [pc, #332]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0x10c>
 800331a:	e000      	b.n	800331e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d063      	beq.n	80033f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800332a:	4b4c      	ldr	r3, [pc, #304]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f003 030c 	and.w	r3, r3, #12
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00b      	beq.n	800334e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003336:	4b49      	ldr	r3, [pc, #292]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f003 030c 	and.w	r3, r3, #12
 800333e:	2b08      	cmp	r3, #8
 8003340:	d11c      	bne.n	800337c <HAL_RCC_OscConfig+0x18c>
 8003342:	4b46      	ldr	r3, [pc, #280]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d116      	bne.n	800337c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800334e:	4b43      	ldr	r3, [pc, #268]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d005      	beq.n	8003366 <HAL_RCC_OscConfig+0x176>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d001      	beq.n	8003366 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e1ba      	b.n	80036dc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003366:	4b3d      	ldr	r3, [pc, #244]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	4939      	ldr	r1, [pc, #228]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 8003376:	4313      	orrs	r3, r2
 8003378:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800337a:	e03a      	b.n	80033f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d020      	beq.n	80033c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003384:	4b36      	ldr	r3, [pc, #216]	; (8003460 <HAL_RCC_OscConfig+0x270>)
 8003386:	2201      	movs	r2, #1
 8003388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338a:	f7fd ff13 	bl	80011b4 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003392:	f7fd ff0f 	bl	80011b4 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e19b      	b.n	80036dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a4:	4b2d      	ldr	r3, [pc, #180]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0f0      	beq.n	8003392 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b0:	4b2a      	ldr	r3, [pc, #168]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4927      	ldr	r1, [pc, #156]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	600b      	str	r3, [r1, #0]
 80033c4:	e015      	b.n	80033f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033c6:	4b26      	ldr	r3, [pc, #152]	; (8003460 <HAL_RCC_OscConfig+0x270>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033cc:	f7fd fef2 	bl	80011b4 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d4:	f7fd feee 	bl	80011b4 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e17a      	b.n	80036dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033e6:	4b1d      	ldr	r3, [pc, #116]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f0      	bne.n	80033d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d03a      	beq.n	8003474 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d019      	beq.n	800343a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003406:	4b17      	ldr	r3, [pc, #92]	; (8003464 <HAL_RCC_OscConfig+0x274>)
 8003408:	2201      	movs	r2, #1
 800340a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800340c:	f7fd fed2 	bl	80011b4 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003414:	f7fd fece 	bl	80011b4 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e15a      	b.n	80036dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003426:	4b0d      	ldr	r3, [pc, #52]	; (800345c <HAL_RCC_OscConfig+0x26c>)
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003432:	2001      	movs	r0, #1
 8003434:	f000 fb08 	bl	8003a48 <RCC_Delay>
 8003438:	e01c      	b.n	8003474 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800343a:	4b0a      	ldr	r3, [pc, #40]	; (8003464 <HAL_RCC_OscConfig+0x274>)
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003440:	f7fd feb8 	bl	80011b4 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003446:	e00f      	b.n	8003468 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003448:	f7fd feb4 	bl	80011b4 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d908      	bls.n	8003468 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e140      	b.n	80036dc <HAL_RCC_OscConfig+0x4ec>
 800345a:	bf00      	nop
 800345c:	40021000 	.word	0x40021000
 8003460:	42420000 	.word	0x42420000
 8003464:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003468:	4b9e      	ldr	r3, [pc, #632]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1e9      	bne.n	8003448 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 80a6 	beq.w	80035ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003482:	2300      	movs	r3, #0
 8003484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003486:	4b97      	ldr	r3, [pc, #604]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10d      	bne.n	80034ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003492:	4b94      	ldr	r3, [pc, #592]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	4a93      	ldr	r2, [pc, #588]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 8003498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349c:	61d3      	str	r3, [r2, #28]
 800349e:	4b91      	ldr	r3, [pc, #580]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a6:	60bb      	str	r3, [r7, #8]
 80034a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034aa:	2301      	movs	r3, #1
 80034ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ae:	4b8e      	ldr	r3, [pc, #568]	; (80036e8 <HAL_RCC_OscConfig+0x4f8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d118      	bne.n	80034ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ba:	4b8b      	ldr	r3, [pc, #556]	; (80036e8 <HAL_RCC_OscConfig+0x4f8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a8a      	ldr	r2, [pc, #552]	; (80036e8 <HAL_RCC_OscConfig+0x4f8>)
 80034c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034c6:	f7fd fe75 	bl	80011b4 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ce:	f7fd fe71 	bl	80011b4 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b64      	cmp	r3, #100	; 0x64
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e0fd      	b.n	80036dc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e0:	4b81      	ldr	r3, [pc, #516]	; (80036e8 <HAL_RCC_OscConfig+0x4f8>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0f0      	beq.n	80034ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d106      	bne.n	8003502 <HAL_RCC_OscConfig+0x312>
 80034f4:	4b7b      	ldr	r3, [pc, #492]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	4a7a      	ldr	r2, [pc, #488]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	6213      	str	r3, [r2, #32]
 8003500:	e02d      	b.n	800355e <HAL_RCC_OscConfig+0x36e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10c      	bne.n	8003524 <HAL_RCC_OscConfig+0x334>
 800350a:	4b76      	ldr	r3, [pc, #472]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	4a75      	ldr	r2, [pc, #468]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 8003510:	f023 0301 	bic.w	r3, r3, #1
 8003514:	6213      	str	r3, [r2, #32]
 8003516:	4b73      	ldr	r3, [pc, #460]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	4a72      	ldr	r2, [pc, #456]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 800351c:	f023 0304 	bic.w	r3, r3, #4
 8003520:	6213      	str	r3, [r2, #32]
 8003522:	e01c      	b.n	800355e <HAL_RCC_OscConfig+0x36e>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	2b05      	cmp	r3, #5
 800352a:	d10c      	bne.n	8003546 <HAL_RCC_OscConfig+0x356>
 800352c:	4b6d      	ldr	r3, [pc, #436]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	4a6c      	ldr	r2, [pc, #432]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 8003532:	f043 0304 	orr.w	r3, r3, #4
 8003536:	6213      	str	r3, [r2, #32]
 8003538:	4b6a      	ldr	r3, [pc, #424]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	4a69      	ldr	r2, [pc, #420]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6213      	str	r3, [r2, #32]
 8003544:	e00b      	b.n	800355e <HAL_RCC_OscConfig+0x36e>
 8003546:	4b67      	ldr	r3, [pc, #412]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	4a66      	ldr	r2, [pc, #408]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 800354c:	f023 0301 	bic.w	r3, r3, #1
 8003550:	6213      	str	r3, [r2, #32]
 8003552:	4b64      	ldr	r3, [pc, #400]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	4a63      	ldr	r2, [pc, #396]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 8003558:	f023 0304 	bic.w	r3, r3, #4
 800355c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d015      	beq.n	8003592 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003566:	f7fd fe25 	bl	80011b4 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800356c:	e00a      	b.n	8003584 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356e:	f7fd fe21 	bl	80011b4 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	f241 3288 	movw	r2, #5000	; 0x1388
 800357c:	4293      	cmp	r3, r2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e0ab      	b.n	80036dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003584:	4b57      	ldr	r3, [pc, #348]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0ee      	beq.n	800356e <HAL_RCC_OscConfig+0x37e>
 8003590:	e014      	b.n	80035bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003592:	f7fd fe0f 	bl	80011b4 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003598:	e00a      	b.n	80035b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359a:	f7fd fe0b 	bl	80011b4 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e095      	b.n	80036dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b0:	4b4c      	ldr	r3, [pc, #304]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1ee      	bne.n	800359a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035bc:	7dfb      	ldrb	r3, [r7, #23]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d105      	bne.n	80035ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c2:	4b48      	ldr	r3, [pc, #288]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	4a47      	ldr	r2, [pc, #284]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 80035c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 8081 	beq.w	80036da <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035d8:	4b42      	ldr	r3, [pc, #264]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f003 030c 	and.w	r3, r3, #12
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d061      	beq.n	80036a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d146      	bne.n	800367a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ec:	4b3f      	ldr	r3, [pc, #252]	; (80036ec <HAL_RCC_OscConfig+0x4fc>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f2:	f7fd fddf 	bl	80011b4 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fa:	f7fd fddb 	bl	80011b4 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e067      	b.n	80036dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800360c:	4b35      	ldr	r3, [pc, #212]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1f0      	bne.n	80035fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003620:	d108      	bne.n	8003634 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003622:	4b30      	ldr	r3, [pc, #192]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	492d      	ldr	r1, [pc, #180]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 8003630:	4313      	orrs	r3, r2
 8003632:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003634:	4b2b      	ldr	r3, [pc, #172]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a19      	ldr	r1, [r3, #32]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	430b      	orrs	r3, r1
 8003646:	4927      	ldr	r1, [pc, #156]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 8003648:	4313      	orrs	r3, r2
 800364a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800364c:	4b27      	ldr	r3, [pc, #156]	; (80036ec <HAL_RCC_OscConfig+0x4fc>)
 800364e:	2201      	movs	r2, #1
 8003650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003652:	f7fd fdaf 	bl	80011b4 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365a:	f7fd fdab 	bl	80011b4 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e037      	b.n	80036dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800366c:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0f0      	beq.n	800365a <HAL_RCC_OscConfig+0x46a>
 8003678:	e02f      	b.n	80036da <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800367a:	4b1c      	ldr	r3, [pc, #112]	; (80036ec <HAL_RCC_OscConfig+0x4fc>)
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003680:	f7fd fd98 	bl	80011b4 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003688:	f7fd fd94 	bl	80011b4 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e020      	b.n	80036dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800369a:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f0      	bne.n	8003688 <HAL_RCC_OscConfig+0x498>
 80036a6:	e018      	b.n	80036da <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e013      	b.n	80036dc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036b4:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <HAL_RCC_OscConfig+0x4f4>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d106      	bne.n	80036d6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d001      	beq.n	80036da <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3718      	adds	r7, #24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40021000 	.word	0x40021000
 80036e8:	40007000 	.word	0x40007000
 80036ec:	42420060 	.word	0x42420060

080036f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e0d0      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003704:	4b6a      	ldr	r3, [pc, #424]	; (80038b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d910      	bls.n	8003734 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003712:	4b67      	ldr	r3, [pc, #412]	; (80038b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f023 0207 	bic.w	r2, r3, #7
 800371a:	4965      	ldr	r1, [pc, #404]	; (80038b0 <HAL_RCC_ClockConfig+0x1c0>)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	4313      	orrs	r3, r2
 8003720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003722:	4b63      	ldr	r3, [pc, #396]	; (80038b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	429a      	cmp	r2, r3
 800372e:	d001      	beq.n	8003734 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0b8      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d020      	beq.n	8003782 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800374c:	4b59      	ldr	r3, [pc, #356]	; (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	4a58      	ldr	r2, [pc, #352]	; (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003752:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003756:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0308 	and.w	r3, r3, #8
 8003760:	2b00      	cmp	r3, #0
 8003762:	d005      	beq.n	8003770 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003764:	4b53      	ldr	r3, [pc, #332]	; (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	4a52      	ldr	r2, [pc, #328]	; (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 800376a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800376e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003770:	4b50      	ldr	r3, [pc, #320]	; (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	494d      	ldr	r1, [pc, #308]	; (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 800377e:	4313      	orrs	r3, r2
 8003780:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d040      	beq.n	8003810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d107      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003796:	4b47      	ldr	r3, [pc, #284]	; (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d115      	bne.n	80037ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e07f      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d107      	bne.n	80037be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ae:	4b41      	ldr	r3, [pc, #260]	; (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d109      	bne.n	80037ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e073      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037be:	4b3d      	ldr	r3, [pc, #244]	; (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e06b      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ce:	4b39      	ldr	r3, [pc, #228]	; (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f023 0203 	bic.w	r2, r3, #3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	4936      	ldr	r1, [pc, #216]	; (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037e0:	f7fd fce8 	bl	80011b4 <HAL_GetTick>
 80037e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e6:	e00a      	b.n	80037fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e8:	f7fd fce4 	bl	80011b4 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e053      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fe:	4b2d      	ldr	r3, [pc, #180]	; (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f003 020c 	and.w	r2, r3, #12
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	429a      	cmp	r2, r3
 800380e:	d1eb      	bne.n	80037e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003810:	4b27      	ldr	r3, [pc, #156]	; (80038b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d210      	bcs.n	8003840 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381e:	4b24      	ldr	r3, [pc, #144]	; (80038b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f023 0207 	bic.w	r2, r3, #7
 8003826:	4922      	ldr	r1, [pc, #136]	; (80038b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	4313      	orrs	r3, r2
 800382c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800382e:	4b20      	ldr	r3, [pc, #128]	; (80038b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d001      	beq.n	8003840 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e032      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d008      	beq.n	800385e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800384c:	4b19      	ldr	r3, [pc, #100]	; (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	4916      	ldr	r1, [pc, #88]	; (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 800385a:	4313      	orrs	r3, r2
 800385c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d009      	beq.n	800387e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800386a:	4b12      	ldr	r3, [pc, #72]	; (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	490e      	ldr	r1, [pc, #56]	; (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 800387a:	4313      	orrs	r3, r2
 800387c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800387e:	f000 f821 	bl	80038c4 <HAL_RCC_GetSysClockFreq>
 8003882:	4602      	mov	r2, r0
 8003884:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	091b      	lsrs	r3, r3, #4
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	490a      	ldr	r1, [pc, #40]	; (80038b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003890:	5ccb      	ldrb	r3, [r1, r3]
 8003892:	fa22 f303 	lsr.w	r3, r2, r3
 8003896:	4a09      	ldr	r2, [pc, #36]	; (80038bc <HAL_RCC_ClockConfig+0x1cc>)
 8003898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800389a:	4b09      	ldr	r3, [pc, #36]	; (80038c0 <HAL_RCC_ClockConfig+0x1d0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fd fb8c 	bl	8000fbc <HAL_InitTick>

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40022000 	.word	0x40022000
 80038b4:	40021000 	.word	0x40021000
 80038b8:	0800c690 	.word	0x0800c690
 80038bc:	20000000 	.word	0x20000000
 80038c0:	20000004 	.word	0x20000004

080038c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c4:	b490      	push	{r4, r7}
 80038c6:	b08a      	sub	sp, #40	; 0x28
 80038c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038ca:	4b2a      	ldr	r3, [pc, #168]	; (8003974 <HAL_RCC_GetSysClockFreq+0xb0>)
 80038cc:	1d3c      	adds	r4, r7, #4
 80038ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038d4:	f240 2301 	movw	r3, #513	; 0x201
 80038d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	61fb      	str	r3, [r7, #28]
 80038de:	2300      	movs	r3, #0
 80038e0:	61bb      	str	r3, [r7, #24]
 80038e2:	2300      	movs	r3, #0
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038ee:	4b22      	ldr	r3, [pc, #136]	; (8003978 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f003 030c 	and.w	r3, r3, #12
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d002      	beq.n	8003904 <HAL_RCC_GetSysClockFreq+0x40>
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d003      	beq.n	800390a <HAL_RCC_GetSysClockFreq+0x46>
 8003902:	e02d      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003904:	4b1d      	ldr	r3, [pc, #116]	; (800397c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003906:	623b      	str	r3, [r7, #32]
      break;
 8003908:	e02d      	b.n	8003966 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	0c9b      	lsrs	r3, r3, #18
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003916:	4413      	add	r3, r2
 8003918:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800391c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d013      	beq.n	8003950 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003928:	4b13      	ldr	r3, [pc, #76]	; (8003978 <HAL_RCC_GetSysClockFreq+0xb4>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	0c5b      	lsrs	r3, r3, #17
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003936:	4413      	add	r3, r2
 8003938:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800393c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	4a0e      	ldr	r2, [pc, #56]	; (800397c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003942:	fb02 f203 	mul.w	r2, r2, r3
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	fbb2 f3f3 	udiv	r3, r2, r3
 800394c:	627b      	str	r3, [r7, #36]	; 0x24
 800394e:	e004      	b.n	800395a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	4a0b      	ldr	r2, [pc, #44]	; (8003980 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003954:	fb02 f303 	mul.w	r3, r2, r3
 8003958:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	623b      	str	r3, [r7, #32]
      break;
 800395e:	e002      	b.n	8003966 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003960:	4b06      	ldr	r3, [pc, #24]	; (800397c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003962:	623b      	str	r3, [r7, #32]
      break;
 8003964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003966:	6a3b      	ldr	r3, [r7, #32]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3728      	adds	r7, #40	; 0x28
 800396c:	46bd      	mov	sp, r7
 800396e:	bc90      	pop	{r4, r7}
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	0800c574 	.word	0x0800c574
 8003978:	40021000 	.word	0x40021000
 800397c:	007a1200 	.word	0x007a1200
 8003980:	003d0900 	.word	0x003d0900

08003984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003988:	4b02      	ldr	r3, [pc, #8]	; (8003994 <HAL_RCC_GetHCLKFreq+0x10>)
 800398a:	681b      	ldr	r3, [r3, #0]
}
 800398c:	4618      	mov	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr
 8003994:	20000000 	.word	0x20000000

08003998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800399c:	f7ff fff2 	bl	8003984 <HAL_RCC_GetHCLKFreq>
 80039a0:	4602      	mov	r2, r0
 80039a2:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	0a1b      	lsrs	r3, r3, #8
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	4903      	ldr	r1, [pc, #12]	; (80039bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ae:	5ccb      	ldrb	r3, [r1, r3]
 80039b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40021000 	.word	0x40021000
 80039bc:	0800c6a0 	.word	0x0800c6a0

080039c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039c4:	f7ff ffde 	bl	8003984 <HAL_RCC_GetHCLKFreq>
 80039c8:	4602      	mov	r2, r0
 80039ca:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	0adb      	lsrs	r3, r3, #11
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	4903      	ldr	r1, [pc, #12]	; (80039e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039d6:	5ccb      	ldrb	r3, [r1, r3]
 80039d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039dc:	4618      	mov	r0, r3
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40021000 	.word	0x40021000
 80039e4:	0800c6a0 	.word	0x0800c6a0

080039e8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	220f      	movs	r2, #15
 80039f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039f8:	4b11      	ldr	r3, [pc, #68]	; (8003a40 <HAL_RCC_GetClockConfig+0x58>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f003 0203 	and.w	r2, r3, #3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a04:	4b0e      	ldr	r3, [pc, #56]	; (8003a40 <HAL_RCC_GetClockConfig+0x58>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a10:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <HAL_RCC_GetClockConfig+0x58>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003a1c:	4b08      	ldr	r3, [pc, #32]	; (8003a40 <HAL_RCC_GetClockConfig+0x58>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	08db      	lsrs	r3, r3, #3
 8003a22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a2a:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <HAL_RCC_GetClockConfig+0x5c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0207 	and.w	r2, r3, #7
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr
 8003a40:	40021000 	.word	0x40021000
 8003a44:	40022000 	.word	0x40022000

08003a48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a50:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <RCC_Delay+0x34>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a0a      	ldr	r2, [pc, #40]	; (8003a80 <RCC_Delay+0x38>)
 8003a56:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5a:	0a5b      	lsrs	r3, r3, #9
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	fb02 f303 	mul.w	r3, r2, r3
 8003a62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a64:	bf00      	nop
  }
  while (Delay --);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1e5a      	subs	r2, r3, #1
 8003a6a:	60fa      	str	r2, [r7, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1f9      	bne.n	8003a64 <RCC_Delay+0x1c>
}
 8003a70:	bf00      	nop
 8003a72:	bf00      	nop
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr
 8003a7c:	20000000 	.word	0x20000000
 8003a80:	10624dd3 	.word	0x10624dd3

08003a84 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	613b      	str	r3, [r7, #16]
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d07d      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aa4:	4b4f      	ldr	r3, [pc, #316]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10d      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab0:	4b4c      	ldr	r3, [pc, #304]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	4a4b      	ldr	r2, [pc, #300]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aba:	61d3      	str	r3, [r2, #28]
 8003abc:	4b49      	ldr	r3, [pc, #292]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003abe:	69db      	ldr	r3, [r3, #28]
 8003ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003acc:	4b46      	ldr	r3, [pc, #280]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d118      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ad8:	4b43      	ldr	r3, [pc, #268]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a42      	ldr	r2, [pc, #264]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae4:	f7fd fb66 	bl	80011b4 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aea:	e008      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aec:	f7fd fb62 	bl	80011b4 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b64      	cmp	r3, #100	; 0x64
 8003af8:	d901      	bls.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e06d      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afe:	4b3a      	ldr	r3, [pc, #232]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b0a:	4b36      	ldr	r3, [pc, #216]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b12:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d02e      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d027      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b28:	4b2e      	ldr	r3, [pc, #184]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b30:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b32:	4b2e      	ldr	r3, [pc, #184]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b34:	2201      	movs	r2, #1
 8003b36:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b38:	4b2c      	ldr	r3, [pc, #176]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b3e:	4a29      	ldr	r2, [pc, #164]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d014      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4e:	f7fd fb31 	bl	80011b4 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b54:	e00a      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b56:	f7fd fb2d 	bl	80011b4 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e036      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b6c:	4b1d      	ldr	r3, [pc, #116]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0ee      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b78:	4b1a      	ldr	r3, [pc, #104]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	4917      	ldr	r1, [pc, #92]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b8a:	7dfb      	ldrb	r3, [r7, #23]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d105      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b90:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	4a13      	ldr	r2, [pc, #76]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d008      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ba8:	4b0e      	ldr	r3, [pc, #56]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	490b      	ldr	r1, [pc, #44]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0310 	and.w	r3, r3, #16
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d008      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bc6:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	4904      	ldr	r1, [pc, #16]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40021000 	.word	0x40021000
 8003be8:	40007000 	.word	0x40007000
 8003bec:	42420440 	.word	0x42420440

08003bf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e041      	b.n	8003c86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f839 	bl	8003c8e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4610      	mov	r0, r2
 8003c30:	f000 f9b4 	bl	8003f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d001      	beq.n	8003cb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e03a      	b.n	8003d2e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a18      	ldr	r2, [pc, #96]	; (8003d38 <HAL_TIM_Base_Start_IT+0x98>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00e      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x58>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce2:	d009      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x58>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a14      	ldr	r2, [pc, #80]	; (8003d3c <HAL_TIM_Base_Start_IT+0x9c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d004      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x58>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a13      	ldr	r2, [pc, #76]	; (8003d40 <HAL_TIM_Base_Start_IT+0xa0>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d111      	bne.n	8003d1c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2b06      	cmp	r3, #6
 8003d08:	d010      	beq.n	8003d2c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0201 	orr.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d1a:	e007      	b.n	8003d2c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0201 	orr.w	r2, r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr
 8003d38:	40012c00 	.word	0x40012c00
 8003d3c:	40000400 	.word	0x40000400
 8003d40:	40000800 	.word	0x40000800

08003d44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d122      	bne.n	8003da0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d11b      	bne.n	8003da0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f06f 0202 	mvn.w	r2, #2
 8003d70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f8ed 	bl	8003f66 <HAL_TIM_IC_CaptureCallback>
 8003d8c:	e005      	b.n	8003d9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f8e0 	bl	8003f54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f8ef 	bl	8003f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d122      	bne.n	8003df4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d11b      	bne.n	8003df4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f06f 0204 	mvn.w	r2, #4
 8003dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2202      	movs	r2, #2
 8003dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f8c3 	bl	8003f66 <HAL_TIM_IC_CaptureCallback>
 8003de0:	e005      	b.n	8003dee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f8b6 	bl	8003f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f8c5 	bl	8003f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b08      	cmp	r3, #8
 8003e00:	d122      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d11b      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f06f 0208 	mvn.w	r2, #8
 8003e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2204      	movs	r2, #4
 8003e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f899 	bl	8003f66 <HAL_TIM_IC_CaptureCallback>
 8003e34:	e005      	b.n	8003e42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f88c 	bl	8003f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f89b 	bl	8003f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f003 0310 	and.w	r3, r3, #16
 8003e52:	2b10      	cmp	r3, #16
 8003e54:	d122      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2b10      	cmp	r3, #16
 8003e62:	d11b      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f06f 0210 	mvn.w	r2, #16
 8003e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2208      	movs	r2, #8
 8003e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f86f 	bl	8003f66 <HAL_TIM_IC_CaptureCallback>
 8003e88:	e005      	b.n	8003e96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f862 	bl	8003f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f871 	bl	8003f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d10e      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d107      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f06f 0201 	mvn.w	r2, #1
 8003ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7fc ff28 	bl	8000d18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed2:	2b80      	cmp	r3, #128	; 0x80
 8003ed4:	d10e      	bne.n	8003ef4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee0:	2b80      	cmp	r3, #128	; 0x80
 8003ee2:	d107      	bne.n	8003ef4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f8bf 	bl	8004072 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efe:	2b40      	cmp	r3, #64	; 0x40
 8003f00:	d10e      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0c:	2b40      	cmp	r3, #64	; 0x40
 8003f0e:	d107      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f835 	bl	8003f8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f003 0320 	and.w	r3, r3, #32
 8003f2a:	2b20      	cmp	r3, #32
 8003f2c:	d10e      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0320 	and.w	r3, r3, #32
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	d107      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0220 	mvn.w	r2, #32
 8003f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f88a 	bl	8004060 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f4c:	bf00      	nop
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bc80      	pop	{r7}
 8003f64:	4770      	bx	lr

08003f66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr

08003f78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bc80      	pop	{r7}
 8003f88:	4770      	bx	lr

08003f8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr

08003f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a29      	ldr	r2, [pc, #164]	; (8004054 <TIM_Base_SetConfig+0xb8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d00b      	beq.n	8003fcc <TIM_Base_SetConfig+0x30>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fba:	d007      	beq.n	8003fcc <TIM_Base_SetConfig+0x30>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a26      	ldr	r2, [pc, #152]	; (8004058 <TIM_Base_SetConfig+0xbc>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d003      	beq.n	8003fcc <TIM_Base_SetConfig+0x30>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a25      	ldr	r2, [pc, #148]	; (800405c <TIM_Base_SetConfig+0xc0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d108      	bne.n	8003fde <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a1c      	ldr	r2, [pc, #112]	; (8004054 <TIM_Base_SetConfig+0xb8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d00b      	beq.n	8003ffe <TIM_Base_SetConfig+0x62>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fec:	d007      	beq.n	8003ffe <TIM_Base_SetConfig+0x62>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a19      	ldr	r2, [pc, #100]	; (8004058 <TIM_Base_SetConfig+0xbc>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d003      	beq.n	8003ffe <TIM_Base_SetConfig+0x62>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a18      	ldr	r2, [pc, #96]	; (800405c <TIM_Base_SetConfig+0xc0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d108      	bne.n	8004010 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4313      	orrs	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a07      	ldr	r2, [pc, #28]	; (8004054 <TIM_Base_SetConfig+0xb8>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d103      	bne.n	8004044 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	615a      	str	r2, [r3, #20]
}
 800404a:	bf00      	nop
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr
 8004054:	40012c00 	.word	0x40012c00
 8004058:	40000400 	.word	0x40000400
 800405c:	40000800 	.word	0x40000800

08004060 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr

08004072 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr

08004084 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e03f      	b.n	8004116 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fc fe84 	bl	8000db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2224      	movs	r2, #36	; 0x24
 80040b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 faa7 	bl	800461c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695a      	ldr	r2, [r3, #20]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800411e:	b480      	push	{r7}
 8004120:	b085      	sub	sp, #20
 8004122:	af00      	add	r7, sp, #0
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	4613      	mov	r3, r2
 800412a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b20      	cmp	r3, #32
 8004136:	d140      	bne.n	80041ba <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <HAL_UART_Receive_IT+0x26>
 800413e:	88fb      	ldrh	r3, [r7, #6]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e039      	b.n	80041bc <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800414e:	2b01      	cmp	r3, #1
 8004150:	d101      	bne.n	8004156 <HAL_UART_Receive_IT+0x38>
 8004152:	2302      	movs	r3, #2
 8004154:	e032      	b.n	80041bc <HAL_UART_Receive_IT+0x9e>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	88fa      	ldrh	r2, [r7, #6]
 8004168:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	88fa      	ldrh	r2, [r7, #6]
 800416e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2222      	movs	r2, #34	; 0x22
 800417a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68da      	ldr	r2, [r3, #12]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004194:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695a      	ldr	r2, [r3, #20]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f042 0201 	orr.w	r2, r2, #1
 80041a4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f042 0220 	orr.w	r2, r2, #32
 80041b4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	e000      	b.n	80041bc <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80041ba:	2302      	movs	r3, #2
  }
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bc80      	pop	{r7}
 80041c4:	4770      	bx	lr
	...

080041c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b088      	sub	sp, #32
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10d      	bne.n	800421a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b00      	cmp	r3, #0
 8004206:	d008      	beq.n	800421a <HAL_UART_IRQHandler+0x52>
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	f003 0320 	and.w	r3, r3, #32
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f982 	bl	800451c <UART_Receive_IT>
      return;
 8004218:	e0d0      	b.n	80043bc <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 80b0 	beq.w	8004382 <HAL_UART_IRQHandler+0x1ba>
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b00      	cmp	r3, #0
 800422a:	d105      	bne.n	8004238 <HAL_UART_IRQHandler+0x70>
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 80a5 	beq.w	8004382 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00a      	beq.n	8004258 <HAL_UART_IRQHandler+0x90>
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004250:	f043 0201 	orr.w	r2, r3, #1
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <HAL_UART_IRQHandler+0xb0>
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	d005      	beq.n	8004278 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004270:	f043 0202 	orr.w	r2, r3, #2
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <HAL_UART_IRQHandler+0xd0>
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004290:	f043 0204 	orr.w	r2, r3, #4
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00f      	beq.n	80042c2 <HAL_UART_IRQHandler+0xfa>
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	f003 0320 	and.w	r3, r3, #32
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d104      	bne.n	80042b6 <HAL_UART_IRQHandler+0xee>
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d005      	beq.n	80042c2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ba:	f043 0208 	orr.w	r2, r3, #8
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d077      	beq.n	80043ba <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	f003 0320 	and.w	r3, r3, #32
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d007      	beq.n	80042e4 <HAL_UART_IRQHandler+0x11c>
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	f003 0320 	and.w	r3, r3, #32
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d002      	beq.n	80042e4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f91c 	bl	800451c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	bf14      	ite	ne
 80042f2:	2301      	movne	r3, #1
 80042f4:	2300      	moveq	r3, #0
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d102      	bne.n	800430c <HAL_UART_IRQHandler+0x144>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d031      	beq.n	8004370 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f86d 	bl	80043ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431c:	2b00      	cmp	r3, #0
 800431e:	d023      	beq.n	8004368 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	695a      	ldr	r2, [r3, #20]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800432e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004334:	2b00      	cmp	r3, #0
 8004336:	d013      	beq.n	8004360 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433c:	4a21      	ldr	r2, [pc, #132]	; (80043c4 <HAL_UART_IRQHandler+0x1fc>)
 800433e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004344:	4618      	mov	r0, r3
 8004346:	f7fd f879 	bl	800143c <HAL_DMA_Abort_IT>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d016      	beq.n	800437e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800435a:	4610      	mov	r0, r2
 800435c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800435e:	e00e      	b.n	800437e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f83a 	bl	80043da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004366:	e00a      	b.n	800437e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f836 	bl	80043da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800436e:	e006      	b.n	800437e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f832 	bl	80043da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800437c:	e01d      	b.n	80043ba <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800437e:	bf00      	nop
    return;
 8004380:	e01b      	b.n	80043ba <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004388:	2b00      	cmp	r3, #0
 800438a:	d008      	beq.n	800439e <HAL_UART_IRQHandler+0x1d6>
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f859 	bl	800444e <UART_Transmit_IT>
    return;
 800439c:	e00e      	b.n	80043bc <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d009      	beq.n	80043bc <HAL_UART_IRQHandler+0x1f4>
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d004      	beq.n	80043bc <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f89a 	bl	80044ec <UART_EndTransmit_IT>
    return;
 80043b8:	e000      	b.n	80043bc <HAL_UART_IRQHandler+0x1f4>
    return;
 80043ba:	bf00      	nop
  }
}
 80043bc:	3720      	adds	r7, #32
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	08004427 	.word	0x08004427

080043c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr

080043da <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr

080043ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004402:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695a      	ldr	r2, [r3, #20]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0201 	bic.w	r2, r2, #1
 8004412:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2220      	movs	r2, #32
 8004418:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	bc80      	pop	{r7}
 8004424:	4770      	bx	lr

08004426 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f7ff ffca 	bl	80043da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004446:	bf00      	nop
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800444e:	b480      	push	{r7}
 8004450:	b085      	sub	sp, #20
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b21      	cmp	r3, #33	; 0x21
 8004460:	d13e      	bne.n	80044e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800446a:	d114      	bne.n	8004496 <UART_Transmit_IT+0x48>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d110      	bne.n	8004496 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	461a      	mov	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004488:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	1c9a      	adds	r2, r3, #2
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	621a      	str	r2, [r3, #32]
 8004494:	e008      	b.n	80044a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	1c59      	adds	r1, r3, #1
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6211      	str	r1, [r2, #32]
 80044a0:	781a      	ldrb	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	4619      	mov	r1, r3
 80044b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10f      	bne.n	80044dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044dc:	2300      	movs	r3, #0
 80044de:	e000      	b.n	80044e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044e0:	2302      	movs	r3, #2
  }
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr

080044ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004502:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff ff5b 	bl	80043c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b22      	cmp	r3, #34	; 0x22
 800452e:	d170      	bne.n	8004612 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004538:	d117      	bne.n	800456a <UART_Receive_IT+0x4e>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d113      	bne.n	800456a <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8004542:	2300      	movs	r3, #0
 8004544:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	b29b      	uxth	r3, r3
 8004554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004558:	b29a      	uxth	r2, r3
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004562:	1c9a      	adds	r2, r3, #2
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	629a      	str	r2, [r3, #40]	; 0x28
 8004568:	e026      	b.n	80045b8 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004570:	2300      	movs	r3, #0
 8004572:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800457c:	d007      	beq.n	800458e <UART_Receive_IT+0x72>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10a      	bne.n	800459c <UART_Receive_IT+0x80>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d106      	bne.n	800459c <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	b2da      	uxtb	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	701a      	strb	r2, [r3, #0]
 800459a:	e008      	b.n	80045ae <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045bc:	b29b      	uxth	r3, r3
 80045be:	3b01      	subs	r3, #1
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	4619      	mov	r1, r3
 80045c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d120      	bne.n	800460e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0220 	bic.w	r2, r2, #32
 80045da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695a      	ldr	r2, [r3, #20]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0201 	bic.w	r2, r2, #1
 80045fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2220      	movs	r2, #32
 8004600:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f007 fc6b 	bl	800bee0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	e002      	b.n	8004614 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800460e:	2300      	movs	r3, #0
 8004610:	e000      	b.n	8004614 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8004612:	2302      	movs	r3, #2
  }
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68da      	ldr	r2, [r3, #12]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004656:	f023 030c 	bic.w	r3, r3, #12
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6812      	ldr	r2, [r2, #0]
 800465e:	68b9      	ldr	r1, [r7, #8]
 8004660:	430b      	orrs	r3, r1
 8004662:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699a      	ldr	r2, [r3, #24]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a2c      	ldr	r2, [pc, #176]	; (8004730 <UART_SetConfig+0x114>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d103      	bne.n	800468c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004684:	f7ff f99c 	bl	80039c0 <HAL_RCC_GetPCLK2Freq>
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	e002      	b.n	8004692 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800468c:	f7ff f984 	bl	8003998 <HAL_RCC_GetPCLK1Freq>
 8004690:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	009a      	lsls	r2, r3, #2
 800469c:	441a      	add	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a8:	4a22      	ldr	r2, [pc, #136]	; (8004734 <UART_SetConfig+0x118>)
 80046aa:	fba2 2303 	umull	r2, r3, r2, r3
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	0119      	lsls	r1, r3, #4
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4613      	mov	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	009a      	lsls	r2, r3, #2
 80046bc:	441a      	add	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046c8:	4b1a      	ldr	r3, [pc, #104]	; (8004734 <UART_SetConfig+0x118>)
 80046ca:	fba3 0302 	umull	r0, r3, r3, r2
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	2064      	movs	r0, #100	; 0x64
 80046d2:	fb00 f303 	mul.w	r3, r0, r3
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	3332      	adds	r3, #50	; 0x32
 80046dc:	4a15      	ldr	r2, [pc, #84]	; (8004734 <UART_SetConfig+0x118>)
 80046de:	fba2 2303 	umull	r2, r3, r2, r3
 80046e2:	095b      	lsrs	r3, r3, #5
 80046e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046e8:	4419      	add	r1, r3
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	4613      	mov	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	009a      	lsls	r2, r3, #2
 80046f4:	441a      	add	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004700:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <UART_SetConfig+0x118>)
 8004702:	fba3 0302 	umull	r0, r3, r3, r2
 8004706:	095b      	lsrs	r3, r3, #5
 8004708:	2064      	movs	r0, #100	; 0x64
 800470a:	fb00 f303 	mul.w	r3, r0, r3
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	3332      	adds	r3, #50	; 0x32
 8004714:	4a07      	ldr	r2, [pc, #28]	; (8004734 <UART_SetConfig+0x118>)
 8004716:	fba2 2303 	umull	r2, r3, r2, r3
 800471a:	095b      	lsrs	r3, r3, #5
 800471c:	f003 020f 	and.w	r2, r3, #15
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	440a      	add	r2, r1
 8004726:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004728:	bf00      	nop
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40013800 	.word	0x40013800
 8004734:	51eb851f 	.word	0x51eb851f

08004738 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004738:	b084      	sub	sp, #16
 800473a:	b480      	push	{r7}
 800473c:	b083      	sub	sp, #12
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	f107 0014 	add.w	r0, r7, #20
 8004746:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	b004      	add	sp, #16
 8004756:	4770      	bx	lr

08004758 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004768:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800476c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	b29a      	uxth	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	bc80      	pop	{r7}
 8004782:	4770      	bx	lr

08004784 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800478c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004790:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004798:	b29a      	uxth	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	b29b      	uxth	r3, r3
 800479e:	43db      	mvns	r3, r3
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	4013      	ands	r3, r2
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bc80      	pop	{r7}
 80047b6:	4770      	bx	lr

080047b8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bc80      	pop	{r7}
 80047ce:	4770      	bx	lr

080047d0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80047d0:	b084      	sub	sp, #16
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	f107 0014 	add.w	r0, r7, #20
 80047de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	bc80      	pop	{r7}
 800480c:	b004      	add	sp, #16
 800480e:	4770      	bx	lr

08004810 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004810:	b480      	push	{r7}
 8004812:	b09b      	sub	sp, #108	; 0x6c
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	b29b      	uxth	r3, r3
 800482e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004836:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	78db      	ldrb	r3, [r3, #3]
 800483e:	2b03      	cmp	r3, #3
 8004840:	d81f      	bhi.n	8004882 <USB_ActivateEndpoint+0x72>
 8004842:	a201      	add	r2, pc, #4	; (adr r2, 8004848 <USB_ActivateEndpoint+0x38>)
 8004844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004848:	08004859 	.word	0x08004859
 800484c:	08004875 	.word	0x08004875
 8004850:	0800488b 	.word	0x0800488b
 8004854:	08004867 	.word	0x08004867
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004858:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800485c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004860:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004864:	e012      	b.n	800488c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004866:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800486a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800486e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004872:	e00b      	b.n	800488c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004874:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004878:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800487c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004880:	e004      	b.n	800488c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004888:	e000      	b.n	800488c <USB_ActivateEndpoint+0x7c>
      break;
 800488a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	441a      	add	r2, r3
 8004896:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800489a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800489e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	4313      	orrs	r3, r2
 80048ce:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	441a      	add	r2, r3
 80048dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80048e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	7b1b      	ldrb	r3, [r3, #12]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f040 8149 	bne.w	8004b90 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	785b      	ldrb	r3, [r3, #1]
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 8084 	beq.w	8004a10 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004912:	b29b      	uxth	r3, r3
 8004914:	461a      	mov	r2, r3
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	4413      	add	r3, r2
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	011a      	lsls	r2, r3, #4
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800492a:	613b      	str	r3, [r7, #16]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	88db      	ldrh	r3, [r3, #6]
 8004930:	085b      	lsrs	r3, r3, #1
 8004932:	b29b      	uxth	r3, r3
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	81fb      	strh	r3, [r7, #14]
 800494a:	89fb      	ldrh	r3, [r7, #14]
 800494c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004950:	2b00      	cmp	r3, #0
 8004952:	d01b      	beq.n	800498c <USB_ActivateEndpoint+0x17c>
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4413      	add	r3, r2
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	b29b      	uxth	r3, r3
 8004962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496a:	81bb      	strh	r3, [r7, #12]
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	441a      	add	r2, r3
 8004976:	89bb      	ldrh	r3, [r7, #12]
 8004978:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800497c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004984:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004988:	b29b      	uxth	r3, r3
 800498a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	78db      	ldrb	r3, [r3, #3]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d020      	beq.n	80049d6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049aa:	813b      	strh	r3, [r7, #8]
 80049ac:	893b      	ldrh	r3, [r7, #8]
 80049ae:	f083 0320 	eor.w	r3, r3, #32
 80049b2:	813b      	strh	r3, [r7, #8]
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	441a      	add	r2, r3
 80049be:	893b      	ldrh	r3, [r7, #8]
 80049c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	8013      	strh	r3, [r2, #0]
 80049d4:	e27f      	b.n	8004ed6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ec:	817b      	strh	r3, [r7, #10]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	441a      	add	r2, r3
 80049f8:	897b      	ldrh	r3, [r7, #10]
 80049fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	8013      	strh	r3, [r2, #0]
 8004a0e:	e262      	b.n	8004ed6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a20:	4413      	add	r3, r2
 8004a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	011a      	lsls	r2, r3, #4
 8004a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004a32:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	88db      	ldrh	r3, [r3, #6]
 8004a38:	085b      	lsrs	r3, r3, #1
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a42:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	627b      	str	r3, [r7, #36]	; 0x24
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	461a      	mov	r2, r3
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	4413      	add	r3, r2
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	011a      	lsls	r2, r3, #4
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	4413      	add	r3, r2
 8004a62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a66:	623b      	str	r3, [r7, #32]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d112      	bne.n	8004a96 <USB_ActivateEndpoint+0x286>
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	6a3b      	ldr	r3, [r7, #32]
 8004a7e:	801a      	strh	r2, [r3, #0]
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	881b      	ldrh	r3, [r3, #0]
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	801a      	strh	r2, [r3, #0]
 8004a94:	e02f      	b.n	8004af6 <USB_ActivateEndpoint+0x2e6>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	2b3e      	cmp	r3, #62	; 0x3e
 8004a9c:	d813      	bhi.n	8004ac6 <USB_ActivateEndpoint+0x2b6>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	085b      	lsrs	r3, r3, #1
 8004aa4:	663b      	str	r3, [r7, #96]	; 0x60
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <USB_ActivateEndpoint+0x2a8>
 8004ab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	663b      	str	r3, [r7, #96]	; 0x60
 8004ab8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	029b      	lsls	r3, r3, #10
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	801a      	strh	r2, [r3, #0]
 8004ac4:	e017      	b.n	8004af6 <USB_ActivateEndpoint+0x2e6>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	095b      	lsrs	r3, r3, #5
 8004acc:	663b      	str	r3, [r7, #96]	; 0x60
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f003 031f 	and.w	r3, r3, #31
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d102      	bne.n	8004ae0 <USB_ActivateEndpoint+0x2d0>
 8004ada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004adc:	3b01      	subs	r3, #1
 8004ade:	663b      	str	r3, [r7, #96]	; 0x60
 8004ae0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	029b      	lsls	r3, r3, #10
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	83fb      	strh	r3, [r7, #30]
 8004b04:	8bfb      	ldrh	r3, [r7, #30]
 8004b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d01b      	beq.n	8004b46 <USB_ActivateEndpoint+0x336>
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	881b      	ldrh	r3, [r3, #0]
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b24:	83bb      	strh	r3, [r7, #28]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	441a      	add	r2, r3
 8004b30:	8bbb      	ldrh	r3, [r7, #28]
 8004b32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5c:	837b      	strh	r3, [r7, #26]
 8004b5e:	8b7b      	ldrh	r3, [r7, #26]
 8004b60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b64:	837b      	strh	r3, [r7, #26]
 8004b66:	8b7b      	ldrh	r3, [r7, #26]
 8004b68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b6c:	837b      	strh	r3, [r7, #26]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	441a      	add	r2, r3
 8004b78:	8b7b      	ldrh	r3, [r7, #26]
 8004b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	8013      	strh	r3, [r2, #0]
 8004b8e:	e1a2      	b.n	8004ed6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	441a      	add	r2, r3
 8004bb4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004bb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	461a      	mov	r2, r3
 8004bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bdc:	4413      	add	r3, r2
 8004bde:	65bb      	str	r3, [r7, #88]	; 0x58
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	011a      	lsls	r2, r3, #4
 8004be6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bee:	657b      	str	r3, [r7, #84]	; 0x54
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	891b      	ldrh	r3, [r3, #8]
 8004bf4:	085b      	lsrs	r3, r3, #1
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bfe:	801a      	strh	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	653b      	str	r3, [r7, #80]	; 0x50
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c10:	4413      	add	r3, r2
 8004c12:	653b      	str	r3, [r7, #80]	; 0x50
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	011a      	lsls	r2, r3, #4
 8004c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	895b      	ldrh	r3, [r3, #10]
 8004c28:	085b      	lsrs	r3, r3, #1
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c32:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	785b      	ldrb	r3, [r3, #1]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f040 8091 	bne.w	8004d60 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	881b      	ldrh	r3, [r3, #0]
 8004c4a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004c4c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d01b      	beq.n	8004c8e <USB_ActivateEndpoint+0x47e>
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	441a      	add	r2, r3
 8004c78:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	873b      	strh	r3, [r7, #56]	; 0x38
 8004c9c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d01b      	beq.n	8004cde <USB_ActivateEndpoint+0x4ce>
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cbc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	441a      	add	r2, r3
 8004cc8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cd6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004cf6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004cf8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004cfc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004cfe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004d00:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d04:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	441a      	add	r2, r3
 8004d10:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d3c:	867b      	strh	r3, [r7, #50]	; 0x32
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	441a      	add	r2, r3
 8004d48:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	8013      	strh	r3, [r2, #0]
 8004d5e:	e0ba      	b.n	8004ed6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004d70:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d01d      	beq.n	8004db8 <USB_ActivateEndpoint+0x5a8>
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d92:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	441a      	add	r2, r3
 8004da0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004da4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004dc8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d01d      	beq.n	8004e10 <USB_ActivateEndpoint+0x600>
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	441a      	add	r2, r3
 8004df8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	78db      	ldrb	r3, [r3, #3]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d024      	beq.n	8004e62 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004e32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004e36:	f083 0320 	eor.w	r3, r3, #32
 8004e3a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	441a      	add	r2, r3
 8004e48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004e4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	8013      	strh	r3, [r2, #0]
 8004e60:	e01d      	b.n	8004e9e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e78:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	441a      	add	r2, r3
 8004e86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	441a      	add	r2, r3
 8004ec0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004ed6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	376c      	adds	r7, #108	; 0x6c
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr

08004ee4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b08d      	sub	sp, #52	; 0x34
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	7b1b      	ldrb	r3, [r3, #12]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f040 808e 	bne.w	8005014 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	785b      	ldrb	r3, [r3, #1]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d044      	beq.n	8004f8a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	81bb      	strh	r3, [r7, #12]
 8004f0e:	89bb      	ldrh	r3, [r7, #12]
 8004f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d01b      	beq.n	8004f50 <USB_DeactivateEndpoint+0x6c>
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2e:	817b      	strh	r3, [r7, #10]
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	441a      	add	r2, r3
 8004f3a:	897b      	ldrh	r3, [r7, #10]
 8004f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4413      	add	r3, r2
 8004f5a:	881b      	ldrh	r3, [r3, #0]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f66:	813b      	strh	r3, [r7, #8]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	441a      	add	r2, r3
 8004f72:	893b      	ldrh	r3, [r7, #8]
 8004f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	8013      	strh	r3, [r2, #0]
 8004f88:	e192      	b.n	80052b0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	827b      	strh	r3, [r7, #18]
 8004f98:	8a7b      	ldrh	r3, [r7, #18]
 8004f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d01b      	beq.n	8004fda <USB_DeactivateEndpoint+0xf6>
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb8:	823b      	strh	r3, [r7, #16]
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	441a      	add	r2, r3
 8004fc4:	8a3b      	ldrh	r3, [r7, #16]
 8004fc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff0:	81fb      	strh	r3, [r7, #14]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	441a      	add	r2, r3
 8004ffc:	89fb      	ldrh	r3, [r7, #14]
 8004ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800500a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800500e:	b29b      	uxth	r3, r3
 8005010:	8013      	strh	r3, [r2, #0]
 8005012:	e14d      	b.n	80052b0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	785b      	ldrb	r3, [r3, #1]
 8005018:	2b00      	cmp	r3, #0
 800501a:	f040 80a5 	bne.w	8005168 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	843b      	strh	r3, [r7, #32]
 800502c:	8c3b      	ldrh	r3, [r7, #32]
 800502e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d01b      	beq.n	800506e <USB_DeactivateEndpoint+0x18a>
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	881b      	ldrh	r3, [r3, #0]
 8005042:	b29b      	uxth	r3, r3
 8005044:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504c:	83fb      	strh	r3, [r7, #30]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	441a      	add	r2, r3
 8005058:	8bfb      	ldrh	r3, [r7, #30]
 800505a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800505e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005062:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800506a:	b29b      	uxth	r3, r3
 800506c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4413      	add	r3, r2
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	83bb      	strh	r3, [r7, #28]
 800507c:	8bbb      	ldrh	r3, [r7, #28]
 800507e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005082:	2b00      	cmp	r3, #0
 8005084:	d01b      	beq.n	80050be <USB_DeactivateEndpoint+0x1da>
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4413      	add	r3, r2
 8005090:	881b      	ldrh	r3, [r3, #0]
 8005092:	b29b      	uxth	r3, r3
 8005094:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509c:	837b      	strh	r3, [r7, #26]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	441a      	add	r2, r3
 80050a8:	8b7b      	ldrh	r3, [r7, #26]
 80050aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	881b      	ldrh	r3, [r3, #0]
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d4:	833b      	strh	r3, [r7, #24]
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	441a      	add	r2, r3
 80050e0:	8b3b      	ldrh	r3, [r7, #24]
 80050e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	b29b      	uxth	r3, r3
 8005104:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510c:	82fb      	strh	r3, [r7, #22]
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	441a      	add	r2, r3
 8005118:	8afb      	ldrh	r3, [r7, #22]
 800511a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800511e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800512a:	b29b      	uxth	r3, r3
 800512c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	b29b      	uxth	r3, r3
 800513c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005144:	82bb      	strh	r3, [r7, #20]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	441a      	add	r2, r3
 8005150:	8abb      	ldrh	r3, [r7, #20]
 8005152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800515a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800515e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005162:	b29b      	uxth	r3, r3
 8005164:	8013      	strh	r3, [r2, #0]
 8005166:	e0a3      	b.n	80052b0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	881b      	ldrh	r3, [r3, #0]
 8005174:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005176:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d01b      	beq.n	80051b8 <USB_DeactivateEndpoint+0x2d4>
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	b29b      	uxth	r3, r3
 800518e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005196:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	441a      	add	r2, r3
 80051a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80051a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80051c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80051c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d01b      	beq.n	8005208 <USB_DeactivateEndpoint+0x324>
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	b29b      	uxth	r3, r3
 80051de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e6:	853b      	strh	r3, [r7, #40]	; 0x28
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	441a      	add	r2, r3
 80051f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80051f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005200:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005204:	b29b      	uxth	r3, r3
 8005206:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	b29b      	uxth	r3, r3
 8005216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800521a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	441a      	add	r2, r3
 800522a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800522c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005234:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800523c:	b29b      	uxth	r3, r3
 800523e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	b29b      	uxth	r3, r3
 800524e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005256:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	441a      	add	r2, r3
 8005262:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800526c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005274:	b29b      	uxth	r3, r3
 8005276:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	b29b      	uxth	r3, r3
 8005286:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800528a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	441a      	add	r2, r3
 800529a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800529c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3734      	adds	r7, #52	; 0x34
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bc80      	pop	{r7}
 80052ba:	4770      	bx	lr

080052bc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b0c4      	sub	sp, #272	; 0x110
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	1d3b      	adds	r3, r7, #4
 80052c4:	6018      	str	r0, [r3, #0]
 80052c6:	463b      	mov	r3, r7
 80052c8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052ca:	463b      	mov	r3, r7
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	785b      	ldrb	r3, [r3, #1]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	f040 8557 	bne.w	8005d84 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80052d6:	463b      	mov	r3, r7
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	699a      	ldr	r2, [r3, #24]
 80052dc:	463b      	mov	r3, r7
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d905      	bls.n	80052f2 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80052e6:	463b      	mov	r3, r7
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80052f0:	e004      	b.n	80052fc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80052f2:	463b      	mov	r3, r7
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80052fc:	463b      	mov	r3, r7
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	7b1b      	ldrb	r3, [r3, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d12c      	bne.n	8005360 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005306:	463b      	mov	r3, r7
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6959      	ldr	r1, [r3, #20]
 800530c:	463b      	mov	r3, r7
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	88da      	ldrh	r2, [r3, #6]
 8005312:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005316:	b29b      	uxth	r3, r3
 8005318:	1d38      	adds	r0, r7, #4
 800531a:	6800      	ldr	r0, [r0, #0]
 800531c:	f001 fa2c 	bl	8006778 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005320:	1d3b      	adds	r3, r7, #4
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	617b      	str	r3, [r7, #20]
 8005326:	1d3b      	adds	r3, r7, #4
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800532e:	b29b      	uxth	r3, r3
 8005330:	461a      	mov	r2, r3
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	4413      	add	r3, r2
 8005336:	617b      	str	r3, [r7, #20]
 8005338:	463b      	mov	r3, r7
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	011a      	lsls	r2, r3, #4
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	4413      	add	r3, r2
 8005344:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005348:	f107 0310 	add.w	r3, r7, #16
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005352:	b29a      	uxth	r2, r3
 8005354:	f107 0310 	add.w	r3, r7, #16
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	801a      	strh	r2, [r3, #0]
 800535c:	f000 bcdd 	b.w	8005d1a <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005360:	463b      	mov	r3, r7
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	78db      	ldrb	r3, [r3, #3]
 8005366:	2b02      	cmp	r3, #2
 8005368:	f040 8347 	bne.w	80059fa <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800536c:	463b      	mov	r3, r7
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6a1a      	ldr	r2, [r3, #32]
 8005372:	463b      	mov	r3, r7
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	429a      	cmp	r2, r3
 800537a:	f240 82eb 	bls.w	8005954 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800537e:	1d3b      	adds	r3, r7, #4
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	463b      	mov	r3, r7
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	b29b      	uxth	r3, r3
 8005390:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005398:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800539c:	1d3b      	adds	r3, r7, #4
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	463b      	mov	r3, r7
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	441a      	add	r2, r3
 80053aa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80053ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053b6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80053ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053be:	b29b      	uxth	r3, r3
 80053c0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80053c2:	463b      	mov	r3, r7
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6a1a      	ldr	r2, [r3, #32]
 80053c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053cc:	1ad2      	subs	r2, r2, r3
 80053ce:	463b      	mov	r3, r7
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80053d4:	1d3b      	adds	r3, r7, #4
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	463b      	mov	r3, r7
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	881b      	ldrh	r3, [r3, #0]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 8159 	beq.w	80056a2 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80053f0:	1d3b      	adds	r3, r7, #4
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	637b      	str	r3, [r7, #52]	; 0x34
 80053f6:	463b      	mov	r3, r7
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	785b      	ldrb	r3, [r3, #1]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d164      	bne.n	80054ca <USB_EPStartXfer+0x20e>
 8005400:	1d3b      	adds	r3, r7, #4
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005406:	1d3b      	adds	r3, r7, #4
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800540e:	b29b      	uxth	r3, r3
 8005410:	461a      	mov	r2, r3
 8005412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005414:	4413      	add	r3, r2
 8005416:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005418:	463b      	mov	r3, r7
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	011a      	lsls	r2, r3, #4
 8005420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005422:	4413      	add	r3, r2
 8005424:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005428:	62bb      	str	r3, [r7, #40]	; 0x28
 800542a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800542e:	2b00      	cmp	r3, #0
 8005430:	d112      	bne.n	8005458 <USB_EPStartXfer+0x19c>
 8005432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	b29b      	uxth	r3, r3
 8005438:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800543c:	b29a      	uxth	r2, r3
 800543e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005440:	801a      	strh	r2, [r3, #0]
 8005442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	b29b      	uxth	r3, r3
 8005448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800544c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005450:	b29a      	uxth	r2, r3
 8005452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005454:	801a      	strh	r2, [r3, #0]
 8005456:	e054      	b.n	8005502 <USB_EPStartXfer+0x246>
 8005458:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800545c:	2b3e      	cmp	r3, #62	; 0x3e
 800545e:	d817      	bhi.n	8005490 <USB_EPStartXfer+0x1d4>
 8005460:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005464:	085b      	lsrs	r3, r3, #1
 8005466:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800546a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d004      	beq.n	8005480 <USB_EPStartXfer+0x1c4>
 8005476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800547a:	3301      	adds	r3, #1
 800547c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005484:	b29b      	uxth	r3, r3
 8005486:	029b      	lsls	r3, r3, #10
 8005488:	b29a      	uxth	r2, r3
 800548a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548c:	801a      	strh	r2, [r3, #0]
 800548e:	e038      	b.n	8005502 <USB_EPStartXfer+0x246>
 8005490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005494:	095b      	lsrs	r3, r3, #5
 8005496:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800549a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800549e:	f003 031f 	and.w	r3, r3, #31
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d104      	bne.n	80054b0 <USB_EPStartXfer+0x1f4>
 80054a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054aa:	3b01      	subs	r3, #1
 80054ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80054b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	029b      	lsls	r3, r3, #10
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c6:	801a      	strh	r2, [r3, #0]
 80054c8:	e01b      	b.n	8005502 <USB_EPStartXfer+0x246>
 80054ca:	463b      	mov	r3, r7
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	785b      	ldrb	r3, [r3, #1]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d116      	bne.n	8005502 <USB_EPStartXfer+0x246>
 80054d4:	1d3b      	adds	r3, r7, #4
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054dc:	b29b      	uxth	r3, r3
 80054de:	461a      	mov	r2, r3
 80054e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e2:	4413      	add	r3, r2
 80054e4:	637b      	str	r3, [r7, #52]	; 0x34
 80054e6:	463b      	mov	r3, r7
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	011a      	lsls	r2, r3, #4
 80054ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f0:	4413      	add	r3, r2
 80054f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054f6:	633b      	str	r3, [r7, #48]	; 0x30
 80054f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005500:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005502:	463b      	mov	r3, r7
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	895b      	ldrh	r3, [r3, #10]
 8005508:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800550c:	463b      	mov	r3, r7
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6959      	ldr	r1, [r3, #20]
 8005512:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005516:	b29b      	uxth	r3, r3
 8005518:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800551c:	1d38      	adds	r0, r7, #4
 800551e:	6800      	ldr	r0, [r0, #0]
 8005520:	f001 f92a 	bl	8006778 <USB_WritePMA>
            ep->xfer_buff += len;
 8005524:	463b      	mov	r3, r7
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695a      	ldr	r2, [r3, #20]
 800552a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800552e:	441a      	add	r2, r3
 8005530:	463b      	mov	r3, r7
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005536:	463b      	mov	r3, r7
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6a1a      	ldr	r2, [r3, #32]
 800553c:	463b      	mov	r3, r7
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	429a      	cmp	r2, r3
 8005544:	d909      	bls.n	800555a <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8005546:	463b      	mov	r3, r7
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6a1a      	ldr	r2, [r3, #32]
 800554c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005550:	1ad2      	subs	r2, r2, r3
 8005552:	463b      	mov	r3, r7
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	621a      	str	r2, [r3, #32]
 8005558:	e008      	b.n	800556c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800555a:	463b      	mov	r3, r7
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005564:	463b      	mov	r3, r7
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2200      	movs	r2, #0
 800556a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800556c:	463b      	mov	r3, r7
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	785b      	ldrb	r3, [r3, #1]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d164      	bne.n	8005640 <USB_EPStartXfer+0x384>
 8005576:	1d3b      	adds	r3, r7, #4
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	61fb      	str	r3, [r7, #28]
 800557c:	1d3b      	adds	r3, r7, #4
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005584:	b29b      	uxth	r3, r3
 8005586:	461a      	mov	r2, r3
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	4413      	add	r3, r2
 800558c:	61fb      	str	r3, [r7, #28]
 800558e:	463b      	mov	r3, r7
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	011a      	lsls	r2, r3, #4
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	4413      	add	r3, r2
 800559a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800559e:	61bb      	str	r3, [r7, #24]
 80055a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d112      	bne.n	80055ce <USB_EPStartXfer+0x312>
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	801a      	strh	r2, [r3, #0]
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	b29b      	uxth	r3, r3
 80055be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	801a      	strh	r2, [r3, #0]
 80055cc:	e057      	b.n	800567e <USB_EPStartXfer+0x3c2>
 80055ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055d2:	2b3e      	cmp	r3, #62	; 0x3e
 80055d4:	d817      	bhi.n	8005606 <USB_EPStartXfer+0x34a>
 80055d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055da:	085b      	lsrs	r3, r3, #1
 80055dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80055e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d004      	beq.n	80055f6 <USB_EPStartXfer+0x33a>
 80055ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80055f0:	3301      	adds	r3, #1
 80055f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80055f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	029b      	lsls	r3, r3, #10
 80055fe:	b29a      	uxth	r2, r3
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	801a      	strh	r2, [r3, #0]
 8005604:	e03b      	b.n	800567e <USB_EPStartXfer+0x3c2>
 8005606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800560a:	095b      	lsrs	r3, r3, #5
 800560c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005610:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005614:	f003 031f 	and.w	r3, r3, #31
 8005618:	2b00      	cmp	r3, #0
 800561a:	d104      	bne.n	8005626 <USB_EPStartXfer+0x36a>
 800561c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005620:	3b01      	subs	r3, #1
 8005622:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005626:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800562a:	b29b      	uxth	r3, r3
 800562c:	029b      	lsls	r3, r3, #10
 800562e:	b29b      	uxth	r3, r3
 8005630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005638:	b29a      	uxth	r2, r3
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	801a      	strh	r2, [r3, #0]
 800563e:	e01e      	b.n	800567e <USB_EPStartXfer+0x3c2>
 8005640:	463b      	mov	r3, r7
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	785b      	ldrb	r3, [r3, #1]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d119      	bne.n	800567e <USB_EPStartXfer+0x3c2>
 800564a:	1d3b      	adds	r3, r7, #4
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	627b      	str	r3, [r7, #36]	; 0x24
 8005650:	1d3b      	adds	r3, r7, #4
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005658:	b29b      	uxth	r3, r3
 800565a:	461a      	mov	r2, r3
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	4413      	add	r3, r2
 8005660:	627b      	str	r3, [r7, #36]	; 0x24
 8005662:	463b      	mov	r3, r7
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	011a      	lsls	r2, r3, #4
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566c:	4413      	add	r3, r2
 800566e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005672:	623b      	str	r3, [r7, #32]
 8005674:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005678:	b29a      	uxth	r2, r3
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800567e:	463b      	mov	r3, r7
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	891b      	ldrh	r3, [r3, #8]
 8005684:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005688:	463b      	mov	r3, r7
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6959      	ldr	r1, [r3, #20]
 800568e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005692:	b29b      	uxth	r3, r3
 8005694:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005698:	1d38      	adds	r0, r7, #4
 800569a:	6800      	ldr	r0, [r0, #0]
 800569c:	f001 f86c 	bl	8006778 <USB_WritePMA>
 80056a0:	e33b      	b.n	8005d1a <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056a2:	463b      	mov	r3, r7
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	785b      	ldrb	r3, [r3, #1]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d164      	bne.n	8005776 <USB_EPStartXfer+0x4ba>
 80056ac:	1d3b      	adds	r3, r7, #4
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056b2:	1d3b      	adds	r3, r7, #4
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	461a      	mov	r2, r3
 80056be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056c0:	4413      	add	r3, r2
 80056c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056c4:	463b      	mov	r3, r7
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	011a      	lsls	r2, r3, #4
 80056cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ce:	4413      	add	r3, r2
 80056d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80056d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d112      	bne.n	8005704 <USB_EPStartXfer+0x448>
 80056de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ec:	801a      	strh	r2, [r3, #0]
 80056ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056f0:	881b      	ldrh	r3, [r3, #0]
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005700:	801a      	strh	r2, [r3, #0]
 8005702:	e057      	b.n	80057b4 <USB_EPStartXfer+0x4f8>
 8005704:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005708:	2b3e      	cmp	r3, #62	; 0x3e
 800570a:	d817      	bhi.n	800573c <USB_EPStartXfer+0x480>
 800570c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005710:	085b      	lsrs	r3, r3, #1
 8005712:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005716:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	d004      	beq.n	800572c <USB_EPStartXfer+0x470>
 8005722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005726:	3301      	adds	r3, #1
 8005728:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800572c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005730:	b29b      	uxth	r3, r3
 8005732:	029b      	lsls	r3, r3, #10
 8005734:	b29a      	uxth	r2, r3
 8005736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005738:	801a      	strh	r2, [r3, #0]
 800573a:	e03b      	b.n	80057b4 <USB_EPStartXfer+0x4f8>
 800573c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005740:	095b      	lsrs	r3, r3, #5
 8005742:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005746:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800574a:	f003 031f 	and.w	r3, r3, #31
 800574e:	2b00      	cmp	r3, #0
 8005750:	d104      	bne.n	800575c <USB_EPStartXfer+0x4a0>
 8005752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005756:	3b01      	subs	r3, #1
 8005758:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800575c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005760:	b29b      	uxth	r3, r3
 8005762:	029b      	lsls	r3, r3, #10
 8005764:	b29b      	uxth	r3, r3
 8005766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800576a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800576e:	b29a      	uxth	r2, r3
 8005770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005772:	801a      	strh	r2, [r3, #0]
 8005774:	e01e      	b.n	80057b4 <USB_EPStartXfer+0x4f8>
 8005776:	463b      	mov	r3, r7
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	785b      	ldrb	r3, [r3, #1]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d119      	bne.n	80057b4 <USB_EPStartXfer+0x4f8>
 8005780:	1d3b      	adds	r3, r7, #4
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	657b      	str	r3, [r7, #84]	; 0x54
 8005786:	1d3b      	adds	r3, r7, #4
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800578e:	b29b      	uxth	r3, r3
 8005790:	461a      	mov	r2, r3
 8005792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005794:	4413      	add	r3, r2
 8005796:	657b      	str	r3, [r7, #84]	; 0x54
 8005798:	463b      	mov	r3, r7
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	011a      	lsls	r2, r3, #4
 80057a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057a2:	4413      	add	r3, r2
 80057a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057a8:	653b      	str	r3, [r7, #80]	; 0x50
 80057aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80057b4:	463b      	mov	r3, r7
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	891b      	ldrh	r3, [r3, #8]
 80057ba:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057be:	463b      	mov	r3, r7
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6959      	ldr	r1, [r3, #20]
 80057c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80057ce:	1d38      	adds	r0, r7, #4
 80057d0:	6800      	ldr	r0, [r0, #0]
 80057d2:	f000 ffd1 	bl	8006778 <USB_WritePMA>
            ep->xfer_buff += len;
 80057d6:	463b      	mov	r3, r7
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	695a      	ldr	r2, [r3, #20]
 80057dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057e0:	441a      	add	r2, r3
 80057e2:	463b      	mov	r3, r7
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80057e8:	463b      	mov	r3, r7
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6a1a      	ldr	r2, [r3, #32]
 80057ee:	463b      	mov	r3, r7
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d909      	bls.n	800580c <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80057f8:	463b      	mov	r3, r7
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6a1a      	ldr	r2, [r3, #32]
 80057fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005802:	1ad2      	subs	r2, r2, r3
 8005804:	463b      	mov	r3, r7
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	621a      	str	r2, [r3, #32]
 800580a:	e008      	b.n	800581e <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 800580c:	463b      	mov	r3, r7
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005816:	463b      	mov	r3, r7
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2200      	movs	r2, #0
 800581c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800581e:	1d3b      	adds	r3, r7, #4
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	647b      	str	r3, [r7, #68]	; 0x44
 8005824:	463b      	mov	r3, r7
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	785b      	ldrb	r3, [r3, #1]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d164      	bne.n	80058f8 <USB_EPStartXfer+0x63c>
 800582e:	1d3b      	adds	r3, r7, #4
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005834:	1d3b      	adds	r3, r7, #4
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800583c:	b29b      	uxth	r3, r3
 800583e:	461a      	mov	r2, r3
 8005840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005842:	4413      	add	r3, r2
 8005844:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005846:	463b      	mov	r3, r7
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	011a      	lsls	r2, r3, #4
 800584e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005850:	4413      	add	r3, r2
 8005852:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005856:	63bb      	str	r3, [r7, #56]	; 0x38
 8005858:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800585c:	2b00      	cmp	r3, #0
 800585e:	d112      	bne.n	8005886 <USB_EPStartXfer+0x5ca>
 8005860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	b29b      	uxth	r3, r3
 8005866:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800586a:	b29a      	uxth	r2, r3
 800586c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586e:	801a      	strh	r2, [r3, #0]
 8005870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	b29b      	uxth	r3, r3
 8005876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800587a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800587e:	b29a      	uxth	r2, r3
 8005880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005882:	801a      	strh	r2, [r3, #0]
 8005884:	e054      	b.n	8005930 <USB_EPStartXfer+0x674>
 8005886:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800588a:	2b3e      	cmp	r3, #62	; 0x3e
 800588c:	d817      	bhi.n	80058be <USB_EPStartXfer+0x602>
 800588e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005892:	085b      	lsrs	r3, r3, #1
 8005894:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005898:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d004      	beq.n	80058ae <USB_EPStartXfer+0x5f2>
 80058a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80058a8:	3301      	adds	r3, #1
 80058aa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80058ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	029b      	lsls	r3, r3, #10
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ba:	801a      	strh	r2, [r3, #0]
 80058bc:	e038      	b.n	8005930 <USB_EPStartXfer+0x674>
 80058be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058c2:	095b      	lsrs	r3, r3, #5
 80058c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80058c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058cc:	f003 031f 	and.w	r3, r3, #31
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d104      	bne.n	80058de <USB_EPStartXfer+0x622>
 80058d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80058d8:	3b01      	subs	r3, #1
 80058da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80058de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	029b      	lsls	r3, r3, #10
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f4:	801a      	strh	r2, [r3, #0]
 80058f6:	e01b      	b.n	8005930 <USB_EPStartXfer+0x674>
 80058f8:	463b      	mov	r3, r7
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	785b      	ldrb	r3, [r3, #1]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d116      	bne.n	8005930 <USB_EPStartXfer+0x674>
 8005902:	1d3b      	adds	r3, r7, #4
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800590a:	b29b      	uxth	r3, r3
 800590c:	461a      	mov	r2, r3
 800590e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005910:	4413      	add	r3, r2
 8005912:	647b      	str	r3, [r7, #68]	; 0x44
 8005914:	463b      	mov	r3, r7
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	011a      	lsls	r2, r3, #4
 800591c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800591e:	4413      	add	r3, r2
 8005920:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005924:	643b      	str	r3, [r7, #64]	; 0x40
 8005926:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800592a:	b29a      	uxth	r2, r3
 800592c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800592e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005930:	463b      	mov	r3, r7
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	895b      	ldrh	r3, [r3, #10]
 8005936:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800593a:	463b      	mov	r3, r7
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6959      	ldr	r1, [r3, #20]
 8005940:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005944:	b29b      	uxth	r3, r3
 8005946:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800594a:	1d38      	adds	r0, r7, #4
 800594c:	6800      	ldr	r0, [r0, #0]
 800594e:	f000 ff13 	bl	8006778 <USB_WritePMA>
 8005952:	e1e2      	b.n	8005d1a <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005954:	463b      	mov	r3, r7
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800595e:	1d3b      	adds	r3, r7, #4
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	463b      	mov	r3, r7
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	b29b      	uxth	r3, r3
 8005970:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005978:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800597c:	1d3b      	adds	r3, r7, #4
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	463b      	mov	r3, r7
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	441a      	add	r2, r3
 800598a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800598e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800599a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800599e:	b29b      	uxth	r3, r3
 80059a0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80059a2:	1d3b      	adds	r3, r7, #4
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	663b      	str	r3, [r7, #96]	; 0x60
 80059a8:	1d3b      	adds	r3, r7, #4
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	461a      	mov	r2, r3
 80059b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059b6:	4413      	add	r3, r2
 80059b8:	663b      	str	r3, [r7, #96]	; 0x60
 80059ba:	463b      	mov	r3, r7
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	011a      	lsls	r2, r3, #4
 80059c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059c4:	4413      	add	r3, r2
 80059c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059d4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80059d6:	463b      	mov	r3, r7
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	891b      	ldrh	r3, [r3, #8]
 80059dc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059e0:	463b      	mov	r3, r7
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6959      	ldr	r1, [r3, #20]
 80059e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80059f0:	1d38      	adds	r0, r7, #4
 80059f2:	6800      	ldr	r0, [r0, #0]
 80059f4:	f000 fec0 	bl	8006778 <USB_WritePMA>
 80059f8:	e18f      	b.n	8005d1a <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80059fa:	1d3b      	adds	r3, r7, #4
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	463b      	mov	r3, r7
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 808f 	beq.w	8005b34 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a16:	1d3b      	adds	r3, r7, #4
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a1c:	463b      	mov	r3, r7
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	785b      	ldrb	r3, [r3, #1]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d164      	bne.n	8005af0 <USB_EPStartXfer+0x834>
 8005a26:	1d3b      	adds	r3, r7, #4
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	673b      	str	r3, [r7, #112]	; 0x70
 8005a2c:	1d3b      	adds	r3, r7, #4
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	461a      	mov	r2, r3
 8005a38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a3a:	4413      	add	r3, r2
 8005a3c:	673b      	str	r3, [r7, #112]	; 0x70
 8005a3e:	463b      	mov	r3, r7
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	011a      	lsls	r2, r3, #4
 8005a46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a48:	4413      	add	r3, r2
 8005a4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d112      	bne.n	8005a7e <USB_EPStartXfer+0x7c2>
 8005a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a66:	801a      	strh	r2, [r3, #0]
 8005a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a6a:	881b      	ldrh	r3, [r3, #0]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a7a:	801a      	strh	r2, [r3, #0]
 8005a7c:	e054      	b.n	8005b28 <USB_EPStartXfer+0x86c>
 8005a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a82:	2b3e      	cmp	r3, #62	; 0x3e
 8005a84:	d817      	bhi.n	8005ab6 <USB_EPStartXfer+0x7fa>
 8005a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a8a:	085b      	lsrs	r3, r3, #1
 8005a8c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d004      	beq.n	8005aa6 <USB_EPStartXfer+0x7ea>
 8005a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	029b      	lsls	r3, r3, #10
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab2:	801a      	strh	r2, [r3, #0]
 8005ab4:	e038      	b.n	8005b28 <USB_EPStartXfer+0x86c>
 8005ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aba:	095b      	lsrs	r3, r3, #5
 8005abc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ac4:	f003 031f 	and.w	r3, r3, #31
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d104      	bne.n	8005ad6 <USB_EPStartXfer+0x81a>
 8005acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	029b      	lsls	r3, r3, #10
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ae4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aec:	801a      	strh	r2, [r3, #0]
 8005aee:	e01b      	b.n	8005b28 <USB_EPStartXfer+0x86c>
 8005af0:	463b      	mov	r3, r7
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	785b      	ldrb	r3, [r3, #1]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d116      	bne.n	8005b28 <USB_EPStartXfer+0x86c>
 8005afa:	1d3b      	adds	r3, r7, #4
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	461a      	mov	r2, r3
 8005b06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b08:	4413      	add	r3, r2
 8005b0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b0c:	463b      	mov	r3, r7
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	011a      	lsls	r2, r3, #4
 8005b14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b16:	4413      	add	r3, r2
 8005b18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b1c:	677b      	str	r3, [r7, #116]	; 0x74
 8005b1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b26:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005b28:	463b      	mov	r3, r7
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	895b      	ldrh	r3, [r3, #10]
 8005b2e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005b32:	e097      	b.n	8005c64 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b34:	463b      	mov	r3, r7
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	785b      	ldrb	r3, [r3, #1]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d168      	bne.n	8005c10 <USB_EPStartXfer+0x954>
 8005b3e:	1d3b      	adds	r3, r7, #4
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b46:	1d3b      	adds	r3, r7, #4
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b56:	4413      	add	r3, r2
 8005b58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b5c:	463b      	mov	r3, r7
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	011a      	lsls	r2, r3, #4
 8005b64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b68:	4413      	add	r3, r2
 8005b6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b6e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d112      	bne.n	8005b9e <USB_EPStartXfer+0x8e2>
 8005b78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b86:	801a      	strh	r2, [r3, #0]
 8005b88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b9a:	801a      	strh	r2, [r3, #0]
 8005b9c:	e05d      	b.n	8005c5a <USB_EPStartXfer+0x99e>
 8005b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ba2:	2b3e      	cmp	r3, #62	; 0x3e
 8005ba4:	d817      	bhi.n	8005bd6 <USB_EPStartXfer+0x91a>
 8005ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005baa:	085b      	lsrs	r3, r3, #1
 8005bac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d004      	beq.n	8005bc6 <USB_EPStartXfer+0x90a>
 8005bbc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bc6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	029b      	lsls	r3, r3, #10
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005bd2:	801a      	strh	r2, [r3, #0]
 8005bd4:	e041      	b.n	8005c5a <USB_EPStartXfer+0x99e>
 8005bd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bda:	095b      	lsrs	r3, r3, #5
 8005bdc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005be4:	f003 031f 	and.w	r3, r3, #31
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d104      	bne.n	8005bf6 <USB_EPStartXfer+0x93a>
 8005bec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bf6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	029b      	lsls	r3, r3, #10
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c0c:	801a      	strh	r2, [r3, #0]
 8005c0e:	e024      	b.n	8005c5a <USB_EPStartXfer+0x99e>
 8005c10:	463b      	mov	r3, r7
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	785b      	ldrb	r3, [r3, #1]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d11f      	bne.n	8005c5a <USB_EPStartXfer+0x99e>
 8005c1a:	1d3b      	adds	r3, r7, #4
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c22:	1d3b      	adds	r3, r7, #4
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c32:	4413      	add	r3, r2
 8005c34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c38:	463b      	mov	r3, r7
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	011a      	lsls	r2, r3, #4
 8005c40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c44:	4413      	add	r3, r2
 8005c46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c58:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c5a:	463b      	mov	r3, r7
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	891b      	ldrh	r3, [r3, #8]
 8005c60:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c64:	463b      	mov	r3, r7
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6959      	ldr	r1, [r3, #20]
 8005c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005c74:	1d38      	adds	r0, r7, #4
 8005c76:	6800      	ldr	r0, [r0, #0]
 8005c78:	f000 fd7e 	bl	8006778 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005c7c:	463b      	mov	r3, r7
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	785b      	ldrb	r3, [r3, #1]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d122      	bne.n	8005ccc <USB_EPStartXfer+0xa10>
 8005c86:	1d3b      	adds	r3, r7, #4
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	463b      	mov	r3, r7
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005ca4:	1d3b      	adds	r3, r7, #4
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	463b      	mov	r3, r7
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	441a      	add	r2, r3
 8005cb2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	8013      	strh	r3, [r2, #0]
 8005cca:	e026      	b.n	8005d1a <USB_EPStartXfer+0xa5e>
 8005ccc:	463b      	mov	r3, r7
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	785b      	ldrb	r3, [r3, #1]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d121      	bne.n	8005d1a <USB_EPStartXfer+0xa5e>
 8005cd6:	1d3b      	adds	r3, r7, #4
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	463b      	mov	r3, r7
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005cf4:	1d3b      	adds	r3, r7, #4
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	463b      	mov	r3, r7
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	441a      	add	r2, r3
 8005d02:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005d1a:	1d3b      	adds	r3, r7, #4
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	463b      	mov	r3, r7
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	f107 020e 	add.w	r2, r7, #14
 8005d30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d38:	8013      	strh	r3, [r2, #0]
 8005d3a:	f107 030e 	add.w	r3, r7, #14
 8005d3e:	f107 020e 	add.w	r2, r7, #14
 8005d42:	8812      	ldrh	r2, [r2, #0]
 8005d44:	f082 0210 	eor.w	r2, r2, #16
 8005d48:	801a      	strh	r2, [r3, #0]
 8005d4a:	f107 030e 	add.w	r3, r7, #14
 8005d4e:	f107 020e 	add.w	r2, r7, #14
 8005d52:	8812      	ldrh	r2, [r2, #0]
 8005d54:	f082 0220 	eor.w	r2, r2, #32
 8005d58:	801a      	strh	r2, [r3, #0]
 8005d5a:	1d3b      	adds	r3, r7, #4
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	463b      	mov	r3, r7
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	441a      	add	r2, r3
 8005d68:	f107 030e 	add.w	r3, r7, #14
 8005d6c:	881b      	ldrh	r3, [r3, #0]
 8005d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	8013      	strh	r3, [r2, #0]
 8005d82:	e3b5      	b.n	80064f0 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005d84:	463b      	mov	r3, r7
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	7b1b      	ldrb	r3, [r3, #12]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f040 8090 	bne.w	8005eb0 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005d90:	463b      	mov	r3, r7
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	699a      	ldr	r2, [r3, #24]
 8005d96:	463b      	mov	r3, r7
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d90e      	bls.n	8005dbe <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005da0:	463b      	mov	r3, r7
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8005daa:	463b      	mov	r3, r7
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	699a      	ldr	r2, [r3, #24]
 8005db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005db4:	1ad2      	subs	r2, r2, r3
 8005db6:	463b      	mov	r3, r7
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	619a      	str	r2, [r3, #24]
 8005dbc:	e008      	b.n	8005dd0 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8005dbe:	463b      	mov	r3, r7
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8005dc8:	463b      	mov	r3, r7
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005dd0:	1d3b      	adds	r3, r7, #4
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005dd8:	1d3b      	adds	r3, r7, #4
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	461a      	mov	r2, r3
 8005de4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005de8:	4413      	add	r3, r2
 8005dea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005dee:	463b      	mov	r3, r7
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	011a      	lsls	r2, r3, #4
 8005df6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d116      	bne.n	8005e3a <USB_EPStartXfer+0xb7e>
 8005e0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e1e:	801a      	strh	r2, [r3, #0]
 8005e20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e36:	801a      	strh	r2, [r3, #0]
 8005e38:	e32c      	b.n	8006494 <USB_EPStartXfer+0x11d8>
 8005e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e3e:	2b3e      	cmp	r3, #62	; 0x3e
 8005e40:	d818      	bhi.n	8005e74 <USB_EPStartXfer+0xbb8>
 8005e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e46:	085b      	lsrs	r3, r3, #1
 8005e48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005e4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d004      	beq.n	8005e62 <USB_EPStartXfer+0xba6>
 8005e58:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005e62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	029b      	lsls	r3, r3, #10
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e70:	801a      	strh	r2, [r3, #0]
 8005e72:	e30f      	b.n	8006494 <USB_EPStartXfer+0x11d8>
 8005e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e78:	095b      	lsrs	r3, r3, #5
 8005e7a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005e7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e82:	f003 031f 	and.w	r3, r3, #31
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d104      	bne.n	8005e94 <USB_EPStartXfer+0xbd8>
 8005e8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005e94:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	029b      	lsls	r3, r3, #10
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ea2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005eac:	801a      	strh	r2, [r3, #0]
 8005eae:	e2f1      	b.n	8006494 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005eb0:	463b      	mov	r3, r7
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	78db      	ldrb	r3, [r3, #3]
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	f040 818f 	bne.w	80061da <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005ebc:	463b      	mov	r3, r7
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	785b      	ldrb	r3, [r3, #1]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d175      	bne.n	8005fb2 <USB_EPStartXfer+0xcf6>
 8005ec6:	1d3b      	adds	r3, r7, #4
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ece:	1d3b      	adds	r3, r7, #4
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	461a      	mov	r2, r3
 8005eda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005ede:	4413      	add	r3, r2
 8005ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ee4:	463b      	mov	r3, r7
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	011a      	lsls	r2, r3, #4
 8005eec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ef6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005efa:	463b      	mov	r3, r7
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d116      	bne.n	8005f32 <USB_EPStartXfer+0xc76>
 8005f04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f16:	801a      	strh	r2, [r3, #0]
 8005f18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f2e:	801a      	strh	r2, [r3, #0]
 8005f30:	e065      	b.n	8005ffe <USB_EPStartXfer+0xd42>
 8005f32:	463b      	mov	r3, r7
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	2b3e      	cmp	r3, #62	; 0x3e
 8005f3a:	d81a      	bhi.n	8005f72 <USB_EPStartXfer+0xcb6>
 8005f3c:	463b      	mov	r3, r7
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	085b      	lsrs	r3, r3, #1
 8005f44:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f48:	463b      	mov	r3, r7
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d004      	beq.n	8005f60 <USB_EPStartXfer+0xca4>
 8005f56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	029b      	lsls	r3, r3, #10
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f6e:	801a      	strh	r2, [r3, #0]
 8005f70:	e045      	b.n	8005ffe <USB_EPStartXfer+0xd42>
 8005f72:	463b      	mov	r3, r7
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	095b      	lsrs	r3, r3, #5
 8005f7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f7e:	463b      	mov	r3, r7
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	f003 031f 	and.w	r3, r3, #31
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d104      	bne.n	8005f96 <USB_EPStartXfer+0xcda>
 8005f8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f90:	3b01      	subs	r3, #1
 8005f92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	029b      	lsls	r3, r3, #10
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fae:	801a      	strh	r2, [r3, #0]
 8005fb0:	e025      	b.n	8005ffe <USB_EPStartXfer+0xd42>
 8005fb2:	463b      	mov	r3, r7
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	785b      	ldrb	r3, [r3, #1]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d120      	bne.n	8005ffe <USB_EPStartXfer+0xd42>
 8005fbc:	1d3b      	adds	r3, r7, #4
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fc4:	1d3b      	adds	r3, r7, #4
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	461a      	mov	r2, r3
 8005fd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fda:	463b      	mov	r3, r7
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	011a      	lsls	r2, r3, #4
 8005fe2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ff0:	463b      	mov	r3, r7
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005ffc:	801a      	strh	r2, [r3, #0]
 8005ffe:	1d3b      	adds	r3, r7, #4
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006006:	463b      	mov	r3, r7
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	785b      	ldrb	r3, [r3, #1]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d175      	bne.n	80060fc <USB_EPStartXfer+0xe40>
 8006010:	1d3b      	adds	r3, r7, #4
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006018:	1d3b      	adds	r3, r7, #4
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006020:	b29b      	uxth	r3, r3
 8006022:	461a      	mov	r2, r3
 8006024:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006028:	4413      	add	r3, r2
 800602a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800602e:	463b      	mov	r3, r7
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	011a      	lsls	r2, r3, #4
 8006036:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800603a:	4413      	add	r3, r2
 800603c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006040:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006044:	463b      	mov	r3, r7
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d116      	bne.n	800607c <USB_EPStartXfer+0xdc0>
 800604e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	b29b      	uxth	r3, r3
 8006056:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800605a:	b29a      	uxth	r2, r3
 800605c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006060:	801a      	strh	r2, [r3, #0]
 8006062:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006066:	881b      	ldrh	r3, [r3, #0]
 8006068:	b29b      	uxth	r3, r3
 800606a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800606e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006072:	b29a      	uxth	r2, r3
 8006074:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006078:	801a      	strh	r2, [r3, #0]
 800607a:	e061      	b.n	8006140 <USB_EPStartXfer+0xe84>
 800607c:	463b      	mov	r3, r7
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	2b3e      	cmp	r3, #62	; 0x3e
 8006084:	d81a      	bhi.n	80060bc <USB_EPStartXfer+0xe00>
 8006086:	463b      	mov	r3, r7
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	085b      	lsrs	r3, r3, #1
 800608e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006092:	463b      	mov	r3, r7
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b00      	cmp	r3, #0
 800609e:	d004      	beq.n	80060aa <USB_EPStartXfer+0xdee>
 80060a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a4:	3301      	adds	r3, #1
 80060a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	029b      	lsls	r3, r3, #10
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060b8:	801a      	strh	r2, [r3, #0]
 80060ba:	e041      	b.n	8006140 <USB_EPStartXfer+0xe84>
 80060bc:	463b      	mov	r3, r7
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	095b      	lsrs	r3, r3, #5
 80060c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060c8:	463b      	mov	r3, r7
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	f003 031f 	and.w	r3, r3, #31
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d104      	bne.n	80060e0 <USB_EPStartXfer+0xe24>
 80060d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060da:	3b01      	subs	r3, #1
 80060dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	029b      	lsls	r3, r3, #10
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060f8:	801a      	strh	r2, [r3, #0]
 80060fa:	e021      	b.n	8006140 <USB_EPStartXfer+0xe84>
 80060fc:	463b      	mov	r3, r7
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	785b      	ldrb	r3, [r3, #1]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d11c      	bne.n	8006140 <USB_EPStartXfer+0xe84>
 8006106:	1d3b      	adds	r3, r7, #4
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800610e:	b29b      	uxth	r3, r3
 8006110:	461a      	mov	r2, r3
 8006112:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006116:	4413      	add	r3, r2
 8006118:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800611c:	463b      	mov	r3, r7
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	011a      	lsls	r2, r3, #4
 8006124:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006128:	4413      	add	r3, r2
 800612a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800612e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006132:	463b      	mov	r3, r7
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	b29a      	uxth	r2, r3
 800613a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800613e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006140:	463b      	mov	r3, r7
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	69db      	ldr	r3, [r3, #28]
 8006146:	2b00      	cmp	r3, #0
 8006148:	f000 81a4 	beq.w	8006494 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800614c:	1d3b      	adds	r3, r7, #4
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	463b      	mov	r3, r7
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006160:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d005      	beq.n	8006178 <USB_EPStartXfer+0xebc>
 800616c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10d      	bne.n	8006194 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006178:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800617c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006180:	2b00      	cmp	r3, #0
 8006182:	f040 8187 	bne.w	8006494 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006186:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800618a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618e:	2b00      	cmp	r3, #0
 8006190:	f040 8180 	bne.w	8006494 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006194:	1d3b      	adds	r3, r7, #4
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	463b      	mov	r3, r7
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ae:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80061b2:	1d3b      	adds	r3, r7, #4
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	463b      	mov	r3, r7
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	441a      	add	r2, r3
 80061c0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80061c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	8013      	strh	r3, [r2, #0]
 80061d8:	e15c      	b.n	8006494 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80061da:	463b      	mov	r3, r7
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	78db      	ldrb	r3, [r3, #3]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	f040 8155 	bne.w	8006490 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80061e6:	463b      	mov	r3, r7
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	699a      	ldr	r2, [r3, #24]
 80061ec:	463b      	mov	r3, r7
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d90e      	bls.n	8006214 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80061f6:	463b      	mov	r3, r7
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8006200:	463b      	mov	r3, r7
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	699a      	ldr	r2, [r3, #24]
 8006206:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800620a:	1ad2      	subs	r2, r2, r3
 800620c:	463b      	mov	r3, r7
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	619a      	str	r2, [r3, #24]
 8006212:	e008      	b.n	8006226 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8006214:	463b      	mov	r3, r7
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800621e:	463b      	mov	r3, r7
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2200      	movs	r2, #0
 8006224:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006226:	463b      	mov	r3, r7
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	785b      	ldrb	r3, [r3, #1]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d16f      	bne.n	8006310 <USB_EPStartXfer+0x1054>
 8006230:	1d3b      	adds	r3, r7, #4
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006238:	1d3b      	adds	r3, r7, #4
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006240:	b29b      	uxth	r3, r3
 8006242:	461a      	mov	r2, r3
 8006244:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006248:	4413      	add	r3, r2
 800624a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800624e:	463b      	mov	r3, r7
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	011a      	lsls	r2, r3, #4
 8006256:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800625a:	4413      	add	r3, r2
 800625c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006260:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006264:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006268:	2b00      	cmp	r3, #0
 800626a:	d116      	bne.n	800629a <USB_EPStartXfer+0xfde>
 800626c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006270:	881b      	ldrh	r3, [r3, #0]
 8006272:	b29b      	uxth	r3, r3
 8006274:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006278:	b29a      	uxth	r2, r3
 800627a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800627e:	801a      	strh	r2, [r3, #0]
 8006280:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	b29b      	uxth	r3, r3
 8006288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800628c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006290:	b29a      	uxth	r2, r3
 8006292:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006296:	801a      	strh	r2, [r3, #0]
 8006298:	e05f      	b.n	800635a <USB_EPStartXfer+0x109e>
 800629a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800629e:	2b3e      	cmp	r3, #62	; 0x3e
 80062a0:	d818      	bhi.n	80062d4 <USB_EPStartXfer+0x1018>
 80062a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062a6:	085b      	lsrs	r3, r3, #1
 80062a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d004      	beq.n	80062c2 <USB_EPStartXfer+0x1006>
 80062b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062bc:	3301      	adds	r3, #1
 80062be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	029b      	lsls	r3, r3, #10
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80062d0:	801a      	strh	r2, [r3, #0]
 80062d2:	e042      	b.n	800635a <USB_EPStartXfer+0x109e>
 80062d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062d8:	095b      	lsrs	r3, r3, #5
 80062da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062e2:	f003 031f 	and.w	r3, r3, #31
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d104      	bne.n	80062f4 <USB_EPStartXfer+0x1038>
 80062ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ee:	3b01      	subs	r3, #1
 80062f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	029b      	lsls	r3, r3, #10
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006302:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006306:	b29a      	uxth	r2, r3
 8006308:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800630c:	801a      	strh	r2, [r3, #0]
 800630e:	e024      	b.n	800635a <USB_EPStartXfer+0x109e>
 8006310:	463b      	mov	r3, r7
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	785b      	ldrb	r3, [r3, #1]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d11f      	bne.n	800635a <USB_EPStartXfer+0x109e>
 800631a:	1d3b      	adds	r3, r7, #4
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006322:	1d3b      	adds	r3, r7, #4
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800632a:	b29b      	uxth	r3, r3
 800632c:	461a      	mov	r2, r3
 800632e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006332:	4413      	add	r3, r2
 8006334:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006338:	463b      	mov	r3, r7
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	011a      	lsls	r2, r3, #4
 8006340:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006344:	4413      	add	r3, r2
 8006346:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800634a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800634e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006352:	b29a      	uxth	r2, r3
 8006354:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006358:	801a      	strh	r2, [r3, #0]
 800635a:	1d3b      	adds	r3, r7, #4
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006362:	463b      	mov	r3, r7
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	785b      	ldrb	r3, [r3, #1]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d16f      	bne.n	800644c <USB_EPStartXfer+0x1190>
 800636c:	1d3b      	adds	r3, r7, #4
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006374:	1d3b      	adds	r3, r7, #4
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800637c:	b29b      	uxth	r3, r3
 800637e:	461a      	mov	r2, r3
 8006380:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006384:	4413      	add	r3, r2
 8006386:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800638a:	463b      	mov	r3, r7
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	011a      	lsls	r2, r3, #4
 8006392:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006396:	4413      	add	r3, r2
 8006398:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800639c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80063a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d116      	bne.n	80063d6 <USB_EPStartXfer+0x111a>
 80063a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80063ba:	801a      	strh	r2, [r3, #0]
 80063bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80063d2:	801a      	strh	r2, [r3, #0]
 80063d4:	e05e      	b.n	8006494 <USB_EPStartXfer+0x11d8>
 80063d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063da:	2b3e      	cmp	r3, #62	; 0x3e
 80063dc:	d818      	bhi.n	8006410 <USB_EPStartXfer+0x1154>
 80063de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063e2:	085b      	lsrs	r3, r3, #1
 80063e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80063e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d004      	beq.n	80063fe <USB_EPStartXfer+0x1142>
 80063f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063f8:	3301      	adds	r3, #1
 80063fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80063fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006402:	b29b      	uxth	r3, r3
 8006404:	029b      	lsls	r3, r3, #10
 8006406:	b29a      	uxth	r2, r3
 8006408:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800640c:	801a      	strh	r2, [r3, #0]
 800640e:	e041      	b.n	8006494 <USB_EPStartXfer+0x11d8>
 8006410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006414:	095b      	lsrs	r3, r3, #5
 8006416:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800641a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800641e:	f003 031f 	and.w	r3, r3, #31
 8006422:	2b00      	cmp	r3, #0
 8006424:	d104      	bne.n	8006430 <USB_EPStartXfer+0x1174>
 8006426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800642a:	3b01      	subs	r3, #1
 800642c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006434:	b29b      	uxth	r3, r3
 8006436:	029b      	lsls	r3, r3, #10
 8006438:	b29b      	uxth	r3, r3
 800643a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800643e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006442:	b29a      	uxth	r2, r3
 8006444:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006448:	801a      	strh	r2, [r3, #0]
 800644a:	e023      	b.n	8006494 <USB_EPStartXfer+0x11d8>
 800644c:	463b      	mov	r3, r7
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	785b      	ldrb	r3, [r3, #1]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d11e      	bne.n	8006494 <USB_EPStartXfer+0x11d8>
 8006456:	1d3b      	adds	r3, r7, #4
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800645e:	b29b      	uxth	r3, r3
 8006460:	461a      	mov	r2, r3
 8006462:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006466:	4413      	add	r3, r2
 8006468:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800646c:	463b      	mov	r3, r7
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	011a      	lsls	r2, r3, #4
 8006474:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006478:	4413      	add	r3, r2
 800647a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800647e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006482:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006486:	b29a      	uxth	r2, r3
 8006488:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800648c:	801a      	strh	r2, [r3, #0]
 800648e:	e001      	b.n	8006494 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e02e      	b.n	80064f2 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006494:	1d3b      	adds	r3, r7, #4
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	463b      	mov	r3, r7
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ae:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80064b2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80064b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80064ba:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80064be:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80064c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80064c6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80064ca:	1d3b      	adds	r3, r7, #4
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	463b      	mov	r3, r7
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	441a      	add	r2, r3
 80064d8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80064dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	785b      	ldrb	r3, [r3, #1]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d020      	beq.n	8006550 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	b29b      	uxth	r3, r3
 800651c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006524:	81bb      	strh	r3, [r7, #12]
 8006526:	89bb      	ldrh	r3, [r7, #12]
 8006528:	f083 0310 	eor.w	r3, r3, #16
 800652c:	81bb      	strh	r3, [r7, #12]
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	441a      	add	r2, r3
 8006538:	89bb      	ldrh	r3, [r7, #12]
 800653a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800653e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800654a:	b29b      	uxth	r3, r3
 800654c:	8013      	strh	r3, [r2, #0]
 800654e:	e01f      	b.n	8006590 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	b29b      	uxth	r3, r3
 800655e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006566:	81fb      	strh	r3, [r7, #14]
 8006568:	89fb      	ldrh	r3, [r7, #14]
 800656a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800656e:	81fb      	strh	r3, [r7, #14]
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	441a      	add	r2, r3
 800657a:	89fb      	ldrh	r3, [r7, #14]
 800657c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006580:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800658c:	b29b      	uxth	r3, r3
 800658e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	bc80      	pop	{r7}
 800659a:	4770      	bx	lr

0800659c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	7b1b      	ldrb	r3, [r3, #12]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f040 809d 	bne.w	80066ea <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	785b      	ldrb	r3, [r3, #1]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d04c      	beq.n	8006652 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	881b      	ldrh	r3, [r3, #0]
 80065c4:	823b      	strh	r3, [r7, #16]
 80065c6:	8a3b      	ldrh	r3, [r7, #16]
 80065c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01b      	beq.n	8006608 <USB_EPClearStall+0x6c>
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	4413      	add	r3, r2
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e6:	81fb      	strh	r3, [r7, #14]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	441a      	add	r2, r3
 80065f2:	89fb      	ldrh	r3, [r7, #14]
 80065f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006600:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006604:	b29b      	uxth	r3, r3
 8006606:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	78db      	ldrb	r3, [r3, #3]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d06c      	beq.n	80066ea <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	881b      	ldrh	r3, [r3, #0]
 800661c:	b29b      	uxth	r3, r3
 800661e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006626:	81bb      	strh	r3, [r7, #12]
 8006628:	89bb      	ldrh	r3, [r7, #12]
 800662a:	f083 0320 	eor.w	r3, r3, #32
 800662e:	81bb      	strh	r3, [r7, #12]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	441a      	add	r2, r3
 800663a:	89bb      	ldrh	r3, [r7, #12]
 800663c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800664c:	b29b      	uxth	r3, r3
 800664e:	8013      	strh	r3, [r2, #0]
 8006650:	e04b      	b.n	80066ea <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	82fb      	strh	r3, [r7, #22]
 8006660:	8afb      	ldrh	r3, [r7, #22]
 8006662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d01b      	beq.n	80066a2 <USB_EPClearStall+0x106>
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	881b      	ldrh	r3, [r3, #0]
 8006676:	b29b      	uxth	r3, r3
 8006678:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800667c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006680:	82bb      	strh	r3, [r7, #20]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	441a      	add	r2, r3
 800668c:	8abb      	ldrh	r3, [r7, #20]
 800668e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006696:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800669a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800669e:	b29b      	uxth	r3, r3
 80066a0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	881b      	ldrh	r3, [r3, #0]
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b8:	827b      	strh	r3, [r7, #18]
 80066ba:	8a7b      	ldrh	r3, [r7, #18]
 80066bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066c0:	827b      	strh	r3, [r7, #18]
 80066c2:	8a7b      	ldrh	r3, [r7, #18]
 80066c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80066c8:	827b      	strh	r3, [r7, #18]
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	441a      	add	r2, r3
 80066d4:	8a7b      	ldrh	r3, [r7, #18]
 80066d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	371c      	adds	r7, #28
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bc80      	pop	{r7}
 80066f4:	4770      	bx	lr

080066f6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b083      	sub	sp, #12
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
 80066fe:	460b      	mov	r3, r1
 8006700:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006702:	78fb      	ldrb	r3, [r7, #3]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d103      	bne.n	8006710 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2280      	movs	r2, #128	; 0x80
 800670c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	bc80      	pop	{r7}
 800671a:	4770      	bx	lr

0800671c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	bc80      	pop	{r7}
 800672e:	4770      	bx	lr

08006730 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	370c      	adds	r7, #12
 800673e:	46bd      	mov	sp, r7
 8006740:	bc80      	pop	{r7}
 8006742:	4770      	bx	lr

08006744 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006752:	b29b      	uxth	r3, r3
 8006754:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006756:	68fb      	ldr	r3, [r7, #12]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	bc80      	pop	{r7}
 8006760:	4770      	bx	lr

08006762 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	bc80      	pop	{r7}
 8006776:	4770      	bx	lr

08006778 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006778:	b480      	push	{r7}
 800677a:	b08d      	sub	sp, #52	; 0x34
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	4611      	mov	r1, r2
 8006784:	461a      	mov	r2, r3
 8006786:	460b      	mov	r3, r1
 8006788:	80fb      	strh	r3, [r7, #6]
 800678a:	4613      	mov	r3, r2
 800678c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800678e:	88bb      	ldrh	r3, [r7, #4]
 8006790:	3301      	adds	r3, #1
 8006792:	085b      	lsrs	r3, r3, #1
 8006794:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800679e:	88fb      	ldrh	r3, [r7, #6]
 80067a0:	005a      	lsls	r2, r3, #1
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	4413      	add	r3, r2
 80067a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067aa:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067b0:	e01e      	b.n	80067f0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80067b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ba:	3301      	adds	r3, #1
 80067bc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	021b      	lsls	r3, r3, #8
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	461a      	mov	r2, r3
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80067d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067da:	3302      	adds	r3, #2
 80067dc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80067de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e0:	3302      	adds	r3, #2
 80067e2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	3301      	adds	r3, #1
 80067e8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80067ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ec:	3b01      	subs	r3, #1
 80067ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1dd      	bne.n	80067b2 <USB_WritePMA+0x3a>
  }
}
 80067f6:	bf00      	nop
 80067f8:	bf00      	nop
 80067fa:	3734      	adds	r7, #52	; 0x34
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bc80      	pop	{r7}
 8006800:	4770      	bx	lr

08006802 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006802:	b480      	push	{r7}
 8006804:	b08b      	sub	sp, #44	; 0x2c
 8006806:	af00      	add	r7, sp, #0
 8006808:	60f8      	str	r0, [r7, #12]
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	4611      	mov	r1, r2
 800680e:	461a      	mov	r2, r3
 8006810:	460b      	mov	r3, r1
 8006812:	80fb      	strh	r3, [r7, #6]
 8006814:	4613      	mov	r3, r2
 8006816:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006818:	88bb      	ldrh	r3, [r7, #4]
 800681a:	085b      	lsrs	r3, r3, #1
 800681c:	b29b      	uxth	r3, r3
 800681e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006828:	88fb      	ldrh	r3, [r7, #6]
 800682a:	005a      	lsls	r2, r3, #1
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	4413      	add	r3, r2
 8006830:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006834:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	627b      	str	r3, [r7, #36]	; 0x24
 800683a:	e01b      	b.n	8006874 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800683c:	6a3b      	ldr	r3, [r7, #32]
 800683e:	881b      	ldrh	r3, [r3, #0]
 8006840:	b29b      	uxth	r3, r3
 8006842:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	3302      	adds	r3, #2
 8006848:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	b2da      	uxtb	r2, r3
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	3301      	adds	r3, #1
 8006856:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	0a1b      	lsrs	r3, r3, #8
 800685c:	b2da      	uxtb	r2, r3
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	3301      	adds	r3, #1
 8006866:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	3302      	adds	r3, #2
 800686c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	3b01      	subs	r3, #1
 8006872:	627b      	str	r3, [r7, #36]	; 0x24
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1e0      	bne.n	800683c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800687a:	88bb      	ldrh	r3, [r7, #4]
 800687c:	f003 0301 	and.w	r3, r3, #1
 8006880:	b29b      	uxth	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d007      	beq.n	8006896 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	881b      	ldrh	r3, [r3, #0]
 800688a:	b29b      	uxth	r3, r3
 800688c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	b2da      	uxtb	r2, r3
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	701a      	strb	r2, [r3, #0]
  }
}
 8006896:	bf00      	nop
 8006898:	372c      	adds	r7, #44	; 0x2c
 800689a:	46bd      	mov	sp, r7
 800689c:	bc80      	pop	{r7}
 800689e:	4770      	bx	lr

080068a0 <IO_init>:
 */
#include "InputOutputInterface.h"
IO_interface inputOutputs;


void IO_init(void){
 80068a0:	b480      	push	{r7}
 80068a2:	af00      	add	r7, sp, #0
	inputOutputs.switch_1=false;
 80068a4:	4b19      	ldr	r3, [pc, #100]	; (800690c <IO_init+0x6c>)
 80068a6:	2200      	movs	r2, #0
 80068a8:	701a      	strb	r2, [r3, #0]
	inputOutputs.switch_2=false;
 80068aa:	4b18      	ldr	r3, [pc, #96]	; (800690c <IO_init+0x6c>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	705a      	strb	r2, [r3, #1]
	inputOutputs.switch_3=false;
 80068b0:	4b16      	ldr	r3, [pc, #88]	; (800690c <IO_init+0x6c>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	709a      	strb	r2, [r3, #2]
	inputOutputs.switch_4=false;
 80068b6:	4b15      	ldr	r3, [pc, #84]	; (800690c <IO_init+0x6c>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	70da      	strb	r2, [r3, #3]
	inputOutputs.switch_5=false;
 80068bc:	4b13      	ldr	r3, [pc, #76]	; (800690c <IO_init+0x6c>)
 80068be:	2200      	movs	r2, #0
 80068c0:	711a      	strb	r2, [r3, #4]
	inputOutputs.switch_6=false;
 80068c2:	4b12      	ldr	r3, [pc, #72]	; (800690c <IO_init+0x6c>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	715a      	strb	r2, [r3, #5]
	inputOutputs.switch_7=false;
 80068c8:	4b10      	ldr	r3, [pc, #64]	; (800690c <IO_init+0x6c>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	719a      	strb	r2, [r3, #6]
	inputOutputs.switch_8=false;
 80068ce:	4b0f      	ldr	r3, [pc, #60]	; (800690c <IO_init+0x6c>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	71da      	strb	r2, [r3, #7]

	inputOutputs.relay_1=false;
 80068d4:	4b0d      	ldr	r3, [pc, #52]	; (800690c <IO_init+0x6c>)
 80068d6:	2200      	movs	r2, #0
 80068d8:	721a      	strb	r2, [r3, #8]
	inputOutputs.relay_2=false;
 80068da:	4b0c      	ldr	r3, [pc, #48]	; (800690c <IO_init+0x6c>)
 80068dc:	2200      	movs	r2, #0
 80068de:	725a      	strb	r2, [r3, #9]
	inputOutputs.relay_3=false;
 80068e0:	4b0a      	ldr	r3, [pc, #40]	; (800690c <IO_init+0x6c>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	729a      	strb	r2, [r3, #10]
	inputOutputs.relay_4=false;
 80068e6:	4b09      	ldr	r3, [pc, #36]	; (800690c <IO_init+0x6c>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	72da      	strb	r2, [r3, #11]
	inputOutputs.relay_5=false;
 80068ec:	4b07      	ldr	r3, [pc, #28]	; (800690c <IO_init+0x6c>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	731a      	strb	r2, [r3, #12]
	inputOutputs.relay_6=false;
 80068f2:	4b06      	ldr	r3, [pc, #24]	; (800690c <IO_init+0x6c>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	735a      	strb	r2, [r3, #13]
	inputOutputs.relay_7=false;
 80068f8:	4b04      	ldr	r3, [pc, #16]	; (800690c <IO_init+0x6c>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	739a      	strb	r2, [r3, #14]
	inputOutputs.relay_8=false;
 80068fe:	4b03      	ldr	r3, [pc, #12]	; (800690c <IO_init+0x6c>)
 8006900:	2200      	movs	r2, #0
 8006902:	73da      	strb	r2, [r3, #15]
}
 8006904:	bf00      	nop
 8006906:	46bd      	mov	sp, r7
 8006908:	bc80      	pop	{r7}
 800690a:	4770      	bx	lr
 800690c:	20003a8c 	.word	0x20003a8c

08006910 <IO_readInputSwitchs>:

void IO_readInputSwitchs(void){
 8006910:	b580      	push	{r7, lr}
 8006912:	af00      	add	r7, sp, #0
	inputOutputs.switch_1=!SW_I_1;
 8006914:	2102      	movs	r1, #2
 8006916:	4830      	ldr	r0, [pc, #192]	; (80069d8 <IO_readInputSwitchs+0xc8>)
 8006918:	f7fb f890 	bl	8001a3c <HAL_GPIO_ReadPin>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	bf0c      	ite	eq
 8006922:	2301      	moveq	r3, #1
 8006924:	2300      	movne	r3, #0
 8006926:	b2da      	uxtb	r2, r3
 8006928:	4b2c      	ldr	r3, [pc, #176]	; (80069dc <IO_readInputSwitchs+0xcc>)
 800692a:	701a      	strb	r2, [r3, #0]
	inputOutputs.switch_2=!SW_I_2;
 800692c:	2101      	movs	r1, #1
 800692e:	482a      	ldr	r0, [pc, #168]	; (80069d8 <IO_readInputSwitchs+0xc8>)
 8006930:	f7fb f884 	bl	8001a3c <HAL_GPIO_ReadPin>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	bf0c      	ite	eq
 800693a:	2301      	moveq	r3, #1
 800693c:	2300      	movne	r3, #0
 800693e:	b2da      	uxtb	r2, r3
 8006940:	4b26      	ldr	r3, [pc, #152]	; (80069dc <IO_readInputSwitchs+0xcc>)
 8006942:	705a      	strb	r2, [r3, #1]
	inputOutputs.switch_3=!SW_I_3;
 8006944:	2180      	movs	r1, #128	; 0x80
 8006946:	4826      	ldr	r0, [pc, #152]	; (80069e0 <IO_readInputSwitchs+0xd0>)
 8006948:	f7fb f878 	bl	8001a3c <HAL_GPIO_ReadPin>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	bf0c      	ite	eq
 8006952:	2301      	moveq	r3, #1
 8006954:	2300      	movne	r3, #0
 8006956:	b2da      	uxtb	r2, r3
 8006958:	4b20      	ldr	r3, [pc, #128]	; (80069dc <IO_readInputSwitchs+0xcc>)
 800695a:	709a      	strb	r2, [r3, #2]
	inputOutputs.switch_4=!SW_I_4;
 800695c:	2110      	movs	r1, #16
 800695e:	481e      	ldr	r0, [pc, #120]	; (80069d8 <IO_readInputSwitchs+0xc8>)
 8006960:	f7fb f86c 	bl	8001a3c <HAL_GPIO_ReadPin>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	bf0c      	ite	eq
 800696a:	2301      	moveq	r3, #1
 800696c:	2300      	movne	r3, #0
 800696e:	b2da      	uxtb	r2, r3
 8006970:	4b1a      	ldr	r3, [pc, #104]	; (80069dc <IO_readInputSwitchs+0xcc>)
 8006972:	70da      	strb	r2, [r3, #3]
	inputOutputs.switch_5=!SW_I_5;
 8006974:	2120      	movs	r1, #32
 8006976:	481a      	ldr	r0, [pc, #104]	; (80069e0 <IO_readInputSwitchs+0xd0>)
 8006978:	f7fb f860 	bl	8001a3c <HAL_GPIO_ReadPin>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	bf0c      	ite	eq
 8006982:	2301      	moveq	r3, #1
 8006984:	2300      	movne	r3, #0
 8006986:	b2da      	uxtb	r2, r3
 8006988:	4b14      	ldr	r3, [pc, #80]	; (80069dc <IO_readInputSwitchs+0xcc>)
 800698a:	711a      	strb	r2, [r3, #4]
	inputOutputs.switch_6=!SW_I_6;
 800698c:	2110      	movs	r1, #16
 800698e:	4814      	ldr	r0, [pc, #80]	; (80069e0 <IO_readInputSwitchs+0xd0>)
 8006990:	f7fb f854 	bl	8001a3c <HAL_GPIO_ReadPin>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	bf0c      	ite	eq
 800699a:	2301      	moveq	r3, #1
 800699c:	2300      	movne	r3, #0
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	4b0e      	ldr	r3, [pc, #56]	; (80069dc <IO_readInputSwitchs+0xcc>)
 80069a2:	715a      	strb	r2, [r3, #5]
	inputOutputs.switch_7=!SW_I_7;
 80069a4:	2102      	movs	r1, #2
 80069a6:	480e      	ldr	r0, [pc, #56]	; (80069e0 <IO_readInputSwitchs+0xd0>)
 80069a8:	f7fb f848 	bl	8001a3c <HAL_GPIO_ReadPin>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	bf0c      	ite	eq
 80069b2:	2301      	moveq	r3, #1
 80069b4:	2300      	movne	r3, #0
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	4b08      	ldr	r3, [pc, #32]	; (80069dc <IO_readInputSwitchs+0xcc>)
 80069ba:	719a      	strb	r2, [r3, #6]
	inputOutputs.switch_8=!SW_I_8;
 80069bc:	2108      	movs	r1, #8
 80069be:	4806      	ldr	r0, [pc, #24]	; (80069d8 <IO_readInputSwitchs+0xc8>)
 80069c0:	f7fb f83c 	bl	8001a3c <HAL_GPIO_ReadPin>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	bf0c      	ite	eq
 80069ca:	2301      	moveq	r3, #1
 80069cc:	2300      	movne	r3, #0
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	4b02      	ldr	r3, [pc, #8]	; (80069dc <IO_readInputSwitchs+0xcc>)
 80069d2:	71da      	strb	r2, [r3, #7]
}
 80069d4:	bf00      	nop
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	40010c00 	.word	0x40010c00
 80069dc:	20003a8c 	.word	0x20003a8c
 80069e0:	40010800 	.word	0x40010800

080069e4 <IO_testInputOutput>:
//	if(inputOutputs.relay_6)R_6_O_HIGH; else R_6_O_LOW;
	//if(inputOutputs.relay_7)R_7_O_HIGH; else R_7_O_LOW;
	if(inputOutputs.relay_8)R_8_O_HIGH; else R_8_O_LOW;
}
uint8_t testBtye[1];
void IO_testInputOutput(void){
 80069e4:	b598      	push	{r3, r4, r7, lr}
 80069e6:	af00      	add	r7, sp, #0
	if(inputOutputs.switch_5)R_5_O_HIGH; else R_5_O_LOW;
	if(inputOutputs.switch_6)R_6_O_HIGH; else R_6_O_LOW;
	if(inputOutputs.switch_7)R_7_O_HIGH; else R_7_O_LOW;
	if(inputOutputs.switch_8)R_8_O_HIGH; else R_8_O_LOW;*/

	testBtye[0]=IO_inputsBitsPackageToByte(inputOutputs);
 80069e8:	4b0c      	ldr	r3, [pc, #48]	; (8006a1c <IO_testInputOutput+0x38>)
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	2000      	movs	r0, #0
 80069ee:	4610      	mov	r0, r2
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	2100      	movs	r1, #0
 80069f4:	4611      	mov	r1, r2
 80069f6:	689c      	ldr	r4, [r3, #8]
 80069f8:	2200      	movs	r2, #0
 80069fa:	4622      	mov	r2, r4
 80069fc:	68dc      	ldr	r4, [r3, #12]
 80069fe:	2300      	movs	r3, #0
 8006a00:	4623      	mov	r3, r4
 8006a02:	f000 f80f 	bl	8006a24 <IO_inputsBitsPackageToByte>
 8006a06:	4603      	mov	r3, r0
 8006a08:	461a      	mov	r2, r3
 8006a0a:	4b05      	ldr	r3, [pc, #20]	; (8006a20 <IO_testInputOutput+0x3c>)
 8006a0c:	701a      	strb	r2, [r3, #0]
	IO_outputByteToBitsPackage(testBtye[0]);
 8006a0e:	4b04      	ldr	r3, [pc, #16]	; (8006a20 <IO_testInputOutput+0x3c>)
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f000 f838 	bl	8006a88 <IO_outputByteToBitsPackage>

}
 8006a18:	bf00      	nop
 8006a1a:	bd98      	pop	{r3, r4, r7, pc}
 8006a1c:	20003a8c 	.word	0x20003a8c
 8006a20:	20003a88 	.word	0x20003a88

08006a24 <IO_inputsBitsPackageToByte>:

uint8_t IO_inputsBitsPackageToByte(IO_interface inputBits){
 8006a24:	b490      	push	{r4, r7}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	463c      	mov	r4, r7
 8006a2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t bitPackage;
	bitPackage = (inputBits.switch_8 << 7) | (inputBits.switch_7 << 6) |
 8006a30:	79fb      	ldrb	r3, [r7, #7]
 8006a32:	01db      	lsls	r3, r3, #7
 8006a34:	b25a      	sxtb	r2, r3
 8006a36:	79bb      	ldrb	r3, [r7, #6]
 8006a38:	019b      	lsls	r3, r3, #6
 8006a3a:	b25b      	sxtb	r3, r3
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	b25a      	sxtb	r2, r3
	(inputBits.switch_6 << 5) | (inputBits.switch_5 << 4) |
 8006a40:	797b      	ldrb	r3, [r7, #5]
 8006a42:	015b      	lsls	r3, r3, #5
	bitPackage = (inputBits.switch_8 << 7) | (inputBits.switch_7 << 6) |
 8006a44:	b25b      	sxtb	r3, r3
 8006a46:	4313      	orrs	r3, r2
 8006a48:	b25a      	sxtb	r2, r3
	(inputBits.switch_6 << 5) | (inputBits.switch_5 << 4) |
 8006a4a:	793b      	ldrb	r3, [r7, #4]
 8006a4c:	011b      	lsls	r3, r3, #4
 8006a4e:	b25b      	sxtb	r3, r3
 8006a50:	4313      	orrs	r3, r2
 8006a52:	b25a      	sxtb	r2, r3
	(inputBits.switch_4 << 3) | (inputBits.switch_3 << 2) |
 8006a54:	78fb      	ldrb	r3, [r7, #3]
 8006a56:	00db      	lsls	r3, r3, #3
	(inputBits.switch_6 << 5) | (inputBits.switch_5 << 4) |
 8006a58:	b25b      	sxtb	r3, r3
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	b25a      	sxtb	r2, r3
	(inputBits.switch_4 << 3) | (inputBits.switch_3 << 2) |
 8006a5e:	78bb      	ldrb	r3, [r7, #2]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	b25b      	sxtb	r3, r3
 8006a64:	4313      	orrs	r3, r2
 8006a66:	b25a      	sxtb	r2, r3
    (inputBits.switch_2 << 1) | (inputBits.switch_1);
 8006a68:	787b      	ldrb	r3, [r7, #1]
 8006a6a:	005b      	lsls	r3, r3, #1
	(inputBits.switch_4 << 3) | (inputBits.switch_3 << 2) |
 8006a6c:	b25b      	sxtb	r3, r3
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	b25a      	sxtb	r2, r3
    (inputBits.switch_2 << 1) | (inputBits.switch_1);
 8006a72:	783b      	ldrb	r3, [r7, #0]
 8006a74:	b25b      	sxtb	r3, r3
 8006a76:	4313      	orrs	r3, r2
 8006a78:	b25b      	sxtb	r3, r3
	bitPackage = (inputBits.switch_8 << 7) | (inputBits.switch_7 << 6) |
 8006a7a:	75fb      	strb	r3, [r7, #23]
	return bitPackage;
 8006a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3718      	adds	r7, #24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bc90      	pop	{r4, r7}
 8006a86:	4770      	bx	lr

08006a88 <IO_outputByteToBitsPackage>:

void IO_outputByteToBitsPackage(uint8_t byte){
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	4603      	mov	r3, r0
 8006a90:	71fb      	strb	r3, [r7, #7]
	inputOutputs.relay_1=(bool)(byte & IO_BIT_0);
 8006a92:	79fb      	ldrb	r3, [r7, #7]
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	bf14      	ite	ne
 8006a9c:	2301      	movne	r3, #1
 8006a9e:	2300      	moveq	r3, #0
 8006aa0:	b2da      	uxtb	r2, r3
 8006aa2:	4b25      	ldr	r3, [pc, #148]	; (8006b38 <IO_outputByteToBitsPackage+0xb0>)
 8006aa4:	721a      	strb	r2, [r3, #8]
	inputOutputs.relay_2=(bool)(byte & IO_BIT_1);
 8006aa6:	79fb      	ldrb	r3, [r7, #7]
 8006aa8:	f003 0302 	and.w	r3, r3, #2
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	bf14      	ite	ne
 8006ab0:	2301      	movne	r3, #1
 8006ab2:	2300      	moveq	r3, #0
 8006ab4:	b2da      	uxtb	r2, r3
 8006ab6:	4b20      	ldr	r3, [pc, #128]	; (8006b38 <IO_outputByteToBitsPackage+0xb0>)
 8006ab8:	725a      	strb	r2, [r3, #9]
	inputOutputs.relay_3=(bool)(byte & IO_BIT_2);
 8006aba:	79fb      	ldrb	r3, [r7, #7]
 8006abc:	f003 0304 	and.w	r3, r3, #4
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	bf14      	ite	ne
 8006ac4:	2301      	movne	r3, #1
 8006ac6:	2300      	moveq	r3, #0
 8006ac8:	b2da      	uxtb	r2, r3
 8006aca:	4b1b      	ldr	r3, [pc, #108]	; (8006b38 <IO_outputByteToBitsPackage+0xb0>)
 8006acc:	729a      	strb	r2, [r3, #10]
	inputOutputs.relay_4=(bool)(byte & IO_BIT_3);
 8006ace:	79fb      	ldrb	r3, [r7, #7]
 8006ad0:	f003 0308 	and.w	r3, r3, #8
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	bf14      	ite	ne
 8006ad8:	2301      	movne	r3, #1
 8006ada:	2300      	moveq	r3, #0
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	4b16      	ldr	r3, [pc, #88]	; (8006b38 <IO_outputByteToBitsPackage+0xb0>)
 8006ae0:	72da      	strb	r2, [r3, #11]
	inputOutputs.relay_5=(bool)(byte & IO_BIT_4);
 8006ae2:	79fb      	ldrb	r3, [r7, #7]
 8006ae4:	f003 0310 	and.w	r3, r3, #16
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	bf14      	ite	ne
 8006aec:	2301      	movne	r3, #1
 8006aee:	2300      	moveq	r3, #0
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	4b11      	ldr	r3, [pc, #68]	; (8006b38 <IO_outputByteToBitsPackage+0xb0>)
 8006af4:	731a      	strb	r2, [r3, #12]
	inputOutputs.relay_6=(bool)(byte & IO_BIT_5);
 8006af6:	79fb      	ldrb	r3, [r7, #7]
 8006af8:	f003 0320 	and.w	r3, r3, #32
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	bf14      	ite	ne
 8006b00:	2301      	movne	r3, #1
 8006b02:	2300      	moveq	r3, #0
 8006b04:	b2da      	uxtb	r2, r3
 8006b06:	4b0c      	ldr	r3, [pc, #48]	; (8006b38 <IO_outputByteToBitsPackage+0xb0>)
 8006b08:	735a      	strb	r2, [r3, #13]
	inputOutputs.relay_7=(bool)(byte & IO_BIT_6);
 8006b0a:	79fb      	ldrb	r3, [r7, #7]
 8006b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	bf14      	ite	ne
 8006b14:	2301      	movne	r3, #1
 8006b16:	2300      	moveq	r3, #0
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	4b07      	ldr	r3, [pc, #28]	; (8006b38 <IO_outputByteToBitsPackage+0xb0>)
 8006b1c:	739a      	strb	r2, [r3, #14]
	inputOutputs.relay_8=(bool)(byte & IO_BIT_7);
 8006b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	09db      	lsrs	r3, r3, #7
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	4b03      	ldr	r3, [pc, #12]	; (8006b38 <IO_outputByteToBitsPackage+0xb0>)
 8006b2a:	73da      	strb	r2, [r3, #15]
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bc80      	pop	{r7}
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	20003a8c 	.word	0x20003a8c

08006b3c <IO_getInputOutputsVal>:

IO_interface IO_getInputOutputsVal(void){return inputOutputs;}
 8006b3c:	b490      	push	{r4, r7}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a07      	ldr	r2, [pc, #28]	; (8006b64 <IO_getInputOutputsVal+0x28>)
 8006b48:	6814      	ldr	r4, [r2, #0]
 8006b4a:	6850      	ldr	r0, [r2, #4]
 8006b4c:	6891      	ldr	r1, [r2, #8]
 8006b4e:	68d2      	ldr	r2, [r2, #12]
 8006b50:	601c      	str	r4, [r3, #0]
 8006b52:	6058      	str	r0, [r3, #4]
 8006b54:	6099      	str	r1, [r3, #8]
 8006b56:	60da      	str	r2, [r3, #12]
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bc90      	pop	{r4, r7}
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	20003a8c 	.word	0x20003a8c

08006b68 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	460b      	mov	r3, r1
 8006b72:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	7c1b      	ldrb	r3, [r3, #16]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d115      	bne.n	8006bac <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b84:	2202      	movs	r2, #2
 8006b86:	2181      	movs	r1, #129	; 0x81
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f004 fdcc 	bl	800b726 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b98:	2202      	movs	r2, #2
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f004 fdc2 	bl	800b726 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006baa:	e012      	b.n	8006bd2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006bac:	2340      	movs	r3, #64	; 0x40
 8006bae:	2202      	movs	r2, #2
 8006bb0:	2181      	movs	r1, #129	; 0x81
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f004 fdb7 	bl	800b726 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006bbe:	2340      	movs	r3, #64	; 0x40
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	2101      	movs	r1, #1
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f004 fdae 	bl	800b726 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006bd2:	2308      	movs	r3, #8
 8006bd4:	2203      	movs	r2, #3
 8006bd6:	2182      	movs	r1, #130	; 0x82
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f004 fda4 	bl	800b726 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006be4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006be8:	f004 fec4 	bl	800b974 <USBD_static_malloc>
 8006bec:	4602      	mov	r2, r0
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d102      	bne.n	8006c04 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	73fb      	strb	r3, [r7, #15]
 8006c02:	e026      	b.n	8006c52 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c0a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	7c1b      	ldrb	r3, [r3, #16]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d109      	bne.n	8006c42 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c38:	2101      	movs	r1, #1
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f004 fe64 	bl	800b908 <USBD_LL_PrepareReceive>
 8006c40:	e007      	b.n	8006c52 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c48:	2340      	movs	r3, #64	; 0x40
 8006c4a:	2101      	movs	r1, #1
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f004 fe5b 	bl	800b908 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	460b      	mov	r3, r1
 8006c66:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006c6c:	2181      	movs	r1, #129	; 0x81
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f004 fd7f 	bl	800b772 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006c7a:	2101      	movs	r1, #1
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f004 fd78 	bl	800b772 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006c8a:	2182      	movs	r1, #130	; 0x82
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f004 fd70 	bl	800b772 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00e      	beq.n	8006cc0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f004 fe6a 	bl	800b98c <USBD_static_free>
    pdev->pClassData = NULL;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b086      	sub	sp, #24
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cda:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d039      	beq.n	8006d68 <USBD_CDC_Setup+0x9e>
 8006cf4:	2b20      	cmp	r3, #32
 8006cf6:	d17f      	bne.n	8006df8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	88db      	ldrh	r3, [r3, #6]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d029      	beq.n	8006d54 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	b25b      	sxtb	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	da11      	bge.n	8006d2e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006d16:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	88d2      	ldrh	r2, [r2, #6]
 8006d1c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006d1e:	6939      	ldr	r1, [r7, #16]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	88db      	ldrh	r3, [r3, #6]
 8006d24:	461a      	mov	r2, r3
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f001 fa09 	bl	800813e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006d2c:	e06b      	b.n	8006e06 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	785a      	ldrb	r2, [r3, #1]
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	88db      	ldrh	r3, [r3, #6]
 8006d3c:	b2da      	uxtb	r2, r3
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006d44:	6939      	ldr	r1, [r7, #16]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	88db      	ldrh	r3, [r3, #6]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f001 fa24 	bl	800819a <USBD_CtlPrepareRx>
      break;
 8006d52:	e058      	b.n	8006e06 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	683a      	ldr	r2, [r7, #0]
 8006d5e:	7850      	ldrb	r0, [r2, #1]
 8006d60:	2200      	movs	r2, #0
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	4798      	blx	r3
      break;
 8006d66:	e04e      	b.n	8006e06 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	785b      	ldrb	r3, [r3, #1]
 8006d6c:	2b0b      	cmp	r3, #11
 8006d6e:	d02e      	beq.n	8006dce <USBD_CDC_Setup+0x104>
 8006d70:	2b0b      	cmp	r3, #11
 8006d72:	dc38      	bgt.n	8006de6 <USBD_CDC_Setup+0x11c>
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d002      	beq.n	8006d7e <USBD_CDC_Setup+0xb4>
 8006d78:	2b0a      	cmp	r3, #10
 8006d7a:	d014      	beq.n	8006da6 <USBD_CDC_Setup+0xdc>
 8006d7c:	e033      	b.n	8006de6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d84:	2b03      	cmp	r3, #3
 8006d86:	d107      	bne.n	8006d98 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006d88:	f107 030c 	add.w	r3, r7, #12
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f001 f9d4 	bl	800813e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d96:	e02e      	b.n	8006df6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f001 f965 	bl	800806a <USBD_CtlError>
            ret = USBD_FAIL;
 8006da0:	2302      	movs	r3, #2
 8006da2:	75fb      	strb	r3, [r7, #23]
          break;
 8006da4:	e027      	b.n	8006df6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dac:	2b03      	cmp	r3, #3
 8006dae:	d107      	bne.n	8006dc0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006db0:	f107 030f 	add.w	r3, r7, #15
 8006db4:	2201      	movs	r2, #1
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f001 f9c0 	bl	800813e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dbe:	e01a      	b.n	8006df6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006dc0:	6839      	ldr	r1, [r7, #0]
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f001 f951 	bl	800806a <USBD_CtlError>
            ret = USBD_FAIL;
 8006dc8:	2302      	movs	r3, #2
 8006dca:	75fb      	strb	r3, [r7, #23]
          break;
 8006dcc:	e013      	b.n	8006df6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dd4:	2b03      	cmp	r3, #3
 8006dd6:	d00d      	beq.n	8006df4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006dd8:	6839      	ldr	r1, [r7, #0]
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f001 f945 	bl	800806a <USBD_CtlError>
            ret = USBD_FAIL;
 8006de0:	2302      	movs	r3, #2
 8006de2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006de4:	e006      	b.n	8006df4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f001 f93e 	bl	800806a <USBD_CtlError>
          ret = USBD_FAIL;
 8006dee:	2302      	movs	r3, #2
 8006df0:	75fb      	strb	r3, [r7, #23]
          break;
 8006df2:	e000      	b.n	8006df6 <USBD_CDC_Setup+0x12c>
          break;
 8006df4:	bf00      	nop
      }
      break;
 8006df6:	e006      	b.n	8006e06 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006df8:	6839      	ldr	r1, [r7, #0]
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f001 f935 	bl	800806a <USBD_CtlError>
      ret = USBD_FAIL;
 8006e00:	2302      	movs	r3, #2
 8006e02:	75fb      	strb	r3, [r7, #23]
      break;
 8006e04:	bf00      	nop
  }

  return ret;
 8006e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3718      	adds	r7, #24
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	460b      	mov	r3, r1
 8006e1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e22:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e2a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d03a      	beq.n	8006eac <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006e36:	78fa      	ldrb	r2, [r7, #3]
 8006e38:	6879      	ldr	r1, [r7, #4]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	440b      	add	r3, r1
 8006e44:	331c      	adds	r3, #28
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d029      	beq.n	8006ea0 <USBD_CDC_DataIn+0x90>
 8006e4c:	78fa      	ldrb	r2, [r7, #3]
 8006e4e:	6879      	ldr	r1, [r7, #4]
 8006e50:	4613      	mov	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	440b      	add	r3, r1
 8006e5a:	331c      	adds	r3, #28
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	78f9      	ldrb	r1, [r7, #3]
 8006e60:	68b8      	ldr	r0, [r7, #8]
 8006e62:	460b      	mov	r3, r1
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	440b      	add	r3, r1
 8006e68:	00db      	lsls	r3, r3, #3
 8006e6a:	4403      	add	r3, r0
 8006e6c:	3338      	adds	r3, #56	; 0x38
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e74:	fb03 f301 	mul.w	r3, r3, r1
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d110      	bne.n	8006ea0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006e7e:	78fa      	ldrb	r2, [r7, #3]
 8006e80:	6879      	ldr	r1, [r7, #4]
 8006e82:	4613      	mov	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	440b      	add	r3, r1
 8006e8c:	331c      	adds	r3, #28
 8006e8e:	2200      	movs	r2, #0
 8006e90:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006e92:	78f9      	ldrb	r1, [r7, #3]
 8006e94:	2300      	movs	r3, #0
 8006e96:	2200      	movs	r2, #0
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f004 fd12 	bl	800b8c2 <USBD_LL_Transmit>
 8006e9e:	e003      	b.n	8006ea8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	e000      	b.n	8006eae <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006eac:	2302      	movs	r3, #2
  }
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b084      	sub	sp, #16
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ec8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006eca:	78fb      	ldrb	r3, [r7, #3]
 8006ecc:	4619      	mov	r1, r3
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f004 fd3d 	bl	800b94e <USBD_LL_GetRxDataSize>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00d      	beq.n	8006f02 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006efa:	4611      	mov	r1, r2
 8006efc:	4798      	blx	r3

    return USBD_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	e000      	b.n	8006f04 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006f02:	2302      	movs	r3, #2
  }
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f1a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d015      	beq.n	8006f52 <USBD_CDC_EP0_RxReady+0x46>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006f2c:	2bff      	cmp	r3, #255	; 0xff
 8006f2e:	d010      	beq.n	8006f52 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006f3e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f46:	b292      	uxth	r2, r2
 8006f48:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	22ff      	movs	r2, #255	; 0xff
 8006f4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2243      	movs	r2, #67	; 0x43
 8006f68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006f6a:	4b03      	ldr	r3, [pc, #12]	; (8006f78 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bc80      	pop	{r7}
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	20000094 	.word	0x20000094

08006f7c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2243      	movs	r2, #67	; 0x43
 8006f88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006f8a:	4b03      	ldr	r3, [pc, #12]	; (8006f98 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bc80      	pop	{r7}
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	20000050 	.word	0x20000050

08006f9c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2243      	movs	r2, #67	; 0x43
 8006fa8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006faa:	4b03      	ldr	r3, [pc, #12]	; (8006fb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bc80      	pop	{r7}
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	200000d8 	.word	0x200000d8

08006fbc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	220a      	movs	r2, #10
 8006fc8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006fca:	4b03      	ldr	r3, [pc, #12]	; (8006fd8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bc80      	pop	{r7}
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	2000000c 	.word	0x2000000c

08006fdc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006fe6:	2302      	movs	r3, #2
 8006fe8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d005      	beq.n	8006ffc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3714      	adds	r7, #20
 8007002:	46bd      	mov	sp, r7
 8007004:	bc80      	pop	{r7}
 8007006:	4770      	bx	lr

08007008 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	4613      	mov	r3, r2
 8007014:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800701c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007026:	88fa      	ldrh	r2, [r7, #6]
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	371c      	adds	r7, #28
 8007034:	46bd      	mov	sp, r7
 8007036:	bc80      	pop	{r7}
 8007038:	4770      	bx	lr

0800703a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800703a:	b480      	push	{r7}
 800703c:	b085      	sub	sp, #20
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
 8007042:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800704a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3714      	adds	r7, #20
 800705a:	46bd      	mov	sp, r7
 800705c:	bc80      	pop	{r7}
 800705e:	4770      	bx	lr

08007060 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800706e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007076:	2b00      	cmp	r3, #0
 8007078:	d01c      	beq.n	80070b4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007080:	2b00      	cmp	r3, #0
 8007082:	d115      	bne.n	80070b0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2201      	movs	r2, #1
 8007088:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	2181      	movs	r1, #129	; 0x81
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f004 fc0b 	bl	800b8c2 <USBD_LL_Transmit>

      return USBD_OK;
 80070ac:	2300      	movs	r3, #0
 80070ae:	e002      	b.n	80070b6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e000      	b.n	80070b6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80070b4:	2302      	movs	r3, #2
  }
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b084      	sub	sp, #16
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070cc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d017      	beq.n	8007108 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	7c1b      	ldrb	r3, [r3, #16]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d109      	bne.n	80070f4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070ea:	2101      	movs	r1, #1
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f004 fc0b 	bl	800b908 <USBD_LL_PrepareReceive>
 80070f2:	e007      	b.n	8007104 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070fa:	2340      	movs	r3, #64	; 0x40
 80070fc:	2101      	movs	r1, #1
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f004 fc02 	bl	800b908 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007104:	2300      	movs	r3, #0
 8007106:	e000      	b.n	800710a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007108:	2302      	movs	r3, #2
  }
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	60f8      	str	r0, [r7, #12]
 800711a:	60b9      	str	r1, [r7, #8]
 800711c:	4613      	mov	r3, r2
 800711e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d101      	bne.n	800712a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007126:	2302      	movs	r3, #2
 8007128:	e01a      	b.n	8007160 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007130:	2b00      	cmp	r3, #0
 8007132:	d003      	beq.n	800713c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d003      	beq.n	800714a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	79fa      	ldrb	r2, [r7, #7]
 8007156:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f004 fa6f 	bl	800b63c <USBD_LL_Init>

  return USBD_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007172:	2300      	movs	r3, #0
 8007174:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d006      	beq.n	800718a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007184:	2300      	movs	r3, #0
 8007186:	73fb      	strb	r3, [r7, #15]
 8007188:	e001      	b.n	800718e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800718a:	2302      	movs	r3, #2
 800718c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800718e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3714      	adds	r7, #20
 8007194:	46bd      	mov	sp, r7
 8007196:	bc80      	pop	{r7}
 8007198:	4770      	bx	lr

0800719a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b082      	sub	sp, #8
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f004 faa4 	bl	800b6f0 <USBD_LL_Start>

  return USBD_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3708      	adds	r7, #8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b083      	sub	sp, #12
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bc80      	pop	{r7}
 80071c4:	4770      	bx	lr

080071c6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b084      	sub	sp, #16
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
 80071ce:	460b      	mov	r3, r1
 80071d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80071d2:	2302      	movs	r3, #2
 80071d4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00c      	beq.n	80071fa <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	78fa      	ldrb	r2, [r7, #3]
 80071ea:	4611      	mov	r1, r2
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	4798      	blx	r3
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d101      	bne.n	80071fa <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80071f6:	2300      	movs	r3, #0
 80071f8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	460b      	mov	r3, r1
 800720e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	78fa      	ldrb	r2, [r7, #3]
 800721a:	4611      	mov	r1, r2
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	4798      	blx	r3

  return USBD_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b082      	sub	sp, #8
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	4618      	mov	r0, r3
 800723e:	f000 fed8 	bl	8007ff2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007250:	461a      	mov	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800725e:	f003 031f 	and.w	r3, r3, #31
 8007262:	2b02      	cmp	r3, #2
 8007264:	d016      	beq.n	8007294 <USBD_LL_SetupStage+0x6a>
 8007266:	2b02      	cmp	r3, #2
 8007268:	d81c      	bhi.n	80072a4 <USBD_LL_SetupStage+0x7a>
 800726a:	2b00      	cmp	r3, #0
 800726c:	d002      	beq.n	8007274 <USBD_LL_SetupStage+0x4a>
 800726e:	2b01      	cmp	r3, #1
 8007270:	d008      	beq.n	8007284 <USBD_LL_SetupStage+0x5a>
 8007272:	e017      	b.n	80072a4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800727a:	4619      	mov	r1, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f9cb 	bl	8007618 <USBD_StdDevReq>
      break;
 8007282:	e01a      	b.n	80072ba <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800728a:	4619      	mov	r1, r3
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fa2d 	bl	80076ec <USBD_StdItfReq>
      break;
 8007292:	e012      	b.n	80072ba <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800729a:	4619      	mov	r1, r3
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 fa6d 	bl	800777c <USBD_StdEPReq>
      break;
 80072a2:	e00a      	b.n	80072ba <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80072aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	4619      	mov	r1, r3
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f004 fa7c 	bl	800b7b0 <USBD_LL_StallEP>
      break;
 80072b8:	bf00      	nop
  }

  return USBD_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	460b      	mov	r3, r1
 80072ce:	607a      	str	r2, [r7, #4]
 80072d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80072d2:	7afb      	ldrb	r3, [r7, #11]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d14b      	bne.n	8007370 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80072de:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072e6:	2b03      	cmp	r3, #3
 80072e8:	d134      	bne.n	8007354 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	68da      	ldr	r2, [r3, #12]
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d919      	bls.n	800732a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	68da      	ldr	r2, [r3, #12]
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	1ad2      	subs	r2, r2, r3
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	68da      	ldr	r2, [r3, #12]
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800730c:	429a      	cmp	r2, r3
 800730e:	d203      	bcs.n	8007318 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007314:	b29b      	uxth	r3, r3
 8007316:	e002      	b.n	800731e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800731c:	b29b      	uxth	r3, r3
 800731e:	461a      	mov	r2, r3
 8007320:	6879      	ldr	r1, [r7, #4]
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f000 ff57 	bl	80081d6 <USBD_CtlContinueRx>
 8007328:	e038      	b.n	800739c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00a      	beq.n	800734c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800733c:	2b03      	cmp	r3, #3
 800733e:	d105      	bne.n	800734c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 ff54 	bl	80081fa <USBD_CtlSendStatus>
 8007352:	e023      	b.n	800739c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800735a:	2b05      	cmp	r3, #5
 800735c:	d11e      	bne.n	800739c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007366:	2100      	movs	r1, #0
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f004 fa21 	bl	800b7b0 <USBD_LL_StallEP>
 800736e:	e015      	b.n	800739c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00d      	beq.n	8007398 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007382:	2b03      	cmp	r3, #3
 8007384:	d108      	bne.n	8007398 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	7afa      	ldrb	r2, [r7, #11]
 8007390:	4611      	mov	r1, r2
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	4798      	blx	r3
 8007396:	e001      	b.n	800739c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007398:	2302      	movs	r3, #2
 800739a:	e000      	b.n	800739e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3718      	adds	r7, #24
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b086      	sub	sp, #24
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	60f8      	str	r0, [r7, #12]
 80073ae:	460b      	mov	r3, r1
 80073b0:	607a      	str	r2, [r7, #4]
 80073b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80073b4:	7afb      	ldrb	r3, [r7, #11]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d17f      	bne.n	80074ba <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	3314      	adds	r3, #20
 80073be:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d15c      	bne.n	8007484 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	68da      	ldr	r2, [r3, #12]
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d915      	bls.n	8007402 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	68da      	ldr	r2, [r3, #12]
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	1ad2      	subs	r2, r2, r3
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	461a      	mov	r2, r3
 80073ec:	6879      	ldr	r1, [r7, #4]
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 fec1 	bl	8008176 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073f4:	2300      	movs	r3, #0
 80073f6:	2200      	movs	r2, #0
 80073f8:	2100      	movs	r1, #0
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f004 fa84 	bl	800b908 <USBD_LL_PrepareReceive>
 8007400:	e04e      	b.n	80074a0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	6912      	ldr	r2, [r2, #16]
 800740a:	fbb3 f1f2 	udiv	r1, r3, r2
 800740e:	fb02 f201 	mul.w	r2, r2, r1
 8007412:	1a9b      	subs	r3, r3, r2
 8007414:	2b00      	cmp	r3, #0
 8007416:	d11c      	bne.n	8007452 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	689a      	ldr	r2, [r3, #8]
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007420:	429a      	cmp	r2, r3
 8007422:	d316      	bcc.n	8007452 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	689a      	ldr	r2, [r3, #8]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800742e:	429a      	cmp	r2, r3
 8007430:	d20f      	bcs.n	8007452 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007432:	2200      	movs	r2, #0
 8007434:	2100      	movs	r1, #0
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f000 fe9d 	bl	8008176 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007444:	2300      	movs	r3, #0
 8007446:	2200      	movs	r2, #0
 8007448:	2100      	movs	r1, #0
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f004 fa5c 	bl	800b908 <USBD_LL_PrepareReceive>
 8007450:	e026      	b.n	80074a0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00a      	beq.n	8007474 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007464:	2b03      	cmp	r3, #3
 8007466:	d105      	bne.n	8007474 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007474:	2180      	movs	r1, #128	; 0x80
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f004 f99a 	bl	800b7b0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f000 fecf 	bl	8008220 <USBD_CtlReceiveStatus>
 8007482:	e00d      	b.n	80074a0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800748a:	2b04      	cmp	r3, #4
 800748c:	d004      	beq.n	8007498 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007494:	2b00      	cmp	r3, #0
 8007496:	d103      	bne.n	80074a0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007498:	2180      	movs	r1, #128	; 0x80
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f004 f988 	bl	800b7b0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d11d      	bne.n	80074e6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f7ff fe81 	bl	80071b2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80074b8:	e015      	b.n	80074e6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00d      	beq.n	80074e2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80074cc:	2b03      	cmp	r3, #3
 80074ce:	d108      	bne.n	80074e2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074d6:	695b      	ldr	r3, [r3, #20]
 80074d8:	7afa      	ldrb	r2, [r7, #11]
 80074da:	4611      	mov	r1, r2
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	4798      	blx	r3
 80074e0:	e001      	b.n	80074e6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074e2:	2302      	movs	r3, #2
 80074e4:	e000      	b.n	80074e8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074f8:	2340      	movs	r3, #64	; 0x40
 80074fa:	2200      	movs	r2, #0
 80074fc:	2100      	movs	r1, #0
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f004 f911 	bl	800b726 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2240      	movs	r2, #64	; 0x40
 8007510:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007514:	2340      	movs	r3, #64	; 0x40
 8007516:	2200      	movs	r2, #0
 8007518:	2180      	movs	r1, #128	; 0x80
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f004 f903 	bl	800b726 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2240      	movs	r2, #64	; 0x40
 800752a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007550:	2b00      	cmp	r3, #0
 8007552:	d009      	beq.n	8007568 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	6852      	ldr	r2, [r2, #4]
 8007560:	b2d2      	uxtb	r2, r2
 8007562:	4611      	mov	r1, r2
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	4798      	blx	r3
  }

  return USBD_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3708      	adds	r7, #8
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007572:	b480      	push	{r7}
 8007574:	b083      	sub	sp, #12
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
 800757a:	460b      	mov	r3, r1
 800757c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	78fa      	ldrb	r2, [r7, #3]
 8007582:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	bc80      	pop	{r7}
 800758e:	4770      	bx	lr

08007590 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2204      	movs	r2, #4
 80075a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bc80      	pop	{r7}
 80075b6:	4770      	bx	lr

080075b8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c6:	2b04      	cmp	r3, #4
 80075c8:	d105      	bne.n	80075d6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	bc80      	pop	{r7}
 80075e0:	4770      	bx	lr

080075e2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b082      	sub	sp, #8
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075f0:	2b03      	cmp	r3, #3
 80075f2:	d10b      	bne.n	800760c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075fa:	69db      	ldr	r3, [r3, #28]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d005      	beq.n	800760c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
	...

08007618 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800762e:	2b40      	cmp	r3, #64	; 0x40
 8007630:	d005      	beq.n	800763e <USBD_StdDevReq+0x26>
 8007632:	2b40      	cmp	r3, #64	; 0x40
 8007634:	d84f      	bhi.n	80076d6 <USBD_StdDevReq+0xbe>
 8007636:	2b00      	cmp	r3, #0
 8007638:	d009      	beq.n	800764e <USBD_StdDevReq+0x36>
 800763a:	2b20      	cmp	r3, #32
 800763c:	d14b      	bne.n	80076d6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	4798      	blx	r3
      break;
 800764c:	e048      	b.n	80076e0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	785b      	ldrb	r3, [r3, #1]
 8007652:	2b09      	cmp	r3, #9
 8007654:	d839      	bhi.n	80076ca <USBD_StdDevReq+0xb2>
 8007656:	a201      	add	r2, pc, #4	; (adr r2, 800765c <USBD_StdDevReq+0x44>)
 8007658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765c:	080076ad 	.word	0x080076ad
 8007660:	080076c1 	.word	0x080076c1
 8007664:	080076cb 	.word	0x080076cb
 8007668:	080076b7 	.word	0x080076b7
 800766c:	080076cb 	.word	0x080076cb
 8007670:	0800768f 	.word	0x0800768f
 8007674:	08007685 	.word	0x08007685
 8007678:	080076cb 	.word	0x080076cb
 800767c:	080076a3 	.word	0x080076a3
 8007680:	08007699 	.word	0x08007699
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007684:	6839      	ldr	r1, [r7, #0]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f9dc 	bl	8007a44 <USBD_GetDescriptor>
          break;
 800768c:	e022      	b.n	80076d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fb3f 	bl	8007d14 <USBD_SetAddress>
          break;
 8007696:	e01d      	b.n	80076d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fb7e 	bl	8007d9c <USBD_SetConfig>
          break;
 80076a0:	e018      	b.n	80076d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80076a2:	6839      	ldr	r1, [r7, #0]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fc07 	bl	8007eb8 <USBD_GetConfig>
          break;
 80076aa:	e013      	b.n	80076d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fc37 	bl	8007f22 <USBD_GetStatus>
          break;
 80076b4:	e00e      	b.n	80076d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80076b6:	6839      	ldr	r1, [r7, #0]
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fc65 	bl	8007f88 <USBD_SetFeature>
          break;
 80076be:	e009      	b.n	80076d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80076c0:	6839      	ldr	r1, [r7, #0]
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 fc74 	bl	8007fb0 <USBD_ClrFeature>
          break;
 80076c8:	e004      	b.n	80076d4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80076ca:	6839      	ldr	r1, [r7, #0]
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fccc 	bl	800806a <USBD_CtlError>
          break;
 80076d2:	bf00      	nop
      }
      break;
 80076d4:	e004      	b.n	80076e0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80076d6:	6839      	ldr	r1, [r7, #0]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 fcc6 	bl	800806a <USBD_CtlError>
      break;
 80076de:	bf00      	nop
  }

  return ret;
 80076e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop

080076ec <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007702:	2b40      	cmp	r3, #64	; 0x40
 8007704:	d005      	beq.n	8007712 <USBD_StdItfReq+0x26>
 8007706:	2b40      	cmp	r3, #64	; 0x40
 8007708:	d82e      	bhi.n	8007768 <USBD_StdItfReq+0x7c>
 800770a:	2b00      	cmp	r3, #0
 800770c:	d001      	beq.n	8007712 <USBD_StdItfReq+0x26>
 800770e:	2b20      	cmp	r3, #32
 8007710:	d12a      	bne.n	8007768 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007718:	3b01      	subs	r3, #1
 800771a:	2b02      	cmp	r3, #2
 800771c:	d81d      	bhi.n	800775a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	889b      	ldrh	r3, [r3, #4]
 8007722:	b2db      	uxtb	r3, r3
 8007724:	2b01      	cmp	r3, #1
 8007726:	d813      	bhi.n	8007750 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	4798      	blx	r3
 8007736:	4603      	mov	r3, r0
 8007738:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	88db      	ldrh	r3, [r3, #6]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d110      	bne.n	8007764 <USBD_StdItfReq+0x78>
 8007742:	7bfb      	ldrb	r3, [r7, #15]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10d      	bne.n	8007764 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fd56 	bl	80081fa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800774e:	e009      	b.n	8007764 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fc89 	bl	800806a <USBD_CtlError>
          break;
 8007758:	e004      	b.n	8007764 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fc84 	bl	800806a <USBD_CtlError>
          break;
 8007762:	e000      	b.n	8007766 <USBD_StdItfReq+0x7a>
          break;
 8007764:	bf00      	nop
      }
      break;
 8007766:	e004      	b.n	8007772 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fc7d 	bl	800806a <USBD_CtlError>
      break;
 8007770:	bf00      	nop
  }

  return USBD_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007786:	2300      	movs	r3, #0
 8007788:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	889b      	ldrh	r3, [r3, #4]
 800778e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007798:	2b40      	cmp	r3, #64	; 0x40
 800779a:	d007      	beq.n	80077ac <USBD_StdEPReq+0x30>
 800779c:	2b40      	cmp	r3, #64	; 0x40
 800779e:	f200 8146 	bhi.w	8007a2e <USBD_StdEPReq+0x2b2>
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00a      	beq.n	80077bc <USBD_StdEPReq+0x40>
 80077a6:	2b20      	cmp	r3, #32
 80077a8:	f040 8141 	bne.w	8007a2e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	4798      	blx	r3
      break;
 80077ba:	e13d      	b.n	8007a38 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077c4:	2b20      	cmp	r3, #32
 80077c6:	d10a      	bne.n	80077de <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	6839      	ldr	r1, [r7, #0]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	4798      	blx	r3
 80077d6:	4603      	mov	r3, r0
 80077d8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80077da:	7bfb      	ldrb	r3, [r7, #15]
 80077dc:	e12d      	b.n	8007a3a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	785b      	ldrb	r3, [r3, #1]
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	d007      	beq.n	80077f6 <USBD_StdEPReq+0x7a>
 80077e6:	2b03      	cmp	r3, #3
 80077e8:	f300 811b 	bgt.w	8007a22 <USBD_StdEPReq+0x2a6>
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d072      	beq.n	80078d6 <USBD_StdEPReq+0x15a>
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d03a      	beq.n	800786a <USBD_StdEPReq+0xee>
 80077f4:	e115      	b.n	8007a22 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d002      	beq.n	8007806 <USBD_StdEPReq+0x8a>
 8007800:	2b03      	cmp	r3, #3
 8007802:	d015      	beq.n	8007830 <USBD_StdEPReq+0xb4>
 8007804:	e02b      	b.n	800785e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007806:	7bbb      	ldrb	r3, [r7, #14]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00c      	beq.n	8007826 <USBD_StdEPReq+0xaa>
 800780c:	7bbb      	ldrb	r3, [r7, #14]
 800780e:	2b80      	cmp	r3, #128	; 0x80
 8007810:	d009      	beq.n	8007826 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007812:	7bbb      	ldrb	r3, [r7, #14]
 8007814:	4619      	mov	r1, r3
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f003 ffca 	bl	800b7b0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800781c:	2180      	movs	r1, #128	; 0x80
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f003 ffc6 	bl	800b7b0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007824:	e020      	b.n	8007868 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fc1e 	bl	800806a <USBD_CtlError>
              break;
 800782e:	e01b      	b.n	8007868 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	885b      	ldrh	r3, [r3, #2]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10e      	bne.n	8007856 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007838:	7bbb      	ldrb	r3, [r7, #14]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00b      	beq.n	8007856 <USBD_StdEPReq+0xda>
 800783e:	7bbb      	ldrb	r3, [r7, #14]
 8007840:	2b80      	cmp	r3, #128	; 0x80
 8007842:	d008      	beq.n	8007856 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	88db      	ldrh	r3, [r3, #6]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d104      	bne.n	8007856 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800784c:	7bbb      	ldrb	r3, [r7, #14]
 800784e:	4619      	mov	r1, r3
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f003 ffad 	bl	800b7b0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fccf 	bl	80081fa <USBD_CtlSendStatus>

              break;
 800785c:	e004      	b.n	8007868 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fc02 	bl	800806a <USBD_CtlError>
              break;
 8007866:	bf00      	nop
          }
          break;
 8007868:	e0e0      	b.n	8007a2c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007870:	2b02      	cmp	r3, #2
 8007872:	d002      	beq.n	800787a <USBD_StdEPReq+0xfe>
 8007874:	2b03      	cmp	r3, #3
 8007876:	d015      	beq.n	80078a4 <USBD_StdEPReq+0x128>
 8007878:	e026      	b.n	80078c8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800787a:	7bbb      	ldrb	r3, [r7, #14]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00c      	beq.n	800789a <USBD_StdEPReq+0x11e>
 8007880:	7bbb      	ldrb	r3, [r7, #14]
 8007882:	2b80      	cmp	r3, #128	; 0x80
 8007884:	d009      	beq.n	800789a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007886:	7bbb      	ldrb	r3, [r7, #14]
 8007888:	4619      	mov	r1, r3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f003 ff90 	bl	800b7b0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007890:	2180      	movs	r1, #128	; 0x80
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f003 ff8c 	bl	800b7b0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007898:	e01c      	b.n	80078d4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fbe4 	bl	800806a <USBD_CtlError>
              break;
 80078a2:	e017      	b.n	80078d4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	885b      	ldrh	r3, [r3, #2]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d112      	bne.n	80078d2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80078ac:	7bbb      	ldrb	r3, [r7, #14]
 80078ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d004      	beq.n	80078c0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80078b6:	7bbb      	ldrb	r3, [r7, #14]
 80078b8:	4619      	mov	r1, r3
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f003 ff97 	bl	800b7ee <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 fc9a 	bl	80081fa <USBD_CtlSendStatus>
              }
              break;
 80078c6:	e004      	b.n	80078d2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80078c8:	6839      	ldr	r1, [r7, #0]
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fbcd 	bl	800806a <USBD_CtlError>
              break;
 80078d0:	e000      	b.n	80078d4 <USBD_StdEPReq+0x158>
              break;
 80078d2:	bf00      	nop
          }
          break;
 80078d4:	e0aa      	b.n	8007a2c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d002      	beq.n	80078e6 <USBD_StdEPReq+0x16a>
 80078e0:	2b03      	cmp	r3, #3
 80078e2:	d032      	beq.n	800794a <USBD_StdEPReq+0x1ce>
 80078e4:	e097      	b.n	8007a16 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078e6:	7bbb      	ldrb	r3, [r7, #14]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d007      	beq.n	80078fc <USBD_StdEPReq+0x180>
 80078ec:	7bbb      	ldrb	r3, [r7, #14]
 80078ee:	2b80      	cmp	r3, #128	; 0x80
 80078f0:	d004      	beq.n	80078fc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80078f2:	6839      	ldr	r1, [r7, #0]
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fbb8 	bl	800806a <USBD_CtlError>
                break;
 80078fa:	e091      	b.n	8007a20 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007900:	2b00      	cmp	r3, #0
 8007902:	da0b      	bge.n	800791c <USBD_StdEPReq+0x1a0>
 8007904:	7bbb      	ldrb	r3, [r7, #14]
 8007906:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800790a:	4613      	mov	r3, r2
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	4413      	add	r3, r2
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	3310      	adds	r3, #16
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	4413      	add	r3, r2
 8007918:	3304      	adds	r3, #4
 800791a:	e00b      	b.n	8007934 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007922:	4613      	mov	r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	4413      	add	r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	4413      	add	r3, r2
 8007932:	3304      	adds	r3, #4
 8007934:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	2200      	movs	r2, #0
 800793a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	2202      	movs	r2, #2
 8007940:	4619      	mov	r1, r3
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fbfb 	bl	800813e <USBD_CtlSendData>
              break;
 8007948:	e06a      	b.n	8007a20 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800794a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800794e:	2b00      	cmp	r3, #0
 8007950:	da11      	bge.n	8007976 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007952:	7bbb      	ldrb	r3, [r7, #14]
 8007954:	f003 020f 	and.w	r2, r3, #15
 8007958:	6879      	ldr	r1, [r7, #4]
 800795a:	4613      	mov	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	440b      	add	r3, r1
 8007964:	3318      	adds	r3, #24
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d117      	bne.n	800799c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800796c:	6839      	ldr	r1, [r7, #0]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fb7b 	bl	800806a <USBD_CtlError>
                  break;
 8007974:	e054      	b.n	8007a20 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007976:	7bbb      	ldrb	r3, [r7, #14]
 8007978:	f003 020f 	and.w	r2, r3, #15
 800797c:	6879      	ldr	r1, [r7, #4]
 800797e:	4613      	mov	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4413      	add	r3, r2
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	440b      	add	r3, r1
 8007988:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d104      	bne.n	800799c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fb68 	bl	800806a <USBD_CtlError>
                  break;
 800799a:	e041      	b.n	8007a20 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800799c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	da0b      	bge.n	80079bc <USBD_StdEPReq+0x240>
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
 80079a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079aa:	4613      	mov	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	3310      	adds	r3, #16
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	4413      	add	r3, r2
 80079b8:	3304      	adds	r3, #4
 80079ba:	e00b      	b.n	80079d4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
 80079be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079c2:	4613      	mov	r3, r2
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4413      	add	r3, r2
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	4413      	add	r3, r2
 80079d2:	3304      	adds	r3, #4
 80079d4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80079d6:	7bbb      	ldrb	r3, [r7, #14]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d002      	beq.n	80079e2 <USBD_StdEPReq+0x266>
 80079dc:	7bbb      	ldrb	r3, [r7, #14]
 80079de:	2b80      	cmp	r3, #128	; 0x80
 80079e0:	d103      	bne.n	80079ea <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	2200      	movs	r2, #0
 80079e6:	601a      	str	r2, [r3, #0]
 80079e8:	e00e      	b.n	8007a08 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80079ea:	7bbb      	ldrb	r3, [r7, #14]
 80079ec:	4619      	mov	r1, r3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f003 ff1c 	bl	800b82c <USBD_LL_IsStallEP>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d003      	beq.n	8007a02 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	2201      	movs	r2, #1
 80079fe:	601a      	str	r2, [r3, #0]
 8007a00:	e002      	b.n	8007a08 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2200      	movs	r2, #0
 8007a06:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fb95 	bl	800813e <USBD_CtlSendData>
              break;
 8007a14:	e004      	b.n	8007a20 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007a16:	6839      	ldr	r1, [r7, #0]
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fb26 	bl	800806a <USBD_CtlError>
              break;
 8007a1e:	bf00      	nop
          }
          break;
 8007a20:	e004      	b.n	8007a2c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007a22:	6839      	ldr	r1, [r7, #0]
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fb20 	bl	800806a <USBD_CtlError>
          break;
 8007a2a:	bf00      	nop
      }
      break;
 8007a2c:	e004      	b.n	8007a38 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007a2e:	6839      	ldr	r1, [r7, #0]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fb1a 	bl	800806a <USBD_CtlError>
      break;
 8007a36:	bf00      	nop
  }

  return ret;
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
	...

08007a44 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a52:	2300      	movs	r3, #0
 8007a54:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	885b      	ldrh	r3, [r3, #2]
 8007a5e:	0a1b      	lsrs	r3, r3, #8
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	3b01      	subs	r3, #1
 8007a64:	2b06      	cmp	r3, #6
 8007a66:	f200 8128 	bhi.w	8007cba <USBD_GetDescriptor+0x276>
 8007a6a:	a201      	add	r2, pc, #4	; (adr r2, 8007a70 <USBD_GetDescriptor+0x2c>)
 8007a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a70:	08007a8d 	.word	0x08007a8d
 8007a74:	08007aa5 	.word	0x08007aa5
 8007a78:	08007ae5 	.word	0x08007ae5
 8007a7c:	08007cbb 	.word	0x08007cbb
 8007a80:	08007cbb 	.word	0x08007cbb
 8007a84:	08007c5b 	.word	0x08007c5b
 8007a88:	08007c87 	.word	0x08007c87
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	7c12      	ldrb	r2, [r2, #16]
 8007a98:	f107 0108 	add.w	r1, r7, #8
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	4798      	blx	r3
 8007aa0:	60f8      	str	r0, [r7, #12]
      break;
 8007aa2:	e112      	b.n	8007cca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	7c1b      	ldrb	r3, [r3, #16]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10d      	bne.n	8007ac8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab4:	f107 0208 	add.w	r2, r7, #8
 8007ab8:	4610      	mov	r0, r2
 8007aba:	4798      	blx	r3
 8007abc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007ac6:	e100      	b.n	8007cca <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad0:	f107 0208 	add.w	r2, r7, #8
 8007ad4:	4610      	mov	r0, r2
 8007ad6:	4798      	blx	r3
 8007ad8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3301      	adds	r3, #1
 8007ade:	2202      	movs	r2, #2
 8007ae0:	701a      	strb	r2, [r3, #0]
      break;
 8007ae2:	e0f2      	b.n	8007cca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	885b      	ldrh	r3, [r3, #2]
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	2b05      	cmp	r3, #5
 8007aec:	f200 80ac 	bhi.w	8007c48 <USBD_GetDescriptor+0x204>
 8007af0:	a201      	add	r2, pc, #4	; (adr r2, 8007af8 <USBD_GetDescriptor+0xb4>)
 8007af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af6:	bf00      	nop
 8007af8:	08007b11 	.word	0x08007b11
 8007afc:	08007b45 	.word	0x08007b45
 8007b00:	08007b79 	.word	0x08007b79
 8007b04:	08007bad 	.word	0x08007bad
 8007b08:	08007be1 	.word	0x08007be1
 8007b0c:	08007c15 	.word	0x08007c15
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00b      	beq.n	8007b34 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	7c12      	ldrb	r2, [r2, #16]
 8007b28:	f107 0108 	add.w	r1, r7, #8
 8007b2c:	4610      	mov	r0, r2
 8007b2e:	4798      	blx	r3
 8007b30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b32:	e091      	b.n	8007c58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fa97 	bl	800806a <USBD_CtlError>
            err++;
 8007b3c:	7afb      	ldrb	r3, [r7, #11]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	72fb      	strb	r3, [r7, #11]
          break;
 8007b42:	e089      	b.n	8007c58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00b      	beq.n	8007b68 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	7c12      	ldrb	r2, [r2, #16]
 8007b5c:	f107 0108 	add.w	r1, r7, #8
 8007b60:	4610      	mov	r0, r2
 8007b62:	4798      	blx	r3
 8007b64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b66:	e077      	b.n	8007c58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b68:	6839      	ldr	r1, [r7, #0]
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fa7d 	bl	800806a <USBD_CtlError>
            err++;
 8007b70:	7afb      	ldrb	r3, [r7, #11]
 8007b72:	3301      	adds	r3, #1
 8007b74:	72fb      	strb	r3, [r7, #11]
          break;
 8007b76:	e06f      	b.n	8007c58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00b      	beq.n	8007b9c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	7c12      	ldrb	r2, [r2, #16]
 8007b90:	f107 0108 	add.w	r1, r7, #8
 8007b94:	4610      	mov	r0, r2
 8007b96:	4798      	blx	r3
 8007b98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b9a:	e05d      	b.n	8007c58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fa63 	bl	800806a <USBD_CtlError>
            err++;
 8007ba4:	7afb      	ldrb	r3, [r7, #11]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	72fb      	strb	r3, [r7, #11]
          break;
 8007baa:	e055      	b.n	8007c58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00b      	beq.n	8007bd0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	7c12      	ldrb	r2, [r2, #16]
 8007bc4:	f107 0108 	add.w	r1, r7, #8
 8007bc8:	4610      	mov	r0, r2
 8007bca:	4798      	blx	r3
 8007bcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bce:	e043      	b.n	8007c58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bd0:	6839      	ldr	r1, [r7, #0]
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fa49 	bl	800806a <USBD_CtlError>
            err++;
 8007bd8:	7afb      	ldrb	r3, [r7, #11]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	72fb      	strb	r3, [r7, #11]
          break;
 8007bde:	e03b      	b.n	8007c58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007be6:	695b      	ldr	r3, [r3, #20]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00b      	beq.n	8007c04 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	7c12      	ldrb	r2, [r2, #16]
 8007bf8:	f107 0108 	add.w	r1, r7, #8
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	4798      	blx	r3
 8007c00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c02:	e029      	b.n	8007c58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fa2f 	bl	800806a <USBD_CtlError>
            err++;
 8007c0c:	7afb      	ldrb	r3, [r7, #11]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	72fb      	strb	r3, [r7, #11]
          break;
 8007c12:	e021      	b.n	8007c58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00b      	beq.n	8007c38 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	7c12      	ldrb	r2, [r2, #16]
 8007c2c:	f107 0108 	add.w	r1, r7, #8
 8007c30:	4610      	mov	r0, r2
 8007c32:	4798      	blx	r3
 8007c34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c36:	e00f      	b.n	8007c58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c38:	6839      	ldr	r1, [r7, #0]
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fa15 	bl	800806a <USBD_CtlError>
            err++;
 8007c40:	7afb      	ldrb	r3, [r7, #11]
 8007c42:	3301      	adds	r3, #1
 8007c44:	72fb      	strb	r3, [r7, #11]
          break;
 8007c46:	e007      	b.n	8007c58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fa0d 	bl	800806a <USBD_CtlError>
          err++;
 8007c50:	7afb      	ldrb	r3, [r7, #11]
 8007c52:	3301      	adds	r3, #1
 8007c54:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007c56:	e038      	b.n	8007cca <USBD_GetDescriptor+0x286>
 8007c58:	e037      	b.n	8007cca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	7c1b      	ldrb	r3, [r3, #16]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d109      	bne.n	8007c76 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c6a:	f107 0208 	add.w	r2, r7, #8
 8007c6e:	4610      	mov	r0, r2
 8007c70:	4798      	blx	r3
 8007c72:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c74:	e029      	b.n	8007cca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f9f6 	bl	800806a <USBD_CtlError>
        err++;
 8007c7e:	7afb      	ldrb	r3, [r7, #11]
 8007c80:	3301      	adds	r3, #1
 8007c82:	72fb      	strb	r3, [r7, #11]
      break;
 8007c84:	e021      	b.n	8007cca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	7c1b      	ldrb	r3, [r3, #16]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10d      	bne.n	8007caa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c96:	f107 0208 	add.w	r2, r7, #8
 8007c9a:	4610      	mov	r0, r2
 8007c9c:	4798      	blx	r3
 8007c9e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	2207      	movs	r2, #7
 8007ca6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ca8:	e00f      	b.n	8007cca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007caa:	6839      	ldr	r1, [r7, #0]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f9dc 	bl	800806a <USBD_CtlError>
        err++;
 8007cb2:	7afb      	ldrb	r3, [r7, #11]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	72fb      	strb	r3, [r7, #11]
      break;
 8007cb8:	e007      	b.n	8007cca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f9d4 	bl	800806a <USBD_CtlError>
      err++;
 8007cc2:	7afb      	ldrb	r3, [r7, #11]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	72fb      	strb	r3, [r7, #11]
      break;
 8007cc8:	bf00      	nop
  }

  if (err != 0U)
 8007cca:	7afb      	ldrb	r3, [r7, #11]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d11c      	bne.n	8007d0a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007cd0:	893b      	ldrh	r3, [r7, #8]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d011      	beq.n	8007cfa <USBD_GetDescriptor+0x2b6>
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	88db      	ldrh	r3, [r3, #6]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00d      	beq.n	8007cfa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	88da      	ldrh	r2, [r3, #6]
 8007ce2:	893b      	ldrh	r3, [r7, #8]
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	bf28      	it	cs
 8007ce8:	4613      	movcs	r3, r2
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007cee:	893b      	ldrh	r3, [r7, #8]
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	68f9      	ldr	r1, [r7, #12]
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 fa22 	bl	800813e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	88db      	ldrh	r3, [r3, #6]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d104      	bne.n	8007d0c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fa79 	bl	80081fa <USBD_CtlSendStatus>
 8007d08:	e000      	b.n	8007d0c <USBD_GetDescriptor+0x2c8>
    return;
 8007d0a:	bf00      	nop
    }
  }
}
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop

08007d14 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	889b      	ldrh	r3, [r3, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d130      	bne.n	8007d88 <USBD_SetAddress+0x74>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	88db      	ldrh	r3, [r3, #6]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d12c      	bne.n	8007d88 <USBD_SetAddress+0x74>
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	885b      	ldrh	r3, [r3, #2]
 8007d32:	2b7f      	cmp	r3, #127	; 0x7f
 8007d34:	d828      	bhi.n	8007d88 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	885b      	ldrh	r3, [r3, #2]
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d40:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d48:	2b03      	cmp	r3, #3
 8007d4a:	d104      	bne.n	8007d56 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f98b 	bl	800806a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d54:	e01d      	b.n	8007d92 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	7bfa      	ldrb	r2, [r7, #15]
 8007d5a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d5e:	7bfb      	ldrb	r3, [r7, #15]
 8007d60:	4619      	mov	r1, r3
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f003 fd8e 	bl	800b884 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fa46 	bl	80081fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d6e:	7bfb      	ldrb	r3, [r7, #15]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d004      	beq.n	8007d7e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2202      	movs	r2, #2
 8007d78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d7c:	e009      	b.n	8007d92 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d86:	e004      	b.n	8007d92 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d88:	6839      	ldr	r1, [r7, #0]
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f96d 	bl	800806a <USBD_CtlError>
  }
}
 8007d90:	bf00      	nop
 8007d92:	bf00      	nop
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
	...

08007d9c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	885b      	ldrh	r3, [r3, #2]
 8007daa:	b2da      	uxtb	r2, r3
 8007dac:	4b41      	ldr	r3, [pc, #260]	; (8007eb4 <USBD_SetConfig+0x118>)
 8007dae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007db0:	4b40      	ldr	r3, [pc, #256]	; (8007eb4 <USBD_SetConfig+0x118>)
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d904      	bls.n	8007dc2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007db8:	6839      	ldr	r1, [r7, #0]
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 f955 	bl	800806a <USBD_CtlError>
 8007dc0:	e075      	b.n	8007eae <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d002      	beq.n	8007dd2 <USBD_SetConfig+0x36>
 8007dcc:	2b03      	cmp	r3, #3
 8007dce:	d023      	beq.n	8007e18 <USBD_SetConfig+0x7c>
 8007dd0:	e062      	b.n	8007e98 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007dd2:	4b38      	ldr	r3, [pc, #224]	; (8007eb4 <USBD_SetConfig+0x118>)
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d01a      	beq.n	8007e10 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007dda:	4b36      	ldr	r3, [pc, #216]	; (8007eb4 <USBD_SetConfig+0x118>)
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2203      	movs	r2, #3
 8007de8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007dec:	4b31      	ldr	r3, [pc, #196]	; (8007eb4 <USBD_SetConfig+0x118>)
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	4619      	mov	r1, r3
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f7ff f9e7 	bl	80071c6 <USBD_SetClassConfig>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d104      	bne.n	8007e08 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007dfe:	6839      	ldr	r1, [r7, #0]
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f932 	bl	800806a <USBD_CtlError>
            return;
 8007e06:	e052      	b.n	8007eae <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f9f6 	bl	80081fa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007e0e:	e04e      	b.n	8007eae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f9f2 	bl	80081fa <USBD_CtlSendStatus>
        break;
 8007e16:	e04a      	b.n	8007eae <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007e18:	4b26      	ldr	r3, [pc, #152]	; (8007eb4 <USBD_SetConfig+0x118>)
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d112      	bne.n	8007e46 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2202      	movs	r2, #2
 8007e24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007e28:	4b22      	ldr	r3, [pc, #136]	; (8007eb4 <USBD_SetConfig+0x118>)
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007e32:	4b20      	ldr	r3, [pc, #128]	; (8007eb4 <USBD_SetConfig+0x118>)
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	4619      	mov	r1, r3
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7ff f9e3 	bl	8007204 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f9db 	bl	80081fa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007e44:	e033      	b.n	8007eae <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007e46:	4b1b      	ldr	r3, [pc, #108]	; (8007eb4 <USBD_SetConfig+0x118>)
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d01d      	beq.n	8007e90 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7ff f9d1 	bl	8007204 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007e62:	4b14      	ldr	r3, [pc, #80]	; (8007eb4 <USBD_SetConfig+0x118>)
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	461a      	mov	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e6c:	4b11      	ldr	r3, [pc, #68]	; (8007eb4 <USBD_SetConfig+0x118>)
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	4619      	mov	r1, r3
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f7ff f9a7 	bl	80071c6 <USBD_SetClassConfig>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d104      	bne.n	8007e88 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f8f2 	bl	800806a <USBD_CtlError>
            return;
 8007e86:	e012      	b.n	8007eae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 f9b6 	bl	80081fa <USBD_CtlSendStatus>
        break;
 8007e8e:	e00e      	b.n	8007eae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f9b2 	bl	80081fa <USBD_CtlSendStatus>
        break;
 8007e96:	e00a      	b.n	8007eae <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007e98:	6839      	ldr	r1, [r7, #0]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 f8e5 	bl	800806a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007ea0:	4b04      	ldr	r3, [pc, #16]	; (8007eb4 <USBD_SetConfig+0x118>)
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f7ff f9ac 	bl	8007204 <USBD_ClrClassConfig>
        break;
 8007eac:	bf00      	nop
    }
  }
}
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	200001c1 	.word	0x200001c1

08007eb8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	88db      	ldrh	r3, [r3, #6]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d004      	beq.n	8007ed4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f8cc 	bl	800806a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007ed2:	e022      	b.n	8007f1a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	dc02      	bgt.n	8007ee4 <USBD_GetConfig+0x2c>
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	dc03      	bgt.n	8007eea <USBD_GetConfig+0x32>
 8007ee2:	e015      	b.n	8007f10 <USBD_GetConfig+0x58>
 8007ee4:	2b03      	cmp	r3, #3
 8007ee6:	d00b      	beq.n	8007f00 <USBD_GetConfig+0x48>
 8007ee8:	e012      	b.n	8007f10 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	3308      	adds	r3, #8
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 f920 	bl	800813e <USBD_CtlSendData>
        break;
 8007efe:	e00c      	b.n	8007f1a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	3304      	adds	r3, #4
 8007f04:	2201      	movs	r2, #1
 8007f06:	4619      	mov	r1, r3
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 f918 	bl	800813e <USBD_CtlSendData>
        break;
 8007f0e:	e004      	b.n	8007f1a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f8a9 	bl	800806a <USBD_CtlError>
        break;
 8007f18:	bf00      	nop
}
 8007f1a:	bf00      	nop
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b082      	sub	sp, #8
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
 8007f2a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f32:	3b01      	subs	r3, #1
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d81e      	bhi.n	8007f76 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	88db      	ldrh	r3, [r3, #6]
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d004      	beq.n	8007f4a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007f40:	6839      	ldr	r1, [r7, #0]
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f891 	bl	800806a <USBD_CtlError>
        break;
 8007f48:	e01a      	b.n	8007f80 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d005      	beq.n	8007f66 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	f043 0202 	orr.w	r2, r3, #2
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	330c      	adds	r3, #12
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f8e5 	bl	800813e <USBD_CtlSendData>
      break;
 8007f74:	e004      	b.n	8007f80 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f876 	bl	800806a <USBD_CtlError>
      break;
 8007f7e:	bf00      	nop
  }
}
 8007f80:	bf00      	nop
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	885b      	ldrh	r3, [r3, #2]
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d106      	bne.n	8007fa8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f929 	bl	80081fa <USBD_CtlSendStatus>
  }
}
 8007fa8:	bf00      	nop
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d80b      	bhi.n	8007fde <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	885b      	ldrh	r3, [r3, #2]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d10c      	bne.n	8007fe8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f90f 	bl	80081fa <USBD_CtlSendStatus>
      }
      break;
 8007fdc:	e004      	b.n	8007fe8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f842 	bl	800806a <USBD_CtlError>
      break;
 8007fe6:	e000      	b.n	8007fea <USBD_ClrFeature+0x3a>
      break;
 8007fe8:	bf00      	nop
  }
}
 8007fea:	bf00      	nop
 8007fec:	3708      	adds	r7, #8
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b083      	sub	sp, #12
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	781a      	ldrb	r2, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	785a      	ldrb	r2, [r3, #1]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	3302      	adds	r3, #2
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	b29a      	uxth	r2, r3
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	3303      	adds	r3, #3
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	b29b      	uxth	r3, r3
 800801c:	021b      	lsls	r3, r3, #8
 800801e:	b29b      	uxth	r3, r3
 8008020:	4413      	add	r3, r2
 8008022:	b29a      	uxth	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	3304      	adds	r3, #4
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	b29a      	uxth	r2, r3
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	3305      	adds	r3, #5
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	b29b      	uxth	r3, r3
 8008038:	021b      	lsls	r3, r3, #8
 800803a:	b29b      	uxth	r3, r3
 800803c:	4413      	add	r3, r2
 800803e:	b29a      	uxth	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	3306      	adds	r3, #6
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	b29a      	uxth	r2, r3
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	3307      	adds	r3, #7
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	b29b      	uxth	r3, r3
 8008054:	021b      	lsls	r3, r3, #8
 8008056:	b29b      	uxth	r3, r3
 8008058:	4413      	add	r3, r2
 800805a:	b29a      	uxth	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	80da      	strh	r2, [r3, #6]

}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	bc80      	pop	{r7}
 8008068:	4770      	bx	lr

0800806a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b082      	sub	sp, #8
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
 8008072:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008074:	2180      	movs	r1, #128	; 0x80
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f003 fb9a 	bl	800b7b0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800807c:	2100      	movs	r1, #0
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f003 fb96 	bl	800b7b0 <USBD_LL_StallEP>
}
 8008084:	bf00      	nop
 8008086:	3708      	adds	r7, #8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008098:	2300      	movs	r3, #0
 800809a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d032      	beq.n	8008108 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f000 f834 	bl	8008110 <USBD_GetLen>
 80080a8:	4603      	mov	r3, r0
 80080aa:	3301      	adds	r3, #1
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	005b      	lsls	r3, r3, #1
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80080b6:	7dfb      	ldrb	r3, [r7, #23]
 80080b8:	1c5a      	adds	r2, r3, #1
 80080ba:	75fa      	strb	r2, [r7, #23]
 80080bc:	461a      	mov	r2, r3
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	4413      	add	r3, r2
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	7812      	ldrb	r2, [r2, #0]
 80080c6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80080c8:	7dfb      	ldrb	r3, [r7, #23]
 80080ca:	1c5a      	adds	r2, r3, #1
 80080cc:	75fa      	strb	r2, [r7, #23]
 80080ce:	461a      	mov	r2, r3
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	4413      	add	r3, r2
 80080d4:	2203      	movs	r2, #3
 80080d6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80080d8:	e012      	b.n	8008100 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	1c5a      	adds	r2, r3, #1
 80080de:	60fa      	str	r2, [r7, #12]
 80080e0:	7dfa      	ldrb	r2, [r7, #23]
 80080e2:	1c51      	adds	r1, r2, #1
 80080e4:	75f9      	strb	r1, [r7, #23]
 80080e6:	4611      	mov	r1, r2
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	440a      	add	r2, r1
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80080f0:	7dfb      	ldrb	r3, [r7, #23]
 80080f2:	1c5a      	adds	r2, r3, #1
 80080f4:	75fa      	strb	r2, [r7, #23]
 80080f6:	461a      	mov	r2, r3
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	4413      	add	r3, r2
 80080fc:	2200      	movs	r2, #0
 80080fe:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1e8      	bne.n	80080da <USBD_GetString+0x4e>
    }
  }
}
 8008108:	bf00      	nop
 800810a:	3718      	adds	r7, #24
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008118:	2300      	movs	r3, #0
 800811a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800811c:	e005      	b.n	800812a <USBD_GetLen+0x1a>
  {
    len++;
 800811e:	7bfb      	ldrb	r3, [r7, #15]
 8008120:	3301      	adds	r3, #1
 8008122:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	3301      	adds	r3, #1
 8008128:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1f5      	bne.n	800811e <USBD_GetLen+0xe>
  }

  return len;
 8008132:	7bfb      	ldrb	r3, [r7, #15]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	bc80      	pop	{r7}
 800813c:	4770      	bx	lr

0800813e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800813e:	b580      	push	{r7, lr}
 8008140:	b084      	sub	sp, #16
 8008142:	af00      	add	r7, sp, #0
 8008144:	60f8      	str	r0, [r7, #12]
 8008146:	60b9      	str	r1, [r7, #8]
 8008148:	4613      	mov	r3, r2
 800814a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2202      	movs	r2, #2
 8008150:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008154:	88fa      	ldrh	r2, [r7, #6]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800815a:	88fa      	ldrh	r2, [r7, #6]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008160:	88fb      	ldrh	r3, [r7, #6]
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	2100      	movs	r1, #0
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	f003 fbab 	bl	800b8c2 <USBD_LL_Transmit>

  return USBD_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b084      	sub	sp, #16
 800817a:	af00      	add	r7, sp, #0
 800817c:	60f8      	str	r0, [r7, #12]
 800817e:	60b9      	str	r1, [r7, #8]
 8008180:	4613      	mov	r3, r2
 8008182:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008184:	88fb      	ldrh	r3, [r7, #6]
 8008186:	68ba      	ldr	r2, [r7, #8]
 8008188:	2100      	movs	r1, #0
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f003 fb99 	bl	800b8c2 <USBD_LL_Transmit>

  return USBD_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b084      	sub	sp, #16
 800819e:	af00      	add	r7, sp, #0
 80081a0:	60f8      	str	r0, [r7, #12]
 80081a2:	60b9      	str	r1, [r7, #8]
 80081a4:	4613      	mov	r3, r2
 80081a6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2203      	movs	r2, #3
 80081ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80081b0:	88fa      	ldrh	r2, [r7, #6]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80081b8:	88fa      	ldrh	r2, [r7, #6]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081c0:	88fb      	ldrh	r3, [r7, #6]
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	2100      	movs	r1, #0
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f003 fb9e 	bl	800b908 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b084      	sub	sp, #16
 80081da:	af00      	add	r7, sp, #0
 80081dc:	60f8      	str	r0, [r7, #12]
 80081de:	60b9      	str	r1, [r7, #8]
 80081e0:	4613      	mov	r3, r2
 80081e2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081e4:	88fb      	ldrh	r3, [r7, #6]
 80081e6:	68ba      	ldr	r2, [r7, #8]
 80081e8:	2100      	movs	r1, #0
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f003 fb8c 	bl	800b908 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b082      	sub	sp, #8
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2204      	movs	r2, #4
 8008206:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800820a:	2300      	movs	r3, #0
 800820c:	2200      	movs	r2, #0
 800820e:	2100      	movs	r1, #0
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f003 fb56 	bl	800b8c2 <USBD_LL_Transmit>

  return USBD_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2205      	movs	r2, #5
 800822c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008230:	2300      	movs	r3, #0
 8008232:	2200      	movs	r2, #0
 8008234:	2100      	movs	r1, #0
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f003 fb66 	bl	800b908 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
	...

08008248 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800824e:	f3ef 8305 	mrs	r3, IPSR
 8008252:	60bb      	str	r3, [r7, #8]
  return(result);
 8008254:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008256:	2b00      	cmp	r3, #0
 8008258:	d10f      	bne.n	800827a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800825a:	f3ef 8310 	mrs	r3, PRIMASK
 800825e:	607b      	str	r3, [r7, #4]
  return(result);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d109      	bne.n	800827a <osKernelInitialize+0x32>
 8008266:	4b10      	ldr	r3, [pc, #64]	; (80082a8 <osKernelInitialize+0x60>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b02      	cmp	r3, #2
 800826c:	d109      	bne.n	8008282 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800826e:	f3ef 8311 	mrs	r3, BASEPRI
 8008272:	603b      	str	r3, [r7, #0]
  return(result);
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d003      	beq.n	8008282 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800827a:	f06f 0305 	mvn.w	r3, #5
 800827e:	60fb      	str	r3, [r7, #12]
 8008280:	e00c      	b.n	800829c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008282:	4b09      	ldr	r3, [pc, #36]	; (80082a8 <osKernelInitialize+0x60>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d105      	bne.n	8008296 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800828a:	4b07      	ldr	r3, [pc, #28]	; (80082a8 <osKernelInitialize+0x60>)
 800828c:	2201      	movs	r2, #1
 800828e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008290:	2300      	movs	r3, #0
 8008292:	60fb      	str	r3, [r7, #12]
 8008294:	e002      	b.n	800829c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008296:	f04f 33ff 	mov.w	r3, #4294967295
 800829a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800829c:	68fb      	ldr	r3, [r7, #12]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bc80      	pop	{r7}
 80082a6:	4770      	bx	lr
 80082a8:	200001c4 	.word	0x200001c4

080082ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082b2:	f3ef 8305 	mrs	r3, IPSR
 80082b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80082b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d10f      	bne.n	80082de <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082be:	f3ef 8310 	mrs	r3, PRIMASK
 80082c2:	607b      	str	r3, [r7, #4]
  return(result);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d109      	bne.n	80082de <osKernelStart+0x32>
 80082ca:	4b11      	ldr	r3, [pc, #68]	; (8008310 <osKernelStart+0x64>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d109      	bne.n	80082e6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80082d2:	f3ef 8311 	mrs	r3, BASEPRI
 80082d6:	603b      	str	r3, [r7, #0]
  return(result);
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d003      	beq.n	80082e6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80082de:	f06f 0305 	mvn.w	r3, #5
 80082e2:	60fb      	str	r3, [r7, #12]
 80082e4:	e00e      	b.n	8008304 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80082e6:	4b0a      	ldr	r3, [pc, #40]	; (8008310 <osKernelStart+0x64>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d107      	bne.n	80082fe <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80082ee:	4b08      	ldr	r3, [pc, #32]	; (8008310 <osKernelStart+0x64>)
 80082f0:	2202      	movs	r2, #2
 80082f2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80082f4:	f001 f9da 	bl	80096ac <vTaskStartScheduler>
      stat = osOK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	60fb      	str	r3, [r7, #12]
 80082fc:	e002      	b.n	8008304 <osKernelStart+0x58>
    } else {
      stat = osError;
 80082fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008302:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008304:	68fb      	ldr	r3, [r7, #12]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	200001c4 	.word	0x200001c4

08008314 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008314:	b580      	push	{r7, lr}
 8008316:	b092      	sub	sp, #72	; 0x48
 8008318:	af04      	add	r7, sp, #16
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008320:	2300      	movs	r3, #0
 8008322:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008324:	f3ef 8305 	mrs	r3, IPSR
 8008328:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800832c:	2b00      	cmp	r3, #0
 800832e:	f040 8094 	bne.w	800845a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008332:	f3ef 8310 	mrs	r3, PRIMASK
 8008336:	623b      	str	r3, [r7, #32]
  return(result);
 8008338:	6a3b      	ldr	r3, [r7, #32]
 800833a:	2b00      	cmp	r3, #0
 800833c:	f040 808d 	bne.w	800845a <osThreadNew+0x146>
 8008340:	4b48      	ldr	r3, [pc, #288]	; (8008464 <osThreadNew+0x150>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2b02      	cmp	r3, #2
 8008346:	d106      	bne.n	8008356 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008348:	f3ef 8311 	mrs	r3, BASEPRI
 800834c:	61fb      	str	r3, [r7, #28]
  return(result);
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	2b00      	cmp	r3, #0
 8008352:	f040 8082 	bne.w	800845a <osThreadNew+0x146>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d07e      	beq.n	800845a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800835c:	2380      	movs	r3, #128	; 0x80
 800835e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8008360:	2318      	movs	r3, #24
 8008362:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8008364:	2300      	movs	r3, #0
 8008366:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8008368:	f107 031b 	add.w	r3, r7, #27
 800836c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800836e:	f04f 33ff 	mov.w	r3, #4294967295
 8008372:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d045      	beq.n	8008406 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d002      	beq.n	8008388 <osThreadNew+0x74>
        name = attr->name;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d002      	beq.n	8008396 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008398:	2b00      	cmp	r3, #0
 800839a:	d008      	beq.n	80083ae <osThreadNew+0x9a>
 800839c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839e:	2b38      	cmp	r3, #56	; 0x38
 80083a0:	d805      	bhi.n	80083ae <osThreadNew+0x9a>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d001      	beq.n	80083b2 <osThreadNew+0x9e>
        return (NULL);
 80083ae:	2300      	movs	r3, #0
 80083b0:	e054      	b.n	800845c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d003      	beq.n	80083c2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	089b      	lsrs	r3, r3, #2
 80083c0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00e      	beq.n	80083e8 <osThreadNew+0xd4>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	2b5b      	cmp	r3, #91	; 0x5b
 80083d0:	d90a      	bls.n	80083e8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d006      	beq.n	80083e8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	695b      	ldr	r3, [r3, #20]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d002      	beq.n	80083e8 <osThreadNew+0xd4>
        mem = 1;
 80083e2:	2301      	movs	r3, #1
 80083e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80083e6:	e010      	b.n	800840a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10c      	bne.n	800840a <osThreadNew+0xf6>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d108      	bne.n	800840a <osThreadNew+0xf6>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d104      	bne.n	800840a <osThreadNew+0xf6>
          mem = 0;
 8008400:	2300      	movs	r3, #0
 8008402:	62bb      	str	r3, [r7, #40]	; 0x28
 8008404:	e001      	b.n	800840a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8008406:	2300      	movs	r3, #0
 8008408:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800840a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840c:	2b01      	cmp	r3, #1
 800840e:	d110      	bne.n	8008432 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008418:	9202      	str	r2, [sp, #8]
 800841a:	9301      	str	r3, [sp, #4]
 800841c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008424:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f000 ff74 	bl	8009314 <xTaskCreateStatic>
 800842c:	4603      	mov	r3, r0
 800842e:	617b      	str	r3, [r7, #20]
 8008430:	e013      	b.n	800845a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8008432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008434:	2b00      	cmp	r3, #0
 8008436:	d110      	bne.n	800845a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843a:	b29a      	uxth	r2, r3
 800843c:	f107 0314 	add.w	r3, r7, #20
 8008440:	9301      	str	r3, [sp, #4]
 8008442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f000 ffbe 	bl	80093cc <xTaskCreate>
 8008450:	4603      	mov	r3, r0
 8008452:	2b01      	cmp	r3, #1
 8008454:	d001      	beq.n	800845a <osThreadNew+0x146>
          hTask = NULL;
 8008456:	2300      	movs	r3, #0
 8008458:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800845a:	697b      	ldr	r3, [r7, #20]
}
 800845c:	4618      	mov	r0, r3
 800845e:	3738      	adds	r7, #56	; 0x38
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	200001c4 	.word	0x200001c4

08008468 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008468:	b580      	push	{r7, lr}
 800846a:	b086      	sub	sp, #24
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008470:	f3ef 8305 	mrs	r3, IPSR
 8008474:	613b      	str	r3, [r7, #16]
  return(result);
 8008476:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10f      	bne.n	800849c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800847c:	f3ef 8310 	mrs	r3, PRIMASK
 8008480:	60fb      	str	r3, [r7, #12]
  return(result);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d109      	bne.n	800849c <osDelay+0x34>
 8008488:	4b0d      	ldr	r3, [pc, #52]	; (80084c0 <osDelay+0x58>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2b02      	cmp	r3, #2
 800848e:	d109      	bne.n	80084a4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008490:	f3ef 8311 	mrs	r3, BASEPRI
 8008494:	60bb      	str	r3, [r7, #8]
  return(result);
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d003      	beq.n	80084a4 <osDelay+0x3c>
    stat = osErrorISR;
 800849c:	f06f 0305 	mvn.w	r3, #5
 80084a0:	617b      	str	r3, [r7, #20]
 80084a2:	e007      	b.n	80084b4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d002      	beq.n	80084b4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f001 f8c8 	bl	8009644 <vTaskDelay>
    }
  }

  return (stat);
 80084b4:	697b      	ldr	r3, [r7, #20]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3718      	adds	r7, #24
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	200001c4 	.word	0x200001c4

080084c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	4a06      	ldr	r2, [pc, #24]	; (80084ec <vApplicationGetIdleTaskMemory+0x28>)
 80084d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	4a05      	ldr	r2, [pc, #20]	; (80084f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80084da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2280      	movs	r2, #128	; 0x80
 80084e0:	601a      	str	r2, [r3, #0]
}
 80084e2:	bf00      	nop
 80084e4:	3714      	adds	r7, #20
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bc80      	pop	{r7}
 80084ea:	4770      	bx	lr
 80084ec:	200001c8 	.word	0x200001c8
 80084f0:	20000224 	.word	0x20000224

080084f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	4a07      	ldr	r2, [pc, #28]	; (8008520 <vApplicationGetTimerTaskMemory+0x2c>)
 8008504:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	4a06      	ldr	r2, [pc, #24]	; (8008524 <vApplicationGetTimerTaskMemory+0x30>)
 800850a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008512:	601a      	str	r2, [r3, #0]
}
 8008514:	bf00      	nop
 8008516:	3714      	adds	r7, #20
 8008518:	46bd      	mov	sp, r7
 800851a:	bc80      	pop	{r7}
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	20000424 	.word	0x20000424
 8008524:	20000480 	.word	0x20000480

08008528 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f103 0208 	add.w	r2, r3, #8
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f04f 32ff 	mov.w	r2, #4294967295
 8008540:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f103 0208 	add.w	r2, r3, #8
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f103 0208 	add.w	r2, r3, #8
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	bc80      	pop	{r7}
 8008564:	4770      	bx	lr

08008566 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008566:	b480      	push	{r7}
 8008568:	b083      	sub	sp, #12
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	bc80      	pop	{r7}
 800857c:	4770      	bx	lr

0800857e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800857e:	b480      	push	{r7}
 8008580:	b085      	sub	sp, #20
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
 8008586:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	68fa      	ldr	r2, [r7, #12]
 8008592:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	689a      	ldr	r2, [r3, #8]
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	683a      	ldr	r2, [r7, #0]
 80085a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	1c5a      	adds	r2, r3, #1
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	601a      	str	r2, [r3, #0]
}
 80085ba:	bf00      	nop
 80085bc:	3714      	adds	r7, #20
 80085be:	46bd      	mov	sp, r7
 80085c0:	bc80      	pop	{r7}
 80085c2:	4770      	bx	lr

080085c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085da:	d103      	bne.n	80085e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	60fb      	str	r3, [r7, #12]
 80085e2:	e00c      	b.n	80085fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	3308      	adds	r3, #8
 80085e8:	60fb      	str	r3, [r7, #12]
 80085ea:	e002      	b.n	80085f2 <vListInsert+0x2e>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	60fb      	str	r3, [r7, #12]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68ba      	ldr	r2, [r7, #8]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d2f6      	bcs.n	80085ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	685a      	ldr	r2, [r3, #4]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	683a      	ldr	r2, [r7, #0]
 8008618:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	1c5a      	adds	r2, r3, #1
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	601a      	str	r2, [r3, #0]
}
 800862a:	bf00      	nop
 800862c:	3714      	adds	r7, #20
 800862e:	46bd      	mov	sp, r7
 8008630:	bc80      	pop	{r7}
 8008632:	4770      	bx	lr

08008634 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	6892      	ldr	r2, [r2, #8]
 800864a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	6852      	ldr	r2, [r2, #4]
 8008654:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	429a      	cmp	r2, r3
 800865e:	d103      	bne.n	8008668 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	689a      	ldr	r2, [r3, #8]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	1e5a      	subs	r2, r3, #1
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3714      	adds	r7, #20
 8008680:	46bd      	mov	sp, r7
 8008682:	bc80      	pop	{r7}
 8008684:	4770      	bx	lr
	...

08008688 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d10a      	bne.n	80086b2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800869c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a0:	f383 8811 	msr	BASEPRI, r3
 80086a4:	f3bf 8f6f 	isb	sy
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80086ae:	bf00      	nop
 80086b0:	e7fe      	b.n	80086b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80086b2:	f002 fa33 	bl	800ab1c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086be:	68f9      	ldr	r1, [r7, #12]
 80086c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086c2:	fb01 f303 	mul.w	r3, r1, r3
 80086c6:	441a      	add	r2, r3
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086e2:	3b01      	subs	r3, #1
 80086e4:	68f9      	ldr	r1, [r7, #12]
 80086e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086e8:	fb01 f303 	mul.w	r3, r1, r3
 80086ec:	441a      	add	r2, r3
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	22ff      	movs	r2, #255	; 0xff
 80086f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	22ff      	movs	r2, #255	; 0xff
 80086fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d114      	bne.n	8008732 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d01a      	beq.n	8008746 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	3310      	adds	r3, #16
 8008714:	4618      	mov	r0, r3
 8008716:	f001 fa53 	bl	8009bc0 <xTaskRemoveFromEventList>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d012      	beq.n	8008746 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008720:	4b0c      	ldr	r3, [pc, #48]	; (8008754 <xQueueGenericReset+0xcc>)
 8008722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008726:	601a      	str	r2, [r3, #0]
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	e009      	b.n	8008746 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	3310      	adds	r3, #16
 8008736:	4618      	mov	r0, r3
 8008738:	f7ff fef6 	bl	8008528 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	3324      	adds	r3, #36	; 0x24
 8008740:	4618      	mov	r0, r3
 8008742:	f7ff fef1 	bl	8008528 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008746:	f002 fa19 	bl	800ab7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800874a:	2301      	movs	r3, #1
}
 800874c:	4618      	mov	r0, r3
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	e000ed04 	.word	0xe000ed04

08008758 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008758:	b580      	push	{r7, lr}
 800875a:	b08e      	sub	sp, #56	; 0x38
 800875c:	af02      	add	r7, sp, #8
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]
 8008764:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10a      	bne.n	8008782 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800876c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008770:	f383 8811 	msr	BASEPRI, r3
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800877e:	bf00      	nop
 8008780:	e7fe      	b.n	8008780 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10a      	bne.n	800879e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878c:	f383 8811 	msr	BASEPRI, r3
 8008790:	f3bf 8f6f 	isb	sy
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	627b      	str	r3, [r7, #36]	; 0x24
}
 800879a:	bf00      	nop
 800879c:	e7fe      	b.n	800879c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <xQueueGenericCreateStatic+0x52>
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <xQueueGenericCreateStatic+0x56>
 80087aa:	2301      	movs	r3, #1
 80087ac:	e000      	b.n	80087b0 <xQueueGenericCreateStatic+0x58>
 80087ae:	2300      	movs	r3, #0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10a      	bne.n	80087ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80087b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	623b      	str	r3, [r7, #32]
}
 80087c6:	bf00      	nop
 80087c8:	e7fe      	b.n	80087c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d102      	bne.n	80087d6 <xQueueGenericCreateStatic+0x7e>
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d101      	bne.n	80087da <xQueueGenericCreateStatic+0x82>
 80087d6:	2301      	movs	r3, #1
 80087d8:	e000      	b.n	80087dc <xQueueGenericCreateStatic+0x84>
 80087da:	2300      	movs	r3, #0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d10a      	bne.n	80087f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80087e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e4:	f383 8811 	msr	BASEPRI, r3
 80087e8:	f3bf 8f6f 	isb	sy
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	61fb      	str	r3, [r7, #28]
}
 80087f2:	bf00      	nop
 80087f4:	e7fe      	b.n	80087f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80087f6:	2350      	movs	r3, #80	; 0x50
 80087f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	2b50      	cmp	r3, #80	; 0x50
 80087fe:	d00a      	beq.n	8008816 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008804:	f383 8811 	msr	BASEPRI, r3
 8008808:	f3bf 8f6f 	isb	sy
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	61bb      	str	r3, [r7, #24]
}
 8008812:	bf00      	nop
 8008814:	e7fe      	b.n	8008814 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800881a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00d      	beq.n	800883c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008822:	2201      	movs	r2, #1
 8008824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008828:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800882c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	4613      	mov	r3, r2
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	68b9      	ldr	r1, [r7, #8]
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f000 f843 	bl	80088c2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800883c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800883e:	4618      	mov	r0, r3
 8008840:	3730      	adds	r7, #48	; 0x30
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008846:	b580      	push	{r7, lr}
 8008848:	b08a      	sub	sp, #40	; 0x28
 800884a:	af02      	add	r7, sp, #8
 800884c:	60f8      	str	r0, [r7, #12]
 800884e:	60b9      	str	r1, [r7, #8]
 8008850:	4613      	mov	r3, r2
 8008852:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10a      	bne.n	8008870 <xQueueGenericCreate+0x2a>
	__asm volatile
 800885a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885e:	f383 8811 	msr	BASEPRI, r3
 8008862:	f3bf 8f6f 	isb	sy
 8008866:	f3bf 8f4f 	dsb	sy
 800886a:	613b      	str	r3, [r7, #16]
}
 800886c:	bf00      	nop
 800886e:	e7fe      	b.n	800886e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d102      	bne.n	800887c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008876:	2300      	movs	r3, #0
 8008878:	61fb      	str	r3, [r7, #28]
 800887a:	e004      	b.n	8008886 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	fb02 f303 	mul.w	r3, r2, r3
 8008884:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	3350      	adds	r3, #80	; 0x50
 800888a:	4618      	mov	r0, r3
 800888c:	f002 fa46 	bl	800ad1c <pvPortMalloc>
 8008890:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00f      	beq.n	80088b8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	3350      	adds	r3, #80	; 0x50
 800889c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80088a6:	79fa      	ldrb	r2, [r7, #7]
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	9300      	str	r3, [sp, #0]
 80088ac:	4613      	mov	r3, r2
 80088ae:	697a      	ldr	r2, [r7, #20]
 80088b0:	68b9      	ldr	r1, [r7, #8]
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f000 f805 	bl	80088c2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80088b8:	69bb      	ldr	r3, [r7, #24]
	}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3720      	adds	r7, #32
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b084      	sub	sp, #16
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	60f8      	str	r0, [r7, #12]
 80088ca:	60b9      	str	r1, [r7, #8]
 80088cc:	607a      	str	r2, [r7, #4]
 80088ce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d103      	bne.n	80088de <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	69ba      	ldr	r2, [r7, #24]
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	e002      	b.n	80088e4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80088e4:	69bb      	ldr	r3, [r7, #24]
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80088f0:	2101      	movs	r1, #1
 80088f2:	69b8      	ldr	r0, [r7, #24]
 80088f4:	f7ff fec8 	bl	8008688 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	78fa      	ldrb	r2, [r7, #3]
 80088fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008900:	bf00      	nop
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b08e      	sub	sp, #56	; 0x38
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	607a      	str	r2, [r7, #4]
 8008914:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008916:	2300      	movs	r3, #0
 8008918:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800891e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008920:	2b00      	cmp	r3, #0
 8008922:	d10a      	bne.n	800893a <xQueueGenericSend+0x32>
	__asm volatile
 8008924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008928:	f383 8811 	msr	BASEPRI, r3
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	f3bf 8f4f 	dsb	sy
 8008934:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008936:	bf00      	nop
 8008938:	e7fe      	b.n	8008938 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d103      	bne.n	8008948 <xQueueGenericSend+0x40>
 8008940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008944:	2b00      	cmp	r3, #0
 8008946:	d101      	bne.n	800894c <xQueueGenericSend+0x44>
 8008948:	2301      	movs	r3, #1
 800894a:	e000      	b.n	800894e <xQueueGenericSend+0x46>
 800894c:	2300      	movs	r3, #0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d10a      	bne.n	8008968 <xQueueGenericSend+0x60>
	__asm volatile
 8008952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008956:	f383 8811 	msr	BASEPRI, r3
 800895a:	f3bf 8f6f 	isb	sy
 800895e:	f3bf 8f4f 	dsb	sy
 8008962:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008964:	bf00      	nop
 8008966:	e7fe      	b.n	8008966 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	2b02      	cmp	r3, #2
 800896c:	d103      	bne.n	8008976 <xQueueGenericSend+0x6e>
 800896e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008972:	2b01      	cmp	r3, #1
 8008974:	d101      	bne.n	800897a <xQueueGenericSend+0x72>
 8008976:	2301      	movs	r3, #1
 8008978:	e000      	b.n	800897c <xQueueGenericSend+0x74>
 800897a:	2300      	movs	r3, #0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10a      	bne.n	8008996 <xQueueGenericSend+0x8e>
	__asm volatile
 8008980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008984:	f383 8811 	msr	BASEPRI, r3
 8008988:	f3bf 8f6f 	isb	sy
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	623b      	str	r3, [r7, #32]
}
 8008992:	bf00      	nop
 8008994:	e7fe      	b.n	8008994 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008996:	f001 fad5 	bl	8009f44 <xTaskGetSchedulerState>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d102      	bne.n	80089a6 <xQueueGenericSend+0x9e>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d101      	bne.n	80089aa <xQueueGenericSend+0xa2>
 80089a6:	2301      	movs	r3, #1
 80089a8:	e000      	b.n	80089ac <xQueueGenericSend+0xa4>
 80089aa:	2300      	movs	r3, #0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d10a      	bne.n	80089c6 <xQueueGenericSend+0xbe>
	__asm volatile
 80089b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	61fb      	str	r3, [r7, #28]
}
 80089c2:	bf00      	nop
 80089c4:	e7fe      	b.n	80089c4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089c6:	f002 f8a9 	bl	800ab1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d302      	bcc.n	80089dc <xQueueGenericSend+0xd4>
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d129      	bne.n	8008a30 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089dc:	683a      	ldr	r2, [r7, #0]
 80089de:	68b9      	ldr	r1, [r7, #8]
 80089e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089e2:	f000 fb2a 	bl	800903a <prvCopyDataToQueue>
 80089e6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d010      	beq.n	8008a12 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f2:	3324      	adds	r3, #36	; 0x24
 80089f4:	4618      	mov	r0, r3
 80089f6:	f001 f8e3 	bl	8009bc0 <xTaskRemoveFromEventList>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d013      	beq.n	8008a28 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008a00:	4b3f      	ldr	r3, [pc, #252]	; (8008b00 <xQueueGenericSend+0x1f8>)
 8008a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a06:	601a      	str	r2, [r3, #0]
 8008a08:	f3bf 8f4f 	dsb	sy
 8008a0c:	f3bf 8f6f 	isb	sy
 8008a10:	e00a      	b.n	8008a28 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d007      	beq.n	8008a28 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008a18:	4b39      	ldr	r3, [pc, #228]	; (8008b00 <xQueueGenericSend+0x1f8>)
 8008a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a1e:	601a      	str	r2, [r3, #0]
 8008a20:	f3bf 8f4f 	dsb	sy
 8008a24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008a28:	f002 f8a8 	bl	800ab7c <vPortExitCritical>
				return pdPASS;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e063      	b.n	8008af8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d103      	bne.n	8008a3e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a36:	f002 f8a1 	bl	800ab7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	e05c      	b.n	8008af8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d106      	bne.n	8008a52 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a44:	f107 0314 	add.w	r3, r7, #20
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f001 f91d 	bl	8009c88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a52:	f002 f893 	bl	800ab7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a56:	f000 fe8f 	bl	8009778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a5a:	f002 f85f 	bl	800ab1c <vPortEnterCritical>
 8008a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a64:	b25b      	sxtb	r3, r3
 8008a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6a:	d103      	bne.n	8008a74 <xQueueGenericSend+0x16c>
 8008a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a7a:	b25b      	sxtb	r3, r3
 8008a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a80:	d103      	bne.n	8008a8a <xQueueGenericSend+0x182>
 8008a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a8a:	f002 f877 	bl	800ab7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a8e:	1d3a      	adds	r2, r7, #4
 8008a90:	f107 0314 	add.w	r3, r7, #20
 8008a94:	4611      	mov	r1, r2
 8008a96:	4618      	mov	r0, r3
 8008a98:	f001 f90c 	bl	8009cb4 <xTaskCheckForTimeOut>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d124      	bne.n	8008aec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008aa2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008aa4:	f000 fbc1 	bl	800922a <prvIsQueueFull>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d018      	beq.n	8008ae0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab0:	3310      	adds	r3, #16
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	4611      	mov	r1, r2
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f001 f832 	bl	8009b20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008abc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008abe:	f000 fb4c 	bl	800915a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008ac2:	f000 fe67 	bl	8009794 <xTaskResumeAll>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f47f af7c 	bne.w	80089c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008ace:	4b0c      	ldr	r3, [pc, #48]	; (8008b00 <xQueueGenericSend+0x1f8>)
 8008ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ad4:	601a      	str	r2, [r3, #0]
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	f3bf 8f6f 	isb	sy
 8008ade:	e772      	b.n	80089c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008ae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ae2:	f000 fb3a 	bl	800915a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ae6:	f000 fe55 	bl	8009794 <xTaskResumeAll>
 8008aea:	e76c      	b.n	80089c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008aee:	f000 fb34 	bl	800915a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008af2:	f000 fe4f 	bl	8009794 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008af6:	2300      	movs	r3, #0
		}
	}
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3738      	adds	r7, #56	; 0x38
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	e000ed04 	.word	0xe000ed04

08008b04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b08e      	sub	sp, #56	; 0x38
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	607a      	str	r2, [r7, #4]
 8008b10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d10a      	bne.n	8008b32 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b20:	f383 8811 	msr	BASEPRI, r3
 8008b24:	f3bf 8f6f 	isb	sy
 8008b28:	f3bf 8f4f 	dsb	sy
 8008b2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b2e:	bf00      	nop
 8008b30:	e7fe      	b.n	8008b30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d103      	bne.n	8008b40 <xQueueGenericSendFromISR+0x3c>
 8008b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d101      	bne.n	8008b44 <xQueueGenericSendFromISR+0x40>
 8008b40:	2301      	movs	r3, #1
 8008b42:	e000      	b.n	8008b46 <xQueueGenericSendFromISR+0x42>
 8008b44:	2300      	movs	r3, #0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d10a      	bne.n	8008b60 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4e:	f383 8811 	msr	BASEPRI, r3
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	623b      	str	r3, [r7, #32]
}
 8008b5c:	bf00      	nop
 8008b5e:	e7fe      	b.n	8008b5e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d103      	bne.n	8008b6e <xQueueGenericSendFromISR+0x6a>
 8008b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d101      	bne.n	8008b72 <xQueueGenericSendFromISR+0x6e>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e000      	b.n	8008b74 <xQueueGenericSendFromISR+0x70>
 8008b72:	2300      	movs	r3, #0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10a      	bne.n	8008b8e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	61fb      	str	r3, [r7, #28]
}
 8008b8a:	bf00      	nop
 8008b8c:	e7fe      	b.n	8008b8c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b8e:	f002 f887 	bl	800aca0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b92:	f3ef 8211 	mrs	r2, BASEPRI
 8008b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9a:	f383 8811 	msr	BASEPRI, r3
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	61ba      	str	r2, [r7, #24]
 8008ba8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008baa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008bac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d302      	bcc.n	8008bc0 <xQueueGenericSendFromISR+0xbc>
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d12c      	bne.n	8008c1a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	68b9      	ldr	r1, [r7, #8]
 8008bce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bd0:	f000 fa33 	bl	800903a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008bd4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bdc:	d112      	bne.n	8008c04 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d016      	beq.n	8008c14 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be8:	3324      	adds	r3, #36	; 0x24
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 ffe8 	bl	8009bc0 <xTaskRemoveFromEventList>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00e      	beq.n	8008c14 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00b      	beq.n	8008c14 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	601a      	str	r2, [r3, #0]
 8008c02:	e007      	b.n	8008c14 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c08:	3301      	adds	r3, #1
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	b25a      	sxtb	r2, r3
 8008c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008c14:	2301      	movs	r3, #1
 8008c16:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008c18:	e001      	b.n	8008c1e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8008c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c20:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008c28:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3738      	adds	r7, #56	; 0x38
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b08c      	sub	sp, #48	; 0x30
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c40:	2300      	movs	r3, #0
 8008c42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10a      	bne.n	8008c64 <xQueueReceive+0x30>
	__asm volatile
 8008c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c52:	f383 8811 	msr	BASEPRI, r3
 8008c56:	f3bf 8f6f 	isb	sy
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	623b      	str	r3, [r7, #32]
}
 8008c60:	bf00      	nop
 8008c62:	e7fe      	b.n	8008c62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d103      	bne.n	8008c72 <xQueueReceive+0x3e>
 8008c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d101      	bne.n	8008c76 <xQueueReceive+0x42>
 8008c72:	2301      	movs	r3, #1
 8008c74:	e000      	b.n	8008c78 <xQueueReceive+0x44>
 8008c76:	2300      	movs	r3, #0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10a      	bne.n	8008c92 <xQueueReceive+0x5e>
	__asm volatile
 8008c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c80:	f383 8811 	msr	BASEPRI, r3
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	61fb      	str	r3, [r7, #28]
}
 8008c8e:	bf00      	nop
 8008c90:	e7fe      	b.n	8008c90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c92:	f001 f957 	bl	8009f44 <xTaskGetSchedulerState>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d102      	bne.n	8008ca2 <xQueueReceive+0x6e>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d101      	bne.n	8008ca6 <xQueueReceive+0x72>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e000      	b.n	8008ca8 <xQueueReceive+0x74>
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d10a      	bne.n	8008cc2 <xQueueReceive+0x8e>
	__asm volatile
 8008cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb0:	f383 8811 	msr	BASEPRI, r3
 8008cb4:	f3bf 8f6f 	isb	sy
 8008cb8:	f3bf 8f4f 	dsb	sy
 8008cbc:	61bb      	str	r3, [r7, #24]
}
 8008cbe:	bf00      	nop
 8008cc0:	e7fe      	b.n	8008cc0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cc2:	f001 ff2b 	bl	800ab1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d01f      	beq.n	8008d12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008cd2:	68b9      	ldr	r1, [r7, #8]
 8008cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cd6:	f000 fa1a 	bl	800910e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cdc:	1e5a      	subs	r2, r3, #1
 8008cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00f      	beq.n	8008d0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cec:	3310      	adds	r3, #16
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f000 ff66 	bl	8009bc0 <xTaskRemoveFromEventList>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d007      	beq.n	8008d0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008cfa:	4b3d      	ldr	r3, [pc, #244]	; (8008df0 <xQueueReceive+0x1bc>)
 8008cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d00:	601a      	str	r2, [r3, #0]
 8008d02:	f3bf 8f4f 	dsb	sy
 8008d06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d0a:	f001 ff37 	bl	800ab7c <vPortExitCritical>
				return pdPASS;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e069      	b.n	8008de6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d103      	bne.n	8008d20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d18:	f001 ff30 	bl	800ab7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	e062      	b.n	8008de6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d106      	bne.n	8008d34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d26:	f107 0310 	add.w	r3, r7, #16
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f000 ffac 	bl	8009c88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d30:	2301      	movs	r3, #1
 8008d32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d34:	f001 ff22 	bl	800ab7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d38:	f000 fd1e 	bl	8009778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d3c:	f001 feee 	bl	800ab1c <vPortEnterCritical>
 8008d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d46:	b25b      	sxtb	r3, r3
 8008d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d4c:	d103      	bne.n	8008d56 <xQueueReceive+0x122>
 8008d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d50:	2200      	movs	r2, #0
 8008d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d5c:	b25b      	sxtb	r3, r3
 8008d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d62:	d103      	bne.n	8008d6c <xQueueReceive+0x138>
 8008d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d6c:	f001 ff06 	bl	800ab7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d70:	1d3a      	adds	r2, r7, #4
 8008d72:	f107 0310 	add.w	r3, r7, #16
 8008d76:	4611      	mov	r1, r2
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f000 ff9b 	bl	8009cb4 <xTaskCheckForTimeOut>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d123      	bne.n	8008dcc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d86:	f000 fa3a 	bl	80091fe <prvIsQueueEmpty>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d017      	beq.n	8008dc0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d92:	3324      	adds	r3, #36	; 0x24
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	4611      	mov	r1, r2
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f000 fec1 	bl	8009b20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008da0:	f000 f9db 	bl	800915a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008da4:	f000 fcf6 	bl	8009794 <xTaskResumeAll>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d189      	bne.n	8008cc2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008dae:	4b10      	ldr	r3, [pc, #64]	; (8008df0 <xQueueReceive+0x1bc>)
 8008db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008db4:	601a      	str	r2, [r3, #0]
 8008db6:	f3bf 8f4f 	dsb	sy
 8008dba:	f3bf 8f6f 	isb	sy
 8008dbe:	e780      	b.n	8008cc2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008dc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dc2:	f000 f9ca 	bl	800915a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008dc6:	f000 fce5 	bl	8009794 <xTaskResumeAll>
 8008dca:	e77a      	b.n	8008cc2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dce:	f000 f9c4 	bl	800915a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008dd2:	f000 fcdf 	bl	8009794 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dd8:	f000 fa11 	bl	80091fe <prvIsQueueEmpty>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	f43f af6f 	beq.w	8008cc2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008de4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3730      	adds	r7, #48	; 0x30
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	e000ed04 	.word	0xe000ed04

08008df4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b08e      	sub	sp, #56	; 0x38
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008e06:	2300      	movs	r3, #0
 8008e08:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d10a      	bne.n	8008e26 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e14:	f383 8811 	msr	BASEPRI, r3
 8008e18:	f3bf 8f6f 	isb	sy
 8008e1c:	f3bf 8f4f 	dsb	sy
 8008e20:	623b      	str	r3, [r7, #32]
}
 8008e22:	bf00      	nop
 8008e24:	e7fe      	b.n	8008e24 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00a      	beq.n	8008e44 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e32:	f383 8811 	msr	BASEPRI, r3
 8008e36:	f3bf 8f6f 	isb	sy
 8008e3a:	f3bf 8f4f 	dsb	sy
 8008e3e:	61fb      	str	r3, [r7, #28]
}
 8008e40:	bf00      	nop
 8008e42:	e7fe      	b.n	8008e42 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e44:	f001 f87e 	bl	8009f44 <xTaskGetSchedulerState>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d102      	bne.n	8008e54 <xQueueSemaphoreTake+0x60>
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d101      	bne.n	8008e58 <xQueueSemaphoreTake+0x64>
 8008e54:	2301      	movs	r3, #1
 8008e56:	e000      	b.n	8008e5a <xQueueSemaphoreTake+0x66>
 8008e58:	2300      	movs	r3, #0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10a      	bne.n	8008e74 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	61bb      	str	r3, [r7, #24]
}
 8008e70:	bf00      	nop
 8008e72:	e7fe      	b.n	8008e72 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e74:	f001 fe52 	bl	800ab1c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d024      	beq.n	8008ece <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e86:	1e5a      	subs	r2, r3, #1
 8008e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d104      	bne.n	8008e9e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008e94:	f001 f9d6 	bl	800a244 <pvTaskIncrementMutexHeldCount>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00f      	beq.n	8008ec6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea8:	3310      	adds	r3, #16
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 fe88 	bl	8009bc0 <xTaskRemoveFromEventList>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d007      	beq.n	8008ec6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008eb6:	4b54      	ldr	r3, [pc, #336]	; (8009008 <xQueueSemaphoreTake+0x214>)
 8008eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ebc:	601a      	str	r2, [r3, #0]
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008ec6:	f001 fe59 	bl	800ab7c <vPortExitCritical>
				return pdPASS;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e097      	b.n	8008ffe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d111      	bne.n	8008ef8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00a      	beq.n	8008ef0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ede:	f383 8811 	msr	BASEPRI, r3
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	f3bf 8f4f 	dsb	sy
 8008eea:	617b      	str	r3, [r7, #20]
}
 8008eec:	bf00      	nop
 8008eee:	e7fe      	b.n	8008eee <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008ef0:	f001 fe44 	bl	800ab7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	e082      	b.n	8008ffe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d106      	bne.n	8008f0c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008efe:	f107 030c 	add.w	r3, r7, #12
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 fec0 	bl	8009c88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f0c:	f001 fe36 	bl	800ab7c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f10:	f000 fc32 	bl	8009778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f14:	f001 fe02 	bl	800ab1c <vPortEnterCritical>
 8008f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f1e:	b25b      	sxtb	r3, r3
 8008f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f24:	d103      	bne.n	8008f2e <xQueueSemaphoreTake+0x13a>
 8008f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f34:	b25b      	sxtb	r3, r3
 8008f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f3a:	d103      	bne.n	8008f44 <xQueueSemaphoreTake+0x150>
 8008f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f44:	f001 fe1a 	bl	800ab7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f48:	463a      	mov	r2, r7
 8008f4a:	f107 030c 	add.w	r3, r7, #12
 8008f4e:	4611      	mov	r1, r2
 8008f50:	4618      	mov	r0, r3
 8008f52:	f000 feaf 	bl	8009cb4 <xTaskCheckForTimeOut>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d132      	bne.n	8008fc2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f5e:	f000 f94e 	bl	80091fe <prvIsQueueEmpty>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d026      	beq.n	8008fb6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d109      	bne.n	8008f84 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008f70:	f001 fdd4 	bl	800ab1c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f001 f801 	bl	8009f80 <xTaskPriorityInherit>
 8008f7e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008f80:	f001 fdfc 	bl	800ab7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f86:	3324      	adds	r3, #36	; 0x24
 8008f88:	683a      	ldr	r2, [r7, #0]
 8008f8a:	4611      	mov	r1, r2
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f000 fdc7 	bl	8009b20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f94:	f000 f8e1 	bl	800915a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f98:	f000 fbfc 	bl	8009794 <xTaskResumeAll>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f47f af68 	bne.w	8008e74 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008fa4:	4b18      	ldr	r3, [pc, #96]	; (8009008 <xQueueSemaphoreTake+0x214>)
 8008fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008faa:	601a      	str	r2, [r3, #0]
 8008fac:	f3bf 8f4f 	dsb	sy
 8008fb0:	f3bf 8f6f 	isb	sy
 8008fb4:	e75e      	b.n	8008e74 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008fb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fb8:	f000 f8cf 	bl	800915a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008fbc:	f000 fbea 	bl	8009794 <xTaskResumeAll>
 8008fc0:	e758      	b.n	8008e74 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008fc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fc4:	f000 f8c9 	bl	800915a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fc8:	f000 fbe4 	bl	8009794 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fce:	f000 f916 	bl	80091fe <prvIsQueueEmpty>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f43f af4d 	beq.w	8008e74 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00d      	beq.n	8008ffc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008fe0:	f001 fd9c 	bl	800ab1c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008fe4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fe6:	f000 f811 	bl	800900c <prvGetDisinheritPriorityAfterTimeout>
 8008fea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f001 f8a0 	bl	800a138 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008ff8:	f001 fdc0 	bl	800ab7c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008ffc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3738      	adds	r7, #56	; 0x38
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	e000ed04 	.word	0xe000ed04

0800900c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800900c:	b480      	push	{r7}
 800900e:	b085      	sub	sp, #20
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009018:	2b00      	cmp	r3, #0
 800901a:	d006      	beq.n	800902a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009026:	60fb      	str	r3, [r7, #12]
 8009028:	e001      	b.n	800902e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800902a:	2300      	movs	r3, #0
 800902c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800902e:	68fb      	ldr	r3, [r7, #12]
	}
 8009030:	4618      	mov	r0, r3
 8009032:	3714      	adds	r7, #20
 8009034:	46bd      	mov	sp, r7
 8009036:	bc80      	pop	{r7}
 8009038:	4770      	bx	lr

0800903a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b086      	sub	sp, #24
 800903e:	af00      	add	r7, sp, #0
 8009040:	60f8      	str	r0, [r7, #12]
 8009042:	60b9      	str	r1, [r7, #8]
 8009044:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009046:	2300      	movs	r3, #0
 8009048:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800904e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009054:	2b00      	cmp	r3, #0
 8009056:	d10d      	bne.n	8009074 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d14d      	bne.n	80090fc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	4618      	mov	r0, r3
 8009066:	f000 fff9 	bl	800a05c <xTaskPriorityDisinherit>
 800906a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2200      	movs	r2, #0
 8009070:	605a      	str	r2, [r3, #4]
 8009072:	e043      	b.n	80090fc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d119      	bne.n	80090ae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6898      	ldr	r0, [r3, #8]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009082:	461a      	mov	r2, r3
 8009084:	68b9      	ldr	r1, [r7, #8]
 8009086:	f003 fa4d 	bl	800c524 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	689a      	ldr	r2, [r3, #8]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009092:	441a      	add	r2, r3
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	689a      	ldr	r2, [r3, #8]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d32b      	bcc.n	80090fc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	609a      	str	r2, [r3, #8]
 80090ac:	e026      	b.n	80090fc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	68d8      	ldr	r0, [r3, #12]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b6:	461a      	mov	r2, r3
 80090b8:	68b9      	ldr	r1, [r7, #8]
 80090ba:	f003 fa33 	bl	800c524 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	68da      	ldr	r2, [r3, #12]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c6:	425b      	negs	r3, r3
 80090c8:	441a      	add	r2, r3
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	68da      	ldr	r2, [r3, #12]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d207      	bcs.n	80090ea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	685a      	ldr	r2, [r3, #4]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e2:	425b      	negs	r3, r3
 80090e4:	441a      	add	r2, r3
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	d105      	bne.n	80090fc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d002      	beq.n	80090fc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	3b01      	subs	r3, #1
 80090fa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	1c5a      	adds	r2, r3, #1
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009104:	697b      	ldr	r3, [r7, #20]
}
 8009106:	4618      	mov	r0, r3
 8009108:	3718      	adds	r7, #24
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b082      	sub	sp, #8
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
 8009116:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800911c:	2b00      	cmp	r3, #0
 800911e:	d018      	beq.n	8009152 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	68da      	ldr	r2, [r3, #12]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009128:	441a      	add	r2, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	68da      	ldr	r2, [r3, #12]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	429a      	cmp	r2, r3
 8009138:	d303      	bcc.n	8009142 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	68d9      	ldr	r1, [r3, #12]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914a:	461a      	mov	r2, r3
 800914c:	6838      	ldr	r0, [r7, #0]
 800914e:	f003 f9e9 	bl	800c524 <memcpy>
	}
}
 8009152:	bf00      	nop
 8009154:	3708      	adds	r7, #8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b084      	sub	sp, #16
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009162:	f001 fcdb 	bl	800ab1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800916c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800916e:	e011      	b.n	8009194 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009174:	2b00      	cmp	r3, #0
 8009176:	d012      	beq.n	800919e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	3324      	adds	r3, #36	; 0x24
 800917c:	4618      	mov	r0, r3
 800917e:	f000 fd1f 	bl	8009bc0 <xTaskRemoveFromEventList>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d001      	beq.n	800918c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009188:	f000 fdf6 	bl	8009d78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800918c:	7bfb      	ldrb	r3, [r7, #15]
 800918e:	3b01      	subs	r3, #1
 8009190:	b2db      	uxtb	r3, r3
 8009192:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009198:	2b00      	cmp	r3, #0
 800919a:	dce9      	bgt.n	8009170 <prvUnlockQueue+0x16>
 800919c:	e000      	b.n	80091a0 <prvUnlockQueue+0x46>
					break;
 800919e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	22ff      	movs	r2, #255	; 0xff
 80091a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80091a8:	f001 fce8 	bl	800ab7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80091ac:	f001 fcb6 	bl	800ab1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091b6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091b8:	e011      	b.n	80091de <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d012      	beq.n	80091e8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	3310      	adds	r3, #16
 80091c6:	4618      	mov	r0, r3
 80091c8:	f000 fcfa 	bl	8009bc0 <xTaskRemoveFromEventList>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d001      	beq.n	80091d6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80091d2:	f000 fdd1 	bl	8009d78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80091d6:	7bbb      	ldrb	r3, [r7, #14]
 80091d8:	3b01      	subs	r3, #1
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	dce9      	bgt.n	80091ba <prvUnlockQueue+0x60>
 80091e6:	e000      	b.n	80091ea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80091e8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	22ff      	movs	r2, #255	; 0xff
 80091ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80091f2:	f001 fcc3 	bl	800ab7c <vPortExitCritical>
}
 80091f6:	bf00      	nop
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b084      	sub	sp, #16
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009206:	f001 fc89 	bl	800ab1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800920e:	2b00      	cmp	r3, #0
 8009210:	d102      	bne.n	8009218 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009212:	2301      	movs	r3, #1
 8009214:	60fb      	str	r3, [r7, #12]
 8009216:	e001      	b.n	800921c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009218:	2300      	movs	r3, #0
 800921a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800921c:	f001 fcae 	bl	800ab7c <vPortExitCritical>

	return xReturn;
 8009220:	68fb      	ldr	r3, [r7, #12]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b084      	sub	sp, #16
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009232:	f001 fc73 	bl	800ab1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800923e:	429a      	cmp	r2, r3
 8009240:	d102      	bne.n	8009248 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009242:	2301      	movs	r3, #1
 8009244:	60fb      	str	r3, [r7, #12]
 8009246:	e001      	b.n	800924c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009248:	2300      	movs	r3, #0
 800924a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800924c:	f001 fc96 	bl	800ab7c <vPortExitCritical>

	return xReturn;
 8009250:	68fb      	ldr	r3, [r7, #12]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
	...

0800925c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800925c:	b480      	push	{r7}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009266:	2300      	movs	r3, #0
 8009268:	60fb      	str	r3, [r7, #12]
 800926a:	e014      	b.n	8009296 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800926c:	4a0e      	ldr	r2, [pc, #56]	; (80092a8 <vQueueAddToRegistry+0x4c>)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d10b      	bne.n	8009290 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009278:	490b      	ldr	r1, [pc, #44]	; (80092a8 <vQueueAddToRegistry+0x4c>)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	683a      	ldr	r2, [r7, #0]
 800927e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009282:	4a09      	ldr	r2, [pc, #36]	; (80092a8 <vQueueAddToRegistry+0x4c>)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	00db      	lsls	r3, r3, #3
 8009288:	4413      	add	r3, r2
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800928e:	e006      	b.n	800929e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	3301      	adds	r3, #1
 8009294:	60fb      	str	r3, [r7, #12]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2b07      	cmp	r3, #7
 800929a:	d9e7      	bls.n	800926c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800929c:	bf00      	nop
 800929e:	bf00      	nop
 80092a0:	3714      	adds	r7, #20
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bc80      	pop	{r7}
 80092a6:	4770      	bx	lr
 80092a8:	20003a9c 	.word	0x20003a9c

080092ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b086      	sub	sp, #24
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80092bc:	f001 fc2e 	bl	800ab1c <vPortEnterCritical>
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092c6:	b25b      	sxtb	r3, r3
 80092c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092cc:	d103      	bne.n	80092d6 <vQueueWaitForMessageRestricted+0x2a>
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	2200      	movs	r2, #0
 80092d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092dc:	b25b      	sxtb	r3, r3
 80092de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e2:	d103      	bne.n	80092ec <vQueueWaitForMessageRestricted+0x40>
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	2200      	movs	r2, #0
 80092e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092ec:	f001 fc46 	bl	800ab7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d106      	bne.n	8009306 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	3324      	adds	r3, #36	; 0x24
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	68b9      	ldr	r1, [r7, #8]
 8009300:	4618      	mov	r0, r3
 8009302:	f000 fc31 	bl	8009b68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009306:	6978      	ldr	r0, [r7, #20]
 8009308:	f7ff ff27 	bl	800915a <prvUnlockQueue>
	}
 800930c:	bf00      	nop
 800930e:	3718      	adds	r7, #24
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009314:	b580      	push	{r7, lr}
 8009316:	b08e      	sub	sp, #56	; 0x38
 8009318:	af04      	add	r7, sp, #16
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	607a      	str	r2, [r7, #4]
 8009320:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10a      	bne.n	800933e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	623b      	str	r3, [r7, #32]
}
 800933a:	bf00      	nop
 800933c:	e7fe      	b.n	800933c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800933e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009340:	2b00      	cmp	r3, #0
 8009342:	d10a      	bne.n	800935a <xTaskCreateStatic+0x46>
	__asm volatile
 8009344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009348:	f383 8811 	msr	BASEPRI, r3
 800934c:	f3bf 8f6f 	isb	sy
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	61fb      	str	r3, [r7, #28]
}
 8009356:	bf00      	nop
 8009358:	e7fe      	b.n	8009358 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800935a:	235c      	movs	r3, #92	; 0x5c
 800935c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	2b5c      	cmp	r3, #92	; 0x5c
 8009362:	d00a      	beq.n	800937a <xTaskCreateStatic+0x66>
	__asm volatile
 8009364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009368:	f383 8811 	msr	BASEPRI, r3
 800936c:	f3bf 8f6f 	isb	sy
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	61bb      	str	r3, [r7, #24]
}
 8009376:	bf00      	nop
 8009378:	e7fe      	b.n	8009378 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800937a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937c:	2b00      	cmp	r3, #0
 800937e:	d01e      	beq.n	80093be <xTaskCreateStatic+0xaa>
 8009380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009382:	2b00      	cmp	r3, #0
 8009384:	d01b      	beq.n	80093be <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009388:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800938a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800938e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009392:	2202      	movs	r2, #2
 8009394:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009398:	2300      	movs	r3, #0
 800939a:	9303      	str	r3, [sp, #12]
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	9302      	str	r3, [sp, #8]
 80093a0:	f107 0314 	add.w	r3, r7, #20
 80093a4:	9301      	str	r3, [sp, #4]
 80093a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	68b9      	ldr	r1, [r7, #8]
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f000 f850 	bl	8009456 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093b8:	f000 f8d4 	bl	8009564 <prvAddNewTaskToReadyList>
 80093bc:	e001      	b.n	80093c2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80093be:	2300      	movs	r3, #0
 80093c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80093c2:	697b      	ldr	r3, [r7, #20]
	}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3728      	adds	r7, #40	; 0x28
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b08c      	sub	sp, #48	; 0x30
 80093d0:	af04      	add	r7, sp, #16
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	603b      	str	r3, [r7, #0]
 80093d8:	4613      	mov	r3, r2
 80093da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093dc:	88fb      	ldrh	r3, [r7, #6]
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	4618      	mov	r0, r3
 80093e2:	f001 fc9b 	bl	800ad1c <pvPortMalloc>
 80093e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00e      	beq.n	800940c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80093ee:	205c      	movs	r0, #92	; 0x5c
 80093f0:	f001 fc94 	bl	800ad1c <pvPortMalloc>
 80093f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80093f6:	69fb      	ldr	r3, [r7, #28]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d003      	beq.n	8009404 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	631a      	str	r2, [r3, #48]	; 0x30
 8009402:	e005      	b.n	8009410 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009404:	6978      	ldr	r0, [r7, #20]
 8009406:	f001 fd4d 	bl	800aea4 <vPortFree>
 800940a:	e001      	b.n	8009410 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800940c:	2300      	movs	r3, #0
 800940e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d017      	beq.n	8009446 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	2200      	movs	r2, #0
 800941a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800941e:	88fa      	ldrh	r2, [r7, #6]
 8009420:	2300      	movs	r3, #0
 8009422:	9303      	str	r3, [sp, #12]
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	9302      	str	r3, [sp, #8]
 8009428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942a:	9301      	str	r3, [sp, #4]
 800942c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942e:	9300      	str	r3, [sp, #0]
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	68b9      	ldr	r1, [r7, #8]
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 f80e 	bl	8009456 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800943a:	69f8      	ldr	r0, [r7, #28]
 800943c:	f000 f892 	bl	8009564 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009440:	2301      	movs	r3, #1
 8009442:	61bb      	str	r3, [r7, #24]
 8009444:	e002      	b.n	800944c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009446:	f04f 33ff 	mov.w	r3, #4294967295
 800944a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800944c:	69bb      	ldr	r3, [r7, #24]
	}
 800944e:	4618      	mov	r0, r3
 8009450:	3720      	adds	r7, #32
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b088      	sub	sp, #32
 800945a:	af00      	add	r7, sp, #0
 800945c:	60f8      	str	r0, [r7, #12]
 800945e:	60b9      	str	r1, [r7, #8]
 8009460:	607a      	str	r2, [r7, #4]
 8009462:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009466:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	461a      	mov	r2, r3
 800946e:	21a5      	movs	r1, #165	; 0xa5
 8009470:	f003 f866 	bl	800c540 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800947e:	3b01      	subs	r3, #1
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	4413      	add	r3, r2
 8009484:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	f023 0307 	bic.w	r3, r3, #7
 800948c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	f003 0307 	and.w	r3, r3, #7
 8009494:	2b00      	cmp	r3, #0
 8009496:	d00a      	beq.n	80094ae <prvInitialiseNewTask+0x58>
	__asm volatile
 8009498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949c:	f383 8811 	msr	BASEPRI, r3
 80094a0:	f3bf 8f6f 	isb	sy
 80094a4:	f3bf 8f4f 	dsb	sy
 80094a8:	617b      	str	r3, [r7, #20]
}
 80094aa:	bf00      	nop
 80094ac:	e7fe      	b.n	80094ac <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094ae:	2300      	movs	r3, #0
 80094b0:	61fb      	str	r3, [r7, #28]
 80094b2:	e012      	b.n	80094da <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80094b4:	68ba      	ldr	r2, [r7, #8]
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	4413      	add	r3, r2
 80094ba:	7819      	ldrb	r1, [r3, #0]
 80094bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	4413      	add	r3, r2
 80094c2:	3334      	adds	r3, #52	; 0x34
 80094c4:	460a      	mov	r2, r1
 80094c6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80094c8:	68ba      	ldr	r2, [r7, #8]
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	4413      	add	r3, r2
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d006      	beq.n	80094e2 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	3301      	adds	r3, #1
 80094d8:	61fb      	str	r3, [r7, #28]
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	2b0f      	cmp	r3, #15
 80094de:	d9e9      	bls.n	80094b4 <prvInitialiseNewTask+0x5e>
 80094e0:	e000      	b.n	80094e4 <prvInitialiseNewTask+0x8e>
		{
			break;
 80094e2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80094e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e6:	2200      	movs	r2, #0
 80094e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80094ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ee:	2b37      	cmp	r3, #55	; 0x37
 80094f0:	d901      	bls.n	80094f6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80094f2:	2337      	movs	r3, #55	; 0x37
 80094f4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80094f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094fa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80094fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009500:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009504:	2200      	movs	r2, #0
 8009506:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950a:	3304      	adds	r3, #4
 800950c:	4618      	mov	r0, r3
 800950e:	f7ff f82a 	bl	8008566 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009514:	3318      	adds	r3, #24
 8009516:	4618      	mov	r0, r3
 8009518:	f7ff f825 	bl	8008566 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800951c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009520:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009524:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800952c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009530:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009534:	2200      	movs	r2, #0
 8009536:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953a:	2200      	movs	r2, #0
 800953c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009540:	683a      	ldr	r2, [r7, #0]
 8009542:	68f9      	ldr	r1, [r7, #12]
 8009544:	69b8      	ldr	r0, [r7, #24]
 8009546:	f001 f9f7 	bl	800a938 <pxPortInitialiseStack>
 800954a:	4602      	mov	r2, r0
 800954c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009552:	2b00      	cmp	r3, #0
 8009554:	d002      	beq.n	800955c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800955a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800955c:	bf00      	nop
 800955e:	3720      	adds	r7, #32
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800956c:	f001 fad6 	bl	800ab1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009570:	4b2d      	ldr	r3, [pc, #180]	; (8009628 <prvAddNewTaskToReadyList+0xc4>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	3301      	adds	r3, #1
 8009576:	4a2c      	ldr	r2, [pc, #176]	; (8009628 <prvAddNewTaskToReadyList+0xc4>)
 8009578:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800957a:	4b2c      	ldr	r3, [pc, #176]	; (800962c <prvAddNewTaskToReadyList+0xc8>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d109      	bne.n	8009596 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009582:	4a2a      	ldr	r2, [pc, #168]	; (800962c <prvAddNewTaskToReadyList+0xc8>)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009588:	4b27      	ldr	r3, [pc, #156]	; (8009628 <prvAddNewTaskToReadyList+0xc4>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2b01      	cmp	r3, #1
 800958e:	d110      	bne.n	80095b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009590:	f000 fc16 	bl	8009dc0 <prvInitialiseTaskLists>
 8009594:	e00d      	b.n	80095b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009596:	4b26      	ldr	r3, [pc, #152]	; (8009630 <prvAddNewTaskToReadyList+0xcc>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d109      	bne.n	80095b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800959e:	4b23      	ldr	r3, [pc, #140]	; (800962c <prvAddNewTaskToReadyList+0xc8>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d802      	bhi.n	80095b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80095ac:	4a1f      	ldr	r2, [pc, #124]	; (800962c <prvAddNewTaskToReadyList+0xc8>)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80095b2:	4b20      	ldr	r3, [pc, #128]	; (8009634 <prvAddNewTaskToReadyList+0xd0>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	3301      	adds	r3, #1
 80095b8:	4a1e      	ldr	r2, [pc, #120]	; (8009634 <prvAddNewTaskToReadyList+0xd0>)
 80095ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80095bc:	4b1d      	ldr	r3, [pc, #116]	; (8009634 <prvAddNewTaskToReadyList+0xd0>)
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c8:	4b1b      	ldr	r3, [pc, #108]	; (8009638 <prvAddNewTaskToReadyList+0xd4>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d903      	bls.n	80095d8 <prvAddNewTaskToReadyList+0x74>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d4:	4a18      	ldr	r2, [pc, #96]	; (8009638 <prvAddNewTaskToReadyList+0xd4>)
 80095d6:	6013      	str	r3, [r2, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095dc:	4613      	mov	r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4413      	add	r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	4a15      	ldr	r2, [pc, #84]	; (800963c <prvAddNewTaskToReadyList+0xd8>)
 80095e6:	441a      	add	r2, r3
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	3304      	adds	r3, #4
 80095ec:	4619      	mov	r1, r3
 80095ee:	4610      	mov	r0, r2
 80095f0:	f7fe ffc5 	bl	800857e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80095f4:	f001 fac2 	bl	800ab7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80095f8:	4b0d      	ldr	r3, [pc, #52]	; (8009630 <prvAddNewTaskToReadyList+0xcc>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00e      	beq.n	800961e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009600:	4b0a      	ldr	r3, [pc, #40]	; (800962c <prvAddNewTaskToReadyList+0xc8>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800960a:	429a      	cmp	r2, r3
 800960c:	d207      	bcs.n	800961e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800960e:	4b0c      	ldr	r3, [pc, #48]	; (8009640 <prvAddNewTaskToReadyList+0xdc>)
 8009610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	f3bf 8f4f 	dsb	sy
 800961a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800961e:	bf00      	nop
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	20000d54 	.word	0x20000d54
 800962c:	20000880 	.word	0x20000880
 8009630:	20000d60 	.word	0x20000d60
 8009634:	20000d70 	.word	0x20000d70
 8009638:	20000d5c 	.word	0x20000d5c
 800963c:	20000884 	.word	0x20000884
 8009640:	e000ed04 	.word	0xe000ed04

08009644 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800964c:	2300      	movs	r3, #0
 800964e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d017      	beq.n	8009686 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009656:	4b13      	ldr	r3, [pc, #76]	; (80096a4 <vTaskDelay+0x60>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00a      	beq.n	8009674 <vTaskDelay+0x30>
	__asm volatile
 800965e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009662:	f383 8811 	msr	BASEPRI, r3
 8009666:	f3bf 8f6f 	isb	sy
 800966a:	f3bf 8f4f 	dsb	sy
 800966e:	60bb      	str	r3, [r7, #8]
}
 8009670:	bf00      	nop
 8009672:	e7fe      	b.n	8009672 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009674:	f000 f880 	bl	8009778 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009678:	2100      	movs	r1, #0
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 fdf6 	bl	800a26c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009680:	f000 f888 	bl	8009794 <xTaskResumeAll>
 8009684:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d107      	bne.n	800969c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800968c:	4b06      	ldr	r3, [pc, #24]	; (80096a8 <vTaskDelay+0x64>)
 800968e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009692:	601a      	str	r2, [r3, #0]
 8009694:	f3bf 8f4f 	dsb	sy
 8009698:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800969c:	bf00      	nop
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	20000d7c 	.word	0x20000d7c
 80096a8:	e000ed04 	.word	0xe000ed04

080096ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b08a      	sub	sp, #40	; 0x28
 80096b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80096b2:	2300      	movs	r3, #0
 80096b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80096b6:	2300      	movs	r3, #0
 80096b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80096ba:	463a      	mov	r2, r7
 80096bc:	1d39      	adds	r1, r7, #4
 80096be:	f107 0308 	add.w	r3, r7, #8
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7fe fefe 	bl	80084c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80096c8:	6839      	ldr	r1, [r7, #0]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	9202      	str	r2, [sp, #8]
 80096d0:	9301      	str	r3, [sp, #4]
 80096d2:	2300      	movs	r3, #0
 80096d4:	9300      	str	r3, [sp, #0]
 80096d6:	2300      	movs	r3, #0
 80096d8:	460a      	mov	r2, r1
 80096da:	4921      	ldr	r1, [pc, #132]	; (8009760 <vTaskStartScheduler+0xb4>)
 80096dc:	4821      	ldr	r0, [pc, #132]	; (8009764 <vTaskStartScheduler+0xb8>)
 80096de:	f7ff fe19 	bl	8009314 <xTaskCreateStatic>
 80096e2:	4603      	mov	r3, r0
 80096e4:	4a20      	ldr	r2, [pc, #128]	; (8009768 <vTaskStartScheduler+0xbc>)
 80096e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80096e8:	4b1f      	ldr	r3, [pc, #124]	; (8009768 <vTaskStartScheduler+0xbc>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d002      	beq.n	80096f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80096f0:	2301      	movs	r3, #1
 80096f2:	617b      	str	r3, [r7, #20]
 80096f4:	e001      	b.n	80096fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80096f6:	2300      	movs	r3, #0
 80096f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d102      	bne.n	8009706 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009700:	f000 fe08 	bl	800a314 <xTimerCreateTimerTask>
 8009704:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	2b01      	cmp	r3, #1
 800970a:	d116      	bne.n	800973a <vTaskStartScheduler+0x8e>
	__asm volatile
 800970c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009710:	f383 8811 	msr	BASEPRI, r3
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	f3bf 8f4f 	dsb	sy
 800971c:	613b      	str	r3, [r7, #16]
}
 800971e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009720:	4b12      	ldr	r3, [pc, #72]	; (800976c <vTaskStartScheduler+0xc0>)
 8009722:	f04f 32ff 	mov.w	r2, #4294967295
 8009726:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009728:	4b11      	ldr	r3, [pc, #68]	; (8009770 <vTaskStartScheduler+0xc4>)
 800972a:	2201      	movs	r2, #1
 800972c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800972e:	4b11      	ldr	r3, [pc, #68]	; (8009774 <vTaskStartScheduler+0xc8>)
 8009730:	2200      	movs	r2, #0
 8009732:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009734:	f001 f980 	bl	800aa38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009738:	e00e      	b.n	8009758 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009740:	d10a      	bne.n	8009758 <vTaskStartScheduler+0xac>
	__asm volatile
 8009742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009746:	f383 8811 	msr	BASEPRI, r3
 800974a:	f3bf 8f6f 	isb	sy
 800974e:	f3bf 8f4f 	dsb	sy
 8009752:	60fb      	str	r3, [r7, #12]
}
 8009754:	bf00      	nop
 8009756:	e7fe      	b.n	8009756 <vTaskStartScheduler+0xaa>
}
 8009758:	bf00      	nop
 800975a:	3718      	adds	r7, #24
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	0800c584 	.word	0x0800c584
 8009764:	08009d91 	.word	0x08009d91
 8009768:	20000d78 	.word	0x20000d78
 800976c:	20000d74 	.word	0x20000d74
 8009770:	20000d60 	.word	0x20000d60
 8009774:	20000d58 	.word	0x20000d58

08009778 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009778:	b480      	push	{r7}
 800977a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800977c:	4b04      	ldr	r3, [pc, #16]	; (8009790 <vTaskSuspendAll+0x18>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3301      	adds	r3, #1
 8009782:	4a03      	ldr	r2, [pc, #12]	; (8009790 <vTaskSuspendAll+0x18>)
 8009784:	6013      	str	r3, [r2, #0]
}
 8009786:	bf00      	nop
 8009788:	46bd      	mov	sp, r7
 800978a:	bc80      	pop	{r7}
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop
 8009790:	20000d7c 	.word	0x20000d7c

08009794 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800979a:	2300      	movs	r3, #0
 800979c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800979e:	2300      	movs	r3, #0
 80097a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80097a2:	4b42      	ldr	r3, [pc, #264]	; (80098ac <xTaskResumeAll+0x118>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d10a      	bne.n	80097c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80097aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ae:	f383 8811 	msr	BASEPRI, r3
 80097b2:	f3bf 8f6f 	isb	sy
 80097b6:	f3bf 8f4f 	dsb	sy
 80097ba:	603b      	str	r3, [r7, #0]
}
 80097bc:	bf00      	nop
 80097be:	e7fe      	b.n	80097be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80097c0:	f001 f9ac 	bl	800ab1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80097c4:	4b39      	ldr	r3, [pc, #228]	; (80098ac <xTaskResumeAll+0x118>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	3b01      	subs	r3, #1
 80097ca:	4a38      	ldr	r2, [pc, #224]	; (80098ac <xTaskResumeAll+0x118>)
 80097cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097ce:	4b37      	ldr	r3, [pc, #220]	; (80098ac <xTaskResumeAll+0x118>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d162      	bne.n	800989c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80097d6:	4b36      	ldr	r3, [pc, #216]	; (80098b0 <xTaskResumeAll+0x11c>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d05e      	beq.n	800989c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097de:	e02f      	b.n	8009840 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80097e0:	4b34      	ldr	r3, [pc, #208]	; (80098b4 <xTaskResumeAll+0x120>)
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	3318      	adds	r3, #24
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7fe ff21 	bl	8008634 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	3304      	adds	r3, #4
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7fe ff1c 	bl	8008634 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009800:	4b2d      	ldr	r3, [pc, #180]	; (80098b8 <xTaskResumeAll+0x124>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	429a      	cmp	r2, r3
 8009806:	d903      	bls.n	8009810 <xTaskResumeAll+0x7c>
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980c:	4a2a      	ldr	r2, [pc, #168]	; (80098b8 <xTaskResumeAll+0x124>)
 800980e:	6013      	str	r3, [r2, #0]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009814:	4613      	mov	r3, r2
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	4413      	add	r3, r2
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	4a27      	ldr	r2, [pc, #156]	; (80098bc <xTaskResumeAll+0x128>)
 800981e:	441a      	add	r2, r3
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	3304      	adds	r3, #4
 8009824:	4619      	mov	r1, r3
 8009826:	4610      	mov	r0, r2
 8009828:	f7fe fea9 	bl	800857e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009830:	4b23      	ldr	r3, [pc, #140]	; (80098c0 <xTaskResumeAll+0x12c>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009836:	429a      	cmp	r2, r3
 8009838:	d302      	bcc.n	8009840 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800983a:	4b22      	ldr	r3, [pc, #136]	; (80098c4 <xTaskResumeAll+0x130>)
 800983c:	2201      	movs	r2, #1
 800983e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009840:	4b1c      	ldr	r3, [pc, #112]	; (80098b4 <xTaskResumeAll+0x120>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d1cb      	bne.n	80097e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d001      	beq.n	8009852 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800984e:	f000 fb55 	bl	8009efc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009852:	4b1d      	ldr	r3, [pc, #116]	; (80098c8 <xTaskResumeAll+0x134>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d010      	beq.n	8009880 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800985e:	f000 f845 	bl	80098ec <xTaskIncrementTick>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d002      	beq.n	800986e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009868:	4b16      	ldr	r3, [pc, #88]	; (80098c4 <xTaskResumeAll+0x130>)
 800986a:	2201      	movs	r2, #1
 800986c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	3b01      	subs	r3, #1
 8009872:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1f1      	bne.n	800985e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800987a:	4b13      	ldr	r3, [pc, #76]	; (80098c8 <xTaskResumeAll+0x134>)
 800987c:	2200      	movs	r2, #0
 800987e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009880:	4b10      	ldr	r3, [pc, #64]	; (80098c4 <xTaskResumeAll+0x130>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d009      	beq.n	800989c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009888:	2301      	movs	r3, #1
 800988a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800988c:	4b0f      	ldr	r3, [pc, #60]	; (80098cc <xTaskResumeAll+0x138>)
 800988e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009892:	601a      	str	r2, [r3, #0]
 8009894:	f3bf 8f4f 	dsb	sy
 8009898:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800989c:	f001 f96e 	bl	800ab7c <vPortExitCritical>

	return xAlreadyYielded;
 80098a0:	68bb      	ldr	r3, [r7, #8]
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3710      	adds	r7, #16
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	20000d7c 	.word	0x20000d7c
 80098b0:	20000d54 	.word	0x20000d54
 80098b4:	20000d14 	.word	0x20000d14
 80098b8:	20000d5c 	.word	0x20000d5c
 80098bc:	20000884 	.word	0x20000884
 80098c0:	20000880 	.word	0x20000880
 80098c4:	20000d68 	.word	0x20000d68
 80098c8:	20000d64 	.word	0x20000d64
 80098cc:	e000ed04 	.word	0xe000ed04

080098d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80098d6:	4b04      	ldr	r3, [pc, #16]	; (80098e8 <xTaskGetTickCount+0x18>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80098dc:	687b      	ldr	r3, [r7, #4]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	370c      	adds	r7, #12
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bc80      	pop	{r7}
 80098e6:	4770      	bx	lr
 80098e8:	20000d58 	.word	0x20000d58

080098ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b086      	sub	sp, #24
 80098f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80098f2:	2300      	movs	r3, #0
 80098f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098f6:	4b51      	ldr	r3, [pc, #324]	; (8009a3c <xTaskIncrementTick+0x150>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	f040 808e 	bne.w	8009a1c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009900:	4b4f      	ldr	r3, [pc, #316]	; (8009a40 <xTaskIncrementTick+0x154>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	3301      	adds	r3, #1
 8009906:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009908:	4a4d      	ldr	r2, [pc, #308]	; (8009a40 <xTaskIncrementTick+0x154>)
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d120      	bne.n	8009956 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009914:	4b4b      	ldr	r3, [pc, #300]	; (8009a44 <xTaskIncrementTick+0x158>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00a      	beq.n	8009934 <xTaskIncrementTick+0x48>
	__asm volatile
 800991e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009922:	f383 8811 	msr	BASEPRI, r3
 8009926:	f3bf 8f6f 	isb	sy
 800992a:	f3bf 8f4f 	dsb	sy
 800992e:	603b      	str	r3, [r7, #0]
}
 8009930:	bf00      	nop
 8009932:	e7fe      	b.n	8009932 <xTaskIncrementTick+0x46>
 8009934:	4b43      	ldr	r3, [pc, #268]	; (8009a44 <xTaskIncrementTick+0x158>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	60fb      	str	r3, [r7, #12]
 800993a:	4b43      	ldr	r3, [pc, #268]	; (8009a48 <xTaskIncrementTick+0x15c>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a41      	ldr	r2, [pc, #260]	; (8009a44 <xTaskIncrementTick+0x158>)
 8009940:	6013      	str	r3, [r2, #0]
 8009942:	4a41      	ldr	r2, [pc, #260]	; (8009a48 <xTaskIncrementTick+0x15c>)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	6013      	str	r3, [r2, #0]
 8009948:	4b40      	ldr	r3, [pc, #256]	; (8009a4c <xTaskIncrementTick+0x160>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	3301      	adds	r3, #1
 800994e:	4a3f      	ldr	r2, [pc, #252]	; (8009a4c <xTaskIncrementTick+0x160>)
 8009950:	6013      	str	r3, [r2, #0]
 8009952:	f000 fad3 	bl	8009efc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009956:	4b3e      	ldr	r3, [pc, #248]	; (8009a50 <xTaskIncrementTick+0x164>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	693a      	ldr	r2, [r7, #16]
 800995c:	429a      	cmp	r2, r3
 800995e:	d34e      	bcc.n	80099fe <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009960:	4b38      	ldr	r3, [pc, #224]	; (8009a44 <xTaskIncrementTick+0x158>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d101      	bne.n	800996e <xTaskIncrementTick+0x82>
 800996a:	2301      	movs	r3, #1
 800996c:	e000      	b.n	8009970 <xTaskIncrementTick+0x84>
 800996e:	2300      	movs	r3, #0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d004      	beq.n	800997e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009974:	4b36      	ldr	r3, [pc, #216]	; (8009a50 <xTaskIncrementTick+0x164>)
 8009976:	f04f 32ff 	mov.w	r2, #4294967295
 800997a:	601a      	str	r2, [r3, #0]
					break;
 800997c:	e03f      	b.n	80099fe <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800997e:	4b31      	ldr	r3, [pc, #196]	; (8009a44 <xTaskIncrementTick+0x158>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	68db      	ldr	r3, [r3, #12]
 8009986:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800998e:	693a      	ldr	r2, [r7, #16]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	429a      	cmp	r2, r3
 8009994:	d203      	bcs.n	800999e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009996:	4a2e      	ldr	r2, [pc, #184]	; (8009a50 <xTaskIncrementTick+0x164>)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6013      	str	r3, [r2, #0]
						break;
 800999c:	e02f      	b.n	80099fe <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	3304      	adds	r3, #4
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7fe fe46 	bl	8008634 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d004      	beq.n	80099ba <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	3318      	adds	r3, #24
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7fe fe3d 	bl	8008634 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099be:	4b25      	ldr	r3, [pc, #148]	; (8009a54 <xTaskIncrementTick+0x168>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d903      	bls.n	80099ce <xTaskIncrementTick+0xe2>
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ca:	4a22      	ldr	r2, [pc, #136]	; (8009a54 <xTaskIncrementTick+0x168>)
 80099cc:	6013      	str	r3, [r2, #0]
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099d2:	4613      	mov	r3, r2
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	4413      	add	r3, r2
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	4a1f      	ldr	r2, [pc, #124]	; (8009a58 <xTaskIncrementTick+0x16c>)
 80099dc:	441a      	add	r2, r3
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	3304      	adds	r3, #4
 80099e2:	4619      	mov	r1, r3
 80099e4:	4610      	mov	r0, r2
 80099e6:	f7fe fdca 	bl	800857e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ee:	4b1b      	ldr	r3, [pc, #108]	; (8009a5c <xTaskIncrementTick+0x170>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d3b3      	bcc.n	8009960 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80099f8:	2301      	movs	r3, #1
 80099fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099fc:	e7b0      	b.n	8009960 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80099fe:	4b17      	ldr	r3, [pc, #92]	; (8009a5c <xTaskIncrementTick+0x170>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a04:	4914      	ldr	r1, [pc, #80]	; (8009a58 <xTaskIncrementTick+0x16c>)
 8009a06:	4613      	mov	r3, r2
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	4413      	add	r3, r2
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	440b      	add	r3, r1
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d907      	bls.n	8009a26 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009a16:	2301      	movs	r3, #1
 8009a18:	617b      	str	r3, [r7, #20]
 8009a1a:	e004      	b.n	8009a26 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009a1c:	4b10      	ldr	r3, [pc, #64]	; (8009a60 <xTaskIncrementTick+0x174>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	3301      	adds	r3, #1
 8009a22:	4a0f      	ldr	r2, [pc, #60]	; (8009a60 <xTaskIncrementTick+0x174>)
 8009a24:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009a26:	4b0f      	ldr	r3, [pc, #60]	; (8009a64 <xTaskIncrementTick+0x178>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d001      	beq.n	8009a32 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009a32:	697b      	ldr	r3, [r7, #20]
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3718      	adds	r7, #24
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	20000d7c 	.word	0x20000d7c
 8009a40:	20000d58 	.word	0x20000d58
 8009a44:	20000d0c 	.word	0x20000d0c
 8009a48:	20000d10 	.word	0x20000d10
 8009a4c:	20000d6c 	.word	0x20000d6c
 8009a50:	20000d74 	.word	0x20000d74
 8009a54:	20000d5c 	.word	0x20000d5c
 8009a58:	20000884 	.word	0x20000884
 8009a5c:	20000880 	.word	0x20000880
 8009a60:	20000d64 	.word	0x20000d64
 8009a64:	20000d68 	.word	0x20000d68

08009a68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b085      	sub	sp, #20
 8009a6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a6e:	4b27      	ldr	r3, [pc, #156]	; (8009b0c <vTaskSwitchContext+0xa4>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d003      	beq.n	8009a7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a76:	4b26      	ldr	r3, [pc, #152]	; (8009b10 <vTaskSwitchContext+0xa8>)
 8009a78:	2201      	movs	r2, #1
 8009a7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a7c:	e041      	b.n	8009b02 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009a7e:	4b24      	ldr	r3, [pc, #144]	; (8009b10 <vTaskSwitchContext+0xa8>)
 8009a80:	2200      	movs	r2, #0
 8009a82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009a84:	4b23      	ldr	r3, [pc, #140]	; (8009b14 <vTaskSwitchContext+0xac>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	60fb      	str	r3, [r7, #12]
 8009a8a:	e010      	b.n	8009aae <vTaskSwitchContext+0x46>
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d10a      	bne.n	8009aa8 <vTaskSwitchContext+0x40>
	__asm volatile
 8009a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a96:	f383 8811 	msr	BASEPRI, r3
 8009a9a:	f3bf 8f6f 	isb	sy
 8009a9e:	f3bf 8f4f 	dsb	sy
 8009aa2:	607b      	str	r3, [r7, #4]
}
 8009aa4:	bf00      	nop
 8009aa6:	e7fe      	b.n	8009aa6 <vTaskSwitchContext+0x3e>
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	60fb      	str	r3, [r7, #12]
 8009aae:	491a      	ldr	r1, [pc, #104]	; (8009b18 <vTaskSwitchContext+0xb0>)
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	4413      	add	r3, r2
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	440b      	add	r3, r1
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d0e4      	beq.n	8009a8c <vTaskSwitchContext+0x24>
 8009ac2:	68fa      	ldr	r2, [r7, #12]
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	4413      	add	r3, r2
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	4a12      	ldr	r2, [pc, #72]	; (8009b18 <vTaskSwitchContext+0xb0>)
 8009ace:	4413      	add	r3, r2
 8009ad0:	60bb      	str	r3, [r7, #8]
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	685a      	ldr	r2, [r3, #4]
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	605a      	str	r2, [r3, #4]
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	685a      	ldr	r2, [r3, #4]
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	3308      	adds	r3, #8
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d104      	bne.n	8009af2 <vTaskSwitchContext+0x8a>
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	685a      	ldr	r2, [r3, #4]
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	605a      	str	r2, [r3, #4]
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	4a08      	ldr	r2, [pc, #32]	; (8009b1c <vTaskSwitchContext+0xb4>)
 8009afa:	6013      	str	r3, [r2, #0]
 8009afc:	4a05      	ldr	r2, [pc, #20]	; (8009b14 <vTaskSwitchContext+0xac>)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	6013      	str	r3, [r2, #0]
}
 8009b02:	bf00      	nop
 8009b04:	3714      	adds	r7, #20
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bc80      	pop	{r7}
 8009b0a:	4770      	bx	lr
 8009b0c:	20000d7c 	.word	0x20000d7c
 8009b10:	20000d68 	.word	0x20000d68
 8009b14:	20000d5c 	.word	0x20000d5c
 8009b18:	20000884 	.word	0x20000884
 8009b1c:	20000880 	.word	0x20000880

08009b20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d10a      	bne.n	8009b46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b34:	f383 8811 	msr	BASEPRI, r3
 8009b38:	f3bf 8f6f 	isb	sy
 8009b3c:	f3bf 8f4f 	dsb	sy
 8009b40:	60fb      	str	r3, [r7, #12]
}
 8009b42:	bf00      	nop
 8009b44:	e7fe      	b.n	8009b44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b46:	4b07      	ldr	r3, [pc, #28]	; (8009b64 <vTaskPlaceOnEventList+0x44>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	3318      	adds	r3, #24
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f7fe fd38 	bl	80085c4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b54:	2101      	movs	r1, #1
 8009b56:	6838      	ldr	r0, [r7, #0]
 8009b58:	f000 fb88 	bl	800a26c <prvAddCurrentTaskToDelayedList>
}
 8009b5c:	bf00      	nop
 8009b5e:	3710      	adds	r7, #16
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	20000880 	.word	0x20000880

08009b68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b086      	sub	sp, #24
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d10a      	bne.n	8009b90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7e:	f383 8811 	msr	BASEPRI, r3
 8009b82:	f3bf 8f6f 	isb	sy
 8009b86:	f3bf 8f4f 	dsb	sy
 8009b8a:	617b      	str	r3, [r7, #20]
}
 8009b8c:	bf00      	nop
 8009b8e:	e7fe      	b.n	8009b8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b90:	4b0a      	ldr	r3, [pc, #40]	; (8009bbc <vTaskPlaceOnEventListRestricted+0x54>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	3318      	adds	r3, #24
 8009b96:	4619      	mov	r1, r3
 8009b98:	68f8      	ldr	r0, [r7, #12]
 8009b9a:	f7fe fcf0 	bl	800857e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d002      	beq.n	8009baa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009baa:	6879      	ldr	r1, [r7, #4]
 8009bac:	68b8      	ldr	r0, [r7, #8]
 8009bae:	f000 fb5d 	bl	800a26c <prvAddCurrentTaskToDelayedList>
	}
 8009bb2:	bf00      	nop
 8009bb4:	3718      	adds	r7, #24
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	20000880 	.word	0x20000880

08009bc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b086      	sub	sp, #24
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d10a      	bne.n	8009bec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bda:	f383 8811 	msr	BASEPRI, r3
 8009bde:	f3bf 8f6f 	isb	sy
 8009be2:	f3bf 8f4f 	dsb	sy
 8009be6:	60fb      	str	r3, [r7, #12]
}
 8009be8:	bf00      	nop
 8009bea:	e7fe      	b.n	8009bea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	3318      	adds	r3, #24
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7fe fd1f 	bl	8008634 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bf6:	4b1e      	ldr	r3, [pc, #120]	; (8009c70 <xTaskRemoveFromEventList+0xb0>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d11d      	bne.n	8009c3a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	3304      	adds	r3, #4
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7fe fd16 	bl	8008634 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c0c:	4b19      	ldr	r3, [pc, #100]	; (8009c74 <xTaskRemoveFromEventList+0xb4>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d903      	bls.n	8009c1c <xTaskRemoveFromEventList+0x5c>
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c18:	4a16      	ldr	r2, [pc, #88]	; (8009c74 <xTaskRemoveFromEventList+0xb4>)
 8009c1a:	6013      	str	r3, [r2, #0]
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c20:	4613      	mov	r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	4413      	add	r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	4a13      	ldr	r2, [pc, #76]	; (8009c78 <xTaskRemoveFromEventList+0xb8>)
 8009c2a:	441a      	add	r2, r3
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	3304      	adds	r3, #4
 8009c30:	4619      	mov	r1, r3
 8009c32:	4610      	mov	r0, r2
 8009c34:	f7fe fca3 	bl	800857e <vListInsertEnd>
 8009c38:	e005      	b.n	8009c46 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	3318      	adds	r3, #24
 8009c3e:	4619      	mov	r1, r3
 8009c40:	480e      	ldr	r0, [pc, #56]	; (8009c7c <xTaskRemoveFromEventList+0xbc>)
 8009c42:	f7fe fc9c 	bl	800857e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c4a:	4b0d      	ldr	r3, [pc, #52]	; (8009c80 <xTaskRemoveFromEventList+0xc0>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d905      	bls.n	8009c60 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009c54:	2301      	movs	r3, #1
 8009c56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c58:	4b0a      	ldr	r3, [pc, #40]	; (8009c84 <xTaskRemoveFromEventList+0xc4>)
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	601a      	str	r2, [r3, #0]
 8009c5e:	e001      	b.n	8009c64 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009c60:	2300      	movs	r3, #0
 8009c62:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009c64:	697b      	ldr	r3, [r7, #20]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3718      	adds	r7, #24
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	20000d7c 	.word	0x20000d7c
 8009c74:	20000d5c 	.word	0x20000d5c
 8009c78:	20000884 	.word	0x20000884
 8009c7c:	20000d14 	.word	0x20000d14
 8009c80:	20000880 	.word	0x20000880
 8009c84:	20000d68 	.word	0x20000d68

08009c88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c90:	4b06      	ldr	r3, [pc, #24]	; (8009cac <vTaskInternalSetTimeOutState+0x24>)
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c98:	4b05      	ldr	r3, [pc, #20]	; (8009cb0 <vTaskInternalSetTimeOutState+0x28>)
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	605a      	str	r2, [r3, #4]
}
 8009ca0:	bf00      	nop
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bc80      	pop	{r7}
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	20000d6c 	.word	0x20000d6c
 8009cb0:	20000d58 	.word	0x20000d58

08009cb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b088      	sub	sp, #32
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d10a      	bne.n	8009cda <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc8:	f383 8811 	msr	BASEPRI, r3
 8009ccc:	f3bf 8f6f 	isb	sy
 8009cd0:	f3bf 8f4f 	dsb	sy
 8009cd4:	613b      	str	r3, [r7, #16]
}
 8009cd6:	bf00      	nop
 8009cd8:	e7fe      	b.n	8009cd8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d10a      	bne.n	8009cf6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	60fb      	str	r3, [r7, #12]
}
 8009cf2:	bf00      	nop
 8009cf4:	e7fe      	b.n	8009cf4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009cf6:	f000 ff11 	bl	800ab1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009cfa:	4b1d      	ldr	r3, [pc, #116]	; (8009d70 <xTaskCheckForTimeOut+0xbc>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	69ba      	ldr	r2, [r7, #24]
 8009d06:	1ad3      	subs	r3, r2, r3
 8009d08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d12:	d102      	bne.n	8009d1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d14:	2300      	movs	r3, #0
 8009d16:	61fb      	str	r3, [r7, #28]
 8009d18:	e023      	b.n	8009d62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	4b15      	ldr	r3, [pc, #84]	; (8009d74 <xTaskCheckForTimeOut+0xc0>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d007      	beq.n	8009d36 <xTaskCheckForTimeOut+0x82>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	69ba      	ldr	r2, [r7, #24]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d302      	bcc.n	8009d36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d30:	2301      	movs	r3, #1
 8009d32:	61fb      	str	r3, [r7, #28]
 8009d34:	e015      	b.n	8009d62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	697a      	ldr	r2, [r7, #20]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d20b      	bcs.n	8009d58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	1ad2      	subs	r2, r2, r3
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f7ff ff9b 	bl	8009c88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009d52:	2300      	movs	r3, #0
 8009d54:	61fb      	str	r3, [r7, #28]
 8009d56:	e004      	b.n	8009d62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009d62:	f000 ff0b 	bl	800ab7c <vPortExitCritical>

	return xReturn;
 8009d66:	69fb      	ldr	r3, [r7, #28]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3720      	adds	r7, #32
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	20000d58 	.word	0x20000d58
 8009d74:	20000d6c 	.word	0x20000d6c

08009d78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d78:	b480      	push	{r7}
 8009d7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d7c:	4b03      	ldr	r3, [pc, #12]	; (8009d8c <vTaskMissedYield+0x14>)
 8009d7e:	2201      	movs	r2, #1
 8009d80:	601a      	str	r2, [r3, #0]
}
 8009d82:	bf00      	nop
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bc80      	pop	{r7}
 8009d88:	4770      	bx	lr
 8009d8a:	bf00      	nop
 8009d8c:	20000d68 	.word	0x20000d68

08009d90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009d98:	f000 f852 	bl	8009e40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d9c:	4b06      	ldr	r3, [pc, #24]	; (8009db8 <prvIdleTask+0x28>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d9f9      	bls.n	8009d98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009da4:	4b05      	ldr	r3, [pc, #20]	; (8009dbc <prvIdleTask+0x2c>)
 8009da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009daa:	601a      	str	r2, [r3, #0]
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009db4:	e7f0      	b.n	8009d98 <prvIdleTask+0x8>
 8009db6:	bf00      	nop
 8009db8:	20000884 	.word	0x20000884
 8009dbc:	e000ed04 	.word	0xe000ed04

08009dc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	607b      	str	r3, [r7, #4]
 8009dca:	e00c      	b.n	8009de6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	4613      	mov	r3, r2
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	4413      	add	r3, r2
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	4a12      	ldr	r2, [pc, #72]	; (8009e20 <prvInitialiseTaskLists+0x60>)
 8009dd8:	4413      	add	r3, r2
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7fe fba4 	bl	8008528 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	3301      	adds	r3, #1
 8009de4:	607b      	str	r3, [r7, #4]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2b37      	cmp	r3, #55	; 0x37
 8009dea:	d9ef      	bls.n	8009dcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009dec:	480d      	ldr	r0, [pc, #52]	; (8009e24 <prvInitialiseTaskLists+0x64>)
 8009dee:	f7fe fb9b 	bl	8008528 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009df2:	480d      	ldr	r0, [pc, #52]	; (8009e28 <prvInitialiseTaskLists+0x68>)
 8009df4:	f7fe fb98 	bl	8008528 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009df8:	480c      	ldr	r0, [pc, #48]	; (8009e2c <prvInitialiseTaskLists+0x6c>)
 8009dfa:	f7fe fb95 	bl	8008528 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009dfe:	480c      	ldr	r0, [pc, #48]	; (8009e30 <prvInitialiseTaskLists+0x70>)
 8009e00:	f7fe fb92 	bl	8008528 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e04:	480b      	ldr	r0, [pc, #44]	; (8009e34 <prvInitialiseTaskLists+0x74>)
 8009e06:	f7fe fb8f 	bl	8008528 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e0a:	4b0b      	ldr	r3, [pc, #44]	; (8009e38 <prvInitialiseTaskLists+0x78>)
 8009e0c:	4a05      	ldr	r2, [pc, #20]	; (8009e24 <prvInitialiseTaskLists+0x64>)
 8009e0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e10:	4b0a      	ldr	r3, [pc, #40]	; (8009e3c <prvInitialiseTaskLists+0x7c>)
 8009e12:	4a05      	ldr	r2, [pc, #20]	; (8009e28 <prvInitialiseTaskLists+0x68>)
 8009e14:	601a      	str	r2, [r3, #0]
}
 8009e16:	bf00      	nop
 8009e18:	3708      	adds	r7, #8
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	20000884 	.word	0x20000884
 8009e24:	20000ce4 	.word	0x20000ce4
 8009e28:	20000cf8 	.word	0x20000cf8
 8009e2c:	20000d14 	.word	0x20000d14
 8009e30:	20000d28 	.word	0x20000d28
 8009e34:	20000d40 	.word	0x20000d40
 8009e38:	20000d0c 	.word	0x20000d0c
 8009e3c:	20000d10 	.word	0x20000d10

08009e40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e46:	e019      	b.n	8009e7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009e48:	f000 fe68 	bl	800ab1c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009e4c:	4b10      	ldr	r3, [pc, #64]	; (8009e90 <prvCheckTasksWaitingTermination+0x50>)
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	3304      	adds	r3, #4
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f7fe fbeb 	bl	8008634 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009e5e:	4b0d      	ldr	r3, [pc, #52]	; (8009e94 <prvCheckTasksWaitingTermination+0x54>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	3b01      	subs	r3, #1
 8009e64:	4a0b      	ldr	r2, [pc, #44]	; (8009e94 <prvCheckTasksWaitingTermination+0x54>)
 8009e66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e68:	4b0b      	ldr	r3, [pc, #44]	; (8009e98 <prvCheckTasksWaitingTermination+0x58>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	4a0a      	ldr	r2, [pc, #40]	; (8009e98 <prvCheckTasksWaitingTermination+0x58>)
 8009e70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009e72:	f000 fe83 	bl	800ab7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 f810 	bl	8009e9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e7c:	4b06      	ldr	r3, [pc, #24]	; (8009e98 <prvCheckTasksWaitingTermination+0x58>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d1e1      	bne.n	8009e48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e84:	bf00      	nop
 8009e86:	bf00      	nop
 8009e88:	3708      	adds	r7, #8
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	20000d28 	.word	0x20000d28
 8009e94:	20000d54 	.word	0x20000d54
 8009e98:	20000d3c 	.word	0x20000d3c

08009e9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d108      	bne.n	8009ec0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f000 fff6 	bl	800aea4 <vPortFree>
				vPortFree( pxTCB );
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 fff3 	bl	800aea4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009ebe:	e018      	b.n	8009ef2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d103      	bne.n	8009ed2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 ffea 	bl	800aea4 <vPortFree>
	}
 8009ed0:	e00f      	b.n	8009ef2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	d00a      	beq.n	8009ef2 <prvDeleteTCB+0x56>
	__asm volatile
 8009edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee0:	f383 8811 	msr	BASEPRI, r3
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	f3bf 8f4f 	dsb	sy
 8009eec:	60fb      	str	r3, [r7, #12]
}
 8009eee:	bf00      	nop
 8009ef0:	e7fe      	b.n	8009ef0 <prvDeleteTCB+0x54>
	}
 8009ef2:	bf00      	nop
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
	...

08009efc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f02:	4b0e      	ldr	r3, [pc, #56]	; (8009f3c <prvResetNextTaskUnblockTime+0x40>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d101      	bne.n	8009f10 <prvResetNextTaskUnblockTime+0x14>
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e000      	b.n	8009f12 <prvResetNextTaskUnblockTime+0x16>
 8009f10:	2300      	movs	r3, #0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d004      	beq.n	8009f20 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f16:	4b0a      	ldr	r3, [pc, #40]	; (8009f40 <prvResetNextTaskUnblockTime+0x44>)
 8009f18:	f04f 32ff 	mov.w	r2, #4294967295
 8009f1c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f1e:	e008      	b.n	8009f32 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009f20:	4b06      	ldr	r3, [pc, #24]	; (8009f3c <prvResetNextTaskUnblockTime+0x40>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	4a04      	ldr	r2, [pc, #16]	; (8009f40 <prvResetNextTaskUnblockTime+0x44>)
 8009f30:	6013      	str	r3, [r2, #0]
}
 8009f32:	bf00      	nop
 8009f34:	370c      	adds	r7, #12
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bc80      	pop	{r7}
 8009f3a:	4770      	bx	lr
 8009f3c:	20000d0c 	.word	0x20000d0c
 8009f40:	20000d74 	.word	0x20000d74

08009f44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009f4a:	4b0b      	ldr	r3, [pc, #44]	; (8009f78 <xTaskGetSchedulerState+0x34>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d102      	bne.n	8009f58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009f52:	2301      	movs	r3, #1
 8009f54:	607b      	str	r3, [r7, #4]
 8009f56:	e008      	b.n	8009f6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f58:	4b08      	ldr	r3, [pc, #32]	; (8009f7c <xTaskGetSchedulerState+0x38>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d102      	bne.n	8009f66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f60:	2302      	movs	r3, #2
 8009f62:	607b      	str	r3, [r7, #4]
 8009f64:	e001      	b.n	8009f6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009f66:	2300      	movs	r3, #0
 8009f68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009f6a:	687b      	ldr	r3, [r7, #4]
	}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bc80      	pop	{r7}
 8009f74:	4770      	bx	lr
 8009f76:	bf00      	nop
 8009f78:	20000d60 	.word	0x20000d60
 8009f7c:	20000d7c 	.word	0x20000d7c

08009f80 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d056      	beq.n	800a044 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f9a:	4b2d      	ldr	r3, [pc, #180]	; (800a050 <xTaskPriorityInherit+0xd0>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d246      	bcs.n	800a032 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	699b      	ldr	r3, [r3, #24]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	db06      	blt.n	8009fba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fac:	4b28      	ldr	r3, [pc, #160]	; (800a050 <xTaskPriorityInherit+0xd0>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	6959      	ldr	r1, [r3, #20]
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fc2:	4613      	mov	r3, r2
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	4413      	add	r3, r2
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	4a22      	ldr	r2, [pc, #136]	; (800a054 <xTaskPriorityInherit+0xd4>)
 8009fcc:	4413      	add	r3, r2
 8009fce:	4299      	cmp	r1, r3
 8009fd0:	d101      	bne.n	8009fd6 <xTaskPriorityInherit+0x56>
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	e000      	b.n	8009fd8 <xTaskPriorityInherit+0x58>
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d022      	beq.n	800a022 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	3304      	adds	r3, #4
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7fe fb27 	bl	8008634 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009fe6:	4b1a      	ldr	r3, [pc, #104]	; (800a050 <xTaskPriorityInherit+0xd0>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff4:	4b18      	ldr	r3, [pc, #96]	; (800a058 <xTaskPriorityInherit+0xd8>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d903      	bls.n	800a004 <xTaskPriorityInherit+0x84>
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a000:	4a15      	ldr	r2, [pc, #84]	; (800a058 <xTaskPriorityInherit+0xd8>)
 800a002:	6013      	str	r3, [r2, #0]
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a008:	4613      	mov	r3, r2
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	4413      	add	r3, r2
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	4a10      	ldr	r2, [pc, #64]	; (800a054 <xTaskPriorityInherit+0xd4>)
 800a012:	441a      	add	r2, r3
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	3304      	adds	r3, #4
 800a018:	4619      	mov	r1, r3
 800a01a:	4610      	mov	r0, r2
 800a01c:	f7fe faaf 	bl	800857e <vListInsertEnd>
 800a020:	e004      	b.n	800a02c <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a022:	4b0b      	ldr	r3, [pc, #44]	; (800a050 <xTaskPriorityInherit+0xd0>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a02c:	2301      	movs	r3, #1
 800a02e:	60fb      	str	r3, [r7, #12]
 800a030:	e008      	b.n	800a044 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a036:	4b06      	ldr	r3, [pc, #24]	; (800a050 <xTaskPriorityInherit+0xd0>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d201      	bcs.n	800a044 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a040:	2301      	movs	r3, #1
 800a042:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a044:	68fb      	ldr	r3, [r7, #12]
	}
 800a046:	4618      	mov	r0, r3
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	20000880 	.word	0x20000880
 800a054:	20000884 	.word	0x20000884
 800a058:	20000d5c 	.word	0x20000d5c

0800a05c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b086      	sub	sp, #24
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a068:	2300      	movs	r3, #0
 800a06a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d056      	beq.n	800a120 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a072:	4b2e      	ldr	r3, [pc, #184]	; (800a12c <xTaskPriorityDisinherit+0xd0>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	693a      	ldr	r2, [r7, #16]
 800a078:	429a      	cmp	r2, r3
 800a07a:	d00a      	beq.n	800a092 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a080:	f383 8811 	msr	BASEPRI, r3
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	60fb      	str	r3, [r7, #12]
}
 800a08e:	bf00      	nop
 800a090:	e7fe      	b.n	800a090 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a096:	2b00      	cmp	r3, #0
 800a098:	d10a      	bne.n	800a0b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09e:	f383 8811 	msr	BASEPRI, r3
 800a0a2:	f3bf 8f6f 	isb	sy
 800a0a6:	f3bf 8f4f 	dsb	sy
 800a0aa:	60bb      	str	r3, [r7, #8]
}
 800a0ac:	bf00      	nop
 800a0ae:	e7fe      	b.n	800a0ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0b4:	1e5a      	subs	r2, r3, #1
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d02c      	beq.n	800a120 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d128      	bne.n	800a120 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	3304      	adds	r3, #4
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7fe faae 	bl	8008634 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0f0:	4b0f      	ldr	r3, [pc, #60]	; (800a130 <xTaskPriorityDisinherit+0xd4>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d903      	bls.n	800a100 <xTaskPriorityDisinherit+0xa4>
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0fc:	4a0c      	ldr	r2, [pc, #48]	; (800a130 <xTaskPriorityDisinherit+0xd4>)
 800a0fe:	6013      	str	r3, [r2, #0]
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a104:	4613      	mov	r3, r2
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	4413      	add	r3, r2
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	4a09      	ldr	r2, [pc, #36]	; (800a134 <xTaskPriorityDisinherit+0xd8>)
 800a10e:	441a      	add	r2, r3
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	3304      	adds	r3, #4
 800a114:	4619      	mov	r1, r3
 800a116:	4610      	mov	r0, r2
 800a118:	f7fe fa31 	bl	800857e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a11c:	2301      	movs	r3, #1
 800a11e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a120:	697b      	ldr	r3, [r7, #20]
	}
 800a122:	4618      	mov	r0, r3
 800a124:	3718      	adds	r7, #24
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	20000880 	.word	0x20000880
 800a130:	20000d5c 	.word	0x20000d5c
 800a134:	20000884 	.word	0x20000884

0800a138 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b088      	sub	sp, #32
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a146:	2301      	movs	r3, #1
 800a148:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d06f      	beq.n	800a230 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a154:	2b00      	cmp	r3, #0
 800a156:	d10a      	bne.n	800a16e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15c:	f383 8811 	msr	BASEPRI, r3
 800a160:	f3bf 8f6f 	isb	sy
 800a164:	f3bf 8f4f 	dsb	sy
 800a168:	60fb      	str	r3, [r7, #12]
}
 800a16a:	bf00      	nop
 800a16c:	e7fe      	b.n	800a16c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a172:	683a      	ldr	r2, [r7, #0]
 800a174:	429a      	cmp	r2, r3
 800a176:	d902      	bls.n	800a17e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	61fb      	str	r3, [r7, #28]
 800a17c:	e002      	b.n	800a184 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a182:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a184:	69bb      	ldr	r3, [r7, #24]
 800a186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a188:	69fa      	ldr	r2, [r7, #28]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d050      	beq.n	800a230 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a192:	697a      	ldr	r2, [r7, #20]
 800a194:	429a      	cmp	r2, r3
 800a196:	d14b      	bne.n	800a230 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a198:	4b27      	ldr	r3, [pc, #156]	; (800a238 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	69ba      	ldr	r2, [r7, #24]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d10a      	bne.n	800a1b8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a6:	f383 8811 	msr	BASEPRI, r3
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	f3bf 8f4f 	dsb	sy
 800a1b2:	60bb      	str	r3, [r7, #8]
}
 800a1b4:	bf00      	nop
 800a1b6:	e7fe      	b.n	800a1b6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a1b8:	69bb      	ldr	r3, [r7, #24]
 800a1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1bc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a1be:	69bb      	ldr	r3, [r7, #24]
 800a1c0:	69fa      	ldr	r2, [r7, #28]
 800a1c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	699b      	ldr	r3, [r3, #24]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	db04      	blt.n	800a1d6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	6959      	ldr	r1, [r3, #20]
 800a1da:	693a      	ldr	r2, [r7, #16]
 800a1dc:	4613      	mov	r3, r2
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	4413      	add	r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	4a15      	ldr	r2, [pc, #84]	; (800a23c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a1e6:	4413      	add	r3, r2
 800a1e8:	4299      	cmp	r1, r3
 800a1ea:	d101      	bne.n	800a1f0 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e000      	b.n	800a1f2 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d01c      	beq.n	800a230 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	3304      	adds	r3, #4
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7fe fa1a 	bl	8008634 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a204:	4b0e      	ldr	r3, [pc, #56]	; (800a240 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	429a      	cmp	r2, r3
 800a20a:	d903      	bls.n	800a214 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a210:	4a0b      	ldr	r2, [pc, #44]	; (800a240 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a212:	6013      	str	r3, [r2, #0]
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a218:	4613      	mov	r3, r2
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	4413      	add	r3, r2
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	4a06      	ldr	r2, [pc, #24]	; (800a23c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a222:	441a      	add	r2, r3
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	3304      	adds	r3, #4
 800a228:	4619      	mov	r1, r3
 800a22a:	4610      	mov	r0, r2
 800a22c:	f7fe f9a7 	bl	800857e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a230:	bf00      	nop
 800a232:	3720      	adds	r7, #32
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	20000880 	.word	0x20000880
 800a23c:	20000884 	.word	0x20000884
 800a240:	20000d5c 	.word	0x20000d5c

0800a244 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800a244:	b480      	push	{r7}
 800a246:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a248:	4b07      	ldr	r3, [pc, #28]	; (800a268 <pvTaskIncrementMutexHeldCount+0x24>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d004      	beq.n	800a25a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a250:	4b05      	ldr	r3, [pc, #20]	; (800a268 <pvTaskIncrementMutexHeldCount+0x24>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a256:	3201      	adds	r2, #1
 800a258:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a25a:	4b03      	ldr	r3, [pc, #12]	; (800a268 <pvTaskIncrementMutexHeldCount+0x24>)
 800a25c:	681b      	ldr	r3, [r3, #0]
	}
 800a25e:	4618      	mov	r0, r3
 800a260:	46bd      	mov	sp, r7
 800a262:	bc80      	pop	{r7}
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop
 800a268:	20000880 	.word	0x20000880

0800a26c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a276:	4b21      	ldr	r3, [pc, #132]	; (800a2fc <prvAddCurrentTaskToDelayedList+0x90>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a27c:	4b20      	ldr	r3, [pc, #128]	; (800a300 <prvAddCurrentTaskToDelayedList+0x94>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	3304      	adds	r3, #4
 800a282:	4618      	mov	r0, r3
 800a284:	f7fe f9d6 	bl	8008634 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a28e:	d10a      	bne.n	800a2a6 <prvAddCurrentTaskToDelayedList+0x3a>
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d007      	beq.n	800a2a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a296:	4b1a      	ldr	r3, [pc, #104]	; (800a300 <prvAddCurrentTaskToDelayedList+0x94>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	3304      	adds	r3, #4
 800a29c:	4619      	mov	r1, r3
 800a29e:	4819      	ldr	r0, [pc, #100]	; (800a304 <prvAddCurrentTaskToDelayedList+0x98>)
 800a2a0:	f7fe f96d 	bl	800857e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a2a4:	e026      	b.n	800a2f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	4413      	add	r3, r2
 800a2ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a2ae:	4b14      	ldr	r3, [pc, #80]	; (800a300 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	68ba      	ldr	r2, [r7, #8]
 800a2b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d209      	bcs.n	800a2d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2be:	4b12      	ldr	r3, [pc, #72]	; (800a308 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	4b0f      	ldr	r3, [pc, #60]	; (800a300 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	3304      	adds	r3, #4
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	4610      	mov	r0, r2
 800a2cc:	f7fe f97a 	bl	80085c4 <vListInsert>
}
 800a2d0:	e010      	b.n	800a2f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2d2:	4b0e      	ldr	r3, [pc, #56]	; (800a30c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	4b0a      	ldr	r3, [pc, #40]	; (800a300 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	3304      	adds	r3, #4
 800a2dc:	4619      	mov	r1, r3
 800a2de:	4610      	mov	r0, r2
 800a2e0:	f7fe f970 	bl	80085c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a2e4:	4b0a      	ldr	r3, [pc, #40]	; (800a310 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	68ba      	ldr	r2, [r7, #8]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d202      	bcs.n	800a2f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a2ee:	4a08      	ldr	r2, [pc, #32]	; (800a310 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	6013      	str	r3, [r2, #0]
}
 800a2f4:	bf00      	nop
 800a2f6:	3710      	adds	r7, #16
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	20000d58 	.word	0x20000d58
 800a300:	20000880 	.word	0x20000880
 800a304:	20000d40 	.word	0x20000d40
 800a308:	20000d10 	.word	0x20000d10
 800a30c:	20000d0c 	.word	0x20000d0c
 800a310:	20000d74 	.word	0x20000d74

0800a314 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b08a      	sub	sp, #40	; 0x28
 800a318:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a31a:	2300      	movs	r3, #0
 800a31c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a31e:	f000 facb 	bl	800a8b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a322:	4b1c      	ldr	r3, [pc, #112]	; (800a394 <xTimerCreateTimerTask+0x80>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d021      	beq.n	800a36e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a32a:	2300      	movs	r3, #0
 800a32c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a32e:	2300      	movs	r3, #0
 800a330:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a332:	1d3a      	adds	r2, r7, #4
 800a334:	f107 0108 	add.w	r1, r7, #8
 800a338:	f107 030c 	add.w	r3, r7, #12
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7fe f8d9 	bl	80084f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a342:	6879      	ldr	r1, [r7, #4]
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	9202      	str	r2, [sp, #8]
 800a34a:	9301      	str	r3, [sp, #4]
 800a34c:	2302      	movs	r3, #2
 800a34e:	9300      	str	r3, [sp, #0]
 800a350:	2300      	movs	r3, #0
 800a352:	460a      	mov	r2, r1
 800a354:	4910      	ldr	r1, [pc, #64]	; (800a398 <xTimerCreateTimerTask+0x84>)
 800a356:	4811      	ldr	r0, [pc, #68]	; (800a39c <xTimerCreateTimerTask+0x88>)
 800a358:	f7fe ffdc 	bl	8009314 <xTaskCreateStatic>
 800a35c:	4603      	mov	r3, r0
 800a35e:	4a10      	ldr	r2, [pc, #64]	; (800a3a0 <xTimerCreateTimerTask+0x8c>)
 800a360:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a362:	4b0f      	ldr	r3, [pc, #60]	; (800a3a0 <xTimerCreateTimerTask+0x8c>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d001      	beq.n	800a36e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a36a:	2301      	movs	r3, #1
 800a36c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d10a      	bne.n	800a38a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a378:	f383 8811 	msr	BASEPRI, r3
 800a37c:	f3bf 8f6f 	isb	sy
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	613b      	str	r3, [r7, #16]
}
 800a386:	bf00      	nop
 800a388:	e7fe      	b.n	800a388 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a38a:	697b      	ldr	r3, [r7, #20]
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3718      	adds	r7, #24
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	20000db0 	.word	0x20000db0
 800a398:	0800c58c 	.word	0x0800c58c
 800a39c:	0800a4c1 	.word	0x0800a4c1
 800a3a0:	20000db4 	.word	0x20000db4

0800a3a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b08a      	sub	sp, #40	; 0x28
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	607a      	str	r2, [r7, #4]
 800a3b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d10a      	bne.n	800a3d2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c0:	f383 8811 	msr	BASEPRI, r3
 800a3c4:	f3bf 8f6f 	isb	sy
 800a3c8:	f3bf 8f4f 	dsb	sy
 800a3cc:	623b      	str	r3, [r7, #32]
}
 800a3ce:	bf00      	nop
 800a3d0:	e7fe      	b.n	800a3d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a3d2:	4b1a      	ldr	r3, [pc, #104]	; (800a43c <xTimerGenericCommand+0x98>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d02a      	beq.n	800a430 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	2b05      	cmp	r3, #5
 800a3ea:	dc18      	bgt.n	800a41e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a3ec:	f7ff fdaa 	bl	8009f44 <xTaskGetSchedulerState>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b02      	cmp	r3, #2
 800a3f4:	d109      	bne.n	800a40a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a3f6:	4b11      	ldr	r3, [pc, #68]	; (800a43c <xTimerGenericCommand+0x98>)
 800a3f8:	6818      	ldr	r0, [r3, #0]
 800a3fa:	f107 0110 	add.w	r1, r7, #16
 800a3fe:	2300      	movs	r3, #0
 800a400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a402:	f7fe fa81 	bl	8008908 <xQueueGenericSend>
 800a406:	6278      	str	r0, [r7, #36]	; 0x24
 800a408:	e012      	b.n	800a430 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a40a:	4b0c      	ldr	r3, [pc, #48]	; (800a43c <xTimerGenericCommand+0x98>)
 800a40c:	6818      	ldr	r0, [r3, #0]
 800a40e:	f107 0110 	add.w	r1, r7, #16
 800a412:	2300      	movs	r3, #0
 800a414:	2200      	movs	r2, #0
 800a416:	f7fe fa77 	bl	8008908 <xQueueGenericSend>
 800a41a:	6278      	str	r0, [r7, #36]	; 0x24
 800a41c:	e008      	b.n	800a430 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a41e:	4b07      	ldr	r3, [pc, #28]	; (800a43c <xTimerGenericCommand+0x98>)
 800a420:	6818      	ldr	r0, [r3, #0]
 800a422:	f107 0110 	add.w	r1, r7, #16
 800a426:	2300      	movs	r3, #0
 800a428:	683a      	ldr	r2, [r7, #0]
 800a42a:	f7fe fb6b 	bl	8008b04 <xQueueGenericSendFromISR>
 800a42e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a432:	4618      	mov	r0, r3
 800a434:	3728      	adds	r7, #40	; 0x28
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	20000db0 	.word	0x20000db0

0800a440 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b088      	sub	sp, #32
 800a444:	af02      	add	r7, sp, #8
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a44a:	4b1c      	ldr	r3, [pc, #112]	; (800a4bc <prvProcessExpiredTimer+0x7c>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	68db      	ldr	r3, [r3, #12]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	3304      	adds	r3, #4
 800a458:	4618      	mov	r0, r3
 800a45a:	f7fe f8eb 	bl	8008634 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	69db      	ldr	r3, [r3, #28]
 800a462:	2b01      	cmp	r3, #1
 800a464:	d122      	bne.n	800a4ac <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	699a      	ldr	r2, [r3, #24]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	18d1      	adds	r1, r2, r3
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	683a      	ldr	r2, [r7, #0]
 800a472:	6978      	ldr	r0, [r7, #20]
 800a474:	f000 f8c8 	bl	800a608 <prvInsertTimerInActiveList>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d016      	beq.n	800a4ac <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a47e:	2300      	movs	r3, #0
 800a480:	9300      	str	r3, [sp, #0]
 800a482:	2300      	movs	r3, #0
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	2100      	movs	r1, #0
 800a488:	6978      	ldr	r0, [r7, #20]
 800a48a:	f7ff ff8b 	bl	800a3a4 <xTimerGenericCommand>
 800a48e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d10a      	bne.n	800a4ac <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800a496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49a:	f383 8811 	msr	BASEPRI, r3
 800a49e:	f3bf 8f6f 	isb	sy
 800a4a2:	f3bf 8f4f 	dsb	sy
 800a4a6:	60fb      	str	r3, [r7, #12]
}
 800a4a8:	bf00      	nop
 800a4aa:	e7fe      	b.n	800a4aa <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b0:	6978      	ldr	r0, [r7, #20]
 800a4b2:	4798      	blx	r3
}
 800a4b4:	bf00      	nop
 800a4b6:	3718      	adds	r7, #24
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}
 800a4bc:	20000da8 	.word	0x20000da8

0800a4c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a4c8:	f107 0308 	add.w	r3, r7, #8
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f000 f857 	bl	800a580 <prvGetNextExpireTime>
 800a4d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	68f8      	ldr	r0, [r7, #12]
 800a4da:	f000 f803 	bl	800a4e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a4de:	f000 f8d5 	bl	800a68c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a4e2:	e7f1      	b.n	800a4c8 <prvTimerTask+0x8>

0800a4e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a4ee:	f7ff f943 	bl	8009778 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a4f2:	f107 0308 	add.w	r3, r7, #8
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f000 f866 	bl	800a5c8 <prvSampleTimeNow>
 800a4fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d130      	bne.n	800a566 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d10a      	bne.n	800a520 <prvProcessTimerOrBlockTask+0x3c>
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d806      	bhi.n	800a520 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a512:	f7ff f93f 	bl	8009794 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a516:	68f9      	ldr	r1, [r7, #12]
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f7ff ff91 	bl	800a440 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a51e:	e024      	b.n	800a56a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d008      	beq.n	800a538 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a526:	4b13      	ldr	r3, [pc, #76]	; (800a574 <prvProcessTimerOrBlockTask+0x90>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	bf0c      	ite	eq
 800a530:	2301      	moveq	r3, #1
 800a532:	2300      	movne	r3, #0
 800a534:	b2db      	uxtb	r3, r3
 800a536:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a538:	4b0f      	ldr	r3, [pc, #60]	; (800a578 <prvProcessTimerOrBlockTask+0x94>)
 800a53a:	6818      	ldr	r0, [r3, #0]
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	1ad3      	subs	r3, r2, r3
 800a542:	683a      	ldr	r2, [r7, #0]
 800a544:	4619      	mov	r1, r3
 800a546:	f7fe feb1 	bl	80092ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a54a:	f7ff f923 	bl	8009794 <xTaskResumeAll>
 800a54e:	4603      	mov	r3, r0
 800a550:	2b00      	cmp	r3, #0
 800a552:	d10a      	bne.n	800a56a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a554:	4b09      	ldr	r3, [pc, #36]	; (800a57c <prvProcessTimerOrBlockTask+0x98>)
 800a556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a55a:	601a      	str	r2, [r3, #0]
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	f3bf 8f6f 	isb	sy
}
 800a564:	e001      	b.n	800a56a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a566:	f7ff f915 	bl	8009794 <xTaskResumeAll>
}
 800a56a:	bf00      	nop
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	20000dac 	.word	0x20000dac
 800a578:	20000db0 	.word	0x20000db0
 800a57c:	e000ed04 	.word	0xe000ed04

0800a580 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a580:	b480      	push	{r7}
 800a582:	b085      	sub	sp, #20
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a588:	4b0e      	ldr	r3, [pc, #56]	; (800a5c4 <prvGetNextExpireTime+0x44>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	bf0c      	ite	eq
 800a592:	2301      	moveq	r3, #1
 800a594:	2300      	movne	r3, #0
 800a596:	b2db      	uxtb	r3, r3
 800a598:	461a      	mov	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d105      	bne.n	800a5b2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a5a6:	4b07      	ldr	r3, [pc, #28]	; (800a5c4 <prvGetNextExpireTime+0x44>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	60fb      	str	r3, [r7, #12]
 800a5b0:	e001      	b.n	800a5b6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3714      	adds	r7, #20
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bc80      	pop	{r7}
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	20000da8 	.word	0x20000da8

0800a5c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a5d0:	f7ff f97e 	bl	80098d0 <xTaskGetTickCount>
 800a5d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a5d6:	4b0b      	ldr	r3, [pc, #44]	; (800a604 <prvSampleTimeNow+0x3c>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d205      	bcs.n	800a5ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a5e0:	f000 f908 	bl	800a7f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	601a      	str	r2, [r3, #0]
 800a5ea:	e002      	b.n	800a5f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a5f2:	4a04      	ldr	r2, [pc, #16]	; (800a604 <prvSampleTimeNow+0x3c>)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3710      	adds	r7, #16
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	20000db8 	.word	0x20000db8

0800a608 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b086      	sub	sp, #24
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	607a      	str	r2, [r7, #4]
 800a614:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a616:	2300      	movs	r3, #0
 800a618:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	68ba      	ldr	r2, [r7, #8]
 800a61e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	68fa      	ldr	r2, [r7, #12]
 800a624:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a626:	68ba      	ldr	r2, [r7, #8]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d812      	bhi.n	800a654 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	1ad2      	subs	r2, r2, r3
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	699b      	ldr	r3, [r3, #24]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d302      	bcc.n	800a642 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a63c:	2301      	movs	r3, #1
 800a63e:	617b      	str	r3, [r7, #20]
 800a640:	e01b      	b.n	800a67a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a642:	4b10      	ldr	r3, [pc, #64]	; (800a684 <prvInsertTimerInActiveList+0x7c>)
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	3304      	adds	r3, #4
 800a64a:	4619      	mov	r1, r3
 800a64c:	4610      	mov	r0, r2
 800a64e:	f7fd ffb9 	bl	80085c4 <vListInsert>
 800a652:	e012      	b.n	800a67a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	429a      	cmp	r2, r3
 800a65a:	d206      	bcs.n	800a66a <prvInsertTimerInActiveList+0x62>
 800a65c:	68ba      	ldr	r2, [r7, #8]
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	429a      	cmp	r2, r3
 800a662:	d302      	bcc.n	800a66a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a664:	2301      	movs	r3, #1
 800a666:	617b      	str	r3, [r7, #20]
 800a668:	e007      	b.n	800a67a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a66a:	4b07      	ldr	r3, [pc, #28]	; (800a688 <prvInsertTimerInActiveList+0x80>)
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	3304      	adds	r3, #4
 800a672:	4619      	mov	r1, r3
 800a674:	4610      	mov	r0, r2
 800a676:	f7fd ffa5 	bl	80085c4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a67a:	697b      	ldr	r3, [r7, #20]
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3718      	adds	r7, #24
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}
 800a684:	20000dac 	.word	0x20000dac
 800a688:	20000da8 	.word	0x20000da8

0800a68c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b08e      	sub	sp, #56	; 0x38
 800a690:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a692:	e09d      	b.n	800a7d0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2b00      	cmp	r3, #0
 800a698:	da18      	bge.n	800a6cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a69a:	1d3b      	adds	r3, r7, #4
 800a69c:	3304      	adds	r3, #4
 800a69e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d10a      	bne.n	800a6bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6aa:	f383 8811 	msr	BASEPRI, r3
 800a6ae:	f3bf 8f6f 	isb	sy
 800a6b2:	f3bf 8f4f 	dsb	sy
 800a6b6:	61fb      	str	r3, [r7, #28]
}
 800a6b8:	bf00      	nop
 800a6ba:	e7fe      	b.n	800a6ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6c2:	6850      	ldr	r0, [r2, #4]
 800a6c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6c6:	6892      	ldr	r2, [r2, #8]
 800a6c8:	4611      	mov	r1, r2
 800a6ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	db7d      	blt.n	800a7ce <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d8:	695b      	ldr	r3, [r3, #20]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d004      	beq.n	800a6e8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e0:	3304      	adds	r3, #4
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7fd ffa6 	bl	8008634 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a6e8:	463b      	mov	r3, r7
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7ff ff6c 	bl	800a5c8 <prvSampleTimeNow>
 800a6f0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2b09      	cmp	r3, #9
 800a6f6:	d86b      	bhi.n	800a7d0 <prvProcessReceivedCommands+0x144>
 800a6f8:	a201      	add	r2, pc, #4	; (adr r2, 800a700 <prvProcessReceivedCommands+0x74>)
 800a6fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6fe:	bf00      	nop
 800a700:	0800a729 	.word	0x0800a729
 800a704:	0800a729 	.word	0x0800a729
 800a708:	0800a729 	.word	0x0800a729
 800a70c:	0800a7d1 	.word	0x0800a7d1
 800a710:	0800a785 	.word	0x0800a785
 800a714:	0800a7bd 	.word	0x0800a7bd
 800a718:	0800a729 	.word	0x0800a729
 800a71c:	0800a729 	.word	0x0800a729
 800a720:	0800a7d1 	.word	0x0800a7d1
 800a724:	0800a785 	.word	0x0800a785
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a728:	68ba      	ldr	r2, [r7, #8]
 800a72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72c:	699b      	ldr	r3, [r3, #24]
 800a72e:	18d1      	adds	r1, r2, r3
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a734:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a736:	f7ff ff67 	bl	800a608 <prvInsertTimerInActiveList>
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d047      	beq.n	800a7d0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a746:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74a:	69db      	ldr	r3, [r3, #28]
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d13f      	bne.n	800a7d0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a750:	68ba      	ldr	r2, [r7, #8]
 800a752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a754:	699b      	ldr	r3, [r3, #24]
 800a756:	441a      	add	r2, r3
 800a758:	2300      	movs	r3, #0
 800a75a:	9300      	str	r3, [sp, #0]
 800a75c:	2300      	movs	r3, #0
 800a75e:	2100      	movs	r1, #0
 800a760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a762:	f7ff fe1f 	bl	800a3a4 <xTimerGenericCommand>
 800a766:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a768:	6a3b      	ldr	r3, [r7, #32]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d130      	bne.n	800a7d0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800a76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a772:	f383 8811 	msr	BASEPRI, r3
 800a776:	f3bf 8f6f 	isb	sy
 800a77a:	f3bf 8f4f 	dsb	sy
 800a77e:	61bb      	str	r3, [r7, #24]
}
 800a780:	bf00      	nop
 800a782:	e7fe      	b.n	800a782 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a784:	68ba      	ldr	r2, [r7, #8]
 800a786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a788:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78c:	699b      	ldr	r3, [r3, #24]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d10a      	bne.n	800a7a8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800a792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a796:	f383 8811 	msr	BASEPRI, r3
 800a79a:	f3bf 8f6f 	isb	sy
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	617b      	str	r3, [r7, #20]
}
 800a7a4:	bf00      	nop
 800a7a6:	e7fe      	b.n	800a7a6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7aa:	699a      	ldr	r2, [r3, #24]
 800a7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ae:	18d1      	adds	r1, r2, r3
 800a7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7b6:	f7ff ff27 	bl	800a608 <prvInsertTimerInActiveList>
					break;
 800a7ba:	e009      	b.n	800a7d0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d104      	bne.n	800a7d0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800a7c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7c8:	f000 fb6c 	bl	800aea4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a7cc:	e000      	b.n	800a7d0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a7ce:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a7d0:	4b07      	ldr	r3, [pc, #28]	; (800a7f0 <prvProcessReceivedCommands+0x164>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	1d39      	adds	r1, r7, #4
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7fe fa2b 	bl	8008c34 <xQueueReceive>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	f47f af57 	bne.w	800a694 <prvProcessReceivedCommands+0x8>
	}
}
 800a7e6:	bf00      	nop
 800a7e8:	bf00      	nop
 800a7ea:	3730      	adds	r7, #48	; 0x30
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	20000db0 	.word	0x20000db0

0800a7f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b088      	sub	sp, #32
 800a7f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7fa:	e045      	b.n	800a888 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7fc:	4b2c      	ldr	r3, [pc, #176]	; (800a8b0 <prvSwitchTimerLists+0xbc>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a806:	4b2a      	ldr	r3, [pc, #168]	; (800a8b0 <prvSwitchTimerLists+0xbc>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	3304      	adds	r3, #4
 800a814:	4618      	mov	r0, r3
 800a816:	f7fd ff0d 	bl	8008634 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81e:	68f8      	ldr	r0, [r7, #12]
 800a820:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	69db      	ldr	r3, [r3, #28]
 800a826:	2b01      	cmp	r3, #1
 800a828:	d12e      	bne.n	800a888 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	699b      	ldr	r3, [r3, #24]
 800a82e:	693a      	ldr	r2, [r7, #16]
 800a830:	4413      	add	r3, r2
 800a832:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a834:	68ba      	ldr	r2, [r7, #8]
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	429a      	cmp	r2, r3
 800a83a:	d90e      	bls.n	800a85a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	68ba      	ldr	r2, [r7, #8]
 800a840:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a848:	4b19      	ldr	r3, [pc, #100]	; (800a8b0 <prvSwitchTimerLists+0xbc>)
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	3304      	adds	r3, #4
 800a850:	4619      	mov	r1, r3
 800a852:	4610      	mov	r0, r2
 800a854:	f7fd feb6 	bl	80085c4 <vListInsert>
 800a858:	e016      	b.n	800a888 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a85a:	2300      	movs	r3, #0
 800a85c:	9300      	str	r3, [sp, #0]
 800a85e:	2300      	movs	r3, #0
 800a860:	693a      	ldr	r2, [r7, #16]
 800a862:	2100      	movs	r1, #0
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	f7ff fd9d 	bl	800a3a4 <xTimerGenericCommand>
 800a86a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d10a      	bne.n	800a888 <prvSwitchTimerLists+0x94>
	__asm volatile
 800a872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a876:	f383 8811 	msr	BASEPRI, r3
 800a87a:	f3bf 8f6f 	isb	sy
 800a87e:	f3bf 8f4f 	dsb	sy
 800a882:	603b      	str	r3, [r7, #0]
}
 800a884:	bf00      	nop
 800a886:	e7fe      	b.n	800a886 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a888:	4b09      	ldr	r3, [pc, #36]	; (800a8b0 <prvSwitchTimerLists+0xbc>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d1b4      	bne.n	800a7fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a892:	4b07      	ldr	r3, [pc, #28]	; (800a8b0 <prvSwitchTimerLists+0xbc>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a898:	4b06      	ldr	r3, [pc, #24]	; (800a8b4 <prvSwitchTimerLists+0xc0>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a04      	ldr	r2, [pc, #16]	; (800a8b0 <prvSwitchTimerLists+0xbc>)
 800a89e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a8a0:	4a04      	ldr	r2, [pc, #16]	; (800a8b4 <prvSwitchTimerLists+0xc0>)
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	6013      	str	r3, [r2, #0]
}
 800a8a6:	bf00      	nop
 800a8a8:	3718      	adds	r7, #24
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	20000da8 	.word	0x20000da8
 800a8b4:	20000dac 	.word	0x20000dac

0800a8b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a8be:	f000 f92d 	bl	800ab1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a8c2:	4b15      	ldr	r3, [pc, #84]	; (800a918 <prvCheckForValidListAndQueue+0x60>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d120      	bne.n	800a90c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a8ca:	4814      	ldr	r0, [pc, #80]	; (800a91c <prvCheckForValidListAndQueue+0x64>)
 800a8cc:	f7fd fe2c 	bl	8008528 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a8d0:	4813      	ldr	r0, [pc, #76]	; (800a920 <prvCheckForValidListAndQueue+0x68>)
 800a8d2:	f7fd fe29 	bl	8008528 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a8d6:	4b13      	ldr	r3, [pc, #76]	; (800a924 <prvCheckForValidListAndQueue+0x6c>)
 800a8d8:	4a10      	ldr	r2, [pc, #64]	; (800a91c <prvCheckForValidListAndQueue+0x64>)
 800a8da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a8dc:	4b12      	ldr	r3, [pc, #72]	; (800a928 <prvCheckForValidListAndQueue+0x70>)
 800a8de:	4a10      	ldr	r2, [pc, #64]	; (800a920 <prvCheckForValidListAndQueue+0x68>)
 800a8e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	9300      	str	r3, [sp, #0]
 800a8e6:	4b11      	ldr	r3, [pc, #68]	; (800a92c <prvCheckForValidListAndQueue+0x74>)
 800a8e8:	4a11      	ldr	r2, [pc, #68]	; (800a930 <prvCheckForValidListAndQueue+0x78>)
 800a8ea:	2110      	movs	r1, #16
 800a8ec:	200a      	movs	r0, #10
 800a8ee:	f7fd ff33 	bl	8008758 <xQueueGenericCreateStatic>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	4a08      	ldr	r2, [pc, #32]	; (800a918 <prvCheckForValidListAndQueue+0x60>)
 800a8f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a8f8:	4b07      	ldr	r3, [pc, #28]	; (800a918 <prvCheckForValidListAndQueue+0x60>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d005      	beq.n	800a90c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a900:	4b05      	ldr	r3, [pc, #20]	; (800a918 <prvCheckForValidListAndQueue+0x60>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	490b      	ldr	r1, [pc, #44]	; (800a934 <prvCheckForValidListAndQueue+0x7c>)
 800a906:	4618      	mov	r0, r3
 800a908:	f7fe fca8 	bl	800925c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a90c:	f000 f936 	bl	800ab7c <vPortExitCritical>
}
 800a910:	bf00      	nop
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	20000db0 	.word	0x20000db0
 800a91c:	20000d80 	.word	0x20000d80
 800a920:	20000d94 	.word	0x20000d94
 800a924:	20000da8 	.word	0x20000da8
 800a928:	20000dac 	.word	0x20000dac
 800a92c:	20000e5c 	.word	0x20000e5c
 800a930:	20000dbc 	.word	0x20000dbc
 800a934:	0800c594 	.word	0x0800c594

0800a938 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	3b04      	subs	r3, #4
 800a948:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a950:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	3b04      	subs	r3, #4
 800a956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	f023 0201 	bic.w	r2, r3, #1
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	3b04      	subs	r3, #4
 800a966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a968:	4a08      	ldr	r2, [pc, #32]	; (800a98c <pxPortInitialiseStack+0x54>)
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	3b14      	subs	r3, #20
 800a972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	3b20      	subs	r3, #32
 800a97e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a980:	68fb      	ldr	r3, [r7, #12]
}
 800a982:	4618      	mov	r0, r3
 800a984:	3714      	adds	r7, #20
 800a986:	46bd      	mov	sp, r7
 800a988:	bc80      	pop	{r7}
 800a98a:	4770      	bx	lr
 800a98c:	0800a991 	.word	0x0800a991

0800a990 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a990:	b480      	push	{r7}
 800a992:	b085      	sub	sp, #20
 800a994:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a996:	2300      	movs	r3, #0
 800a998:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a99a:	4b12      	ldr	r3, [pc, #72]	; (800a9e4 <prvTaskExitError+0x54>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9a2:	d00a      	beq.n	800a9ba <prvTaskExitError+0x2a>
	__asm volatile
 800a9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a8:	f383 8811 	msr	BASEPRI, r3
 800a9ac:	f3bf 8f6f 	isb	sy
 800a9b0:	f3bf 8f4f 	dsb	sy
 800a9b4:	60fb      	str	r3, [r7, #12]
}
 800a9b6:	bf00      	nop
 800a9b8:	e7fe      	b.n	800a9b8 <prvTaskExitError+0x28>
	__asm volatile
 800a9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9be:	f383 8811 	msr	BASEPRI, r3
 800a9c2:	f3bf 8f6f 	isb	sy
 800a9c6:	f3bf 8f4f 	dsb	sy
 800a9ca:	60bb      	str	r3, [r7, #8]
}
 800a9cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a9ce:	bf00      	nop
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d0fc      	beq.n	800a9d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a9d6:	bf00      	nop
 800a9d8:	bf00      	nop
 800a9da:	3714      	adds	r7, #20
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bc80      	pop	{r7}
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	2000011c 	.word	0x2000011c
	...

0800a9f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a9f0:	4b07      	ldr	r3, [pc, #28]	; (800aa10 <pxCurrentTCBConst2>)
 800a9f2:	6819      	ldr	r1, [r3, #0]
 800a9f4:	6808      	ldr	r0, [r1, #0]
 800a9f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a9fa:	f380 8809 	msr	PSP, r0
 800a9fe:	f3bf 8f6f 	isb	sy
 800aa02:	f04f 0000 	mov.w	r0, #0
 800aa06:	f380 8811 	msr	BASEPRI, r0
 800aa0a:	f04e 0e0d 	orr.w	lr, lr, #13
 800aa0e:	4770      	bx	lr

0800aa10 <pxCurrentTCBConst2>:
 800aa10:	20000880 	.word	0x20000880
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa14:	bf00      	nop
 800aa16:	bf00      	nop

0800aa18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800aa18:	4806      	ldr	r0, [pc, #24]	; (800aa34 <prvPortStartFirstTask+0x1c>)
 800aa1a:	6800      	ldr	r0, [r0, #0]
 800aa1c:	6800      	ldr	r0, [r0, #0]
 800aa1e:	f380 8808 	msr	MSP, r0
 800aa22:	b662      	cpsie	i
 800aa24:	b661      	cpsie	f
 800aa26:	f3bf 8f4f 	dsb	sy
 800aa2a:	f3bf 8f6f 	isb	sy
 800aa2e:	df00      	svc	0
 800aa30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aa32:	bf00      	nop
 800aa34:	e000ed08 	.word	0xe000ed08

0800aa38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aa3e:	4b32      	ldr	r3, [pc, #200]	; (800ab08 <xPortStartScheduler+0xd0>)
 800aa40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	22ff      	movs	r2, #255	; 0xff
 800aa4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aa58:	78fb      	ldrb	r3, [r7, #3]
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aa60:	b2da      	uxtb	r2, r3
 800aa62:	4b2a      	ldr	r3, [pc, #168]	; (800ab0c <xPortStartScheduler+0xd4>)
 800aa64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aa66:	4b2a      	ldr	r3, [pc, #168]	; (800ab10 <xPortStartScheduler+0xd8>)
 800aa68:	2207      	movs	r2, #7
 800aa6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa6c:	e009      	b.n	800aa82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800aa6e:	4b28      	ldr	r3, [pc, #160]	; (800ab10 <xPortStartScheduler+0xd8>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	3b01      	subs	r3, #1
 800aa74:	4a26      	ldr	r2, [pc, #152]	; (800ab10 <xPortStartScheduler+0xd8>)
 800aa76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aa78:	78fb      	ldrb	r3, [r7, #3]
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	005b      	lsls	r3, r3, #1
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa82:	78fb      	ldrb	r3, [r7, #3]
 800aa84:	b2db      	uxtb	r3, r3
 800aa86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa8a:	2b80      	cmp	r3, #128	; 0x80
 800aa8c:	d0ef      	beq.n	800aa6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aa8e:	4b20      	ldr	r3, [pc, #128]	; (800ab10 <xPortStartScheduler+0xd8>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f1c3 0307 	rsb	r3, r3, #7
 800aa96:	2b04      	cmp	r3, #4
 800aa98:	d00a      	beq.n	800aab0 <xPortStartScheduler+0x78>
	__asm volatile
 800aa9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9e:	f383 8811 	msr	BASEPRI, r3
 800aaa2:	f3bf 8f6f 	isb	sy
 800aaa6:	f3bf 8f4f 	dsb	sy
 800aaaa:	60bb      	str	r3, [r7, #8]
}
 800aaac:	bf00      	nop
 800aaae:	e7fe      	b.n	800aaae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aab0:	4b17      	ldr	r3, [pc, #92]	; (800ab10 <xPortStartScheduler+0xd8>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	021b      	lsls	r3, r3, #8
 800aab6:	4a16      	ldr	r2, [pc, #88]	; (800ab10 <xPortStartScheduler+0xd8>)
 800aab8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aaba:	4b15      	ldr	r3, [pc, #84]	; (800ab10 <xPortStartScheduler+0xd8>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aac2:	4a13      	ldr	r2, [pc, #76]	; (800ab10 <xPortStartScheduler+0xd8>)
 800aac4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	b2da      	uxtb	r2, r3
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aace:	4b11      	ldr	r3, [pc, #68]	; (800ab14 <xPortStartScheduler+0xdc>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a10      	ldr	r2, [pc, #64]	; (800ab14 <xPortStartScheduler+0xdc>)
 800aad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aad8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aada:	4b0e      	ldr	r3, [pc, #56]	; (800ab14 <xPortStartScheduler+0xdc>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4a0d      	ldr	r2, [pc, #52]	; (800ab14 <xPortStartScheduler+0xdc>)
 800aae0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aae4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aae6:	f000 f8b9 	bl	800ac5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aaea:	4b0b      	ldr	r3, [pc, #44]	; (800ab18 <xPortStartScheduler+0xe0>)
 800aaec:	2200      	movs	r2, #0
 800aaee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aaf0:	f7ff ff92 	bl	800aa18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aaf4:	f7fe ffb8 	bl	8009a68 <vTaskSwitchContext>
	prvTaskExitError();
 800aaf8:	f7ff ff4a 	bl	800a990 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aafc:	2300      	movs	r3, #0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3710      	adds	r7, #16
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	e000e400 	.word	0xe000e400
 800ab0c:	20000eac 	.word	0x20000eac
 800ab10:	20000eb0 	.word	0x20000eb0
 800ab14:	e000ed20 	.word	0xe000ed20
 800ab18:	2000011c 	.word	0x2000011c

0800ab1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b083      	sub	sp, #12
 800ab20:	af00      	add	r7, sp, #0
	__asm volatile
 800ab22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab26:	f383 8811 	msr	BASEPRI, r3
 800ab2a:	f3bf 8f6f 	isb	sy
 800ab2e:	f3bf 8f4f 	dsb	sy
 800ab32:	607b      	str	r3, [r7, #4]
}
 800ab34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ab36:	4b0f      	ldr	r3, [pc, #60]	; (800ab74 <vPortEnterCritical+0x58>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	4a0d      	ldr	r2, [pc, #52]	; (800ab74 <vPortEnterCritical+0x58>)
 800ab3e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ab40:	4b0c      	ldr	r3, [pc, #48]	; (800ab74 <vPortEnterCritical+0x58>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d10f      	bne.n	800ab68 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ab48:	4b0b      	ldr	r3, [pc, #44]	; (800ab78 <vPortEnterCritical+0x5c>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d00a      	beq.n	800ab68 <vPortEnterCritical+0x4c>
	__asm volatile
 800ab52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab56:	f383 8811 	msr	BASEPRI, r3
 800ab5a:	f3bf 8f6f 	isb	sy
 800ab5e:	f3bf 8f4f 	dsb	sy
 800ab62:	603b      	str	r3, [r7, #0]
}
 800ab64:	bf00      	nop
 800ab66:	e7fe      	b.n	800ab66 <vPortEnterCritical+0x4a>
	}
}
 800ab68:	bf00      	nop
 800ab6a:	370c      	adds	r7, #12
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bc80      	pop	{r7}
 800ab70:	4770      	bx	lr
 800ab72:	bf00      	nop
 800ab74:	2000011c 	.word	0x2000011c
 800ab78:	e000ed04 	.word	0xe000ed04

0800ab7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ab82:	4b11      	ldr	r3, [pc, #68]	; (800abc8 <vPortExitCritical+0x4c>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d10a      	bne.n	800aba0 <vPortExitCritical+0x24>
	__asm volatile
 800ab8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab8e:	f383 8811 	msr	BASEPRI, r3
 800ab92:	f3bf 8f6f 	isb	sy
 800ab96:	f3bf 8f4f 	dsb	sy
 800ab9a:	607b      	str	r3, [r7, #4]
}
 800ab9c:	bf00      	nop
 800ab9e:	e7fe      	b.n	800ab9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aba0:	4b09      	ldr	r3, [pc, #36]	; (800abc8 <vPortExitCritical+0x4c>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	3b01      	subs	r3, #1
 800aba6:	4a08      	ldr	r2, [pc, #32]	; (800abc8 <vPortExitCritical+0x4c>)
 800aba8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800abaa:	4b07      	ldr	r3, [pc, #28]	; (800abc8 <vPortExitCritical+0x4c>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d105      	bne.n	800abbe <vPortExitCritical+0x42>
 800abb2:	2300      	movs	r3, #0
 800abb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	f383 8811 	msr	BASEPRI, r3
}
 800abbc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800abbe:	bf00      	nop
 800abc0:	370c      	adds	r7, #12
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bc80      	pop	{r7}
 800abc6:	4770      	bx	lr
 800abc8:	2000011c 	.word	0x2000011c
 800abcc:	00000000 	.word	0x00000000

0800abd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800abd0:	f3ef 8009 	mrs	r0, PSP
 800abd4:	f3bf 8f6f 	isb	sy
 800abd8:	4b0d      	ldr	r3, [pc, #52]	; (800ac10 <pxCurrentTCBConst>)
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800abe0:	6010      	str	r0, [r2, #0]
 800abe2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800abe6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800abea:	f380 8811 	msr	BASEPRI, r0
 800abee:	f7fe ff3b 	bl	8009a68 <vTaskSwitchContext>
 800abf2:	f04f 0000 	mov.w	r0, #0
 800abf6:	f380 8811 	msr	BASEPRI, r0
 800abfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800abfe:	6819      	ldr	r1, [r3, #0]
 800ac00:	6808      	ldr	r0, [r1, #0]
 800ac02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ac06:	f380 8809 	msr	PSP, r0
 800ac0a:	f3bf 8f6f 	isb	sy
 800ac0e:	4770      	bx	lr

0800ac10 <pxCurrentTCBConst>:
 800ac10:	20000880 	.word	0x20000880
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ac14:	bf00      	nop
 800ac16:	bf00      	nop

0800ac18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac22:	f383 8811 	msr	BASEPRI, r3
 800ac26:	f3bf 8f6f 	isb	sy
 800ac2a:	f3bf 8f4f 	dsb	sy
 800ac2e:	607b      	str	r3, [r7, #4]
}
 800ac30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ac32:	f7fe fe5b 	bl	80098ec <xTaskIncrementTick>
 800ac36:	4603      	mov	r3, r0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d003      	beq.n	800ac44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ac3c:	4b06      	ldr	r3, [pc, #24]	; (800ac58 <SysTick_Handler+0x40>)
 800ac3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac42:	601a      	str	r2, [r3, #0]
 800ac44:	2300      	movs	r3, #0
 800ac46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	f383 8811 	msr	BASEPRI, r3
}
 800ac4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ac50:	bf00      	nop
 800ac52:	3708      	adds	r7, #8
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	e000ed04 	.word	0xe000ed04

0800ac5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ac60:	4b0a      	ldr	r3, [pc, #40]	; (800ac8c <vPortSetupTimerInterrupt+0x30>)
 800ac62:	2200      	movs	r2, #0
 800ac64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ac66:	4b0a      	ldr	r3, [pc, #40]	; (800ac90 <vPortSetupTimerInterrupt+0x34>)
 800ac68:	2200      	movs	r2, #0
 800ac6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ac6c:	4b09      	ldr	r3, [pc, #36]	; (800ac94 <vPortSetupTimerInterrupt+0x38>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a09      	ldr	r2, [pc, #36]	; (800ac98 <vPortSetupTimerInterrupt+0x3c>)
 800ac72:	fba2 2303 	umull	r2, r3, r2, r3
 800ac76:	099b      	lsrs	r3, r3, #6
 800ac78:	4a08      	ldr	r2, [pc, #32]	; (800ac9c <vPortSetupTimerInterrupt+0x40>)
 800ac7a:	3b01      	subs	r3, #1
 800ac7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ac7e:	4b03      	ldr	r3, [pc, #12]	; (800ac8c <vPortSetupTimerInterrupt+0x30>)
 800ac80:	2207      	movs	r2, #7
 800ac82:	601a      	str	r2, [r3, #0]
}
 800ac84:	bf00      	nop
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bc80      	pop	{r7}
 800ac8a:	4770      	bx	lr
 800ac8c:	e000e010 	.word	0xe000e010
 800ac90:	e000e018 	.word	0xe000e018
 800ac94:	20000000 	.word	0x20000000
 800ac98:	10624dd3 	.word	0x10624dd3
 800ac9c:	e000e014 	.word	0xe000e014

0800aca0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aca0:	b480      	push	{r7}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aca6:	f3ef 8305 	mrs	r3, IPSR
 800acaa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2b0f      	cmp	r3, #15
 800acb0:	d914      	bls.n	800acdc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800acb2:	4a16      	ldr	r2, [pc, #88]	; (800ad0c <vPortValidateInterruptPriority+0x6c>)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	4413      	add	r3, r2
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800acbc:	4b14      	ldr	r3, [pc, #80]	; (800ad10 <vPortValidateInterruptPriority+0x70>)
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	7afa      	ldrb	r2, [r7, #11]
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d20a      	bcs.n	800acdc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800acc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acca:	f383 8811 	msr	BASEPRI, r3
 800acce:	f3bf 8f6f 	isb	sy
 800acd2:	f3bf 8f4f 	dsb	sy
 800acd6:	607b      	str	r3, [r7, #4]
}
 800acd8:	bf00      	nop
 800acda:	e7fe      	b.n	800acda <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800acdc:	4b0d      	ldr	r3, [pc, #52]	; (800ad14 <vPortValidateInterruptPriority+0x74>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ace4:	4b0c      	ldr	r3, [pc, #48]	; (800ad18 <vPortValidateInterruptPriority+0x78>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d90a      	bls.n	800ad02 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800acec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf0:	f383 8811 	msr	BASEPRI, r3
 800acf4:	f3bf 8f6f 	isb	sy
 800acf8:	f3bf 8f4f 	dsb	sy
 800acfc:	603b      	str	r3, [r7, #0]
}
 800acfe:	bf00      	nop
 800ad00:	e7fe      	b.n	800ad00 <vPortValidateInterruptPriority+0x60>
	}
 800ad02:	bf00      	nop
 800ad04:	3714      	adds	r7, #20
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bc80      	pop	{r7}
 800ad0a:	4770      	bx	lr
 800ad0c:	e000e3f0 	.word	0xe000e3f0
 800ad10:	20000eac 	.word	0x20000eac
 800ad14:	e000ed0c 	.word	0xe000ed0c
 800ad18:	20000eb0 	.word	0x20000eb0

0800ad1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b08a      	sub	sp, #40	; 0x28
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ad24:	2300      	movs	r3, #0
 800ad26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ad28:	f7fe fd26 	bl	8009778 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ad2c:	4b58      	ldr	r3, [pc, #352]	; (800ae90 <pvPortMalloc+0x174>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d101      	bne.n	800ad38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ad34:	f000 f910 	bl	800af58 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ad38:	4b56      	ldr	r3, [pc, #344]	; (800ae94 <pvPortMalloc+0x178>)
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4013      	ands	r3, r2
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	f040 808e 	bne.w	800ae62 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d01d      	beq.n	800ad88 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ad4c:	2208      	movs	r2, #8
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	4413      	add	r3, r2
 800ad52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f003 0307 	and.w	r3, r3, #7
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d014      	beq.n	800ad88 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f023 0307 	bic.w	r3, r3, #7
 800ad64:	3308      	adds	r3, #8
 800ad66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f003 0307 	and.w	r3, r3, #7
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d00a      	beq.n	800ad88 <pvPortMalloc+0x6c>
	__asm volatile
 800ad72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad76:	f383 8811 	msr	BASEPRI, r3
 800ad7a:	f3bf 8f6f 	isb	sy
 800ad7e:	f3bf 8f4f 	dsb	sy
 800ad82:	617b      	str	r3, [r7, #20]
}
 800ad84:	bf00      	nop
 800ad86:	e7fe      	b.n	800ad86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d069      	beq.n	800ae62 <pvPortMalloc+0x146>
 800ad8e:	4b42      	ldr	r3, [pc, #264]	; (800ae98 <pvPortMalloc+0x17c>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d864      	bhi.n	800ae62 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ad98:	4b40      	ldr	r3, [pc, #256]	; (800ae9c <pvPortMalloc+0x180>)
 800ad9a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ad9c:	4b3f      	ldr	r3, [pc, #252]	; (800ae9c <pvPortMalloc+0x180>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ada2:	e004      	b.n	800adae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ada4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ada8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800adae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d903      	bls.n	800adc0 <pvPortMalloc+0xa4>
 800adb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d1f1      	bne.n	800ada4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800adc0:	4b33      	ldr	r3, [pc, #204]	; (800ae90 <pvPortMalloc+0x174>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d04b      	beq.n	800ae62 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800adca:	6a3b      	ldr	r3, [r7, #32]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	2208      	movs	r2, #8
 800add0:	4413      	add	r3, r2
 800add2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800add4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	6a3b      	ldr	r3, [r7, #32]
 800adda:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800addc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adde:	685a      	ldr	r2, [r3, #4]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	1ad2      	subs	r2, r2, r3
 800ade4:	2308      	movs	r3, #8
 800ade6:	005b      	lsls	r3, r3, #1
 800ade8:	429a      	cmp	r2, r3
 800adea:	d91f      	bls.n	800ae2c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800adec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	4413      	add	r3, r2
 800adf2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800adf4:	69bb      	ldr	r3, [r7, #24]
 800adf6:	f003 0307 	and.w	r3, r3, #7
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00a      	beq.n	800ae14 <pvPortMalloc+0xf8>
	__asm volatile
 800adfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae02:	f383 8811 	msr	BASEPRI, r3
 800ae06:	f3bf 8f6f 	isb	sy
 800ae0a:	f3bf 8f4f 	dsb	sy
 800ae0e:	613b      	str	r3, [r7, #16]
}
 800ae10:	bf00      	nop
 800ae12:	e7fe      	b.n	800ae12 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ae14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae16:	685a      	ldr	r2, [r3, #4]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	1ad2      	subs	r2, r2, r3
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ae20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ae26:	69b8      	ldr	r0, [r7, #24]
 800ae28:	f000 f8f8 	bl	800b01c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ae2c:	4b1a      	ldr	r3, [pc, #104]	; (800ae98 <pvPortMalloc+0x17c>)
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	1ad3      	subs	r3, r2, r3
 800ae36:	4a18      	ldr	r2, [pc, #96]	; (800ae98 <pvPortMalloc+0x17c>)
 800ae38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ae3a:	4b17      	ldr	r3, [pc, #92]	; (800ae98 <pvPortMalloc+0x17c>)
 800ae3c:	681a      	ldr	r2, [r3, #0]
 800ae3e:	4b18      	ldr	r3, [pc, #96]	; (800aea0 <pvPortMalloc+0x184>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d203      	bcs.n	800ae4e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ae46:	4b14      	ldr	r3, [pc, #80]	; (800ae98 <pvPortMalloc+0x17c>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a15      	ldr	r2, [pc, #84]	; (800aea0 <pvPortMalloc+0x184>)
 800ae4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ae4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae50:	685a      	ldr	r2, [r3, #4]
 800ae52:	4b10      	ldr	r3, [pc, #64]	; (800ae94 <pvPortMalloc+0x178>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	431a      	orrs	r2, r3
 800ae58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ae5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5e:	2200      	movs	r2, #0
 800ae60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ae62:	f7fe fc97 	bl	8009794 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae66:	69fb      	ldr	r3, [r7, #28]
 800ae68:	f003 0307 	and.w	r3, r3, #7
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d00a      	beq.n	800ae86 <pvPortMalloc+0x16a>
	__asm volatile
 800ae70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae74:	f383 8811 	msr	BASEPRI, r3
 800ae78:	f3bf 8f6f 	isb	sy
 800ae7c:	f3bf 8f4f 	dsb	sy
 800ae80:	60fb      	str	r3, [r7, #12]
}
 800ae82:	bf00      	nop
 800ae84:	e7fe      	b.n	800ae84 <pvPortMalloc+0x168>
	return pvReturn;
 800ae86:	69fb      	ldr	r3, [r7, #28]
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3728      	adds	r7, #40	; 0x28
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	200036bc 	.word	0x200036bc
 800ae94:	200036c8 	.word	0x200036c8
 800ae98:	200036c0 	.word	0x200036c0
 800ae9c:	200036b4 	.word	0x200036b4
 800aea0:	200036c4 	.word	0x200036c4

0800aea4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b086      	sub	sp, #24
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d048      	beq.n	800af48 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aeb6:	2308      	movs	r3, #8
 800aeb8:	425b      	negs	r3, r3
 800aeba:	697a      	ldr	r2, [r7, #20]
 800aebc:	4413      	add	r3, r2
 800aebe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	685a      	ldr	r2, [r3, #4]
 800aec8:	4b21      	ldr	r3, [pc, #132]	; (800af50 <vPortFree+0xac>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4013      	ands	r3, r2
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d10a      	bne.n	800aee8 <vPortFree+0x44>
	__asm volatile
 800aed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed6:	f383 8811 	msr	BASEPRI, r3
 800aeda:	f3bf 8f6f 	isb	sy
 800aede:	f3bf 8f4f 	dsb	sy
 800aee2:	60fb      	str	r3, [r7, #12]
}
 800aee4:	bf00      	nop
 800aee6:	e7fe      	b.n	800aee6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d00a      	beq.n	800af06 <vPortFree+0x62>
	__asm volatile
 800aef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef4:	f383 8811 	msr	BASEPRI, r3
 800aef8:	f3bf 8f6f 	isb	sy
 800aefc:	f3bf 8f4f 	dsb	sy
 800af00:	60bb      	str	r3, [r7, #8]
}
 800af02:	bf00      	nop
 800af04:	e7fe      	b.n	800af04 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	685a      	ldr	r2, [r3, #4]
 800af0a:	4b11      	ldr	r3, [pc, #68]	; (800af50 <vPortFree+0xac>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4013      	ands	r3, r2
 800af10:	2b00      	cmp	r3, #0
 800af12:	d019      	beq.n	800af48 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d115      	bne.n	800af48 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	685a      	ldr	r2, [r3, #4]
 800af20:	4b0b      	ldr	r3, [pc, #44]	; (800af50 <vPortFree+0xac>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	43db      	mvns	r3, r3
 800af26:	401a      	ands	r2, r3
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800af2c:	f7fe fc24 	bl	8009778 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	685a      	ldr	r2, [r3, #4]
 800af34:	4b07      	ldr	r3, [pc, #28]	; (800af54 <vPortFree+0xb0>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4413      	add	r3, r2
 800af3a:	4a06      	ldr	r2, [pc, #24]	; (800af54 <vPortFree+0xb0>)
 800af3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800af3e:	6938      	ldr	r0, [r7, #16]
 800af40:	f000 f86c 	bl	800b01c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800af44:	f7fe fc26 	bl	8009794 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800af48:	bf00      	nop
 800af4a:	3718      	adds	r7, #24
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	200036c8 	.word	0x200036c8
 800af54:	200036c0 	.word	0x200036c0

0800af58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800af5e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800af62:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af64:	4b27      	ldr	r3, [pc, #156]	; (800b004 <prvHeapInit+0xac>)
 800af66:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f003 0307 	and.w	r3, r3, #7
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d00c      	beq.n	800af8c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	3307      	adds	r3, #7
 800af76:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f023 0307 	bic.w	r3, r3, #7
 800af7e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800af80:	68ba      	ldr	r2, [r7, #8]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	1ad3      	subs	r3, r2, r3
 800af86:	4a1f      	ldr	r2, [pc, #124]	; (800b004 <prvHeapInit+0xac>)
 800af88:	4413      	add	r3, r2
 800af8a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800af90:	4a1d      	ldr	r2, [pc, #116]	; (800b008 <prvHeapInit+0xb0>)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800af96:	4b1c      	ldr	r3, [pc, #112]	; (800b008 <prvHeapInit+0xb0>)
 800af98:	2200      	movs	r2, #0
 800af9a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	68ba      	ldr	r2, [r7, #8]
 800afa0:	4413      	add	r3, r2
 800afa2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800afa4:	2208      	movs	r2, #8
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	1a9b      	subs	r3, r3, r2
 800afaa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f023 0307 	bic.w	r3, r3, #7
 800afb2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	4a15      	ldr	r2, [pc, #84]	; (800b00c <prvHeapInit+0xb4>)
 800afb8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800afba:	4b14      	ldr	r3, [pc, #80]	; (800b00c <prvHeapInit+0xb4>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2200      	movs	r2, #0
 800afc0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800afc2:	4b12      	ldr	r3, [pc, #72]	; (800b00c <prvHeapInit+0xb4>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	2200      	movs	r2, #0
 800afc8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	68fa      	ldr	r2, [r7, #12]
 800afd2:	1ad2      	subs	r2, r2, r3
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800afd8:	4b0c      	ldr	r3, [pc, #48]	; (800b00c <prvHeapInit+0xb4>)
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	4a0a      	ldr	r2, [pc, #40]	; (800b010 <prvHeapInit+0xb8>)
 800afe6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	4a09      	ldr	r2, [pc, #36]	; (800b014 <prvHeapInit+0xbc>)
 800afee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aff0:	4b09      	ldr	r3, [pc, #36]	; (800b018 <prvHeapInit+0xc0>)
 800aff2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aff6:	601a      	str	r2, [r3, #0]
}
 800aff8:	bf00      	nop
 800affa:	3714      	adds	r7, #20
 800affc:	46bd      	mov	sp, r7
 800affe:	bc80      	pop	{r7}
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	20000eb4 	.word	0x20000eb4
 800b008:	200036b4 	.word	0x200036b4
 800b00c:	200036bc 	.word	0x200036bc
 800b010:	200036c4 	.word	0x200036c4
 800b014:	200036c0 	.word	0x200036c0
 800b018:	200036c8 	.word	0x200036c8

0800b01c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b01c:	b480      	push	{r7}
 800b01e:	b085      	sub	sp, #20
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b024:	4b27      	ldr	r3, [pc, #156]	; (800b0c4 <prvInsertBlockIntoFreeList+0xa8>)
 800b026:	60fb      	str	r3, [r7, #12]
 800b028:	e002      	b.n	800b030 <prvInsertBlockIntoFreeList+0x14>
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	60fb      	str	r3, [r7, #12]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	687a      	ldr	r2, [r7, #4]
 800b036:	429a      	cmp	r2, r3
 800b038:	d8f7      	bhi.n	800b02a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	68ba      	ldr	r2, [r7, #8]
 800b044:	4413      	add	r3, r2
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d108      	bne.n	800b05e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	685a      	ldr	r2, [r3, #4]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	441a      	add	r2, r3
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	68ba      	ldr	r2, [r7, #8]
 800b068:	441a      	add	r2, r3
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	429a      	cmp	r2, r3
 800b070:	d118      	bne.n	800b0a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681a      	ldr	r2, [r3, #0]
 800b076:	4b14      	ldr	r3, [pc, #80]	; (800b0c8 <prvInsertBlockIntoFreeList+0xac>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d00d      	beq.n	800b09a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	685a      	ldr	r2, [r3, #4]
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	441a      	add	r2, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	601a      	str	r2, [r3, #0]
 800b098:	e008      	b.n	800b0ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b09a:	4b0b      	ldr	r3, [pc, #44]	; (800b0c8 <prvInsertBlockIntoFreeList+0xac>)
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	601a      	str	r2, [r3, #0]
 800b0a2:	e003      	b.n	800b0ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b0ac:	68fa      	ldr	r2, [r7, #12]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d002      	beq.n	800b0ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0ba:	bf00      	nop
 800b0bc:	3714      	adds	r7, #20
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bc80      	pop	{r7}
 800b0c2:	4770      	bx	lr
 800b0c4:	200036b4 	.word	0x200036b4
 800b0c8:	200036bc 	.word	0x200036bc

0800b0cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	4912      	ldr	r1, [pc, #72]	; (800b11c <MX_USB_DEVICE_Init+0x50>)
 800b0d4:	4812      	ldr	r0, [pc, #72]	; (800b120 <MX_USB_DEVICE_Init+0x54>)
 800b0d6:	f7fc f81c 	bl	8007112 <USBD_Init>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d001      	beq.n	800b0e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b0e0:	f7f5 fe2c 	bl	8000d3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b0e4:	490f      	ldr	r1, [pc, #60]	; (800b124 <MX_USB_DEVICE_Init+0x58>)
 800b0e6:	480e      	ldr	r0, [pc, #56]	; (800b120 <MX_USB_DEVICE_Init+0x54>)
 800b0e8:	f7fc f83e 	bl	8007168 <USBD_RegisterClass>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d001      	beq.n	800b0f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b0f2:	f7f5 fe23 	bl	8000d3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b0f6:	490c      	ldr	r1, [pc, #48]	; (800b128 <MX_USB_DEVICE_Init+0x5c>)
 800b0f8:	4809      	ldr	r0, [pc, #36]	; (800b120 <MX_USB_DEVICE_Init+0x54>)
 800b0fa:	f7fb ff6f 	bl	8006fdc <USBD_CDC_RegisterInterface>
 800b0fe:	4603      	mov	r3, r0
 800b100:	2b00      	cmp	r3, #0
 800b102:	d001      	beq.n	800b108 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b104:	f7f5 fe1a 	bl	8000d3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b108:	4805      	ldr	r0, [pc, #20]	; (800b120 <MX_USB_DEVICE_Init+0x54>)
 800b10a:	f7fc f846 	bl	800719a <USBD_Start>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b00      	cmp	r3, #0
 800b112:	d001      	beq.n	800b118 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b114:	f7f5 fe12 	bl	8000d3c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b118:	bf00      	nop
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	20000130 	.word	0x20000130
 800b120:	20003adc 	.word	0x20003adc
 800b124:	20000018 	.word	0x20000018
 800b128:	20000120 	.word	0x20000120

0800b12c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b130:	2200      	movs	r2, #0
 800b132:	4905      	ldr	r1, [pc, #20]	; (800b148 <CDC_Init_FS+0x1c>)
 800b134:	4805      	ldr	r0, [pc, #20]	; (800b14c <CDC_Init_FS+0x20>)
 800b136:	f7fb ff67 	bl	8007008 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b13a:	4905      	ldr	r1, [pc, #20]	; (800b150 <CDC_Init_FS+0x24>)
 800b13c:	4803      	ldr	r0, [pc, #12]	; (800b14c <CDC_Init_FS+0x20>)
 800b13e:	f7fb ff7c 	bl	800703a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b142:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b144:	4618      	mov	r0, r3
 800b146:	bd80      	pop	{r7, pc}
 800b148:	20003da4 	.word	0x20003da4
 800b14c:	20003adc 	.word	0x20003adc
 800b150:	20003da0 	.word	0x20003da0

0800b154 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b154:	b480      	push	{r7}
 800b156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b158:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bc80      	pop	{r7}
 800b160:	4770      	bx	lr
	...

0800b164 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b164:	b480      	push	{r7}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
 800b16a:	4603      	mov	r3, r0
 800b16c:	6039      	str	r1, [r7, #0]
 800b16e:	71fb      	strb	r3, [r7, #7]
 800b170:	4613      	mov	r3, r2
 800b172:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b174:	79fb      	ldrb	r3, [r7, #7]
 800b176:	2b23      	cmp	r3, #35	; 0x23
 800b178:	d84a      	bhi.n	800b210 <CDC_Control_FS+0xac>
 800b17a:	a201      	add	r2, pc, #4	; (adr r2, 800b180 <CDC_Control_FS+0x1c>)
 800b17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b180:	0800b211 	.word	0x0800b211
 800b184:	0800b211 	.word	0x0800b211
 800b188:	0800b211 	.word	0x0800b211
 800b18c:	0800b211 	.word	0x0800b211
 800b190:	0800b211 	.word	0x0800b211
 800b194:	0800b211 	.word	0x0800b211
 800b198:	0800b211 	.word	0x0800b211
 800b19c:	0800b211 	.word	0x0800b211
 800b1a0:	0800b211 	.word	0x0800b211
 800b1a4:	0800b211 	.word	0x0800b211
 800b1a8:	0800b211 	.word	0x0800b211
 800b1ac:	0800b211 	.word	0x0800b211
 800b1b0:	0800b211 	.word	0x0800b211
 800b1b4:	0800b211 	.word	0x0800b211
 800b1b8:	0800b211 	.word	0x0800b211
 800b1bc:	0800b211 	.word	0x0800b211
 800b1c0:	0800b211 	.word	0x0800b211
 800b1c4:	0800b211 	.word	0x0800b211
 800b1c8:	0800b211 	.word	0x0800b211
 800b1cc:	0800b211 	.word	0x0800b211
 800b1d0:	0800b211 	.word	0x0800b211
 800b1d4:	0800b211 	.word	0x0800b211
 800b1d8:	0800b211 	.word	0x0800b211
 800b1dc:	0800b211 	.word	0x0800b211
 800b1e0:	0800b211 	.word	0x0800b211
 800b1e4:	0800b211 	.word	0x0800b211
 800b1e8:	0800b211 	.word	0x0800b211
 800b1ec:	0800b211 	.word	0x0800b211
 800b1f0:	0800b211 	.word	0x0800b211
 800b1f4:	0800b211 	.word	0x0800b211
 800b1f8:	0800b211 	.word	0x0800b211
 800b1fc:	0800b211 	.word	0x0800b211
 800b200:	0800b211 	.word	0x0800b211
 800b204:	0800b211 	.word	0x0800b211
 800b208:	0800b211 	.word	0x0800b211
 800b20c:	0800b211 	.word	0x0800b211
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b210:	bf00      	nop
  }

  return (USBD_OK);
 800b212:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b214:	4618      	mov	r0, r3
 800b216:	370c      	adds	r7, #12
 800b218:	46bd      	mov	sp, r7
 800b21a:	bc80      	pop	{r7}
 800b21c:	4770      	bx	lr
 800b21e:	bf00      	nop

0800b220 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b22a:	6879      	ldr	r1, [r7, #4]
 800b22c:	4807      	ldr	r0, [pc, #28]	; (800b24c <CDC_Receive_FS+0x2c>)
 800b22e:	f7fb ff04 	bl	800703a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b232:	4806      	ldr	r0, [pc, #24]	; (800b24c <CDC_Receive_FS+0x2c>)
 800b234:	f7fb ff43 	bl	80070be <USBD_CDC_ReceivePacket>
  CI_getDataChannel_USB(*Buf);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7f5 fb19 	bl	8000874 <CI_getDataChannel_USB>
  return (USBD_OK);
 800b242:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b244:	4618      	mov	r0, r3
 800b246:	3708      	adds	r7, #8
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}
 800b24c:	20003adc 	.word	0x20003adc

0800b250 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	460b      	mov	r3, r1
 800b25a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b25c:	2300      	movs	r3, #0
 800b25e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b260:	4b0d      	ldr	r3, [pc, #52]	; (800b298 <CDC_Transmit_FS+0x48>)
 800b262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b266:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d001      	beq.n	800b276 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b272:	2301      	movs	r3, #1
 800b274:	e00b      	b.n	800b28e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b276:	887b      	ldrh	r3, [r7, #2]
 800b278:	461a      	mov	r2, r3
 800b27a:	6879      	ldr	r1, [r7, #4]
 800b27c:	4806      	ldr	r0, [pc, #24]	; (800b298 <CDC_Transmit_FS+0x48>)
 800b27e:	f7fb fec3 	bl	8007008 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b282:	4805      	ldr	r0, [pc, #20]	; (800b298 <CDC_Transmit_FS+0x48>)
 800b284:	f7fb feec 	bl	8007060 <USBD_CDC_TransmitPacket>
 800b288:	4603      	mov	r3, r0
 800b28a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b28c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3710      	adds	r7, #16
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	20003adc 	.word	0x20003adc

0800b29c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b083      	sub	sp, #12
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	6039      	str	r1, [r7, #0]
 800b2a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	2212      	movs	r2, #18
 800b2ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b2ae:	4b03      	ldr	r3, [pc, #12]	; (800b2bc <USBD_FS_DeviceDescriptor+0x20>)
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	370c      	adds	r7, #12
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bc80      	pop	{r7}
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop
 800b2bc:	2000014c 	.word	0x2000014c

0800b2c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	6039      	str	r1, [r7, #0]
 800b2ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	2204      	movs	r2, #4
 800b2d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b2d2:	4b03      	ldr	r3, [pc, #12]	; (800b2e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	370c      	adds	r7, #12
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bc80      	pop	{r7}
 800b2dc:	4770      	bx	lr
 800b2de:	bf00      	nop
 800b2e0:	20000160 	.word	0x20000160

0800b2e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	6039      	str	r1, [r7, #0]
 800b2ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b2f0:	79fb      	ldrb	r3, [r7, #7]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d105      	bne.n	800b302 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b2f6:	683a      	ldr	r2, [r7, #0]
 800b2f8:	4907      	ldr	r1, [pc, #28]	; (800b318 <USBD_FS_ProductStrDescriptor+0x34>)
 800b2fa:	4808      	ldr	r0, [pc, #32]	; (800b31c <USBD_FS_ProductStrDescriptor+0x38>)
 800b2fc:	f7fc fec6 	bl	800808c <USBD_GetString>
 800b300:	e004      	b.n	800b30c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b302:	683a      	ldr	r2, [r7, #0]
 800b304:	4904      	ldr	r1, [pc, #16]	; (800b318 <USBD_FS_ProductStrDescriptor+0x34>)
 800b306:	4805      	ldr	r0, [pc, #20]	; (800b31c <USBD_FS_ProductStrDescriptor+0x38>)
 800b308:	f7fc fec0 	bl	800808c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b30c:	4b02      	ldr	r3, [pc, #8]	; (800b318 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3708      	adds	r7, #8
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	20003db8 	.word	0x20003db8
 800b31c:	0800c59c 	.word	0x0800c59c

0800b320 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b082      	sub	sp, #8
 800b324:	af00      	add	r7, sp, #0
 800b326:	4603      	mov	r3, r0
 800b328:	6039      	str	r1, [r7, #0]
 800b32a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b32c:	683a      	ldr	r2, [r7, #0]
 800b32e:	4904      	ldr	r1, [pc, #16]	; (800b340 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b330:	4804      	ldr	r0, [pc, #16]	; (800b344 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b332:	f7fc feab 	bl	800808c <USBD_GetString>
  return USBD_StrDesc;
 800b336:	4b02      	ldr	r3, [pc, #8]	; (800b340 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3708      	adds	r7, #8
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	20003db8 	.word	0x20003db8
 800b344:	0800c5b0 	.word	0x0800c5b0

0800b348 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	4603      	mov	r3, r0
 800b350:	6039      	str	r1, [r7, #0]
 800b352:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	221a      	movs	r2, #26
 800b358:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b35a:	f000 f843 	bl	800b3e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b35e:	4b02      	ldr	r3, [pc, #8]	; (800b368 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b360:	4618      	mov	r0, r3
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	20000164 	.word	0x20000164

0800b36c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
 800b372:	4603      	mov	r3, r0
 800b374:	6039      	str	r1, [r7, #0]
 800b376:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b378:	79fb      	ldrb	r3, [r7, #7]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d105      	bne.n	800b38a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b37e:	683a      	ldr	r2, [r7, #0]
 800b380:	4907      	ldr	r1, [pc, #28]	; (800b3a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b382:	4808      	ldr	r0, [pc, #32]	; (800b3a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b384:	f7fc fe82 	bl	800808c <USBD_GetString>
 800b388:	e004      	b.n	800b394 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b38a:	683a      	ldr	r2, [r7, #0]
 800b38c:	4904      	ldr	r1, [pc, #16]	; (800b3a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b38e:	4805      	ldr	r0, [pc, #20]	; (800b3a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b390:	f7fc fe7c 	bl	800808c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b394:	4b02      	ldr	r3, [pc, #8]	; (800b3a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b396:	4618      	mov	r0, r3
 800b398:	3708      	adds	r7, #8
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	20003db8 	.word	0x20003db8
 800b3a4:	0800c5bc 	.word	0x0800c5bc

0800b3a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	6039      	str	r1, [r7, #0]
 800b3b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b3b4:	79fb      	ldrb	r3, [r7, #7]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d105      	bne.n	800b3c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b3ba:	683a      	ldr	r2, [r7, #0]
 800b3bc:	4907      	ldr	r1, [pc, #28]	; (800b3dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b3be:	4808      	ldr	r0, [pc, #32]	; (800b3e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b3c0:	f7fc fe64 	bl	800808c <USBD_GetString>
 800b3c4:	e004      	b.n	800b3d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b3c6:	683a      	ldr	r2, [r7, #0]
 800b3c8:	4904      	ldr	r1, [pc, #16]	; (800b3dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b3ca:	4805      	ldr	r0, [pc, #20]	; (800b3e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b3cc:	f7fc fe5e 	bl	800808c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b3d0:	4b02      	ldr	r3, [pc, #8]	; (800b3dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3708      	adds	r7, #8
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	20003db8 	.word	0x20003db8
 800b3e0:	0800c5c8 	.word	0x0800c5c8

0800b3e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b3ea:	4b0f      	ldr	r3, [pc, #60]	; (800b428 <Get_SerialNum+0x44>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b3f0:	4b0e      	ldr	r3, [pc, #56]	; (800b42c <Get_SerialNum+0x48>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b3f6:	4b0e      	ldr	r3, [pc, #56]	; (800b430 <Get_SerialNum+0x4c>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b3fc:	68fa      	ldr	r2, [r7, #12]
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	4413      	add	r3, r2
 800b402:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d009      	beq.n	800b41e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b40a:	2208      	movs	r2, #8
 800b40c:	4909      	ldr	r1, [pc, #36]	; (800b434 <Get_SerialNum+0x50>)
 800b40e:	68f8      	ldr	r0, [r7, #12]
 800b410:	f000 f814 	bl	800b43c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b414:	2204      	movs	r2, #4
 800b416:	4908      	ldr	r1, [pc, #32]	; (800b438 <Get_SerialNum+0x54>)
 800b418:	68b8      	ldr	r0, [r7, #8]
 800b41a:	f000 f80f 	bl	800b43c <IntToUnicode>
  }
}
 800b41e:	bf00      	nop
 800b420:	3710      	adds	r7, #16
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	1ffff7e8 	.word	0x1ffff7e8
 800b42c:	1ffff7ec 	.word	0x1ffff7ec
 800b430:	1ffff7f0 	.word	0x1ffff7f0
 800b434:	20000166 	.word	0x20000166
 800b438:	20000176 	.word	0x20000176

0800b43c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b087      	sub	sp, #28
 800b440:	af00      	add	r7, sp, #0
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	60b9      	str	r1, [r7, #8]
 800b446:	4613      	mov	r3, r2
 800b448:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b44a:	2300      	movs	r3, #0
 800b44c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b44e:	2300      	movs	r3, #0
 800b450:	75fb      	strb	r3, [r7, #23]
 800b452:	e027      	b.n	800b4a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	0f1b      	lsrs	r3, r3, #28
 800b458:	2b09      	cmp	r3, #9
 800b45a:	d80b      	bhi.n	800b474 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	0f1b      	lsrs	r3, r3, #28
 800b460:	b2da      	uxtb	r2, r3
 800b462:	7dfb      	ldrb	r3, [r7, #23]
 800b464:	005b      	lsls	r3, r3, #1
 800b466:	4619      	mov	r1, r3
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	440b      	add	r3, r1
 800b46c:	3230      	adds	r2, #48	; 0x30
 800b46e:	b2d2      	uxtb	r2, r2
 800b470:	701a      	strb	r2, [r3, #0]
 800b472:	e00a      	b.n	800b48a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	0f1b      	lsrs	r3, r3, #28
 800b478:	b2da      	uxtb	r2, r3
 800b47a:	7dfb      	ldrb	r3, [r7, #23]
 800b47c:	005b      	lsls	r3, r3, #1
 800b47e:	4619      	mov	r1, r3
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	440b      	add	r3, r1
 800b484:	3237      	adds	r2, #55	; 0x37
 800b486:	b2d2      	uxtb	r2, r2
 800b488:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	011b      	lsls	r3, r3, #4
 800b48e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b490:	7dfb      	ldrb	r3, [r7, #23]
 800b492:	005b      	lsls	r3, r3, #1
 800b494:	3301      	adds	r3, #1
 800b496:	68ba      	ldr	r2, [r7, #8]
 800b498:	4413      	add	r3, r2
 800b49a:	2200      	movs	r2, #0
 800b49c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b49e:	7dfb      	ldrb	r3, [r7, #23]
 800b4a0:	3301      	adds	r3, #1
 800b4a2:	75fb      	strb	r3, [r7, #23]
 800b4a4:	7dfa      	ldrb	r2, [r7, #23]
 800b4a6:	79fb      	ldrb	r3, [r7, #7]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d3d3      	bcc.n	800b454 <IntToUnicode+0x18>
  }
}
 800b4ac:	bf00      	nop
 800b4ae:	bf00      	nop
 800b4b0:	371c      	adds	r7, #28
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bc80      	pop	{r7}
 800b4b6:	4770      	bx	lr

0800b4b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	4a0d      	ldr	r2, [pc, #52]	; (800b4fc <HAL_PCD_MspInit+0x44>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d113      	bne.n	800b4f2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b4ca:	4b0d      	ldr	r3, [pc, #52]	; (800b500 <HAL_PCD_MspInit+0x48>)
 800b4cc:	69db      	ldr	r3, [r3, #28]
 800b4ce:	4a0c      	ldr	r2, [pc, #48]	; (800b500 <HAL_PCD_MspInit+0x48>)
 800b4d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b4d4:	61d3      	str	r3, [r2, #28]
 800b4d6:	4b0a      	ldr	r3, [pc, #40]	; (800b500 <HAL_PCD_MspInit+0x48>)
 800b4d8:	69db      	ldr	r3, [r3, #28]
 800b4da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4de:	60fb      	str	r3, [r7, #12]
 800b4e0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	2105      	movs	r1, #5
 800b4e6:	2014      	movs	r0, #20
 800b4e8:	f7f5 ff23 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b4ec:	2014      	movs	r0, #20
 800b4ee:	f7f5 ff3c 	bl	800136a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b4f2:	bf00      	nop
 800b4f4:	3710      	adds	r7, #16
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
 800b4fa:	bf00      	nop
 800b4fc:	40005c00 	.word	0x40005c00
 800b500:	40021000 	.word	0x40021000

0800b504 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b082      	sub	sp, #8
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b518:	4619      	mov	r1, r3
 800b51a:	4610      	mov	r0, r2
 800b51c:	f7fb fe85 	bl	800722a <USBD_LL_SetupStage>
}
 800b520:	bf00      	nop
 800b522:	3708      	adds	r7, #8
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	460b      	mov	r3, r1
 800b532:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b53a:	78fa      	ldrb	r2, [r7, #3]
 800b53c:	6879      	ldr	r1, [r7, #4]
 800b53e:	4613      	mov	r3, r2
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4413      	add	r3, r2
 800b544:	00db      	lsls	r3, r3, #3
 800b546:	440b      	add	r3, r1
 800b548:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	78fb      	ldrb	r3, [r7, #3]
 800b550:	4619      	mov	r1, r3
 800b552:	f7fb feb7 	bl	80072c4 <USBD_LL_DataOutStage>
}
 800b556:	bf00      	nop
 800b558:	3708      	adds	r7, #8
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}

0800b55e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b55e:	b580      	push	{r7, lr}
 800b560:	b082      	sub	sp, #8
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
 800b566:	460b      	mov	r3, r1
 800b568:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b570:	78fa      	ldrb	r2, [r7, #3]
 800b572:	6879      	ldr	r1, [r7, #4]
 800b574:	4613      	mov	r3, r2
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	4413      	add	r3, r2
 800b57a:	00db      	lsls	r3, r3, #3
 800b57c:	440b      	add	r3, r1
 800b57e:	333c      	adds	r3, #60	; 0x3c
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	78fb      	ldrb	r3, [r7, #3]
 800b584:	4619      	mov	r1, r3
 800b586:	f7fb ff0e 	bl	80073a6 <USBD_LL_DataInStage>
}
 800b58a:	bf00      	nop
 800b58c:	3708      	adds	r7, #8
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b082      	sub	sp, #8
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f7fc f81e 	bl	80075e2 <USBD_LL_SOF>
}
 800b5a6:	bf00      	nop
 800b5a8:	3708      	adds	r7, #8
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}

0800b5ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b084      	sub	sp, #16
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	689b      	ldr	r3, [r3, #8]
 800b5be:	2b02      	cmp	r3, #2
 800b5c0:	d001      	beq.n	800b5c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b5c2:	f7f5 fbbb 	bl	8000d3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b5cc:	7bfa      	ldrb	r2, [r7, #15]
 800b5ce:	4611      	mov	r1, r2
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7fb ffce 	bl	8007572 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7fb ff87 	bl	80074f0 <USBD_LL_Reset>
}
 800b5e2:	bf00      	nop
 800b5e4:	3710      	adds	r7, #16
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
	...

0800b5ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7fb ffc8 	bl	8007590 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	699b      	ldr	r3, [r3, #24]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d005      	beq.n	800b614 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b608:	4b04      	ldr	r3, [pc, #16]	; (800b61c <HAL_PCD_SuspendCallback+0x30>)
 800b60a:	691b      	ldr	r3, [r3, #16]
 800b60c:	4a03      	ldr	r2, [pc, #12]	; (800b61c <HAL_PCD_SuspendCallback+0x30>)
 800b60e:	f043 0306 	orr.w	r3, r3, #6
 800b612:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b614:	bf00      	nop
 800b616:	3708      	adds	r7, #8
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	e000ed00 	.word	0xe000ed00

0800b620 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b62e:	4618      	mov	r0, r3
 800b630:	f7fb ffc2 	bl	80075b8 <USBD_LL_Resume>
}
 800b634:	bf00      	nop
 800b636:	3708      	adds	r7, #8
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b644:	4a28      	ldr	r2, [pc, #160]	; (800b6e8 <USBD_LL_Init+0xac>)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	4a26      	ldr	r2, [pc, #152]	; (800b6e8 <USBD_LL_Init+0xac>)
 800b650:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b654:	4b24      	ldr	r3, [pc, #144]	; (800b6e8 <USBD_LL_Init+0xac>)
 800b656:	4a25      	ldr	r2, [pc, #148]	; (800b6ec <USBD_LL_Init+0xb0>)
 800b658:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b65a:	4b23      	ldr	r3, [pc, #140]	; (800b6e8 <USBD_LL_Init+0xac>)
 800b65c:	2208      	movs	r2, #8
 800b65e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b660:	4b21      	ldr	r3, [pc, #132]	; (800b6e8 <USBD_LL_Init+0xac>)
 800b662:	2202      	movs	r2, #2
 800b664:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b666:	4b20      	ldr	r3, [pc, #128]	; (800b6e8 <USBD_LL_Init+0xac>)
 800b668:	2200      	movs	r2, #0
 800b66a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b66c:	4b1e      	ldr	r3, [pc, #120]	; (800b6e8 <USBD_LL_Init+0xac>)
 800b66e:	2200      	movs	r2, #0
 800b670:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b672:	4b1d      	ldr	r3, [pc, #116]	; (800b6e8 <USBD_LL_Init+0xac>)
 800b674:	2200      	movs	r2, #0
 800b676:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b678:	481b      	ldr	r0, [pc, #108]	; (800b6e8 <USBD_LL_Init+0xac>)
 800b67a:	f7f6 fa27 	bl	8001acc <HAL_PCD_Init>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d001      	beq.n	800b688 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b684:	f7f5 fb5a 	bl	8000d3c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b68e:	2318      	movs	r3, #24
 800b690:	2200      	movs	r2, #0
 800b692:	2100      	movs	r1, #0
 800b694:	f7f7 fd69 	bl	800316a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b69e:	2358      	movs	r3, #88	; 0x58
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	2180      	movs	r1, #128	; 0x80
 800b6a4:	f7f7 fd61 	bl	800316a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b6ae:	23c0      	movs	r3, #192	; 0xc0
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	2181      	movs	r1, #129	; 0x81
 800b6b4:	f7f7 fd59 	bl	800316a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b6be:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	2101      	movs	r1, #1
 800b6c6:	f7f7 fd50 	bl	800316a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b6d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	2182      	movs	r1, #130	; 0x82
 800b6d8:	f7f7 fd47 	bl	800316a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b6dc:	2300      	movs	r3, #0
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3708      	adds	r7, #8
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	20003df8 	.word	0x20003df8
 800b6ec:	40005c00 	.word	0x40005c00

0800b6f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b706:	4618      	mov	r0, r3
 800b708:	f7f6 faeb 	bl	8001ce2 <HAL_PCD_Start>
 800b70c:	4603      	mov	r3, r0
 800b70e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b710:	7bfb      	ldrb	r3, [r7, #15]
 800b712:	4618      	mov	r0, r3
 800b714:	f000 f94e 	bl	800b9b4 <USBD_Get_USB_Status>
 800b718:	4603      	mov	r3, r0
 800b71a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b71c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3710      	adds	r7, #16
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}

0800b726 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b726:	b580      	push	{r7, lr}
 800b728:	b084      	sub	sp, #16
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
 800b72e:	4608      	mov	r0, r1
 800b730:	4611      	mov	r1, r2
 800b732:	461a      	mov	r2, r3
 800b734:	4603      	mov	r3, r0
 800b736:	70fb      	strb	r3, [r7, #3]
 800b738:	460b      	mov	r3, r1
 800b73a:	70bb      	strb	r3, [r7, #2]
 800b73c:	4613      	mov	r3, r2
 800b73e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b740:	2300      	movs	r3, #0
 800b742:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b744:	2300      	movs	r3, #0
 800b746:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b74e:	78bb      	ldrb	r3, [r7, #2]
 800b750:	883a      	ldrh	r2, [r7, #0]
 800b752:	78f9      	ldrb	r1, [r7, #3]
 800b754:	f7f6 fc65 	bl	8002022 <HAL_PCD_EP_Open>
 800b758:	4603      	mov	r3, r0
 800b75a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b75c:	7bfb      	ldrb	r3, [r7, #15]
 800b75e:	4618      	mov	r0, r3
 800b760:	f000 f928 	bl	800b9b4 <USBD_Get_USB_Status>
 800b764:	4603      	mov	r3, r0
 800b766:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b768:	7bbb      	ldrb	r3, [r7, #14]
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3710      	adds	r7, #16
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}

0800b772 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b772:	b580      	push	{r7, lr}
 800b774:	b084      	sub	sp, #16
 800b776:	af00      	add	r7, sp, #0
 800b778:	6078      	str	r0, [r7, #4]
 800b77a:	460b      	mov	r3, r1
 800b77c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b77e:	2300      	movs	r3, #0
 800b780:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b782:	2300      	movs	r3, #0
 800b784:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b78c:	78fa      	ldrb	r2, [r7, #3]
 800b78e:	4611      	mov	r1, r2
 800b790:	4618      	mov	r0, r3
 800b792:	f7f6 fcac 	bl	80020ee <HAL_PCD_EP_Close>
 800b796:	4603      	mov	r3, r0
 800b798:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b79a:	7bfb      	ldrb	r3, [r7, #15]
 800b79c:	4618      	mov	r0, r3
 800b79e:	f000 f909 	bl	800b9b4 <USBD_Get_USB_Status>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3710      	adds	r7, #16
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7ca:	78fa      	ldrb	r2, [r7, #3]
 800b7cc:	4611      	mov	r1, r2
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f7f6 fd6c 	bl	80022ac <HAL_PCD_EP_SetStall>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7d8:	7bfb      	ldrb	r3, [r7, #15]
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f000 f8ea 	bl	800b9b4 <USBD_Get_USB_Status>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3710      	adds	r7, #16
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}

0800b7ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7ee:	b580      	push	{r7, lr}
 800b7f0:	b084      	sub	sp, #16
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	6078      	str	r0, [r7, #4]
 800b7f6:	460b      	mov	r3, r1
 800b7f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7fe:	2300      	movs	r3, #0
 800b800:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b808:	78fa      	ldrb	r2, [r7, #3]
 800b80a:	4611      	mov	r1, r2
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7f6 fdad 	bl	800236c <HAL_PCD_EP_ClrStall>
 800b812:	4603      	mov	r3, r0
 800b814:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b816:	7bfb      	ldrb	r3, [r7, #15]
 800b818:	4618      	mov	r0, r3
 800b81a:	f000 f8cb 	bl	800b9b4 <USBD_Get_USB_Status>
 800b81e:	4603      	mov	r3, r0
 800b820:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b822:	7bbb      	ldrb	r3, [r7, #14]
}
 800b824:	4618      	mov	r0, r3
 800b826:	3710      	adds	r7, #16
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b085      	sub	sp, #20
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	460b      	mov	r3, r1
 800b836:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b83e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b840:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b844:	2b00      	cmp	r3, #0
 800b846:	da0c      	bge.n	800b862 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b848:	78fb      	ldrb	r3, [r7, #3]
 800b84a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b84e:	68f9      	ldr	r1, [r7, #12]
 800b850:	1c5a      	adds	r2, r3, #1
 800b852:	4613      	mov	r3, r2
 800b854:	009b      	lsls	r3, r3, #2
 800b856:	4413      	add	r3, r2
 800b858:	00db      	lsls	r3, r3, #3
 800b85a:	440b      	add	r3, r1
 800b85c:	3302      	adds	r3, #2
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	e00b      	b.n	800b87a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b862:	78fb      	ldrb	r3, [r7, #3]
 800b864:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b868:	68f9      	ldr	r1, [r7, #12]
 800b86a:	4613      	mov	r3, r2
 800b86c:	009b      	lsls	r3, r3, #2
 800b86e:	4413      	add	r3, r2
 800b870:	00db      	lsls	r3, r3, #3
 800b872:	440b      	add	r3, r1
 800b874:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b878:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3714      	adds	r7, #20
 800b87e:	46bd      	mov	sp, r7
 800b880:	bc80      	pop	{r7}
 800b882:	4770      	bx	lr

0800b884 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	460b      	mov	r3, r1
 800b88e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b890:	2300      	movs	r3, #0
 800b892:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b894:	2300      	movs	r3, #0
 800b896:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b89e:	78fa      	ldrb	r2, [r7, #3]
 800b8a0:	4611      	mov	r1, r2
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7f6 fb98 	bl	8001fd8 <HAL_PCD_SetAddress>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8ac:	7bfb      	ldrb	r3, [r7, #15]
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f000 f880 	bl	800b9b4 <USBD_Get_USB_Status>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3710      	adds	r7, #16
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}

0800b8c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b8c2:	b580      	push	{r7, lr}
 800b8c4:	b086      	sub	sp, #24
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	60f8      	str	r0, [r7, #12]
 800b8ca:	607a      	str	r2, [r7, #4]
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	72fb      	strb	r3, [r7, #11]
 800b8d2:	4613      	mov	r3, r2
 800b8d4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b8e4:	893b      	ldrh	r3, [r7, #8]
 800b8e6:	7af9      	ldrb	r1, [r7, #11]
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	f7f6 fc9c 	bl	8002226 <HAL_PCD_EP_Transmit>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8f2:	7dfb      	ldrb	r3, [r7, #23]
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f000 f85d 	bl	800b9b4 <USBD_Get_USB_Status>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b8fe:	7dbb      	ldrb	r3, [r7, #22]
}
 800b900:	4618      	mov	r0, r3
 800b902:	3718      	adds	r7, #24
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b086      	sub	sp, #24
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	60f8      	str	r0, [r7, #12]
 800b910:	607a      	str	r2, [r7, #4]
 800b912:	461a      	mov	r2, r3
 800b914:	460b      	mov	r3, r1
 800b916:	72fb      	strb	r3, [r7, #11]
 800b918:	4613      	mov	r3, r2
 800b91a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b91c:	2300      	movs	r3, #0
 800b91e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b920:	2300      	movs	r3, #0
 800b922:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b92a:	893b      	ldrh	r3, [r7, #8]
 800b92c:	7af9      	ldrb	r1, [r7, #11]
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	f7f6 fc25 	bl	800217e <HAL_PCD_EP_Receive>
 800b934:	4603      	mov	r3, r0
 800b936:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b938:	7dfb      	ldrb	r3, [r7, #23]
 800b93a:	4618      	mov	r0, r3
 800b93c:	f000 f83a 	bl	800b9b4 <USBD_Get_USB_Status>
 800b940:	4603      	mov	r3, r0
 800b942:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b944:	7dbb      	ldrb	r3, [r7, #22]
}
 800b946:	4618      	mov	r0, r3
 800b948:	3718      	adds	r7, #24
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b94e:	b580      	push	{r7, lr}
 800b950:	b082      	sub	sp, #8
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
 800b956:	460b      	mov	r3, r1
 800b958:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b960:	78fa      	ldrb	r2, [r7, #3]
 800b962:	4611      	mov	r1, r2
 800b964:	4618      	mov	r0, r3
 800b966:	f7f6 fc47 	bl	80021f8 <HAL_PCD_EP_GetRxCount>
 800b96a:	4603      	mov	r3, r0
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3708      	adds	r7, #8
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b974:	b480      	push	{r7}
 800b976:	b083      	sub	sp, #12
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b97c:	4b02      	ldr	r3, [pc, #8]	; (800b988 <USBD_static_malloc+0x14>)
}
 800b97e:	4618      	mov	r0, r3
 800b980:	370c      	adds	r7, #12
 800b982:	46bd      	mov	sp, r7
 800b984:	bc80      	pop	{r7}
 800b986:	4770      	bx	lr
 800b988:	200036cc 	.word	0x200036cc

0800b98c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]

}
 800b994:	bf00      	nop
 800b996:	370c      	adds	r7, #12
 800b998:	46bd      	mov	sp, r7
 800b99a:	bc80      	pop	{r7}
 800b99c:	4770      	bx	lr

0800b99e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b99e:	b480      	push	{r7}
 800b9a0:	b083      	sub	sp, #12
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b9aa:	bf00      	nop
 800b9ac:	370c      	adds	r7, #12
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bc80      	pop	{r7}
 800b9b2:	4770      	bx	lr

0800b9b4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b085      	sub	sp, #20
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b9c2:	79fb      	ldrb	r3, [r7, #7]
 800b9c4:	2b03      	cmp	r3, #3
 800b9c6:	d817      	bhi.n	800b9f8 <USBD_Get_USB_Status+0x44>
 800b9c8:	a201      	add	r2, pc, #4	; (adr r2, 800b9d0 <USBD_Get_USB_Status+0x1c>)
 800b9ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ce:	bf00      	nop
 800b9d0:	0800b9e1 	.word	0x0800b9e1
 800b9d4:	0800b9e7 	.word	0x0800b9e7
 800b9d8:	0800b9ed 	.word	0x0800b9ed
 800b9dc:	0800b9f3 	.word	0x0800b9f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	73fb      	strb	r3, [r7, #15]
    break;
 800b9e4:	e00b      	b.n	800b9fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b9e6:	2302      	movs	r3, #2
 800b9e8:	73fb      	strb	r3, [r7, #15]
    break;
 800b9ea:	e008      	b.n	800b9fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	73fb      	strb	r3, [r7, #15]
    break;
 800b9f0:	e005      	b.n	800b9fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b9f2:	2302      	movs	r3, #2
 800b9f4:	73fb      	strb	r3, [r7, #15]
    break;
 800b9f6:	e002      	b.n	800b9fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b9f8:	2302      	movs	r3, #2
 800b9fa:	73fb      	strb	r3, [r7, #15]
    break;
 800b9fc:	bf00      	nop
  }
  return usb_status;
 800b9fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3714      	adds	r7, #20
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bc80      	pop	{r7}
 800ba08:	4770      	bx	lr
 800ba0a:	bf00      	nop

0800ba0c <MDI_writeSmallDataWithRegister>:
 * @brief Write small data to Motor Driver
 * @param uartChannel -> get uart channel
 * @param data -> data to write
 * @return none
 */
void MDI_writeSmallDataWithRegister(UART_HandleTypeDef *uartChannel, uint8_t data){
 800ba0c:	b480      	push	{r7}
 800ba0e:	b083      	sub	sp, #12
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	460b      	mov	r3, r1
 800ba16:	70fb      	strb	r3, [r7, #3]
	while((uartChannel->Instance->SR & USART_SR_TXE)!=USART_SR_TXE);
 800ba18:	bf00      	nop
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba24:	2b80      	cmp	r3, #128	; 0x80
 800ba26:	d1f8      	bne.n	800ba1a <MDI_writeSmallDataWithRegister+0xe>
	uartChannel->Instance->DR=data;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	78fa      	ldrb	r2, [r7, #3]
 800ba2e:	605a      	str	r2, [r3, #4]
	while((uartChannel->Instance->SR & USART_SR_TC)!=USART_SR_TC);
 800ba30:	bf00      	nop
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba3c:	2b40      	cmp	r3, #64	; 0x40
 800ba3e:	d1f8      	bne.n	800ba32 <MDI_writeSmallDataWithRegister+0x26>
}
 800ba40:	bf00      	nop
 800ba42:	bf00      	nop
 800ba44:	370c      	adds	r7, #12
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bc80      	pop	{r7}
 800ba4a:	4770      	bx	lr

0800ba4c <MDI_sendDataChannel1Ver2>:
 * @param kd -> get Pid kd value
 * @param factor -> get factor of Pid elements
 * @return none
 */
void MDI_sendDataChannel1Ver2(uint16_t angleVal, uint8_t kp, uint8_t ki,
		uint8_t kd, uint8_t factor) {
 800ba4c:	b590      	push	{r4, r7, lr}
 800ba4e:	b089      	sub	sp, #36	; 0x24
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	4604      	mov	r4, r0
 800ba54:	4608      	mov	r0, r1
 800ba56:	4611      	mov	r1, r2
 800ba58:	461a      	mov	r2, r3
 800ba5a:	4623      	mov	r3, r4
 800ba5c:	80fb      	strh	r3, [r7, #6]
 800ba5e:	4603      	mov	r3, r0
 800ba60:	717b      	strb	r3, [r7, #5]
 800ba62:	460b      	mov	r3, r1
 800ba64:	713b      	strb	r3, [r7, #4]
 800ba66:	4613      	mov	r3, r2
 800ba68:	70fb      	strb	r3, [r7, #3]
	uint16_t checksumTmp = 0;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	83bb      	strh	r3, [r7, #28]
	uint8_t tmpArr[] = { angleVal >> 8, angleVal & 0xFF };
 800ba6e:	88fb      	ldrh	r3, [r7, #6]
 800ba70:	0a1b      	lsrs	r3, r3, #8
 800ba72:	b29b      	uxth	r3, r3
 800ba74:	b2db      	uxtb	r3, r3
 800ba76:	763b      	strb	r3, [r7, #24]
 800ba78:	88fb      	ldrh	r3, [r7, #6]
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	767b      	strb	r3, [r7, #25]
	checksumTmp += tmpArr[0];
 800ba7e:	7e3b      	ldrb	r3, [r7, #24]
 800ba80:	b29a      	uxth	r2, r3
 800ba82:	8bbb      	ldrh	r3, [r7, #28]
 800ba84:	4413      	add	r3, r2
 800ba86:	83bb      	strh	r3, [r7, #28]
	checksumTmp += tmpArr[1];
 800ba88:	7e7b      	ldrb	r3, [r7, #25]
 800ba8a:	b29a      	uxth	r2, r3
 800ba8c:	8bbb      	ldrh	r3, [r7, #28]
 800ba8e:	4413      	add	r3, r2
 800ba90:	83bb      	strh	r3, [r7, #28]
	checksumTmp += kp;
 800ba92:	797b      	ldrb	r3, [r7, #5]
 800ba94:	b29a      	uxth	r2, r3
 800ba96:	8bbb      	ldrh	r3, [r7, #28]
 800ba98:	4413      	add	r3, r2
 800ba9a:	83bb      	strh	r3, [r7, #28]
	checksumTmp += ki;
 800ba9c:	793b      	ldrb	r3, [r7, #4]
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	8bbb      	ldrh	r3, [r7, #28]
 800baa2:	4413      	add	r3, r2
 800baa4:	83bb      	strh	r3, [r7, #28]
	checksumTmp += kd;
 800baa6:	78fb      	ldrb	r3, [r7, #3]
 800baa8:	b29a      	uxth	r2, r3
 800baaa:	8bbb      	ldrh	r3, [r7, #28]
 800baac:	4413      	add	r3, r2
 800baae:	83bb      	strh	r3, [r7, #28]
	checksumTmp += factor;
 800bab0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800bab4:	b29a      	uxth	r2, r3
 800bab6:	8bbb      	ldrh	r3, [r7, #28]
 800bab8:	4413      	add	r3, r2
 800baba:	83bb      	strh	r3, [r7, #28]
	uint8_t tmp = checksumTmp % 256;
 800babc:	8bbb      	ldrh	r3, [r7, #28]
 800babe:	76fb      	strb	r3, [r7, #27]
	uint8_t tmpComp = ~tmp;
 800bac0:	7efb      	ldrb	r3, [r7, #27]
 800bac2:	43db      	mvns	r3, r3
 800bac4:	76bb      	strb	r3, [r7, #26]
	uint8_t sendBuff[10] = { 0XFF, 0XFF, tmpArr[0], tmpArr[1], kp, ki, kd,
 800bac6:	23ff      	movs	r3, #255	; 0xff
 800bac8:	733b      	strb	r3, [r7, #12]
 800baca:	23ff      	movs	r3, #255	; 0xff
 800bacc:	737b      	strb	r3, [r7, #13]
 800bace:	7e3b      	ldrb	r3, [r7, #24]
 800bad0:	73bb      	strb	r3, [r7, #14]
 800bad2:	7e7b      	ldrb	r3, [r7, #25]
 800bad4:	73fb      	strb	r3, [r7, #15]
 800bad6:	797b      	ldrb	r3, [r7, #5]
 800bad8:	743b      	strb	r3, [r7, #16]
 800bada:	793b      	ldrb	r3, [r7, #4]
 800badc:	747b      	strb	r3, [r7, #17]
 800bade:	78fb      	ldrb	r3, [r7, #3]
 800bae0:	74bb      	strb	r3, [r7, #18]
 800bae2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800bae6:	74fb      	strb	r3, [r7, #19]
 800bae8:	7efb      	ldrb	r3, [r7, #27]
 800baea:	753b      	strb	r3, [r7, #20]
 800baec:	7ebb      	ldrb	r3, [r7, #26]
 800baee:	757b      	strb	r3, [r7, #21]
			factor, tmp, tmpComp };
	for (uint8_t counter = 0; counter < 10; counter++) {
 800baf0:	2300      	movs	r3, #0
 800baf2:	77fb      	strb	r3, [r7, #31]
 800baf4:	e00f      	b.n	800bb16 <MDI_sendDataChannel1Ver2+0xca>
		MDI_writeSmallDataWithRegister(&MDI_channel1TX, sendBuff[counter]);
 800baf6:	7ffb      	ldrb	r3, [r7, #31]
 800baf8:	f107 0220 	add.w	r2, r7, #32
 800bafc:	4413      	add	r3, r2
 800bafe:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800bb02:	4619      	mov	r1, r3
 800bb04:	4808      	ldr	r0, [pc, #32]	; (800bb28 <MDI_sendDataChannel1Ver2+0xdc>)
 800bb06:	f7ff ff81 	bl	800ba0c <MDI_writeSmallDataWithRegister>
#if SEND_VAL_CHECK==0
		vTaskDelay(1);
 800bb0a:	2001      	movs	r0, #1
 800bb0c:	f7fd fd9a 	bl	8009644 <vTaskDelay>
	for (uint8_t counter = 0; counter < 10; counter++) {
 800bb10:	7ffb      	ldrb	r3, [r7, #31]
 800bb12:	3301      	adds	r3, #1
 800bb14:	77fb      	strb	r3, [r7, #31]
 800bb16:	7ffb      	ldrb	r3, [r7, #31]
 800bb18:	2b09      	cmp	r3, #9
 800bb1a:	d9ec      	bls.n	800baf6 <MDI_sendDataChannel1Ver2+0xaa>
#elif SEND_VAL_CHECK==1
		vTaskDelay(50);
#endif
	}
}
 800bb1c:	bf00      	nop
 800bb1e:	bf00      	nop
 800bb20:	3724      	adds	r7, #36	; 0x24
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd90      	pop	{r4, r7, pc}
 800bb26:	bf00      	nop
 800bb28:	200039fc 	.word	0x200039fc

0800bb2c <MDI_enableGetDataChannel1>:
uint8_t  getTmpCH1 = 0;
/**
 * @brief set enable for MDI channel 1 receive
 * @return none
 */
void MDI_enableGetDataChannel1(void){
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&MDI_channel1RX,&getTmpCH1,1);
 800bb30:	2201      	movs	r2, #1
 800bb32:	4903      	ldr	r1, [pc, #12]	; (800bb40 <MDI_enableGetDataChannel1+0x14>)
 800bb34:	4803      	ldr	r0, [pc, #12]	; (800bb44 <MDI_enableGetDataChannel1+0x18>)
 800bb36:	f7f8 faf2 	bl	800411e <HAL_UART_Receive_IT>
}
 800bb3a:	bf00      	nop
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	200038ec 	.word	0x200038ec
 800bb44:	200039fc 	.word	0x200039fc

0800bb48 <MDI_getDataChannel1_IT>:
static uint8_t tmpArr1[10];
/**
 * @brief get to Motor Driver 1 values
 * @return none
 */
void MDI_getDataChannel1_IT(UART_HandleTypeDef *callBackHandle) {
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b086      	sub	sp, #24
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
	volatile UART_HandleTypeDef *tmpHandle;
	tmpHandle = &MDI_channel1RX;
 800bb50:	4b3b      	ldr	r3, [pc, #236]	; (800bc40 <MDI_getDataChannel1_IT+0xf8>)
 800bb52:	613b      	str	r3, [r7, #16]
	if(callBackHandle->Instance == tmpHandle->Instance){
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681a      	ldr	r2, [r3, #0]
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d16a      	bne.n	800bc36 <MDI_getDataChannel1_IT+0xee>
		static uint8_t counter = 0, getTmpBeff = 0;
			if (0xFF == getTmpCH1 && 0xFF == getTmpBeff) {
 800bb60:	4b38      	ldr	r3, [pc, #224]	; (800bc44 <MDI_getDataChannel1_IT+0xfc>)
 800bb62:	781b      	ldrb	r3, [r3, #0]
 800bb64:	2bff      	cmp	r3, #255	; 0xff
 800bb66:	d10c      	bne.n	800bb82 <MDI_getDataChannel1_IT+0x3a>
 800bb68:	4b37      	ldr	r3, [pc, #220]	; (800bc48 <MDI_getDataChannel1_IT+0x100>)
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	2bff      	cmp	r3, #255	; 0xff
 800bb6e:	d108      	bne.n	800bb82 <MDI_getDataChannel1_IT+0x3a>
					tmpArr1[0] = 0xFF;
 800bb70:	4b36      	ldr	r3, [pc, #216]	; (800bc4c <MDI_getDataChannel1_IT+0x104>)
 800bb72:	22ff      	movs	r2, #255	; 0xff
 800bb74:	701a      	strb	r2, [r3, #0]
					tmpArr1[1] = 0xFF;
 800bb76:	4b35      	ldr	r3, [pc, #212]	; (800bc4c <MDI_getDataChannel1_IT+0x104>)
 800bb78:	22ff      	movs	r2, #255	; 0xff
 800bb7a:	705a      	strb	r2, [r3, #1]
					counter = 1;
 800bb7c:	4b34      	ldr	r3, [pc, #208]	; (800bc50 <MDI_getDataChannel1_IT+0x108>)
 800bb7e:	2201      	movs	r2, #1
 800bb80:	701a      	strb	r2, [r3, #0]
				}
				tmpArr1[counter] = getTmpCH1;
 800bb82:	4b33      	ldr	r3, [pc, #204]	; (800bc50 <MDI_getDataChannel1_IT+0x108>)
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	461a      	mov	r2, r3
 800bb88:	4b2e      	ldr	r3, [pc, #184]	; (800bc44 <MDI_getDataChannel1_IT+0xfc>)
 800bb8a:	7819      	ldrb	r1, [r3, #0]
 800bb8c:	4b2f      	ldr	r3, [pc, #188]	; (800bc4c <MDI_getDataChannel1_IT+0x104>)
 800bb8e:	5499      	strb	r1, [r3, r2]
				getTmpBeff = getTmpCH1;
 800bb90:	4b2c      	ldr	r3, [pc, #176]	; (800bc44 <MDI_getDataChannel1_IT+0xfc>)
 800bb92:	781a      	ldrb	r2, [r3, #0]
 800bb94:	4b2c      	ldr	r3, [pc, #176]	; (800bc48 <MDI_getDataChannel1_IT+0x100>)
 800bb96:	701a      	strb	r2, [r3, #0]
				counter++;
 800bb98:	4b2d      	ldr	r3, [pc, #180]	; (800bc50 <MDI_getDataChannel1_IT+0x108>)
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	b2da      	uxtb	r2, r3
 800bba0:	4b2b      	ldr	r3, [pc, #172]	; (800bc50 <MDI_getDataChannel1_IT+0x108>)
 800bba2:	701a      	strb	r2, [r3, #0]
				if (counter > 9) {
 800bba4:	4b2a      	ldr	r3, [pc, #168]	; (800bc50 <MDI_getDataChannel1_IT+0x108>)
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	2b09      	cmp	r3, #9
 800bbaa:	d93f      	bls.n	800bc2c <MDI_getDataChannel1_IT+0xe4>
					counter = 0;
 800bbac:	4b28      	ldr	r3, [pc, #160]	; (800bc50 <MDI_getDataChannel1_IT+0x108>)
 800bbae:	2200      	movs	r2, #0
 800bbb0:	701a      	strb	r2, [r3, #0]
					uint16_t checksumTmp = 0;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	82fb      	strh	r3, [r7, #22]
					for (uint8_t c = 2; c < 8; c++)
 800bbb6:	2302      	movs	r3, #2
 800bbb8:	757b      	strb	r3, [r7, #21]
 800bbba:	e009      	b.n	800bbd0 <MDI_getDataChannel1_IT+0x88>
						checksumTmp += tmpArr1[c];
 800bbbc:	7d7b      	ldrb	r3, [r7, #21]
 800bbbe:	4a23      	ldr	r2, [pc, #140]	; (800bc4c <MDI_getDataChannel1_IT+0x104>)
 800bbc0:	5cd3      	ldrb	r3, [r2, r3]
 800bbc2:	b29a      	uxth	r2, r3
 800bbc4:	8afb      	ldrh	r3, [r7, #22]
 800bbc6:	4413      	add	r3, r2
 800bbc8:	82fb      	strh	r3, [r7, #22]
					for (uint8_t c = 2; c < 8; c++)
 800bbca:	7d7b      	ldrb	r3, [r7, #21]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	757b      	strb	r3, [r7, #21]
 800bbd0:	7d7b      	ldrb	r3, [r7, #21]
 800bbd2:	2b07      	cmp	r3, #7
 800bbd4:	d9f2      	bls.n	800bbbc <MDI_getDataChannel1_IT+0x74>
					uint8_t tmp = checksumTmp % 256;
 800bbd6:	8afb      	ldrh	r3, [r7, #22]
 800bbd8:	73fb      	strb	r3, [r7, #15]
					uint8_t tmpComp = ~tmp;
 800bbda:	7bfb      	ldrb	r3, [r7, #15]
 800bbdc:	43db      	mvns	r3, r3
 800bbde:	73bb      	strb	r3, [r7, #14]
					if (tmp == tmpArr1[8] && tmpComp == tmpArr1[9]) {
 800bbe0:	4b1a      	ldr	r3, [pc, #104]	; (800bc4c <MDI_getDataChannel1_IT+0x104>)
 800bbe2:	7a1b      	ldrb	r3, [r3, #8]
 800bbe4:	7bfa      	ldrb	r2, [r7, #15]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d120      	bne.n	800bc2c <MDI_getDataChannel1_IT+0xe4>
 800bbea:	4b18      	ldr	r3, [pc, #96]	; (800bc4c <MDI_getDataChannel1_IT+0x104>)
 800bbec:	7a5b      	ldrb	r3, [r3, #9]
 800bbee:	7bba      	ldrb	r2, [r7, #14]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d11b      	bne.n	800bc2c <MDI_getDataChannel1_IT+0xe4>
						driver1.angle = ((uint16_t) tmpArr1[2] << 8) | tmpArr1[3];
 800bbf4:	4b15      	ldr	r3, [pc, #84]	; (800bc4c <MDI_getDataChannel1_IT+0x104>)
 800bbf6:	789b      	ldrb	r3, [r3, #2]
 800bbf8:	021b      	lsls	r3, r3, #8
 800bbfa:	b21a      	sxth	r2, r3
 800bbfc:	4b13      	ldr	r3, [pc, #76]	; (800bc4c <MDI_getDataChannel1_IT+0x104>)
 800bbfe:	78db      	ldrb	r3, [r3, #3]
 800bc00:	b21b      	sxth	r3, r3
 800bc02:	4313      	orrs	r3, r2
 800bc04:	b21b      	sxth	r3, r3
 800bc06:	b29a      	uxth	r2, r3
 800bc08:	4b12      	ldr	r3, [pc, #72]	; (800bc54 <MDI_getDataChannel1_IT+0x10c>)
 800bc0a:	809a      	strh	r2, [r3, #4]
						driver1.pid_kp = tmpArr1[4];
 800bc0c:	4b0f      	ldr	r3, [pc, #60]	; (800bc4c <MDI_getDataChannel1_IT+0x104>)
 800bc0e:	791a      	ldrb	r2, [r3, #4]
 800bc10:	4b10      	ldr	r3, [pc, #64]	; (800bc54 <MDI_getDataChannel1_IT+0x10c>)
 800bc12:	709a      	strb	r2, [r3, #2]
						driver1.pid_ki = tmpArr1[5];
 800bc14:	4b0d      	ldr	r3, [pc, #52]	; (800bc4c <MDI_getDataChannel1_IT+0x104>)
 800bc16:	795a      	ldrb	r2, [r3, #5]
 800bc18:	4b0e      	ldr	r3, [pc, #56]	; (800bc54 <MDI_getDataChannel1_IT+0x10c>)
 800bc1a:	705a      	strb	r2, [r3, #1]
						driver1.pid_kd = tmpArr1[6];
 800bc1c:	4b0b      	ldr	r3, [pc, #44]	; (800bc4c <MDI_getDataChannel1_IT+0x104>)
 800bc1e:	799a      	ldrb	r2, [r3, #6]
 800bc20:	4b0c      	ldr	r3, [pc, #48]	; (800bc54 <MDI_getDataChannel1_IT+0x10c>)
 800bc22:	701a      	strb	r2, [r3, #0]
						driver1.factor = tmpArr1[7];
 800bc24:	4b09      	ldr	r3, [pc, #36]	; (800bc4c <MDI_getDataChannel1_IT+0x104>)
 800bc26:	79da      	ldrb	r2, [r3, #7]
 800bc28:	4b0a      	ldr	r3, [pc, #40]	; (800bc54 <MDI_getDataChannel1_IT+0x10c>)
 800bc2a:	70da      	strb	r2, [r3, #3]
					}
				}
				HAL_UART_Receive_IT(callBackHandle, &getTmpCH1, 1);
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	4905      	ldr	r1, [pc, #20]	; (800bc44 <MDI_getDataChannel1_IT+0xfc>)
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f7f8 fa74 	bl	800411e <HAL_UART_Receive_IT>
	}
}
 800bc36:	bf00      	nop
 800bc38:	3718      	adds	r7, #24
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	200039fc 	.word	0x200039fc
 800bc44:	200038ec 	.word	0x200038ec
 800bc48:	2000390c 	.word	0x2000390c
 800bc4c:	200038f0 	.word	0x200038f0
 800bc50:	2000390d 	.word	0x2000390d
 800bc54:	200040ec 	.word	0x200040ec

0800bc58 <MDI_sendDataChannel2Ver2>:
 * @param kd -> get Pid kd value
 * @param factor -> get factor of Pid elements
 * @return none
 */
void MDI_sendDataChannel2Ver2(int16_t speed, uint8_t kp, uint8_t ki,uint8_t kd,
		uint8_t soft_k, uint8_t soft_f) {
 800bc58:	b590      	push	{r4, r7, lr}
 800bc5a:	b089      	sub	sp, #36	; 0x24
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	4604      	mov	r4, r0
 800bc60:	4608      	mov	r0, r1
 800bc62:	4611      	mov	r1, r2
 800bc64:	461a      	mov	r2, r3
 800bc66:	4623      	mov	r3, r4
 800bc68:	80fb      	strh	r3, [r7, #6]
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	717b      	strb	r3, [r7, #5]
 800bc6e:	460b      	mov	r3, r1
 800bc70:	713b      	strb	r3, [r7, #4]
 800bc72:	4613      	mov	r3, r2
 800bc74:	70fb      	strb	r3, [r7, #3]
	uint16_t checksumTmp = 0;
 800bc76:	2300      	movs	r3, #0
 800bc78:	83bb      	strh	r3, [r7, #28]
	uint8_t tmpArr[] = { speed >> 8, speed & 0xFF };
 800bc7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bc7e:	121b      	asrs	r3, r3, #8
 800bc80:	b21b      	sxth	r3, r3
 800bc82:	b2db      	uxtb	r3, r3
 800bc84:	763b      	strb	r3, [r7, #24]
 800bc86:	88fb      	ldrh	r3, [r7, #6]
 800bc88:	b2db      	uxtb	r3, r3
 800bc8a:	767b      	strb	r3, [r7, #25]
	checksumTmp += tmpArr[0];
 800bc8c:	7e3b      	ldrb	r3, [r7, #24]
 800bc8e:	b29a      	uxth	r2, r3
 800bc90:	8bbb      	ldrh	r3, [r7, #28]
 800bc92:	4413      	add	r3, r2
 800bc94:	83bb      	strh	r3, [r7, #28]
	checksumTmp += tmpArr[1];
 800bc96:	7e7b      	ldrb	r3, [r7, #25]
 800bc98:	b29a      	uxth	r2, r3
 800bc9a:	8bbb      	ldrh	r3, [r7, #28]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	83bb      	strh	r3, [r7, #28]
	checksumTmp += kp;
 800bca0:	797b      	ldrb	r3, [r7, #5]
 800bca2:	b29a      	uxth	r2, r3
 800bca4:	8bbb      	ldrh	r3, [r7, #28]
 800bca6:	4413      	add	r3, r2
 800bca8:	83bb      	strh	r3, [r7, #28]
	checksumTmp += ki;
 800bcaa:	793b      	ldrb	r3, [r7, #4]
 800bcac:	b29a      	uxth	r2, r3
 800bcae:	8bbb      	ldrh	r3, [r7, #28]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	83bb      	strh	r3, [r7, #28]
	checksumTmp += kd;
 800bcb4:	78fb      	ldrb	r3, [r7, #3]
 800bcb6:	b29a      	uxth	r2, r3
 800bcb8:	8bbb      	ldrh	r3, [r7, #28]
 800bcba:	4413      	add	r3, r2
 800bcbc:	83bb      	strh	r3, [r7, #28]
	checksumTmp += soft_k;
 800bcbe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800bcc2:	b29a      	uxth	r2, r3
 800bcc4:	8bbb      	ldrh	r3, [r7, #28]
 800bcc6:	4413      	add	r3, r2
 800bcc8:	83bb      	strh	r3, [r7, #28]
	checksumTmp += soft_f;
 800bcca:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800bcce:	b29a      	uxth	r2, r3
 800bcd0:	8bbb      	ldrh	r3, [r7, #28]
 800bcd2:	4413      	add	r3, r2
 800bcd4:	83bb      	strh	r3, [r7, #28]
	uint8_t tmp = checksumTmp % 256;
 800bcd6:	8bbb      	ldrh	r3, [r7, #28]
 800bcd8:	76fb      	strb	r3, [r7, #27]
	uint8_t tmpComp = ~tmp;
 800bcda:	7efb      	ldrb	r3, [r7, #27]
 800bcdc:	43db      	mvns	r3, r3
 800bcde:	76bb      	strb	r3, [r7, #26]
	uint8_t sendBuff[11] = { 0XFF, 0XFF,kp, tmpArr[0],ki, tmpArr[1], kd,
 800bce0:	23ff      	movs	r3, #255	; 0xff
 800bce2:	733b      	strb	r3, [r7, #12]
 800bce4:	23ff      	movs	r3, #255	; 0xff
 800bce6:	737b      	strb	r3, [r7, #13]
 800bce8:	797b      	ldrb	r3, [r7, #5]
 800bcea:	73bb      	strb	r3, [r7, #14]
 800bcec:	7e3b      	ldrb	r3, [r7, #24]
 800bcee:	73fb      	strb	r3, [r7, #15]
 800bcf0:	793b      	ldrb	r3, [r7, #4]
 800bcf2:	743b      	strb	r3, [r7, #16]
 800bcf4:	7e7b      	ldrb	r3, [r7, #25]
 800bcf6:	747b      	strb	r3, [r7, #17]
 800bcf8:	78fb      	ldrb	r3, [r7, #3]
 800bcfa:	74bb      	strb	r3, [r7, #18]
 800bcfc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800bd00:	74fb      	strb	r3, [r7, #19]
 800bd02:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800bd06:	753b      	strb	r3, [r7, #20]
 800bd08:	7efb      	ldrb	r3, [r7, #27]
 800bd0a:	757b      	strb	r3, [r7, #21]
 800bd0c:	7ebb      	ldrb	r3, [r7, #26]
 800bd0e:	75bb      	strb	r3, [r7, #22]
			soft_k,soft_f, tmp, tmpComp };
	for (uint8_t counter = 0; counter < 11; counter++) {
 800bd10:	2300      	movs	r3, #0
 800bd12:	77fb      	strb	r3, [r7, #31]
 800bd14:	e00f      	b.n	800bd36 <MDI_sendDataChannel2Ver2+0xde>
		MDI_writeSmallDataWithRegister(&MDI_channel2TX, sendBuff[counter]);
 800bd16:	7ffb      	ldrb	r3, [r7, #31]
 800bd18:	f107 0220 	add.w	r2, r7, #32
 800bd1c:	4413      	add	r3, r2
 800bd1e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800bd22:	4619      	mov	r1, r3
 800bd24:	4808      	ldr	r0, [pc, #32]	; (800bd48 <MDI_sendDataChannel2Ver2+0xf0>)
 800bd26:	f7ff fe71 	bl	800ba0c <MDI_writeSmallDataWithRegister>
	#if SEND_VAL_CHECK==0
		vTaskDelay(1);
 800bd2a:	2001      	movs	r0, #1
 800bd2c:	f7fd fc8a 	bl	8009644 <vTaskDelay>
	for (uint8_t counter = 0; counter < 11; counter++) {
 800bd30:	7ffb      	ldrb	r3, [r7, #31]
 800bd32:	3301      	adds	r3, #1
 800bd34:	77fb      	strb	r3, [r7, #31]
 800bd36:	7ffb      	ldrb	r3, [r7, #31]
 800bd38:	2b0a      	cmp	r3, #10
 800bd3a:	d9ec      	bls.n	800bd16 <MDI_sendDataChannel2Ver2+0xbe>
	#elif SEND_VAL_CHECK==1
		vTaskDelay(50);
	#endif
	}
}
 800bd3c:	bf00      	nop
 800bd3e:	bf00      	nop
 800bd40:	3724      	adds	r7, #36	; 0x24
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd90      	pop	{r4, r7, pc}
 800bd46:	bf00      	nop
 800bd48:	20003938 	.word	0x20003938

0800bd4c <MDI_enableGetDataChannel2>:
/**
 * @brief set enable for MDI channel 2 receive
 * @return none
 */
uint8_t  getTmpCH2 = 0;
void MDI_enableGetDataChannel2(void){
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&MDI_channel2RX,&getTmpCH2,1);
 800bd50:	2201      	movs	r2, #1
 800bd52:	4903      	ldr	r1, [pc, #12]	; (800bd60 <MDI_enableGetDataChannel2+0x14>)
 800bd54:	4803      	ldr	r0, [pc, #12]	; (800bd64 <MDI_enableGetDataChannel2+0x18>)
 800bd56:	f7f8 f9e2 	bl	800411e <HAL_UART_Receive_IT>
}
 800bd5a:	bf00      	nop
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	200038fa 	.word	0x200038fa
 800bd64:	20003938 	.word	0x20003938

0800bd68 <MDI_getDataChannel2_IT>:
/**
 * @brief get to Motor Driver 2 values
 * @return callBackHandle-> get u(s)art handle
 */
static uint8_t tmpArr2[16];
void MDI_getDataChannel2_IT(UART_HandleTypeDef *callBackHandle) {
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b086      	sub	sp, #24
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
	volatile UART_HandleTypeDef *tmpHandle;
	tmpHandle = &MDI_channel2RX;
 800bd70:	4b44      	ldr	r3, [pc, #272]	; (800be84 <MDI_getDataChannel2_IT+0x11c>)
 800bd72:	613b      	str	r3, [r7, #16]
	if(callBackHandle->Instance == tmpHandle->Instance){
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d17d      	bne.n	800be7c <MDI_getDataChannel2_IT+0x114>
		static uint8_t counter = 0, getTmpBeff = 0;
			if (0xFF == getTmpCH2 && 0xFF == getTmpBeff) {
 800bd80:	4b41      	ldr	r3, [pc, #260]	; (800be88 <MDI_getDataChannel2_IT+0x120>)
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	2bff      	cmp	r3, #255	; 0xff
 800bd86:	d10c      	bne.n	800bda2 <MDI_getDataChannel2_IT+0x3a>
 800bd88:	4b40      	ldr	r3, [pc, #256]	; (800be8c <MDI_getDataChannel2_IT+0x124>)
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	2bff      	cmp	r3, #255	; 0xff
 800bd8e:	d108      	bne.n	800bda2 <MDI_getDataChannel2_IT+0x3a>
				tmpArr2[0] = 0xFF;
 800bd90:	4b3f      	ldr	r3, [pc, #252]	; (800be90 <MDI_getDataChannel2_IT+0x128>)
 800bd92:	22ff      	movs	r2, #255	; 0xff
 800bd94:	701a      	strb	r2, [r3, #0]
				tmpArr2[1] = 0xFF;
 800bd96:	4b3e      	ldr	r3, [pc, #248]	; (800be90 <MDI_getDataChannel2_IT+0x128>)
 800bd98:	22ff      	movs	r2, #255	; 0xff
 800bd9a:	705a      	strb	r2, [r3, #1]
				counter = 1;
 800bd9c:	4b3d      	ldr	r3, [pc, #244]	; (800be94 <MDI_getDataChannel2_IT+0x12c>)
 800bd9e:	2201      	movs	r2, #1
 800bda0:	701a      	strb	r2, [r3, #0]
			}
			tmpArr2[counter] = getTmpCH2;
 800bda2:	4b3c      	ldr	r3, [pc, #240]	; (800be94 <MDI_getDataChannel2_IT+0x12c>)
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	461a      	mov	r2, r3
 800bda8:	4b37      	ldr	r3, [pc, #220]	; (800be88 <MDI_getDataChannel2_IT+0x120>)
 800bdaa:	7819      	ldrb	r1, [r3, #0]
 800bdac:	4b38      	ldr	r3, [pc, #224]	; (800be90 <MDI_getDataChannel2_IT+0x128>)
 800bdae:	5499      	strb	r1, [r3, r2]
			getTmpBeff = getTmpCH2;
 800bdb0:	4b35      	ldr	r3, [pc, #212]	; (800be88 <MDI_getDataChannel2_IT+0x120>)
 800bdb2:	781a      	ldrb	r2, [r3, #0]
 800bdb4:	4b35      	ldr	r3, [pc, #212]	; (800be8c <MDI_getDataChannel2_IT+0x124>)
 800bdb6:	701a      	strb	r2, [r3, #0]
			counter++;
 800bdb8:	4b36      	ldr	r3, [pc, #216]	; (800be94 <MDI_getDataChannel2_IT+0x12c>)
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	b2da      	uxtb	r2, r3
 800bdc0:	4b34      	ldr	r3, [pc, #208]	; (800be94 <MDI_getDataChannel2_IT+0x12c>)
 800bdc2:	701a      	strb	r2, [r3, #0]
			if (counter > 15) {
 800bdc4:	4b33      	ldr	r3, [pc, #204]	; (800be94 <MDI_getDataChannel2_IT+0x12c>)
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	2b0f      	cmp	r3, #15
 800bdca:	d952      	bls.n	800be72 <MDI_getDataChannel2_IT+0x10a>
				counter = 0;
 800bdcc:	4b31      	ldr	r3, [pc, #196]	; (800be94 <MDI_getDataChannel2_IT+0x12c>)
 800bdce:	2200      	movs	r2, #0
 800bdd0:	701a      	strb	r2, [r3, #0]
				uint16_t checksumTmp = 0;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	82fb      	strh	r3, [r7, #22]
				for (uint8_t c = 2; c < 14; c++)
 800bdd6:	2302      	movs	r3, #2
 800bdd8:	757b      	strb	r3, [r7, #21]
 800bdda:	e009      	b.n	800bdf0 <MDI_getDataChannel2_IT+0x88>
					checksumTmp += tmpArr2[c];
 800bddc:	7d7b      	ldrb	r3, [r7, #21]
 800bdde:	4a2c      	ldr	r2, [pc, #176]	; (800be90 <MDI_getDataChannel2_IT+0x128>)
 800bde0:	5cd3      	ldrb	r3, [r2, r3]
 800bde2:	b29a      	uxth	r2, r3
 800bde4:	8afb      	ldrh	r3, [r7, #22]
 800bde6:	4413      	add	r3, r2
 800bde8:	82fb      	strh	r3, [r7, #22]
				for (uint8_t c = 2; c < 14; c++)
 800bdea:	7d7b      	ldrb	r3, [r7, #21]
 800bdec:	3301      	adds	r3, #1
 800bdee:	757b      	strb	r3, [r7, #21]
 800bdf0:	7d7b      	ldrb	r3, [r7, #21]
 800bdf2:	2b0d      	cmp	r3, #13
 800bdf4:	d9f2      	bls.n	800bddc <MDI_getDataChannel2_IT+0x74>
				uint8_t tmp = checksumTmp % 256;
 800bdf6:	8afb      	ldrh	r3, [r7, #22]
 800bdf8:	73fb      	strb	r3, [r7, #15]
				uint8_t tmpComp = ~tmp;
 800bdfa:	7bfb      	ldrb	r3, [r7, #15]
 800bdfc:	43db      	mvns	r3, r3
 800bdfe:	73bb      	strb	r3, [r7, #14]
				if (tmp == tmpArr2[14] && tmpComp == tmpArr2[15]) {
 800be00:	4b23      	ldr	r3, [pc, #140]	; (800be90 <MDI_getDataChannel2_IT+0x128>)
 800be02:	7b9b      	ldrb	r3, [r3, #14]
 800be04:	7bfa      	ldrb	r2, [r7, #15]
 800be06:	429a      	cmp	r2, r3
 800be08:	d133      	bne.n	800be72 <MDI_getDataChannel2_IT+0x10a>
 800be0a:	4b21      	ldr	r3, [pc, #132]	; (800be90 <MDI_getDataChannel2_IT+0x128>)
 800be0c:	7bdb      	ldrb	r3, [r3, #15]
 800be0e:	7bba      	ldrb	r2, [r7, #14]
 800be10:	429a      	cmp	r2, r3
 800be12:	d12e      	bne.n	800be72 <MDI_getDataChannel2_IT+0x10a>
					travelMotor.encoder =(((tmpArr2[7] << 24)) | ((tmpArr2[9]<< 16)) | ((tmpArr2[11]<< 8)) | (tmpArr2[13] & 0xFF));
 800be14:	4b1e      	ldr	r3, [pc, #120]	; (800be90 <MDI_getDataChannel2_IT+0x128>)
 800be16:	79db      	ldrb	r3, [r3, #7]
 800be18:	061a      	lsls	r2, r3, #24
 800be1a:	4b1d      	ldr	r3, [pc, #116]	; (800be90 <MDI_getDataChannel2_IT+0x128>)
 800be1c:	7a5b      	ldrb	r3, [r3, #9]
 800be1e:	041b      	lsls	r3, r3, #16
 800be20:	431a      	orrs	r2, r3
 800be22:	4b1b      	ldr	r3, [pc, #108]	; (800be90 <MDI_getDataChannel2_IT+0x128>)
 800be24:	7adb      	ldrb	r3, [r3, #11]
 800be26:	021b      	lsls	r3, r3, #8
 800be28:	4313      	orrs	r3, r2
 800be2a:	4a19      	ldr	r2, [pc, #100]	; (800be90 <MDI_getDataChannel2_IT+0x128>)
 800be2c:	7b52      	ldrb	r2, [r2, #13]
 800be2e:	4313      	orrs	r3, r2
 800be30:	4a19      	ldr	r2, [pc, #100]	; (800be98 <MDI_getDataChannel2_IT+0x130>)
 800be32:	6093      	str	r3, [r2, #8]
					travelMotor.speed = ( (tmpArr2[3] << 8) |(tmpArr2[5] & 0xFF));
 800be34:	4b16      	ldr	r3, [pc, #88]	; (800be90 <MDI_getDataChannel2_IT+0x128>)
 800be36:	78db      	ldrb	r3, [r3, #3]
 800be38:	021b      	lsls	r3, r3, #8
 800be3a:	b21a      	sxth	r2, r3
 800be3c:	4b14      	ldr	r3, [pc, #80]	; (800be90 <MDI_getDataChannel2_IT+0x128>)
 800be3e:	795b      	ldrb	r3, [r3, #5]
 800be40:	b21b      	sxth	r3, r3
 800be42:	4313      	orrs	r3, r2
 800be44:	b21a      	sxth	r2, r3
 800be46:	4b14      	ldr	r3, [pc, #80]	; (800be98 <MDI_getDataChannel2_IT+0x130>)
 800be48:	809a      	strh	r2, [r3, #4]
					travelMotor.pid_kp = tmpArr2[2];
 800be4a:	4b11      	ldr	r3, [pc, #68]	; (800be90 <MDI_getDataChannel2_IT+0x128>)
 800be4c:	789a      	ldrb	r2, [r3, #2]
 800be4e:	4b12      	ldr	r3, [pc, #72]	; (800be98 <MDI_getDataChannel2_IT+0x130>)
 800be50:	701a      	strb	r2, [r3, #0]
					travelMotor.pid_ki = tmpArr2[4];
 800be52:	4b0f      	ldr	r3, [pc, #60]	; (800be90 <MDI_getDataChannel2_IT+0x128>)
 800be54:	791a      	ldrb	r2, [r3, #4]
 800be56:	4b10      	ldr	r3, [pc, #64]	; (800be98 <MDI_getDataChannel2_IT+0x130>)
 800be58:	705a      	strb	r2, [r3, #1]
					travelMotor.pid_kd = tmpArr2[6];
 800be5a:	4b0d      	ldr	r3, [pc, #52]	; (800be90 <MDI_getDataChannel2_IT+0x128>)
 800be5c:	799a      	ldrb	r2, [r3, #6]
 800be5e:	4b0e      	ldr	r3, [pc, #56]	; (800be98 <MDI_getDataChannel2_IT+0x130>)
 800be60:	709a      	strb	r2, [r3, #2]
					travelMotor.soft_k = tmpArr2[8];
 800be62:	4b0b      	ldr	r3, [pc, #44]	; (800be90 <MDI_getDataChannel2_IT+0x128>)
 800be64:	7a1a      	ldrb	r2, [r3, #8]
 800be66:	4b0c      	ldr	r3, [pc, #48]	; (800be98 <MDI_getDataChannel2_IT+0x130>)
 800be68:	71da      	strb	r2, [r3, #7]
					travelMotor.soft_f = tmpArr2[10];
 800be6a:	4b09      	ldr	r3, [pc, #36]	; (800be90 <MDI_getDataChannel2_IT+0x128>)
 800be6c:	7a9a      	ldrb	r2, [r3, #10]
 800be6e:	4b0a      	ldr	r3, [pc, #40]	; (800be98 <MDI_getDataChannel2_IT+0x130>)
 800be70:	719a      	strb	r2, [r3, #6]
				}
			}
			HAL_UART_Receive_IT(callBackHandle, &getTmpCH2, 1);
 800be72:	2201      	movs	r2, #1
 800be74:	4904      	ldr	r1, [pc, #16]	; (800be88 <MDI_getDataChannel2_IT+0x120>)
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f7f8 f951 	bl	800411e <HAL_UART_Receive_IT>
	}
}
 800be7c:	bf00      	nop
 800be7e:	3718      	adds	r7, #24
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}
 800be84:	20003938 	.word	0x20003938
 800be88:	200038fa 	.word	0x200038fa
 800be8c:	2000390e 	.word	0x2000390e
 800be90:	200038fc 	.word	0x200038fc
 800be94:	2000390f 	.word	0x2000390f
 800be98:	2000410c 	.word	0x2000410c

0800be9c <getDriver1ReceiveVal>:
}
uint16_t getDriver2angle(void) {
	return driver2.factor;
}

mD_interface getDriver1ReceiveVal(void) {
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
	return driver1;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	4a05      	ldr	r2, [pc, #20]	; (800bebc <getDriver1ReceiveVal+0x20>)
 800bea8:	6811      	ldr	r1, [r2, #0]
 800beaa:	6019      	str	r1, [r3, #0]
 800beac:	8892      	ldrh	r2, [r2, #4]
 800beae:	809a      	strh	r2, [r3, #4]
}
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	370c      	adds	r7, #12
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bc80      	pop	{r7}
 800beb8:	4770      	bx	lr
 800beba:	bf00      	nop
 800bebc:	200040ec 	.word	0x200040ec

0800bec0 <getDriver2ReceiveVal>:
tMD_interface getDriver2ReceiveVal(void) {
 800bec0:	b480      	push	{r7}
 800bec2:	b083      	sub	sp, #12
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
	return travelMotor;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	4a04      	ldr	r2, [pc, #16]	; (800bedc <getDriver2ReceiveVal+0x1c>)
 800becc:	ca07      	ldmia	r2, {r0, r1, r2}
 800bece:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	370c      	adds	r7, #12
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bc80      	pop	{r7}
 800beda:	4770      	bx	lr
 800bedc:	2000410c 	.word	0x2000410c

0800bee0 <HAL_UART_RxCpltCallback>:
xSemaphoreHandle uart1SemphrHandle=NULL;
xSemaphoreHandle uart2SemphrHandle=NULL;
xSemaphoreHandle uart3SemphrHandle=NULL;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b082      	sub	sp, #8
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
	MDI_getDataChannel1_IT(huart);
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f7ff fe2d 	bl	800bb48 <MDI_getDataChannel1_IT>
	MDI_getDataChannel2_IT(huart);
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f7ff ff3a 	bl	800bd68 <MDI_getDataChannel2_IT>
	CI_getDataChannel_IT(huart);
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f7f4 fc37 	bl	8000768 <CI_getDataChannel_IT>
}
 800befa:	bf00      	nop
 800befc:	3708      	adds	r7, #8
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
	...

0800bf04 <tasks_init>:

void tasks_init(void){
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af02      	add	r7, sp, #8
	 * @param usStackDepth-> stack size
	 * @param pvParameters-> function parameters
	 * @param uxPriority -> Priority
	 * @param pxCreatedTask -> handle so id
	 * */
	vSemaphoreCreateBinary(uart1SemphrHandle);
 800bf0a:	2203      	movs	r2, #3
 800bf0c:	2100      	movs	r1, #0
 800bf0e:	2001      	movs	r0, #1
 800bf10:	f7fc fc99 	bl	8008846 <xQueueGenericCreate>
 800bf14:	4603      	mov	r3, r0
 800bf16:	4a57      	ldr	r2, [pc, #348]	; (800c074 <tasks_init+0x170>)
 800bf18:	6013      	str	r3, [r2, #0]
 800bf1a:	4b56      	ldr	r3, [pc, #344]	; (800c074 <tasks_init+0x170>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d006      	beq.n	800bf30 <tasks_init+0x2c>
 800bf22:	4b54      	ldr	r3, [pc, #336]	; (800c074 <tasks_init+0x170>)
 800bf24:	6818      	ldr	r0, [r3, #0]
 800bf26:	2300      	movs	r3, #0
 800bf28:	2200      	movs	r2, #0
 800bf2a:	2100      	movs	r1, #0
 800bf2c:	f7fc fcec 	bl	8008908 <xQueueGenericSend>
	vSemaphoreCreateBinary(uart2SemphrHandle);
 800bf30:	2203      	movs	r2, #3
 800bf32:	2100      	movs	r1, #0
 800bf34:	2001      	movs	r0, #1
 800bf36:	f7fc fc86 	bl	8008846 <xQueueGenericCreate>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	4a4e      	ldr	r2, [pc, #312]	; (800c078 <tasks_init+0x174>)
 800bf3e:	6013      	str	r3, [r2, #0]
 800bf40:	4b4d      	ldr	r3, [pc, #308]	; (800c078 <tasks_init+0x174>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d006      	beq.n	800bf56 <tasks_init+0x52>
 800bf48:	4b4b      	ldr	r3, [pc, #300]	; (800c078 <tasks_init+0x174>)
 800bf4a:	6818      	ldr	r0, [r3, #0]
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	2200      	movs	r2, #0
 800bf50:	2100      	movs	r1, #0
 800bf52:	f7fc fcd9 	bl	8008908 <xQueueGenericSend>
	vSemaphoreCreateBinary(uart3SemphrHandle);
 800bf56:	2203      	movs	r2, #3
 800bf58:	2100      	movs	r1, #0
 800bf5a:	2001      	movs	r0, #1
 800bf5c:	f7fc fc73 	bl	8008846 <xQueueGenericCreate>
 800bf60:	4603      	mov	r3, r0
 800bf62:	4a46      	ldr	r2, [pc, #280]	; (800c07c <tasks_init+0x178>)
 800bf64:	6013      	str	r3, [r2, #0]
 800bf66:	4b45      	ldr	r3, [pc, #276]	; (800c07c <tasks_init+0x178>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d006      	beq.n	800bf7c <tasks_init+0x78>
 800bf6e:	4b43      	ldr	r3, [pc, #268]	; (800c07c <tasks_init+0x178>)
 800bf70:	6818      	ldr	r0, [r3, #0]
 800bf72:	2300      	movs	r3, #0
 800bf74:	2200      	movs	r2, #0
 800bf76:	2100      	movs	r1, #0
 800bf78:	f7fc fcc6 	bl	8008908 <xQueueGenericSend>


	if(uart1SemphrHandle!=NULL && uart2SemphrHandle!=NULL && uart3SemphrHandle!=NULL){
 800bf7c:	4b3d      	ldr	r3, [pc, #244]	; (800c074 <tasks_init+0x170>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d073      	beq.n	800c06c <tasks_init+0x168>
 800bf84:	4b3c      	ldr	r3, [pc, #240]	; (800c078 <tasks_init+0x174>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d06f      	beq.n	800c06c <tasks_init+0x168>
 800bf8c:	4b3b      	ldr	r3, [pc, #236]	; (800c07c <tasks_init+0x178>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d06b      	beq.n	800c06c <tasks_init+0x168>


		xTaskCreate(computerValTask, "calc Uart 3val", configMINIMAL_STACK_SIZE, NULL,  55, NULL);
 800bf94:	2300      	movs	r3, #0
 800bf96:	9301      	str	r3, [sp, #4]
 800bf98:	2337      	movs	r3, #55	; 0x37
 800bf9a:	9300      	str	r3, [sp, #0]
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	2280      	movs	r2, #128	; 0x80
 800bfa0:	4937      	ldr	r1, [pc, #220]	; (800c080 <tasks_init+0x17c>)
 800bfa2:	4838      	ldr	r0, [pc, #224]	; (800c084 <tasks_init+0x180>)
 800bfa4:	f7fd fa12 	bl	80093cc <xTaskCreate>
		xTaskCreate(computerGetTask, "send Uart 3", configMINIMAL_STACK_SIZE, NULL,  55, NULL);
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	9301      	str	r3, [sp, #4]
 800bfac:	2337      	movs	r3, #55	; 0x37
 800bfae:	9300      	str	r3, [sp, #0]
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	2280      	movs	r2, #128	; 0x80
 800bfb4:	4934      	ldr	r1, [pc, #208]	; (800c088 <tasks_init+0x184>)
 800bfb6:	4835      	ldr	r0, [pc, #212]	; (800c08c <tasks_init+0x188>)
 800bfb8:	f7fd fa08 	bl	80093cc <xTaskCreate>
		xTaskCreate(computerSendTask, "get Uart 3", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	9301      	str	r3, [sp, #4]
 800bfc0:	2337      	movs	r3, #55	; 0x37
 800bfc2:	9300      	str	r3, [sp, #0]
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	2280      	movs	r2, #128	; 0x80
 800bfc8:	4931      	ldr	r1, [pc, #196]	; (800c090 <tasks_init+0x18c>)
 800bfca:	4832      	ldr	r0, [pc, #200]	; (800c094 <tasks_init+0x190>)
 800bfcc:	f7fd f9fe 	bl	80093cc <xTaskCreate>

		xTaskCreate(sendDataUart1Task, "send Uart 1", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	9301      	str	r3, [sp, #4]
 800bfd4:	2337      	movs	r3, #55	; 0x37
 800bfd6:	9300      	str	r3, [sp, #0]
 800bfd8:	2300      	movs	r3, #0
 800bfda:	2280      	movs	r2, #128	; 0x80
 800bfdc:	492e      	ldr	r1, [pc, #184]	; (800c098 <tasks_init+0x194>)
 800bfde:	482f      	ldr	r0, [pc, #188]	; (800c09c <tasks_init+0x198>)
 800bfe0:	f7fd f9f4 	bl	80093cc <xTaskCreate>
		xTaskCreate(sendDataUart2Task, "send Uart 2", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	9301      	str	r3, [sp, #4]
 800bfe8:	2337      	movs	r3, #55	; 0x37
 800bfea:	9300      	str	r3, [sp, #0]
 800bfec:	2300      	movs	r3, #0
 800bfee:	2280      	movs	r2, #128	; 0x80
 800bff0:	492b      	ldr	r1, [pc, #172]	; (800c0a0 <tasks_init+0x19c>)
 800bff2:	482c      	ldr	r0, [pc, #176]	; (800c0a4 <tasks_init+0x1a0>)
 800bff4:	f7fd f9ea 	bl	80093cc <xTaskCreate>

		xTaskCreate(getDataUart1Task, "get Uart 1", configMINIMAL_STACK_SIZE, NULL,  55, NULL);
 800bff8:	2300      	movs	r3, #0
 800bffa:	9301      	str	r3, [sp, #4]
 800bffc:	2337      	movs	r3, #55	; 0x37
 800bffe:	9300      	str	r3, [sp, #0]
 800c000:	2300      	movs	r3, #0
 800c002:	2280      	movs	r2, #128	; 0x80
 800c004:	4928      	ldr	r1, [pc, #160]	; (800c0a8 <tasks_init+0x1a4>)
 800c006:	4829      	ldr	r0, [pc, #164]	; (800c0ac <tasks_init+0x1a8>)
 800c008:	f7fd f9e0 	bl	80093cc <xTaskCreate>
		xTaskCreate(getDataUart2Task, "get Uart 2", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 800c00c:	2300      	movs	r3, #0
 800c00e:	9301      	str	r3, [sp, #4]
 800c010:	2337      	movs	r3, #55	; 0x37
 800c012:	9300      	str	r3, [sp, #0]
 800c014:	2300      	movs	r3, #0
 800c016:	2280      	movs	r2, #128	; 0x80
 800c018:	4925      	ldr	r1, [pc, #148]	; (800c0b0 <tasks_init+0x1ac>)
 800c01a:	4826      	ldr	r0, [pc, #152]	; (800c0b4 <tasks_init+0x1b0>)
 800c01c:	f7fd f9d6 	bl	80093cc <xTaskCreate>

		xTaskCreate(readSwitchsTask, "read switchs", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 800c020:	2300      	movs	r3, #0
 800c022:	9301      	str	r3, [sp, #4]
 800c024:	2337      	movs	r3, #55	; 0x37
 800c026:	9300      	str	r3, [sp, #0]
 800c028:	2300      	movs	r3, #0
 800c02a:	2280      	movs	r2, #128	; 0x80
 800c02c:	4922      	ldr	r1, [pc, #136]	; (800c0b8 <tasks_init+0x1b4>)
 800c02e:	4823      	ldr	r0, [pc, #140]	; (800c0bc <tasks_init+0x1b8>)
 800c030:	f7fd f9cc 	bl	80093cc <xTaskCreate>
		xTaskCreate(writeRelaysTask, "write relays", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 800c034:	2300      	movs	r3, #0
 800c036:	9301      	str	r3, [sp, #4]
 800c038:	2337      	movs	r3, #55	; 0x37
 800c03a:	9300      	str	r3, [sp, #0]
 800c03c:	2300      	movs	r3, #0
 800c03e:	2280      	movs	r2, #128	; 0x80
 800c040:	491f      	ldr	r1, [pc, #124]	; (800c0c0 <tasks_init+0x1bc>)
 800c042:	4820      	ldr	r0, [pc, #128]	; (800c0c4 <tasks_init+0x1c0>)
 800c044:	f7fd f9c2 	bl	80093cc <xTaskCreate>


		xTaskCreate(ledTestTask, "led task", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 800c048:	2300      	movs	r3, #0
 800c04a:	9301      	str	r3, [sp, #4]
 800c04c:	2337      	movs	r3, #55	; 0x37
 800c04e:	9300      	str	r3, [sp, #0]
 800c050:	2300      	movs	r3, #0
 800c052:	2280      	movs	r2, #128	; 0x80
 800c054:	491c      	ldr	r1, [pc, #112]	; (800c0c8 <tasks_init+0x1c4>)
 800c056:	481d      	ldr	r0, [pc, #116]	; (800c0cc <tasks_init+0x1c8>)
 800c058:	f7fd f9b8 	bl	80093cc <xTaskCreate>


		 MX_USB_DEVICE_Init();
 800c05c:	f7ff f836 	bl	800b0cc <MX_USB_DEVICE_Init>

		driverInit();
 800c060:	f000 f9de 	bl	800c420 <driverInit>
		IO_init();
 800c064:	f7fa fc1c 	bl	80068a0 <IO_init>
		vTaskStartScheduler();
 800c068:	f7fd fb20 	bl	80096ac <vTaskStartScheduler>
	}
}
 800c06c:	bf00      	nop
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	20003910 	.word	0x20003910
 800c078:	20003914 	.word	0x20003914
 800c07c:	20003918 	.word	0x20003918
 800c080:	0800c5d8 	.word	0x0800c5d8
 800c084:	0800c13d 	.word	0x0800c13d
 800c088:	0800c5e8 	.word	0x0800c5e8
 800c08c:	0800c10d 	.word	0x0800c10d
 800c090:	0800c5f4 	.word	0x0800c5f4
 800c094:	0800c2d1 	.word	0x0800c2d1
 800c098:	0800c600 	.word	0x0800c600
 800c09c:	0800c2fd 	.word	0x0800c2fd
 800c0a0:	0800c60c 	.word	0x0800c60c
 800c0a4:	0800c359 	.word	0x0800c359
 800c0a8:	0800c618 	.word	0x0800c618
 800c0ac:	0800c3c1 	.word	0x0800c3c1
 800c0b0:	0800c624 	.word	0x0800c624
 800c0b4:	0800c3f1 	.word	0x0800c3f1
 800c0b8:	0800c630 	.word	0x0800c630
 800c0bc:	0800c0d1 	.word	0x0800c0d1
 800c0c0:	0800c640 	.word	0x0800c640
 800c0c4:	0800c0df 	.word	0x0800c0df
 800c0c8:	0800c650 	.word	0x0800c650
 800c0cc:	0800c0ed 	.word	0x0800c0ed

0800c0d0 <readSwitchsTask>:

void readSwitchsTask(void *params){
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
	while(1){
		IO_readInputSwitchs();
 800c0d8:	f7fa fc1a 	bl	8006910 <IO_readInputSwitchs>
 800c0dc:	e7fc      	b.n	800c0d8 <readSwitchsTask+0x8>

0800c0de <writeRelaysTask>:
	}
}
void writeRelaysTask(void *params){
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b082      	sub	sp, #8
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]
	while(1){
		IO_testInputOutput();
 800c0e6:	f7fa fc7d 	bl	80069e4 <IO_testInputOutput>
 800c0ea:	e7fc      	b.n	800c0e6 <writeRelaysTask+0x8>

0800c0ec <ledTestTask>:
	}
}
void ledTestTask(void *params){
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 800c0f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c0f8:	4803      	ldr	r0, [pc, #12]	; (800c108 <ledTestTask+0x1c>)
 800c0fa:	f7f5 fcce 	bl	8001a9a <HAL_GPIO_TogglePin>

		vTaskDelay(500);
 800c0fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c102:	f7fd fa9f 	bl	8009644 <vTaskDelay>
		HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 800c106:	e7f5      	b.n	800c0f4 <ledTestTask+0x8>
 800c108:	40011000 	.word	0x40011000

0800c10c <computerGetTask>:
	}
}



void computerGetTask(void *params){
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(uart3SemphrHandle, portMAX_DELAY);
 800c114:	4b08      	ldr	r3, [pc, #32]	; (800c138 <computerGetTask+0x2c>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	f04f 31ff 	mov.w	r1, #4294967295
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7fc fe69 	bl	8008df4 <xQueueSemaphoreTake>
		CI_enableGetDataChannel();
 800c122:	f7f4 fb13 	bl	800074c <CI_enableGetDataChannel>
		xSemaphoreGive(uart3SemphrHandle);
 800c126:	4b04      	ldr	r3, [pc, #16]	; (800c138 <computerGetTask+0x2c>)
 800c128:	6818      	ldr	r0, [r3, #0]
 800c12a:	2300      	movs	r3, #0
 800c12c:	2200      	movs	r2, #0
 800c12e:	2100      	movs	r1, #0
 800c130:	f7fc fbea 	bl	8008908 <xQueueGenericSend>
		xSemaphoreTake(uart3SemphrHandle, portMAX_DELAY);
 800c134:	e7ee      	b.n	800c114 <computerGetTask+0x8>
 800c136:	bf00      	nop
 800c138:	20003918 	.word	0x20003918

0800c13c <computerValTask>:
	}
}
void computerValTask(void *params){
 800c13c:	b590      	push	{r4, r7, lr}
 800c13e:	b09d      	sub	sp, #116	; 0x74
 800c140:	af02      	add	r7, sp, #8
 800c142:	6078      	str	r0, [r7, #4]
	while(1){
		llsendComputerVals.drive_speed=(int32_t)(getDriver2ReceiveVal().speed)*10000;
 800c144:	f107 0308 	add.w	r3, r7, #8
 800c148:	4618      	mov	r0, r3
 800c14a:	f7ff feb9 	bl	800bec0 <getDriver2ReceiveVal>
 800c14e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c152:	461a      	mov	r2, r3
 800c154:	f242 7310 	movw	r3, #10000	; 0x2710
 800c158:	fb03 f302 	mul.w	r3, r3, r2
 800c15c:	4a59      	ldr	r2, [pc, #356]	; (800c2c4 <computerValTask+0x188>)
 800c15e:	6053      	str	r3, [r2, #4]
			llsendComputerVals.steer_pos =(int32_t)(getDriver1ReceiveVal().angle)*10000;
 800c160:	f107 0314 	add.w	r3, r7, #20
 800c164:	4618      	mov	r0, r3
 800c166:	f7ff fe99 	bl	800be9c <getDriver1ReceiveVal>
 800c16a:	8b3b      	ldrh	r3, [r7, #24]
 800c16c:	461a      	mov	r2, r3
 800c16e:	f242 7310 	movw	r3, #10000	; 0x2710
 800c172:	fb03 f302 	mul.w	r3, r3, r2
 800c176:	4a53      	ldr	r2, [pc, #332]	; (800c2c4 <computerValTask+0x188>)
 800c178:	6013      	str	r3, [r2, #0]
			if(getDriver2ReceiveVal().encoder<0){
 800c17a:	f107 031c 	add.w	r3, r7, #28
 800c17e:	4618      	mov	r0, r3
 800c180:	f7ff fe9e 	bl	800bec0 <getDriver2ReceiveVal>
 800c184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c186:	2b00      	cmp	r3, #0
 800c188:	da47      	bge.n	800c21a <computerValTask+0xde>
				int intToUint =getDriver2ReceiveVal().encoder;
 800c18a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c18e:	4618      	mov	r0, r3
 800c190:	f7ff fe96 	bl	800bec0 <getDriver2ReceiveVal>
 800c194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c196:	663b      	str	r3, [r7, #96]	; 0x60
				intToUint=(~intToUint+1);
 800c198:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c19a:	425b      	negs	r3, r3
 800c19c:	663b      	str	r3, [r7, #96]	; 0x60
				uint16_t tmp =(intToUint/790);
 800c19e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1a0:	4a49      	ldr	r2, [pc, #292]	; (800c2c8 <computerValTask+0x18c>)
 800c1a2:	fb82 1203 	smull	r1, r2, r2, r3
 800c1a6:	1212      	asrs	r2, r2, #8
 800c1a8:	17db      	asrs	r3, r3, #31
 800c1aa:	1ad3      	subs	r3, r2, r3
 800c1ac:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
				uint16_t tmp2=(intToUint%790);
 800c1b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1b2:	4a45      	ldr	r2, [pc, #276]	; (800c2c8 <computerValTask+0x18c>)
 800c1b4:	fb82 1203 	smull	r1, r2, r2, r3
 800c1b8:	1211      	asrs	r1, r2, #8
 800c1ba:	17da      	asrs	r2, r3, #31
 800c1bc:	1a8a      	subs	r2, r1, r2
 800c1be:	f240 3116 	movw	r1, #790	; 0x316
 800c1c2:	fb01 f202 	mul.w	r2, r1, r2
 800c1c6:	1a9a      	subs	r2, r3, r2
 800c1c8:	4613      	mov	r3, r2
 800c1ca:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				llsendComputerVals.drive_pos= -(tmp+valuesMapforFloat(tmp2,0,790,0.0f,1.0f))*10000;
 800c1ce:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7f4 f876 	bl	80002c4 <__aeabi_i2f>
 800c1d8:	4604      	mov	r4, r0
 800c1da:	f8b7 005c 	ldrh.w	r0, [r7, #92]	; 0x5c
 800c1de:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c1e2:	9300      	str	r3, [sp, #0]
 800c1e4:	f04f 0300 	mov.w	r3, #0
 800c1e8:	f240 3216 	movw	r2, #790	; 0x316
 800c1ec:	2100      	movs	r1, #0
 800c1ee:	f000 f943 	bl	800c478 <valuesMapforFloat>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	f7f3 ffb0 	bl	800015c <__addsf3>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c202:	4932      	ldr	r1, [pc, #200]	; (800c2cc <computerValTask+0x190>)
 800c204:	4618      	mov	r0, r3
 800c206:	f7f4 f8b1 	bl	800036c <__aeabi_fmul>
 800c20a:	4603      	mov	r3, r0
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7f4 f9fd 	bl	800060c <__aeabi_f2iz>
 800c212:	4603      	mov	r3, r0
 800c214:	4a2b      	ldr	r2, [pc, #172]	; (800c2c4 <computerValTask+0x188>)
 800c216:	6093      	str	r3, [r2, #8]
 800c218:	e044      	b.n	800c2a4 <computerValTask+0x168>
			}
			else {
				uint16_t tmp =((getDriver2ReceiveVal().encoder)/790);
 800c21a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c21e:	4618      	mov	r0, r3
 800c220:	f7ff fe4e 	bl	800bec0 <getDriver2ReceiveVal>
 800c224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c226:	4a28      	ldr	r2, [pc, #160]	; (800c2c8 <computerValTask+0x18c>)
 800c228:	fb82 1203 	smull	r1, r2, r2, r3
 800c22c:	1212      	asrs	r2, r2, #8
 800c22e:	17db      	asrs	r3, r3, #31
 800c230:	1ad3      	subs	r3, r2, r3
 800c232:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
				uint16_t tmp2=((getDriver2ReceiveVal().encoder)%790);
 800c236:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7ff fe40 	bl	800bec0 <getDriver2ReceiveVal>
 800c240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c242:	4a21      	ldr	r2, [pc, #132]	; (800c2c8 <computerValTask+0x18c>)
 800c244:	fb82 1203 	smull	r1, r2, r2, r3
 800c248:	1211      	asrs	r1, r2, #8
 800c24a:	17da      	asrs	r2, r3, #31
 800c24c:	1a8a      	subs	r2, r1, r2
 800c24e:	f240 3116 	movw	r1, #790	; 0x316
 800c252:	fb01 f202 	mul.w	r2, r1, r2
 800c256:	1a9a      	subs	r2, r3, r2
 800c258:	4613      	mov	r3, r2
 800c25a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
				llsendComputerVals.drive_pos= (tmp+valuesMapforFloat(tmp2,0,790,0.0f,1.0f))*10000;
 800c25e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800c262:	4618      	mov	r0, r3
 800c264:	f7f4 f82e 	bl	80002c4 <__aeabi_i2f>
 800c268:	4604      	mov	r4, r0
 800c26a:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 800c26e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c272:	9300      	str	r3, [sp, #0]
 800c274:	f04f 0300 	mov.w	r3, #0
 800c278:	f240 3216 	movw	r2, #790	; 0x316
 800c27c:	2100      	movs	r1, #0
 800c27e:	f000 f8fb 	bl	800c478 <valuesMapforFloat>
 800c282:	4603      	mov	r3, r0
 800c284:	4619      	mov	r1, r3
 800c286:	4620      	mov	r0, r4
 800c288:	f7f3 ff68 	bl	800015c <__addsf3>
 800c28c:	4603      	mov	r3, r0
 800c28e:	490f      	ldr	r1, [pc, #60]	; (800c2cc <computerValTask+0x190>)
 800c290:	4618      	mov	r0, r3
 800c292:	f7f4 f86b 	bl	800036c <__aeabi_fmul>
 800c296:	4603      	mov	r3, r0
 800c298:	4618      	mov	r0, r3
 800c29a:	f7f4 f9b7 	bl	800060c <__aeabi_f2iz>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	4a08      	ldr	r2, [pc, #32]	; (800c2c4 <computerValTask+0x188>)
 800c2a2:	6093      	str	r3, [r2, #8]
			}
			llsendComputerVals.switch_vals=IO_inputsBitsPackageToByte(IO_getInputOutputsVal());
 800c2a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7fa fc47 	bl	8006b3c <IO_getInputOutputsVal>
 800c2ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c2b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c2b4:	f7fa fbb6 	bl	8006a24 <IO_inputsBitsPackageToByte>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	4b01      	ldr	r3, [pc, #4]	; (800c2c4 <computerValTask+0x188>)
 800c2be:	731a      	strb	r2, [r3, #12]
		llsendComputerVals.drive_speed=(int32_t)(getDriver2ReceiveVal().speed)*10000;
 800c2c0:	e740      	b.n	800c144 <computerValTask+0x8>
 800c2c2:	bf00      	nop
 800c2c4:	2000413c 	.word	0x2000413c
 800c2c8:	52f4fb77 	.word	0x52f4fb77
 800c2cc:	461c4000 	.word	0x461c4000

0800c2d0 <computerSendTask>:
	}

}
char *test="deneme 1 2 3 4\n";
void computerSendTask(void *params){
 800c2d0:	b590      	push	{r4, r7, lr}
 800c2d2:	b085      	sub	sp, #20
 800c2d4:	af02      	add	r7, sp, #8
 800c2d6:	6078      	str	r0, [r7, #4]
	while(1){
		CI_sendDataChannel(0x11,llsendComputerVals.steer_pos ,llsendComputerVals.drive_pos,
 800c2d8:	4b07      	ldr	r3, [pc, #28]	; (800c2f8 <computerSendTask+0x28>)
 800c2da:	6819      	ldr	r1, [r3, #0]
 800c2dc:	4b06      	ldr	r3, [pc, #24]	; (800c2f8 <computerSendTask+0x28>)
 800c2de:	689a      	ldr	r2, [r3, #8]
 800c2e0:	4b05      	ldr	r3, [pc, #20]	; (800c2f8 <computerSendTask+0x28>)
 800c2e2:	6858      	ldr	r0, [r3, #4]
 800c2e4:	4b04      	ldr	r3, [pc, #16]	; (800c2f8 <computerSendTask+0x28>)
 800c2e6:	7b1b      	ldrb	r3, [r3, #12]
 800c2e8:	2432      	movs	r4, #50	; 0x32
 800c2ea:	9401      	str	r4, [sp, #4]
 800c2ec:	9300      	str	r3, [sp, #0]
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	2011      	movs	r0, #17
 800c2f2:	f7f4 f9b1 	bl	8000658 <CI_sendDataChannel>
 800c2f6:	e7ef      	b.n	800c2d8 <computerSendTask+0x8>
 800c2f8:	2000413c 	.word	0x2000413c

0800c2fc <sendDataUart1Task>:

	/*	CDC_Transmit_FS(test, sizeof(test));
		vTaskDelay(10);*/
	}
}
void sendDataUart1Task(void *params){
 800c2fc:	b590      	push	{r4, r7, lr}
 800c2fe:	b08b      	sub	sp, #44	; 0x2c
 800c300:	af02      	add	r7, sp, #8
 800c302:	6078      	str	r0, [r7, #4]

	while(1){
		if(getComputerVals().size)	driveDriver.angle=(uint16_t)((getComputerVals().steer_pos)/10000);
 800c304:	f107 0308 	add.w	r3, r7, #8
 800c308:	4618      	mov	r0, r3
 800c30a:	f7f4 fb25 	bl	8000958 <getComputerVals>
 800c30e:	893b      	ldrh	r3, [r7, #8]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d00e      	beq.n	800c332 <sendDataUart1Task+0x36>
 800c314:	f107 0314 	add.w	r3, r7, #20
 800c318:	4618      	mov	r0, r3
 800c31a:	f7f4 fb1d 	bl	8000958 <getComputerVals>
 800c31e:	69bb      	ldr	r3, [r7, #24]
 800c320:	4a0b      	ldr	r2, [pc, #44]	; (800c350 <sendDataUart1Task+0x54>)
 800c322:	fb82 1203 	smull	r1, r2, r2, r3
 800c326:	1312      	asrs	r2, r2, #12
 800c328:	17db      	asrs	r3, r3, #31
 800c32a:	1ad3      	subs	r3, r2, r3
 800c32c:	b29a      	uxth	r2, r3
 800c32e:	4b09      	ldr	r3, [pc, #36]	; (800c354 <sendDataUart1Task+0x58>)
 800c330:	809a      	strh	r2, [r3, #4]
			MDI_sendDataChannel1Ver2(driveDriver.angle,driveDriver.pid_kp,driveDriver.pid_ki,driveDriver.pid_kd,driveDriver.factor);
 800c332:	4b08      	ldr	r3, [pc, #32]	; (800c354 <sendDataUart1Task+0x58>)
 800c334:	8898      	ldrh	r0, [r3, #4]
 800c336:	4b07      	ldr	r3, [pc, #28]	; (800c354 <sendDataUart1Task+0x58>)
 800c338:	7899      	ldrb	r1, [r3, #2]
 800c33a:	4b06      	ldr	r3, [pc, #24]	; (800c354 <sendDataUart1Task+0x58>)
 800c33c:	785a      	ldrb	r2, [r3, #1]
 800c33e:	4b05      	ldr	r3, [pc, #20]	; (800c354 <sendDataUart1Task+0x58>)
 800c340:	781c      	ldrb	r4, [r3, #0]
 800c342:	4b04      	ldr	r3, [pc, #16]	; (800c354 <sendDataUart1Task+0x58>)
 800c344:	78db      	ldrb	r3, [r3, #3]
 800c346:	9300      	str	r3, [sp, #0]
 800c348:	4623      	mov	r3, r4
 800c34a:	f7ff fb7f 	bl	800ba4c <MDI_sendDataChannel1Ver2>
		if(getComputerVals().size)	driveDriver.angle=(uint16_t)((getComputerVals().steer_pos)/10000);
 800c34e:	e7d9      	b.n	800c304 <sendDataUart1Task+0x8>
 800c350:	68db8bad 	.word	0x68db8bad
 800c354:	2000414c 	.word	0x2000414c

0800c358 <sendDataUart2Task>:

	}
}
void sendDataUart2Task(void *params){
 800c358:	b5b0      	push	{r4, r5, r7, lr}
 800c35a:	b08a      	sub	sp, #40	; 0x28
 800c35c:	af02      	add	r7, sp, #8
 800c35e:	6078      	str	r0, [r7, #4]
	while(1){
		if(getComputerVals().size)	travelDriver.speed=(int16_t)((getComputerVals().drive_speed)/10000);
 800c360:	f107 0308 	add.w	r3, r7, #8
 800c364:	4618      	mov	r0, r3
 800c366:	f7f4 faf7 	bl	8000958 <getComputerVals>
 800c36a:	893b      	ldrh	r3, [r7, #8]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d00e      	beq.n	800c38e <sendDataUart2Task+0x36>
 800c370:	f107 0314 	add.w	r3, r7, #20
 800c374:	4618      	mov	r0, r3
 800c376:	f7f4 faef 	bl	8000958 <getComputerVals>
 800c37a:	69fb      	ldr	r3, [r7, #28]
 800c37c:	4a0e      	ldr	r2, [pc, #56]	; (800c3b8 <sendDataUart2Task+0x60>)
 800c37e:	fb82 1203 	smull	r1, r2, r2, r3
 800c382:	1312      	asrs	r2, r2, #12
 800c384:	17db      	asrs	r3, r3, #31
 800c386:	1ad3      	subs	r3, r2, r3
 800c388:	b21a      	sxth	r2, r3
 800c38a:	4b0c      	ldr	r3, [pc, #48]	; (800c3bc <sendDataUart2Task+0x64>)
 800c38c:	809a      	strh	r2, [r3, #4]
				MDI_sendDataChannel2Ver2(travelDriver.speed,travelDriver.pid_kp,travelDriver.pid_ki,travelDriver.pid_kd,travelDriver.soft_k,travelDriver.soft_f);
 800c38e:	4b0b      	ldr	r3, [pc, #44]	; (800c3bc <sendDataUart2Task+0x64>)
 800c390:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 800c394:	4b09      	ldr	r3, [pc, #36]	; (800c3bc <sendDataUart2Task+0x64>)
 800c396:	7819      	ldrb	r1, [r3, #0]
 800c398:	4b08      	ldr	r3, [pc, #32]	; (800c3bc <sendDataUart2Task+0x64>)
 800c39a:	785c      	ldrb	r4, [r3, #1]
 800c39c:	4b07      	ldr	r3, [pc, #28]	; (800c3bc <sendDataUart2Task+0x64>)
 800c39e:	789d      	ldrb	r5, [r3, #2]
 800c3a0:	4b06      	ldr	r3, [pc, #24]	; (800c3bc <sendDataUart2Task+0x64>)
 800c3a2:	79db      	ldrb	r3, [r3, #7]
 800c3a4:	4a05      	ldr	r2, [pc, #20]	; (800c3bc <sendDataUart2Task+0x64>)
 800c3a6:	7992      	ldrb	r2, [r2, #6]
 800c3a8:	9201      	str	r2, [sp, #4]
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	462b      	mov	r3, r5
 800c3ae:	4622      	mov	r2, r4
 800c3b0:	f7ff fc52 	bl	800bc58 <MDI_sendDataChannel2Ver2>
		if(getComputerVals().size)	travelDriver.speed=(int16_t)((getComputerVals().drive_speed)/10000);
 800c3b4:	e7d4      	b.n	800c360 <sendDataUart2Task+0x8>
 800c3b6:	bf00      	nop
 800c3b8:	68db8bad 	.word	0x68db8bad
 800c3bc:	20004130 	.word	0x20004130

0800c3c0 <getDataUart1Task>:
	}
}
void getDataUart1Task(void *params){
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b082      	sub	sp, #8
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(uart1SemphrHandle, portMAX_DELAY);
 800c3c8:	4b08      	ldr	r3, [pc, #32]	; (800c3ec <getDataUart1Task+0x2c>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f04f 31ff 	mov.w	r1, #4294967295
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f7fc fd0f 	bl	8008df4 <xQueueSemaphoreTake>
		MDI_enableGetDataChannel1();
 800c3d6:	f7ff fba9 	bl	800bb2c <MDI_enableGetDataChannel1>
		xSemaphoreGive(uart1SemphrHandle);
 800c3da:	4b04      	ldr	r3, [pc, #16]	; (800c3ec <getDataUart1Task+0x2c>)
 800c3dc:	6818      	ldr	r0, [r3, #0]
 800c3de:	2300      	movs	r3, #0
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	2100      	movs	r1, #0
 800c3e4:	f7fc fa90 	bl	8008908 <xQueueGenericSend>
		xSemaphoreTake(uart1SemphrHandle, portMAX_DELAY);
 800c3e8:	e7ee      	b.n	800c3c8 <getDataUart1Task+0x8>
 800c3ea:	bf00      	nop
 800c3ec:	20003910 	.word	0x20003910

0800c3f0 <getDataUart2Task>:

	}
}
void getDataUart2Task(void *params){
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b082      	sub	sp, #8
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(uart2SemphrHandle, portMAX_DELAY);
 800c3f8:	4b08      	ldr	r3, [pc, #32]	; (800c41c <getDataUart2Task+0x2c>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f04f 31ff 	mov.w	r1, #4294967295
 800c400:	4618      	mov	r0, r3
 800c402:	f7fc fcf7 	bl	8008df4 <xQueueSemaphoreTake>
		MDI_enableGetDataChannel2();
 800c406:	f7ff fca1 	bl	800bd4c <MDI_enableGetDataChannel2>
		xSemaphoreGive(uart2SemphrHandle);
 800c40a:	4b04      	ldr	r3, [pc, #16]	; (800c41c <getDataUart2Task+0x2c>)
 800c40c:	6818      	ldr	r0, [r3, #0]
 800c40e:	2300      	movs	r3, #0
 800c410:	2200      	movs	r2, #0
 800c412:	2100      	movs	r1, #0
 800c414:	f7fc fa78 	bl	8008908 <xQueueGenericSend>
		xSemaphoreTake(uart2SemphrHandle, portMAX_DELAY);
 800c418:	e7ee      	b.n	800c3f8 <getDataUart2Task+0x8>
 800c41a:	bf00      	nop
 800c41c:	20003914 	.word	0x20003914

0800c420 <driverInit>:
	}
}

void driverInit(void){
 800c420:	b480      	push	{r7}
 800c422:	af00      	add	r7, sp, #0
	driveDriver.angle=500;
 800c424:	4b12      	ldr	r3, [pc, #72]	; (800c470 <driverInit+0x50>)
 800c426:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800c42a:	809a      	strh	r2, [r3, #4]
	driveDriver.pid_kp=100;
 800c42c:	4b10      	ldr	r3, [pc, #64]	; (800c470 <driverInit+0x50>)
 800c42e:	2264      	movs	r2, #100	; 0x64
 800c430:	709a      	strb	r2, [r3, #2]
	driveDriver.pid_ki=1;
 800c432:	4b0f      	ldr	r3, [pc, #60]	; (800c470 <driverInit+0x50>)
 800c434:	2201      	movs	r2, #1
 800c436:	705a      	strb	r2, [r3, #1]
	driveDriver.pid_kd=200;
 800c438:	4b0d      	ldr	r3, [pc, #52]	; (800c470 <driverInit+0x50>)
 800c43a:	22c8      	movs	r2, #200	; 0xc8
 800c43c:	701a      	strb	r2, [r3, #0]
	driveDriver.factor=100;
 800c43e:	4b0c      	ldr	r3, [pc, #48]	; (800c470 <driverInit+0x50>)
 800c440:	2264      	movs	r2, #100	; 0x64
 800c442:	70da      	strb	r2, [r3, #3]

	travelDriver.speed =0;
 800c444:	4b0b      	ldr	r3, [pc, #44]	; (800c474 <driverInit+0x54>)
 800c446:	2200      	movs	r2, #0
 800c448:	809a      	strh	r2, [r3, #4]
	travelDriver.pid_kp=70;
 800c44a:	4b0a      	ldr	r3, [pc, #40]	; (800c474 <driverInit+0x54>)
 800c44c:	2246      	movs	r2, #70	; 0x46
 800c44e:	701a      	strb	r2, [r3, #0]
	travelDriver.pid_ki=1;
 800c450:	4b08      	ldr	r3, [pc, #32]	; (800c474 <driverInit+0x54>)
 800c452:	2201      	movs	r2, #1
 800c454:	705a      	strb	r2, [r3, #1]
	travelDriver.pid_kd=1;
 800c456:	4b07      	ldr	r3, [pc, #28]	; (800c474 <driverInit+0x54>)
 800c458:	2201      	movs	r2, #1
 800c45a:	709a      	strb	r2, [r3, #2]
	travelDriver.soft_k =1;
 800c45c:	4b05      	ldr	r3, [pc, #20]	; (800c474 <driverInit+0x54>)
 800c45e:	2201      	movs	r2, #1
 800c460:	71da      	strb	r2, [r3, #7]
	travelDriver.soft_f =1;
 800c462:	4b04      	ldr	r3, [pc, #16]	; (800c474 <driverInit+0x54>)
 800c464:	2201      	movs	r2, #1
 800c466:	719a      	strb	r2, [r3, #6]

}
 800c468:	bf00      	nop
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bc80      	pop	{r7}
 800c46e:	4770      	bx	lr
 800c470:	2000414c 	.word	0x2000414c
 800c474:	20004130 	.word	0x20004130

0800c478 <valuesMapforFloat>:
	return (inValue - inMin)*(outMax - outMin) / (inMax - inMin) + outMin;
}
int16_t valuesMapFloat(float inValue, float inMin, float inMax, int16_t outMin, int16_t outMax) {
	return (inValue - inMin)*(outMax - outMin) / (inMax - inMin) + outMin;
}
float valuesMapforFloat(uint16_t inValue, uint16_t inMin, uint16_t inMax, float outMin, float outMax) {
 800c478:	b590      	push	{r4, r7, lr}
 800c47a:	b085      	sub	sp, #20
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	607b      	str	r3, [r7, #4]
 800c480:	4603      	mov	r3, r0
 800c482:	81fb      	strh	r3, [r7, #14]
 800c484:	460b      	mov	r3, r1
 800c486:	81bb      	strh	r3, [r7, #12]
 800c488:	4613      	mov	r3, r2
 800c48a:	817b      	strh	r3, [r7, #10]
	return (inValue - inMin)*(outMax - outMin) / (inMax - inMin) + outMin;
 800c48c:	89fa      	ldrh	r2, [r7, #14]
 800c48e:	89bb      	ldrh	r3, [r7, #12]
 800c490:	1ad3      	subs	r3, r2, r3
 800c492:	4618      	mov	r0, r3
 800c494:	f7f3 ff16 	bl	80002c4 <__aeabi_i2f>
 800c498:	4604      	mov	r4, r0
 800c49a:	6879      	ldr	r1, [r7, #4]
 800c49c:	6a38      	ldr	r0, [r7, #32]
 800c49e:	f7f3 fe5b 	bl	8000158 <__aeabi_fsub>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	f7f3 ff60 	bl	800036c <__aeabi_fmul>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	461c      	mov	r4, r3
 800c4b0:	897a      	ldrh	r2, [r7, #10]
 800c4b2:	89bb      	ldrh	r3, [r7, #12]
 800c4b4:	1ad3      	subs	r3, r2, r3
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7f3 ff04 	bl	80002c4 <__aeabi_i2f>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	4619      	mov	r1, r3
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	f7f4 f807 	bl	80004d4 <__aeabi_fdiv>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	6879      	ldr	r1, [r7, #4]
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7f3 fe46 	bl	800015c <__addsf3>
 800c4d0:	4603      	mov	r3, r0
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3714      	adds	r7, #20
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd90      	pop	{r4, r7, pc}
	...

0800c4dc <__libc_init_array>:
 800c4dc:	b570      	push	{r4, r5, r6, lr}
 800c4de:	2600      	movs	r6, #0
 800c4e0:	4d0c      	ldr	r5, [pc, #48]	; (800c514 <__libc_init_array+0x38>)
 800c4e2:	4c0d      	ldr	r4, [pc, #52]	; (800c518 <__libc_init_array+0x3c>)
 800c4e4:	1b64      	subs	r4, r4, r5
 800c4e6:	10a4      	asrs	r4, r4, #2
 800c4e8:	42a6      	cmp	r6, r4
 800c4ea:	d109      	bne.n	800c500 <__libc_init_array+0x24>
 800c4ec:	f000 f830 	bl	800c550 <_init>
 800c4f0:	2600      	movs	r6, #0
 800c4f2:	4d0a      	ldr	r5, [pc, #40]	; (800c51c <__libc_init_array+0x40>)
 800c4f4:	4c0a      	ldr	r4, [pc, #40]	; (800c520 <__libc_init_array+0x44>)
 800c4f6:	1b64      	subs	r4, r4, r5
 800c4f8:	10a4      	asrs	r4, r4, #2
 800c4fa:	42a6      	cmp	r6, r4
 800c4fc:	d105      	bne.n	800c50a <__libc_init_array+0x2e>
 800c4fe:	bd70      	pop	{r4, r5, r6, pc}
 800c500:	f855 3b04 	ldr.w	r3, [r5], #4
 800c504:	4798      	blx	r3
 800c506:	3601      	adds	r6, #1
 800c508:	e7ee      	b.n	800c4e8 <__libc_init_array+0xc>
 800c50a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c50e:	4798      	blx	r3
 800c510:	3601      	adds	r6, #1
 800c512:	e7f2      	b.n	800c4fa <__libc_init_array+0x1e>
 800c514:	0800c6a8 	.word	0x0800c6a8
 800c518:	0800c6a8 	.word	0x0800c6a8
 800c51c:	0800c6a8 	.word	0x0800c6a8
 800c520:	0800c6ac 	.word	0x0800c6ac

0800c524 <memcpy>:
 800c524:	440a      	add	r2, r1
 800c526:	4291      	cmp	r1, r2
 800c528:	f100 33ff 	add.w	r3, r0, #4294967295
 800c52c:	d100      	bne.n	800c530 <memcpy+0xc>
 800c52e:	4770      	bx	lr
 800c530:	b510      	push	{r4, lr}
 800c532:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c536:	4291      	cmp	r1, r2
 800c538:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c53c:	d1f9      	bne.n	800c532 <memcpy+0xe>
 800c53e:	bd10      	pop	{r4, pc}

0800c540 <memset>:
 800c540:	4603      	mov	r3, r0
 800c542:	4402      	add	r2, r0
 800c544:	4293      	cmp	r3, r2
 800c546:	d100      	bne.n	800c54a <memset+0xa>
 800c548:	4770      	bx	lr
 800c54a:	f803 1b01 	strb.w	r1, [r3], #1
 800c54e:	e7f9      	b.n	800c544 <memset+0x4>

0800c550 <_init>:
 800c550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c552:	bf00      	nop
 800c554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c556:	bc08      	pop	{r3}
 800c558:	469e      	mov	lr, r3
 800c55a:	4770      	bx	lr

0800c55c <_fini>:
 800c55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c55e:	bf00      	nop
 800c560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c562:	bc08      	pop	{r3}
 800c564:	469e      	mov	lr, r3
 800c566:	4770      	bx	lr
