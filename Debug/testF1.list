
testF1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b74  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08006c84  08006c84  00016c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d78  08006d78  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006d78  08006d78  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d78  08006d78  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d78  08006d78  00016d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d7c  08006d7c  00016d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003750  20000010  08006d90  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003760  08006d90  00023760  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c64  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000393e  00000000  00000000  00039c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  0003d5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001410  00000000  00000000  0003eb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193dd  00000000  00000000  0003ff88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001714f  00000000  00000000  00059365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094237  00000000  00000000  000704b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001046eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b2c  00000000  00000000  00104740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08006c6c 	.word	0x08006c6c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08006c6c 	.word	0x08006c6c

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <__aeabi_frsub>:
 800075c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000760:	e002      	b.n	8000768 <__addsf3>
 8000762:	bf00      	nop

08000764 <__aeabi_fsub>:
 8000764:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000768 <__addsf3>:
 8000768:	0042      	lsls	r2, r0, #1
 800076a:	bf1f      	itttt	ne
 800076c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000770:	ea92 0f03 	teqne	r2, r3
 8000774:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000778:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800077c:	d06a      	beq.n	8000854 <__addsf3+0xec>
 800077e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000782:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000786:	bfc1      	itttt	gt
 8000788:	18d2      	addgt	r2, r2, r3
 800078a:	4041      	eorgt	r1, r0
 800078c:	4048      	eorgt	r0, r1
 800078e:	4041      	eorgt	r1, r0
 8000790:	bfb8      	it	lt
 8000792:	425b      	neglt	r3, r3
 8000794:	2b19      	cmp	r3, #25
 8000796:	bf88      	it	hi
 8000798:	4770      	bxhi	lr
 800079a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800079e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80007a6:	bf18      	it	ne
 80007a8:	4240      	negne	r0, r0
 80007aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80007b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80007b6:	bf18      	it	ne
 80007b8:	4249      	negne	r1, r1
 80007ba:	ea92 0f03 	teq	r2, r3
 80007be:	d03f      	beq.n	8000840 <__addsf3+0xd8>
 80007c0:	f1a2 0201 	sub.w	r2, r2, #1
 80007c4:	fa41 fc03 	asr.w	ip, r1, r3
 80007c8:	eb10 000c 	adds.w	r0, r0, ip
 80007cc:	f1c3 0320 	rsb	r3, r3, #32
 80007d0:	fa01 f103 	lsl.w	r1, r1, r3
 80007d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	d502      	bpl.n	80007e0 <__addsf3+0x78>
 80007da:	4249      	negs	r1, r1
 80007dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80007e4:	d313      	bcc.n	800080e <__addsf3+0xa6>
 80007e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80007ea:	d306      	bcc.n	80007fa <__addsf3+0x92>
 80007ec:	0840      	lsrs	r0, r0, #1
 80007ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80007f2:	f102 0201 	add.w	r2, r2, #1
 80007f6:	2afe      	cmp	r2, #254	; 0xfe
 80007f8:	d251      	bcs.n	800089e <__addsf3+0x136>
 80007fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80007fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000802:	bf08      	it	eq
 8000804:	f020 0001 	biceq.w	r0, r0, #1
 8000808:	ea40 0003 	orr.w	r0, r0, r3
 800080c:	4770      	bx	lr
 800080e:	0049      	lsls	r1, r1, #1
 8000810:	eb40 0000 	adc.w	r0, r0, r0
 8000814:	3a01      	subs	r2, #1
 8000816:	bf28      	it	cs
 8000818:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800081c:	d2ed      	bcs.n	80007fa <__addsf3+0x92>
 800081e:	fab0 fc80 	clz	ip, r0
 8000822:	f1ac 0c08 	sub.w	ip, ip, #8
 8000826:	ebb2 020c 	subs.w	r2, r2, ip
 800082a:	fa00 f00c 	lsl.w	r0, r0, ip
 800082e:	bfaa      	itet	ge
 8000830:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000834:	4252      	neglt	r2, r2
 8000836:	4318      	orrge	r0, r3
 8000838:	bfbc      	itt	lt
 800083a:	40d0      	lsrlt	r0, r2
 800083c:	4318      	orrlt	r0, r3
 800083e:	4770      	bx	lr
 8000840:	f092 0f00 	teq	r2, #0
 8000844:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000848:	bf06      	itte	eq
 800084a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800084e:	3201      	addeq	r2, #1
 8000850:	3b01      	subne	r3, #1
 8000852:	e7b5      	b.n	80007c0 <__addsf3+0x58>
 8000854:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000858:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800085c:	bf18      	it	ne
 800085e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000862:	d021      	beq.n	80008a8 <__addsf3+0x140>
 8000864:	ea92 0f03 	teq	r2, r3
 8000868:	d004      	beq.n	8000874 <__addsf3+0x10c>
 800086a:	f092 0f00 	teq	r2, #0
 800086e:	bf08      	it	eq
 8000870:	4608      	moveq	r0, r1
 8000872:	4770      	bx	lr
 8000874:	ea90 0f01 	teq	r0, r1
 8000878:	bf1c      	itt	ne
 800087a:	2000      	movne	r0, #0
 800087c:	4770      	bxne	lr
 800087e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000882:	d104      	bne.n	800088e <__addsf3+0x126>
 8000884:	0040      	lsls	r0, r0, #1
 8000886:	bf28      	it	cs
 8000888:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800088c:	4770      	bx	lr
 800088e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000892:	bf3c      	itt	cc
 8000894:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000898:	4770      	bxcc	lr
 800089a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800089e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80008a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008a6:	4770      	bx	lr
 80008a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80008ac:	bf16      	itet	ne
 80008ae:	4608      	movne	r0, r1
 80008b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80008b4:	4601      	movne	r1, r0
 80008b6:	0242      	lsls	r2, r0, #9
 80008b8:	bf06      	itte	eq
 80008ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80008be:	ea90 0f01 	teqeq	r0, r1
 80008c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80008c6:	4770      	bx	lr

080008c8 <__aeabi_ui2f>:
 80008c8:	f04f 0300 	mov.w	r3, #0
 80008cc:	e004      	b.n	80008d8 <__aeabi_i2f+0x8>
 80008ce:	bf00      	nop

080008d0 <__aeabi_i2f>:
 80008d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80008d4:	bf48      	it	mi
 80008d6:	4240      	negmi	r0, r0
 80008d8:	ea5f 0c00 	movs.w	ip, r0
 80008dc:	bf08      	it	eq
 80008de:	4770      	bxeq	lr
 80008e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80008e4:	4601      	mov	r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	e01c      	b.n	8000926 <__aeabi_l2f+0x2a>

080008ec <__aeabi_ul2f>:
 80008ec:	ea50 0201 	orrs.w	r2, r0, r1
 80008f0:	bf08      	it	eq
 80008f2:	4770      	bxeq	lr
 80008f4:	f04f 0300 	mov.w	r3, #0
 80008f8:	e00a      	b.n	8000910 <__aeabi_l2f+0x14>
 80008fa:	bf00      	nop

080008fc <__aeabi_l2f>:
 80008fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000900:	bf08      	it	eq
 8000902:	4770      	bxeq	lr
 8000904:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000908:	d502      	bpl.n	8000910 <__aeabi_l2f+0x14>
 800090a:	4240      	negs	r0, r0
 800090c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000910:	ea5f 0c01 	movs.w	ip, r1
 8000914:	bf02      	ittt	eq
 8000916:	4684      	moveq	ip, r0
 8000918:	4601      	moveq	r1, r0
 800091a:	2000      	moveq	r0, #0
 800091c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000920:	bf08      	it	eq
 8000922:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000926:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800092a:	fabc f28c 	clz	r2, ip
 800092e:	3a08      	subs	r2, #8
 8000930:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000934:	db10      	blt.n	8000958 <__aeabi_l2f+0x5c>
 8000936:	fa01 fc02 	lsl.w	ip, r1, r2
 800093a:	4463      	add	r3, ip
 800093c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000940:	f1c2 0220 	rsb	r2, r2, #32
 8000944:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000948:	fa20 f202 	lsr.w	r2, r0, r2
 800094c:	eb43 0002 	adc.w	r0, r3, r2
 8000950:	bf08      	it	eq
 8000952:	f020 0001 	biceq.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	f102 0220 	add.w	r2, r2, #32
 800095c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000960:	f1c2 0220 	rsb	r2, r2, #32
 8000964:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000968:	fa21 f202 	lsr.w	r2, r1, r2
 800096c:	eb43 0002 	adc.w	r0, r3, r2
 8000970:	bf08      	it	eq
 8000972:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000976:	4770      	bx	lr

08000978 <__aeabi_fmul>:
 8000978:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800097c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000980:	bf1e      	ittt	ne
 8000982:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000986:	ea92 0f0c 	teqne	r2, ip
 800098a:	ea93 0f0c 	teqne	r3, ip
 800098e:	d06f      	beq.n	8000a70 <__aeabi_fmul+0xf8>
 8000990:	441a      	add	r2, r3
 8000992:	ea80 0c01 	eor.w	ip, r0, r1
 8000996:	0240      	lsls	r0, r0, #9
 8000998:	bf18      	it	ne
 800099a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800099e:	d01e      	beq.n	80009de <__aeabi_fmul+0x66>
 80009a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80009a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009ac:	fba0 3101 	umull	r3, r1, r0, r1
 80009b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80009b8:	bf3e      	ittt	cc
 80009ba:	0049      	lslcc	r1, r1, #1
 80009bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80009c0:	005b      	lslcc	r3, r3, #1
 80009c2:	ea40 0001 	orr.w	r0, r0, r1
 80009c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80009ca:	2afd      	cmp	r2, #253	; 0xfd
 80009cc:	d81d      	bhi.n	8000a0a <__aeabi_fmul+0x92>
 80009ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80009d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009d6:	bf08      	it	eq
 80009d8:	f020 0001 	biceq.w	r0, r0, #1
 80009dc:	4770      	bx	lr
 80009de:	f090 0f00 	teq	r0, #0
 80009e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009e6:	bf08      	it	eq
 80009e8:	0249      	lsleq	r1, r1, #9
 80009ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80009f2:	3a7f      	subs	r2, #127	; 0x7f
 80009f4:	bfc2      	ittt	gt
 80009f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80009fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009fe:	4770      	bxgt	lr
 8000a00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a04:	f04f 0300 	mov.w	r3, #0
 8000a08:	3a01      	subs	r2, #1
 8000a0a:	dc5d      	bgt.n	8000ac8 <__aeabi_fmul+0x150>
 8000a0c:	f112 0f19 	cmn.w	r2, #25
 8000a10:	bfdc      	itt	le
 8000a12:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a16:	4770      	bxle	lr
 8000a18:	f1c2 0200 	rsb	r2, r2, #0
 8000a1c:	0041      	lsls	r1, r0, #1
 8000a1e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a22:	f1c2 0220 	rsb	r2, r2, #32
 8000a26:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a2a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a2e:	f140 0000 	adc.w	r0, r0, #0
 8000a32:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a36:	bf08      	it	eq
 8000a38:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a3c:	4770      	bx	lr
 8000a3e:	f092 0f00 	teq	r2, #0
 8000a42:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a46:	bf02      	ittt	eq
 8000a48:	0040      	lsleq	r0, r0, #1
 8000a4a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a4e:	3a01      	subeq	r2, #1
 8000a50:	d0f9      	beq.n	8000a46 <__aeabi_fmul+0xce>
 8000a52:	ea40 000c 	orr.w	r0, r0, ip
 8000a56:	f093 0f00 	teq	r3, #0
 8000a5a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a5e:	bf02      	ittt	eq
 8000a60:	0049      	lsleq	r1, r1, #1
 8000a62:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a66:	3b01      	subeq	r3, #1
 8000a68:	d0f9      	beq.n	8000a5e <__aeabi_fmul+0xe6>
 8000a6a:	ea41 010c 	orr.w	r1, r1, ip
 8000a6e:	e78f      	b.n	8000990 <__aeabi_fmul+0x18>
 8000a70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a74:	ea92 0f0c 	teq	r2, ip
 8000a78:	bf18      	it	ne
 8000a7a:	ea93 0f0c 	teqne	r3, ip
 8000a7e:	d00a      	beq.n	8000a96 <__aeabi_fmul+0x11e>
 8000a80:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a84:	bf18      	it	ne
 8000a86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a8a:	d1d8      	bne.n	8000a3e <__aeabi_fmul+0xc6>
 8000a8c:	ea80 0001 	eor.w	r0, r0, r1
 8000a90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000a94:	4770      	bx	lr
 8000a96:	f090 0f00 	teq	r0, #0
 8000a9a:	bf17      	itett	ne
 8000a9c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	f091 0f00 	teqne	r1, #0
 8000aa6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000aaa:	d014      	beq.n	8000ad6 <__aeabi_fmul+0x15e>
 8000aac:	ea92 0f0c 	teq	r2, ip
 8000ab0:	d101      	bne.n	8000ab6 <__aeabi_fmul+0x13e>
 8000ab2:	0242      	lsls	r2, r0, #9
 8000ab4:	d10f      	bne.n	8000ad6 <__aeabi_fmul+0x15e>
 8000ab6:	ea93 0f0c 	teq	r3, ip
 8000aba:	d103      	bne.n	8000ac4 <__aeabi_fmul+0x14c>
 8000abc:	024b      	lsls	r3, r1, #9
 8000abe:	bf18      	it	ne
 8000ac0:	4608      	movne	r0, r1
 8000ac2:	d108      	bne.n	8000ad6 <__aeabi_fmul+0x15e>
 8000ac4:	ea80 0001 	eor.w	r0, r0, r1
 8000ac8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ada:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_fdiv>:
 8000ae0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ae4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ae8:	bf1e      	ittt	ne
 8000aea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000aee:	ea92 0f0c 	teqne	r2, ip
 8000af2:	ea93 0f0c 	teqne	r3, ip
 8000af6:	d069      	beq.n	8000bcc <__aeabi_fdiv+0xec>
 8000af8:	eba2 0203 	sub.w	r2, r2, r3
 8000afc:	ea80 0c01 	eor.w	ip, r0, r1
 8000b00:	0249      	lsls	r1, r1, #9
 8000b02:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b06:	d037      	beq.n	8000b78 <__aeabi_fdiv+0x98>
 8000b08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b0c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b10:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b14:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b18:	428b      	cmp	r3, r1
 8000b1a:	bf38      	it	cc
 8000b1c:	005b      	lslcc	r3, r3, #1
 8000b1e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b22:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b26:	428b      	cmp	r3, r1
 8000b28:	bf24      	itt	cs
 8000b2a:	1a5b      	subcs	r3, r3, r1
 8000b2c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b30:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b34:	bf24      	itt	cs
 8000b36:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b3a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b3e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b42:	bf24      	itt	cs
 8000b44:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b4c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b50:	bf24      	itt	cs
 8000b52:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b56:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b5a:	011b      	lsls	r3, r3, #4
 8000b5c:	bf18      	it	ne
 8000b5e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b62:	d1e0      	bne.n	8000b26 <__aeabi_fdiv+0x46>
 8000b64:	2afd      	cmp	r2, #253	; 0xfd
 8000b66:	f63f af50 	bhi.w	8000a0a <__aeabi_fmul+0x92>
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b7c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b80:	327f      	adds	r2, #127	; 0x7f
 8000b82:	bfc2      	ittt	gt
 8000b84:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b88:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b8c:	4770      	bxgt	lr
 8000b8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b92:	f04f 0300 	mov.w	r3, #0
 8000b96:	3a01      	subs	r2, #1
 8000b98:	e737      	b.n	8000a0a <__aeabi_fmul+0x92>
 8000b9a:	f092 0f00 	teq	r2, #0
 8000b9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ba2:	bf02      	ittt	eq
 8000ba4:	0040      	lsleq	r0, r0, #1
 8000ba6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000baa:	3a01      	subeq	r2, #1
 8000bac:	d0f9      	beq.n	8000ba2 <__aeabi_fdiv+0xc2>
 8000bae:	ea40 000c 	orr.w	r0, r0, ip
 8000bb2:	f093 0f00 	teq	r3, #0
 8000bb6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bba:	bf02      	ittt	eq
 8000bbc:	0049      	lsleq	r1, r1, #1
 8000bbe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000bc2:	3b01      	subeq	r3, #1
 8000bc4:	d0f9      	beq.n	8000bba <__aeabi_fdiv+0xda>
 8000bc6:	ea41 010c 	orr.w	r1, r1, ip
 8000bca:	e795      	b.n	8000af8 <__aeabi_fdiv+0x18>
 8000bcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000bd0:	ea92 0f0c 	teq	r2, ip
 8000bd4:	d108      	bne.n	8000be8 <__aeabi_fdiv+0x108>
 8000bd6:	0242      	lsls	r2, r0, #9
 8000bd8:	f47f af7d 	bne.w	8000ad6 <__aeabi_fmul+0x15e>
 8000bdc:	ea93 0f0c 	teq	r3, ip
 8000be0:	f47f af70 	bne.w	8000ac4 <__aeabi_fmul+0x14c>
 8000be4:	4608      	mov	r0, r1
 8000be6:	e776      	b.n	8000ad6 <__aeabi_fmul+0x15e>
 8000be8:	ea93 0f0c 	teq	r3, ip
 8000bec:	d104      	bne.n	8000bf8 <__aeabi_fdiv+0x118>
 8000bee:	024b      	lsls	r3, r1, #9
 8000bf0:	f43f af4c 	beq.w	8000a8c <__aeabi_fmul+0x114>
 8000bf4:	4608      	mov	r0, r1
 8000bf6:	e76e      	b.n	8000ad6 <__aeabi_fmul+0x15e>
 8000bf8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000bfc:	bf18      	it	ne
 8000bfe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c02:	d1ca      	bne.n	8000b9a <__aeabi_fdiv+0xba>
 8000c04:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c08:	f47f af5c 	bne.w	8000ac4 <__aeabi_fmul+0x14c>
 8000c0c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c10:	f47f af3c 	bne.w	8000a8c <__aeabi_fmul+0x114>
 8000c14:	e75f      	b.n	8000ad6 <__aeabi_fmul+0x15e>
 8000c16:	bf00      	nop

08000c18 <__aeabi_f2iz>:
 8000c18:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c1c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c20:	d30f      	bcc.n	8000c42 <__aeabi_f2iz+0x2a>
 8000c22:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c26:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_f2iz+0x30>
 8000c2c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c34:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c38:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3c:	bf18      	it	ne
 8000c3e:	4240      	negne	r0, r0
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr
 8000c48:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c4c:	d101      	bne.n	8000c52 <__aeabi_f2iz+0x3a>
 8000c4e:	0242      	lsls	r2, r0, #9
 8000c50:	d105      	bne.n	8000c5e <__aeabi_f2iz+0x46>
 8000c52:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c56:	bf08      	it	eq
 8000c58:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f04f 0000 	mov.w	r0, #0
 8000c62:	4770      	bx	lr

08000c64 <CI_writeSmallDataWithRegister>:
 * @brief Write small data to Computer Values
 * @param uartChannel -> get uart channel
 * @param data -> data to write
 * @return none
 */
void CI_writeSmallDataWithRegister(UART_HandleTypeDef *uartChannel, uint8_t data){
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	70fb      	strb	r3, [r7, #3]
	while((uartChannel->Instance->SR & USART_SR_TXE)!=USART_SR_TXE);
 8000c70:	bf00      	nop
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c7c:	2b80      	cmp	r3, #128	; 0x80
 8000c7e:	d1f8      	bne.n	8000c72 <CI_writeSmallDataWithRegister+0xe>
	uartChannel->Instance->DR=data;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	78fa      	ldrb	r2, [r7, #3]
 8000c86:	605a      	str	r2, [r3, #4]
	while((uartChannel->Instance->SR & USART_SR_TC)!=USART_SR_TC);
 8000c88:	bf00      	nop
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c94:	2b40      	cmp	r3, #64	; 0x40
 8000c96:	d1f8      	bne.n	8000c8a <CI_writeSmallDataWithRegister+0x26>
}
 8000c98:	bf00      	nop
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <CI_sendDataChannel>:
 * @param batt_per-> battery percent value
 * @return none
 */
uint32_t time1,time2,deltaTime;
void CI_sendDataChannel(uint16_t lenght, int32_t steer_poss,
		int32_t driver_poss, int32_t driver_speed,uint8_t batt_per){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	81fb      	strh	r3, [r7, #14]
	time1=HAL_GetTick();
 8000cb4:	f000 fcca 	bl	800164c <HAL_GetTick>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	4a3c      	ldr	r2, [pc, #240]	; (8000dac <CI_sendDataChannel+0x108>)
 8000cbc:	6013      	str	r3, [r2, #0]
	uint8_t sendBuff[] = { 0x43, 0X64,
 8000cbe:	2343      	movs	r3, #67	; 0x43
 8000cc0:	753b      	strb	r3, [r7, #20]
 8000cc2:	2364      	movs	r3, #100	; 0x64
 8000cc4:	757b      	strb	r3, [r7, #21]
 8000cc6:	89fb      	ldrh	r3, [r7, #14]
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	75bb      	strb	r3, [r7, #22]
 8000ccc:	89fb      	ldrh	r3, [r7, #14]
 8000cce:	0a1b      	lsrs	r3, r3, #8
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	75fb      	strb	r3, [r7, #23]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	763b      	strb	r3, [r7, #24]
			lenght & 0xFF,lenght >> 8,
			steer_poss & 0xFF,steer_poss >> 8,steer_poss >> 16,steer_poss >> 24,
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	121b      	asrs	r3, r3, #8
	uint8_t sendBuff[] = { 0x43, 0X64,
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	767b      	strb	r3, [r7, #25]
			steer_poss & 0xFF,steer_poss >> 8,steer_poss >> 16,steer_poss >> 24,
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	141b      	asrs	r3, r3, #16
	uint8_t sendBuff[] = { 0x43, 0X64,
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	76bb      	strb	r3, [r7, #26]
			steer_poss & 0xFF,steer_poss >> 8,steer_poss >> 16,steer_poss >> 24,
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	161b      	asrs	r3, r3, #24
	uint8_t sendBuff[] = { 0x43, 0X64,
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	76fb      	strb	r3, [r7, #27]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	773b      	strb	r3, [r7, #28]
			driver_poss & 0xFF,driver_poss >> 8,driver_poss >> 16,driver_poss >> 24,
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	121b      	asrs	r3, r3, #8
	uint8_t sendBuff[] = { 0x43, 0X64,
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	777b      	strb	r3, [r7, #29]
			driver_poss & 0xFF,driver_poss >> 8,driver_poss >> 16,driver_poss >> 24,
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	141b      	asrs	r3, r3, #16
	uint8_t sendBuff[] = { 0x43, 0X64,
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	77bb      	strb	r3, [r7, #30]
			driver_poss & 0xFF,driver_poss >> 8,driver_poss >> 16,driver_poss >> 24,
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	161b      	asrs	r3, r3, #24
	uint8_t sendBuff[] = { 0x43, 0X64,
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	77fb      	strb	r3, [r7, #31]
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	f887 3020 	strb.w	r3, [r7, #32]
			driver_speed & 0xFF,driver_speed >> 8,driver_speed >> 16,driver_speed >> 24,
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	121b      	asrs	r3, r3, #8
	uint8_t sendBuff[] = { 0x43, 0X64,
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			driver_speed & 0xFF,driver_speed >> 8,driver_speed >> 16,driver_speed >> 24,
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	141b      	asrs	r3, r3, #16
	uint8_t sendBuff[] = { 0x43, 0X64,
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			driver_speed & 0xFF,driver_speed >> 8,driver_speed >> 16,driver_speed >> 24,
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	161b      	asrs	r3, r3, #24
	uint8_t sendBuff[] = { 0x43, 0X64,
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000d38:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d3c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			batt_per };
	for (uint8_t counter = 0; counter < 17; counter++) {
 8000d40:	2300      	movs	r3, #0
 8000d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d46:	e012      	b.n	8000d6e <CI_sendDataChannel+0xca>
		CI_writeSmallDataWithRegister(&ComputerChannel, sendBuff[counter]);
 8000d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d4c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000d50:	4413      	add	r3, r2
 8000d52:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000d56:	4619      	mov	r1, r3
 8000d58:	4815      	ldr	r0, [pc, #84]	; (8000db0 <CI_sendDataChannel+0x10c>)
 8000d5a:	f7ff ff83 	bl	8000c64 <CI_writeSmallDataWithRegister>
	#if SEND_VAL_CHECK==0
		vTaskDelay(50);
 8000d5e:	2032      	movs	r0, #50	; 0x32
 8000d60:	f003 fcda 	bl	8004718 <vTaskDelay>
	for (uint8_t counter = 0; counter < 17; counter++) {
 8000d64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d68:	3301      	adds	r3, #1
 8000d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d72:	2b10      	cmp	r3, #16
 8000d74:	d9e8      	bls.n	8000d48 <CI_sendDataChannel+0xa4>
	#endif
	}
	time2=HAL_GetTick();
 8000d76:	f000 fc69 	bl	800164c <HAL_GetTick>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <CI_sendDataChannel+0x110>)
 8000d7e:	6013      	str	r3, [r2, #0]
	deltaTime=time2-time1;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <CI_sendDataChannel+0x110>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <CI_sendDataChannel+0x108>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <CI_sendDataChannel+0x114>)
 8000d8c:	6013      	str	r3, [r2, #0]
	if(deltaTime<10) vTaskDelay((10-deltaTime));
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <CI_sendDataChannel+0x114>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b09      	cmp	r3, #9
 8000d94:	d806      	bhi.n	8000da4 <CI_sendDataChannel+0x100>
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <CI_sendDataChannel+0x114>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f1c3 030a 	rsb	r3, r3, #10
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f003 fcba 	bl	8004718 <vTaskDelay>
}
 8000da4:	bf00      	nop
 8000da6:	3728      	adds	r7, #40	; 0x28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20003578 	.word	0x20003578
 8000db0:	200035d4 	.word	0x200035d4
 8000db4:	20003588 	.word	0x20003588
 8000db8:	2000358c 	.word	0x2000358c

08000dbc <CI_enableGetDataChannel>:
uint8_t  getTmpCH = 0;
/**
 * @brief set enable for MDI channel 1 receive
 * @return none
 */
void CI_enableGetDataChannel(void){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&ComputerChannel,&getTmpCH,1);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	4903      	ldr	r1, [pc, #12]	; (8000dd0 <CI_enableGetDataChannel+0x14>)
 8000dc4:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <CI_enableGetDataChannel+0x18>)
 8000dc6:	f001 fe4e 	bl	8002a66 <HAL_UART_Receive_IT>
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000002c 	.word	0x2000002c
 8000dd4:	200035d4 	.word	0x200035d4

08000dd8 <CI_getDataChannel_IT>:
static uint8_t tmpArr[12];
/**
 * @brief get to Motor Driver 1 values
 * @return none
 */
void CI_getDataChannel_IT(UART_HandleTypeDef *callBackHandle) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	volatile UART_HandleTypeDef *tmpHandle;
	tmpHandle = &ComputerChannel;
 8000de0:	4b37      	ldr	r3, [pc, #220]	; (8000ec0 <CI_getDataChannel_IT+0xe8>)
 8000de2:	60fb      	str	r3, [r7, #12]
	if(callBackHandle->Instance == tmpHandle->Instance){
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d163      	bne.n	8000eb8 <CI_getDataChannel_IT+0xe0>
		static uint8_t counter = 0, getTmpBeff = 0;
			if (0x64 == getTmpCH && 0x43 == getTmpBeff) {
 8000df0:	4b34      	ldr	r3, [pc, #208]	; (8000ec4 <CI_getDataChannel_IT+0xec>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b64      	cmp	r3, #100	; 0x64
 8000df6:	d10c      	bne.n	8000e12 <CI_getDataChannel_IT+0x3a>
 8000df8:	4b33      	ldr	r3, [pc, #204]	; (8000ec8 <CI_getDataChannel_IT+0xf0>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b43      	cmp	r3, #67	; 0x43
 8000dfe:	d108      	bne.n	8000e12 <CI_getDataChannel_IT+0x3a>
				tmpArr[0] = 0x43;
 8000e00:	4b32      	ldr	r3, [pc, #200]	; (8000ecc <CI_getDataChannel_IT+0xf4>)
 8000e02:	2243      	movs	r2, #67	; 0x43
 8000e04:	701a      	strb	r2, [r3, #0]
				tmpArr[1] = 0x64;
 8000e06:	4b31      	ldr	r3, [pc, #196]	; (8000ecc <CI_getDataChannel_IT+0xf4>)
 8000e08:	2264      	movs	r2, #100	; 0x64
 8000e0a:	705a      	strb	r2, [r3, #1]
					counter = 1;
 8000e0c:	4b30      	ldr	r3, [pc, #192]	; (8000ed0 <CI_getDataChannel_IT+0xf8>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	701a      	strb	r2, [r3, #0]
				}
			tmpArr[counter] = getTmpCH;
 8000e12:	4b2f      	ldr	r3, [pc, #188]	; (8000ed0 <CI_getDataChannel_IT+0xf8>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b2a      	ldr	r3, [pc, #168]	; (8000ec4 <CI_getDataChannel_IT+0xec>)
 8000e1a:	7819      	ldrb	r1, [r3, #0]
 8000e1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <CI_getDataChannel_IT+0xf4>)
 8000e1e:	5499      	strb	r1, [r3, r2]
				getTmpBeff = getTmpCH;
 8000e20:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <CI_getDataChannel_IT+0xec>)
 8000e22:	781a      	ldrb	r2, [r3, #0]
 8000e24:	4b28      	ldr	r3, [pc, #160]	; (8000ec8 <CI_getDataChannel_IT+0xf0>)
 8000e26:	701a      	strb	r2, [r3, #0]
				counter++;
 8000e28:	4b29      	ldr	r3, [pc, #164]	; (8000ed0 <CI_getDataChannel_IT+0xf8>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	4b27      	ldr	r3, [pc, #156]	; (8000ed0 <CI_getDataChannel_IT+0xf8>)
 8000e32:	701a      	strb	r2, [r3, #0]
				if (counter > 11) {
 8000e34:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <CI_getDataChannel_IT+0xf8>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b0b      	cmp	r3, #11
 8000e3a:	d938      	bls.n	8000eae <CI_getDataChannel_IT+0xd6>
					counter = 0;
 8000e3c:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <CI_getDataChannel_IT+0xf8>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	701a      	strb	r2, [r3, #0]
					if (0x43 == tmpArr[0] && 0x64 == tmpArr[1]) {
 8000e42:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <CI_getDataChannel_IT+0xf4>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b43      	cmp	r3, #67	; 0x43
 8000e48:	d131      	bne.n	8000eae <CI_getDataChannel_IT+0xd6>
 8000e4a:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <CI_getDataChannel_IT+0xf4>)
 8000e4c:	785b      	ldrb	r3, [r3, #1]
 8000e4e:	2b64      	cmp	r3, #100	; 0x64
 8000e50:	d12d      	bne.n	8000eae <CI_getDataChannel_IT+0xd6>
						getVals.size=(tmpArr[2] & 0xFF )| (tmpArr[3] << 8);
 8000e52:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <CI_getDataChannel_IT+0xf4>)
 8000e54:	789b      	ldrb	r3, [r3, #2]
 8000e56:	b21a      	sxth	r2, r3
 8000e58:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <CI_getDataChannel_IT+0xf4>)
 8000e5a:	78db      	ldrb	r3, [r3, #3]
 8000e5c:	021b      	lsls	r3, r3, #8
 8000e5e:	b21b      	sxth	r3, r3
 8000e60:	4313      	orrs	r3, r2
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <CI_getDataChannel_IT+0xfc>)
 8000e68:	801a      	strh	r2, [r3, #0]
						getVals.steer_pos=(tmpArr[4] & 0xFF )| (tmpArr[5] << 8) | (tmpArr[6] << 16) | (tmpArr[7] << 24);
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <CI_getDataChannel_IT+0xf4>)
 8000e6c:	791b      	ldrb	r3, [r3, #4]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <CI_getDataChannel_IT+0xf4>)
 8000e72:	795b      	ldrb	r3, [r3, #5]
 8000e74:	021b      	lsls	r3, r3, #8
 8000e76:	431a      	orrs	r2, r3
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <CI_getDataChannel_IT+0xf4>)
 8000e7a:	799b      	ldrb	r3, [r3, #6]
 8000e7c:	041b      	lsls	r3, r3, #16
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <CI_getDataChannel_IT+0xf4>)
 8000e82:	79db      	ldrb	r3, [r3, #7]
 8000e84:	061b      	lsls	r3, r3, #24
 8000e86:	4313      	orrs	r3, r2
 8000e88:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <CI_getDataChannel_IT+0xfc>)
 8000e8a:	6053      	str	r3, [r2, #4]
						getVals.drive_speed=(tmpArr[8] & 0xFF) | (tmpArr[9] << 8) | (tmpArr[10] << 16) | (tmpArr[11] << 24);
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <CI_getDataChannel_IT+0xf4>)
 8000e8e:	7a1b      	ldrb	r3, [r3, #8]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <CI_getDataChannel_IT+0xf4>)
 8000e94:	7a5b      	ldrb	r3, [r3, #9]
 8000e96:	021b      	lsls	r3, r3, #8
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <CI_getDataChannel_IT+0xf4>)
 8000e9c:	7a9b      	ldrb	r3, [r3, #10]
 8000e9e:	041b      	lsls	r3, r3, #16
 8000ea0:	431a      	orrs	r2, r3
 8000ea2:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <CI_getDataChannel_IT+0xf4>)
 8000ea4:	7adb      	ldrb	r3, [r3, #11]
 8000ea6:	061b      	lsls	r3, r3, #24
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <CI_getDataChannel_IT+0xfc>)
 8000eac:	6093      	str	r3, [r2, #8]

					}
				}
				HAL_UART_Receive_IT(callBackHandle, &getTmpCH, 1);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4904      	ldr	r1, [pc, #16]	; (8000ec4 <CI_getDataChannel_IT+0xec>)
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f001 fdd7 	bl	8002a66 <HAL_UART_Receive_IT>
	}
}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	200035d4 	.word	0x200035d4
 8000ec4:	2000002c 	.word	0x2000002c
 8000ec8:	2000003c 	.word	0x2000003c
 8000ecc:	20000030 	.word	0x20000030
 8000ed0:	2000003d 	.word	0x2000003d
 8000ed4:	2000357c 	.word	0x2000357c

08000ed8 <getComputerVals>:

Com_interface getComputerVals(void) {return getVals;}
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <getComputerVals+0x1c>)
 8000ee4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ee6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	2000357c 	.word	0x2000357c

08000ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efc:	f000 fb7e 	bl	80015fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f00:	f000 f81e 	bl	8000f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f04:	f000 f8e0 	bl	80010c8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000f08:	f000 f860 	bl	8000fcc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f0c:	f000 f888 	bl	8001020 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000f10:	f000 f8b0 	bl	8001074 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  tasks_init();
 8000f14:	f005 fbbe 	bl	8006694 <tasks_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f18:	f002 fa00 	bl	800331c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f1c:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <main+0x3c>)
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <main+0x40>)
 8000f22:	f002 fa61 	bl	80033e8 <osThreadNew>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <main+0x44>)
 8000f2a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f2c:	f002 fa28 	bl	8003380 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <main+0x38>
 8000f32:	bf00      	nop
 8000f34:	08006d3c 	.word	0x08006d3c
 8000f38:	0800121d 	.word	0x0800121d
 8000f3c:	20003590 	.word	0x20003590

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b090      	sub	sp, #64	; 0x40
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 0318 	add.w	r3, r7, #24
 8000f4a:	2228      	movs	r2, #40	; 0x28
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f005 fe84 	bl	8006c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f62:	2301      	movs	r3, #1
 8000f64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f70:	2301      	movs	r3, #1
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f74:	2302      	movs	r3, #2
 8000f76:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f7e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f84:	f107 0318 	add.w	r3, r7, #24
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 fe8b 	bl	8001ca4 <HAL_RCC_OscConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f94:	f000 f95c 	bl	8001250 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f98:	230f      	movs	r3, #15
 8000f9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 f8f6 	bl	80021a4 <HAL_RCC_ClockConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000fbe:	f000 f947 	bl	8001250 <Error_Handler>
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3740      	adds	r7, #64	; 0x40
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_USART1_UART_Init+0x4c>)
 8000fd2:	4a12      	ldr	r2, [pc, #72]	; (800101c <MX_USART1_UART_Init+0x50>)
 8000fd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <MX_USART1_UART_Init+0x4c>)
 8000fd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <MX_USART1_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_USART1_UART_Init+0x4c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <MX_USART1_UART_Init+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_USART1_UART_Init+0x4c>)
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <MX_USART1_UART_Init+0x4c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MX_USART1_UART_Init+0x4c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_USART1_UART_Init+0x4c>)
 8001004:	f001 fce2 	bl	80029cc <HAL_UART_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800100e:	f000 f91f 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200035d4 	.word	0x200035d4
 800101c:	40013800 	.word	0x40013800

08001020 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001026:	4a12      	ldr	r2, [pc, #72]	; (8001070 <MX_USART2_UART_Init+0x50>)
 8001028:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800102a:	4b10      	ldr	r3, [pc, #64]	; (800106c <MX_USART2_UART_Init+0x4c>)
 800102c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001030:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <MX_USART2_UART_Init+0x4c>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800103e:	4b0b      	ldr	r3, [pc, #44]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001044:	4b09      	ldr	r3, [pc, #36]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001046:	220c      	movs	r2, #12
 8001048:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <MX_USART2_UART_Init+0x4c>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001058:	f001 fcb8 	bl	80029cc <HAL_UART_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001062:	f000 f8f5 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20003614 	.word	0x20003614
 8001070:	40004400 	.word	0x40004400

08001074 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_USART3_UART_Init+0x4c>)
 800107a:	4a12      	ldr	r2, [pc, #72]	; (80010c4 <MX_USART3_UART_Init+0x50>)
 800107c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <MX_USART3_UART_Init+0x4c>)
 8001080:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001084:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_USART3_UART_Init+0x4c>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_USART3_UART_Init+0x4c>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <MX_USART3_UART_Init+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_USART3_UART_Init+0x4c>)
 800109a:	220c      	movs	r2, #12
 800109c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <MX_USART3_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_USART3_UART_Init+0x4c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <MX_USART3_UART_Init+0x4c>)
 80010ac:	f001 fc8e 	bl	80029cc <HAL_UART_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010b6:	f000 f8cb 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20003594 	.word	0x20003594
 80010c4:	40004800 	.word	0x40004800

080010c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	f107 0310 	add.w	r3, r7, #16
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010dc:	4b4b      	ldr	r3, [pc, #300]	; (800120c <MX_GPIO_Init+0x144>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a4a      	ldr	r2, [pc, #296]	; (800120c <MX_GPIO_Init+0x144>)
 80010e2:	f043 0310 	orr.w	r3, r3, #16
 80010e6:	6193      	str	r3, [r2, #24]
 80010e8:	4b48      	ldr	r3, [pc, #288]	; (800120c <MX_GPIO_Init+0x144>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f003 0310 	and.w	r3, r3, #16
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f4:	4b45      	ldr	r3, [pc, #276]	; (800120c <MX_GPIO_Init+0x144>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	4a44      	ldr	r2, [pc, #272]	; (800120c <MX_GPIO_Init+0x144>)
 80010fa:	f043 0320 	orr.w	r3, r3, #32
 80010fe:	6193      	str	r3, [r2, #24]
 8001100:	4b42      	ldr	r3, [pc, #264]	; (800120c <MX_GPIO_Init+0x144>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	f003 0320 	and.w	r3, r3, #32
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110c:	4b3f      	ldr	r3, [pc, #252]	; (800120c <MX_GPIO_Init+0x144>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a3e      	ldr	r2, [pc, #248]	; (800120c <MX_GPIO_Init+0x144>)
 8001112:	f043 0304 	orr.w	r3, r3, #4
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b3c      	ldr	r3, [pc, #240]	; (800120c <MX_GPIO_Init+0x144>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001124:	4b39      	ldr	r3, [pc, #228]	; (800120c <MX_GPIO_Init+0x144>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a38      	ldr	r2, [pc, #224]	; (800120c <MX_GPIO_Init+0x144>)
 800112a:	f043 0308 	orr.w	r3, r3, #8
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b36      	ldr	r3, [pc, #216]	; (800120c <MX_GPIO_Init+0x144>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0308 	and.w	r3, r3, #8
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001142:	4833      	ldr	r0, [pc, #204]	; (8001210 <MX_GPIO_Init+0x148>)
 8001144:	f000 fd7d 	bl	8001c42 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, relay_1_Pin|relay_2_Pin|relay_3_Pin|relay_4_Pin, GPIO_PIN_SET);
 8001148:	2201      	movs	r2, #1
 800114a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800114e:	4831      	ldr	r0, [pc, #196]	; (8001214 <MX_GPIO_Init+0x14c>)
 8001150:	f000 fd77 	bl	8001c42 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, relay_5_Pin|relay_6_Pin|relay_7_Pin|relay_8_Pin, GPIO_PIN_SET);
 8001154:	2201      	movs	r2, #1
 8001156:	f44f 4119 	mov.w	r1, #39168	; 0x9900
 800115a:	482f      	ldr	r0, [pc, #188]	; (8001218 <MX_GPIO_Init+0x150>)
 800115c:	f000 fd71 	bl	8001c42 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 8001160:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001164:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001166:	2301      	movs	r3, #1
 8001168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2302      	movs	r3, #2
 8001170:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	4619      	mov	r1, r3
 8001178:	4825      	ldr	r0, [pc, #148]	; (8001210 <MX_GPIO_Init+0x148>)
 800117a:	f000 fbc7 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : switch_7_Pin switch_6_Pin switch_5_Pin switch_3_Pin */
  GPIO_InitStruct.Pin = switch_7_Pin|switch_6_Pin|switch_5_Pin|switch_3_Pin;
 800117e:	23b2      	movs	r3, #178	; 0xb2
 8001180:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001186:	2301      	movs	r3, #1
 8001188:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 0310 	add.w	r3, r7, #16
 800118e:	4619      	mov	r1, r3
 8001190:	4821      	ldr	r0, [pc, #132]	; (8001218 <MX_GPIO_Init+0x150>)
 8001192:	f000 fbbb 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : switch_2_Pin switch_1_Pin switch_8_Pin */
  GPIO_InitStruct.Pin = switch_2_Pin|switch_1_Pin|switch_8_Pin;
 8001196:	230b      	movs	r3, #11
 8001198:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800119e:	2301      	movs	r3, #1
 80011a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a2:	f107 0310 	add.w	r3, r7, #16
 80011a6:	4619      	mov	r1, r3
 80011a8:	481a      	ldr	r0, [pc, #104]	; (8001214 <MX_GPIO_Init+0x14c>)
 80011aa:	f000 fbaf 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : relay_1_Pin relay_2_Pin relay_3_Pin relay_4_Pin */
  GPIO_InitStruct.Pin = relay_1_Pin|relay_2_Pin|relay_3_Pin|relay_4_Pin;
 80011ae:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80011b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2302      	movs	r3, #2
 80011be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	4619      	mov	r1, r3
 80011c6:	4813      	ldr	r0, [pc, #76]	; (8001214 <MX_GPIO_Init+0x14c>)
 80011c8:	f000 fba0 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : relay_5_Pin relay_6_Pin relay_7_Pin relay_8_Pin */
  GPIO_InitStruct.Pin = relay_5_Pin|relay_6_Pin|relay_7_Pin|relay_8_Pin;
 80011cc:	f44f 4319 	mov.w	r3, #39168	; 0x9900
 80011d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2302      	movs	r3, #2
 80011dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	4619      	mov	r1, r3
 80011e4:	480c      	ldr	r0, [pc, #48]	; (8001218 <MX_GPIO_Init+0x150>)
 80011e6:	f000 fb91 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pin : switch_4_Pin */
  GPIO_InitStruct.Pin = switch_4_Pin;
 80011ea:	2310      	movs	r3, #16
 80011ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(switch_4_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_GPIO_Init+0x14c>)
 80011fe:	f000 fb85 	bl	800190c <HAL_GPIO_Init>

}
 8001202:	bf00      	nop
 8001204:	3720      	adds	r7, #32
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000
 8001210:	40011000 	.word	0x40011000
 8001214:	40010c00 	.word	0x40010c00
 8001218:	40010800 	.word	0x40010800

0800121c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001224:	2001      	movs	r0, #1
 8001226:	f002 f989 	bl	800353c <osDelay>
 800122a:	e7fb      	b.n	8001224 <StartDefaultTask+0x8>

0800122c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d101      	bne.n	8001242 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800123e:	f000 f9f3 	bl	8001628 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40012c00 	.word	0x40012c00

08001250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001254:	b672      	cpsid	i
}
 8001256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001258:	e7fe      	b.n	8001258 <Error_Handler+0x8>
	...

0800125c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <HAL_MspInit+0x68>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	4a17      	ldr	r2, [pc, #92]	; (80012c4 <HAL_MspInit+0x68>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6193      	str	r3, [r2, #24]
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <HAL_MspInit+0x68>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_MspInit+0x68>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	4a11      	ldr	r2, [pc, #68]	; (80012c4 <HAL_MspInit+0x68>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001284:	61d3      	str	r3, [r2, #28]
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <HAL_MspInit+0x68>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	210f      	movs	r1, #15
 8001296:	f06f 0001 	mvn.w	r0, #1
 800129a:	f000 fa96 	bl	80017ca <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_MspInit+0x6c>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <HAL_MspInit+0x6c>)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40010000 	.word	0x40010000

080012cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08c      	sub	sp, #48	; 0x30
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 0320 	add.w	r3, r7, #32
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a5f      	ldr	r2, [pc, #380]	; (8001464 <HAL_UART_MspInit+0x198>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d13a      	bne.n	8001362 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012ec:	4b5e      	ldr	r3, [pc, #376]	; (8001468 <HAL_UART_MspInit+0x19c>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4a5d      	ldr	r2, [pc, #372]	; (8001468 <HAL_UART_MspInit+0x19c>)
 80012f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f6:	6193      	str	r3, [r2, #24]
 80012f8:	4b5b      	ldr	r3, [pc, #364]	; (8001468 <HAL_UART_MspInit+0x19c>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001300:	61fb      	str	r3, [r7, #28]
 8001302:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001304:	4b58      	ldr	r3, [pc, #352]	; (8001468 <HAL_UART_MspInit+0x19c>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	4a57      	ldr	r2, [pc, #348]	; (8001468 <HAL_UART_MspInit+0x19c>)
 800130a:	f043 0304 	orr.w	r3, r3, #4
 800130e:	6193      	str	r3, [r2, #24]
 8001310:	4b55      	ldr	r3, [pc, #340]	; (8001468 <HAL_UART_MspInit+0x19c>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	61bb      	str	r3, [r7, #24]
 800131a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800131c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001326:	2303      	movs	r3, #3
 8001328:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 0320 	add.w	r3, r7, #32
 800132e:	4619      	mov	r1, r3
 8001330:	484e      	ldr	r0, [pc, #312]	; (800146c <HAL_UART_MspInit+0x1a0>)
 8001332:	f000 faeb 	bl	800190c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800133a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133c:	2300      	movs	r3, #0
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	f107 0320 	add.w	r3, r7, #32
 8001348:	4619      	mov	r1, r3
 800134a:	4848      	ldr	r0, [pc, #288]	; (800146c <HAL_UART_MspInit+0x1a0>)
 800134c:	f000 fade 	bl	800190c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	2105      	movs	r1, #5
 8001354:	2025      	movs	r0, #37	; 0x25
 8001356:	f000 fa38 	bl	80017ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800135a:	2025      	movs	r0, #37	; 0x25
 800135c:	f000 fa51 	bl	8001802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001360:	e07c      	b.n	800145c <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a42      	ldr	r2, [pc, #264]	; (8001470 <HAL_UART_MspInit+0x1a4>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d138      	bne.n	80013de <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 800136c:	4b3e      	ldr	r3, [pc, #248]	; (8001468 <HAL_UART_MspInit+0x19c>)
 800136e:	69db      	ldr	r3, [r3, #28]
 8001370:	4a3d      	ldr	r2, [pc, #244]	; (8001468 <HAL_UART_MspInit+0x19c>)
 8001372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001376:	61d3      	str	r3, [r2, #28]
 8001378:	4b3b      	ldr	r3, [pc, #236]	; (8001468 <HAL_UART_MspInit+0x19c>)
 800137a:	69db      	ldr	r3, [r3, #28]
 800137c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001380:	617b      	str	r3, [r7, #20]
 8001382:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001384:	4b38      	ldr	r3, [pc, #224]	; (8001468 <HAL_UART_MspInit+0x19c>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a37      	ldr	r2, [pc, #220]	; (8001468 <HAL_UART_MspInit+0x19c>)
 800138a:	f043 0304 	orr.w	r3, r3, #4
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b35      	ldr	r3, [pc, #212]	; (8001468 <HAL_UART_MspInit+0x19c>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800139c:	2304      	movs	r3, #4
 800139e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a8:	f107 0320 	add.w	r3, r7, #32
 80013ac:	4619      	mov	r1, r3
 80013ae:	482f      	ldr	r0, [pc, #188]	; (800146c <HAL_UART_MspInit+0x1a0>)
 80013b0:	f000 faac 	bl	800190c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013b4:	2308      	movs	r3, #8
 80013b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b8:	2300      	movs	r3, #0
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c0:	f107 0320 	add.w	r3, r7, #32
 80013c4:	4619      	mov	r1, r3
 80013c6:	4829      	ldr	r0, [pc, #164]	; (800146c <HAL_UART_MspInit+0x1a0>)
 80013c8:	f000 faa0 	bl	800190c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2105      	movs	r1, #5
 80013d0:	2026      	movs	r0, #38	; 0x26
 80013d2:	f000 f9fa 	bl	80017ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013d6:	2026      	movs	r0, #38	; 0x26
 80013d8:	f000 fa13 	bl	8001802 <HAL_NVIC_EnableIRQ>
}
 80013dc:	e03e      	b.n	800145c <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a24      	ldr	r2, [pc, #144]	; (8001474 <HAL_UART_MspInit+0x1a8>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d139      	bne.n	800145c <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013e8:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <HAL_UART_MspInit+0x19c>)
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	4a1e      	ldr	r2, [pc, #120]	; (8001468 <HAL_UART_MspInit+0x19c>)
 80013ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f2:	61d3      	str	r3, [r2, #28]
 80013f4:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <HAL_UART_MspInit+0x19c>)
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_UART_MspInit+0x19c>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a18      	ldr	r2, [pc, #96]	; (8001468 <HAL_UART_MspInit+0x19c>)
 8001406:	f043 0308 	orr.w	r3, r3, #8
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b16      	ldr	r3, [pc, #88]	; (8001468 <HAL_UART_MspInit+0x19c>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0308 	and.w	r3, r3, #8
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800141c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001426:	f107 0320 	add.w	r3, r7, #32
 800142a:	4619      	mov	r1, r3
 800142c:	4812      	ldr	r0, [pc, #72]	; (8001478 <HAL_UART_MspInit+0x1ac>)
 800142e:	f000 fa6d 	bl	800190c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001432:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001438:	2300      	movs	r3, #0
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001440:	f107 0320 	add.w	r3, r7, #32
 8001444:	4619      	mov	r1, r3
 8001446:	480c      	ldr	r0, [pc, #48]	; (8001478 <HAL_UART_MspInit+0x1ac>)
 8001448:	f000 fa60 	bl	800190c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2105      	movs	r1, #5
 8001450:	2027      	movs	r0, #39	; 0x27
 8001452:	f000 f9ba 	bl	80017ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001456:	2027      	movs	r0, #39	; 0x27
 8001458:	f000 f9d3 	bl	8001802 <HAL_NVIC_EnableIRQ>
}
 800145c:	bf00      	nop
 800145e:	3730      	adds	r7, #48	; 0x30
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40013800 	.word	0x40013800
 8001468:	40021000 	.word	0x40021000
 800146c:	40010800 	.word	0x40010800
 8001470:	40004400 	.word	0x40004400
 8001474:	40004800 	.word	0x40004800
 8001478:	40010c00 	.word	0x40010c00

0800147c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08c      	sub	sp, #48	; 0x30
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800148c:	2200      	movs	r2, #0
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	2019      	movs	r0, #25
 8001492:	f000 f99a 	bl	80017ca <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001496:	2019      	movs	r0, #25
 8001498:	f000 f9b3 	bl	8001802 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800149c:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <HAL_InitTick+0x9c>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	4a1d      	ldr	r2, [pc, #116]	; (8001518 <HAL_InitTick+0x9c>)
 80014a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014a6:	6193      	str	r3, [r2, #24]
 80014a8:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <HAL_InitTick+0x9c>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014b4:	f107 0210 	add.w	r2, r7, #16
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4611      	mov	r1, r2
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 ffec 	bl	800249c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80014c4:	f000 ffd6 	bl	8002474 <HAL_RCC_GetPCLK2Freq>
 80014c8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014cc:	4a13      	ldr	r2, [pc, #76]	; (800151c <HAL_InitTick+0xa0>)
 80014ce:	fba2 2303 	umull	r2, r3, r2, r3
 80014d2:	0c9b      	lsrs	r3, r3, #18
 80014d4:	3b01      	subs	r3, #1
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_InitTick+0xa4>)
 80014da:	4a12      	ldr	r2, [pc, #72]	; (8001524 <HAL_InitTick+0xa8>)
 80014dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <HAL_InitTick+0xa4>)
 80014e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014e4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80014e6:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <HAL_InitTick+0xa4>)
 80014e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ea:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <HAL_InitTick+0xa4>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <HAL_InitTick+0xa4>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80014f8:	4809      	ldr	r0, [pc, #36]	; (8001520 <HAL_InitTick+0xa4>)
 80014fa:	f001 f81d 	bl	8002538 <HAL_TIM_Base_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d104      	bne.n	800150e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001504:	4806      	ldr	r0, [pc, #24]	; (8001520 <HAL_InitTick+0xa4>)
 8001506:	f001 f86f 	bl	80025e8 <HAL_TIM_Base_Start_IT>
 800150a:	4603      	mov	r3, r0
 800150c:	e000      	b.n	8001510 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
}
 8001510:	4618      	mov	r0, r3
 8001512:	3730      	adds	r7, #48	; 0x30
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40021000 	.word	0x40021000
 800151c:	431bde83 	.word	0x431bde83
 8001520:	20003654 	.word	0x20003654
 8001524:	40012c00 	.word	0x40012c00

08001528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800152c:	e7fe      	b.n	800152c <NMI_Handler+0x4>

0800152e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001532:	e7fe      	b.n	8001532 <HardFault_Handler+0x4>

08001534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <MemManage_Handler+0x4>

0800153a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <BusFault_Handler+0x4>

08001540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <UsageFault_Handler+0x4>

08001546 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr
	...

08001554 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <TIM1_UP_IRQHandler+0x10>)
 800155a:	f001 f897 	bl	800268c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20003654 	.word	0x20003654

08001568 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <USART1_IRQHandler+0x10>)
 800156e:	f001 facf 	bl	8002b10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200035d4 	.word	0x200035d4

0800157c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <USART2_IRQHandler+0x10>)
 8001582:	f001 fac5 	bl	8002b10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20003614 	.word	0x20003614

08001590 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <USART3_IRQHandler+0x10>)
 8001596:	f001 fabb 	bl	8002b10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20003594 	.word	0x20003594

080015a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015b2:	e003      	b.n	80015bc <LoopCopyDataInit>

080015b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015ba:	3104      	adds	r1, #4

080015bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015bc:	480a      	ldr	r0, [pc, #40]	; (80015e8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015be:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015c4:	d3f6      	bcc.n	80015b4 <CopyDataInit>
  ldr r2, =_sbss
 80015c6:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80015c8:	e002      	b.n	80015d0 <LoopFillZerobss>

080015ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  str r3, [r2], #4
 80015cc:	f842 3b04 	str.w	r3, [r2], #4

080015d0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80015d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80015d4:	d3f9      	bcc.n	80015ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015d6:	f7ff ffe5 	bl	80015a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015da:	f005 fb0d 	bl	8006bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015de:	f7ff fc8b 	bl	8000ef8 <main>
  bx lr
 80015e2:	4770      	bx	lr
  ldr r3, =_sidata
 80015e4:	08006d80 	.word	0x08006d80
  ldr r0, =_sdata
 80015e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80015ec:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80015f0:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80015f4:	20003760 	.word	0x20003760

080015f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015f8:	e7fe      	b.n	80015f8 <ADC1_2_IRQHandler>
	...

080015fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <HAL_Init+0x28>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a07      	ldr	r2, [pc, #28]	; (8001624 <HAL_Init+0x28>)
 8001606:	f043 0310 	orr.w	r3, r3, #16
 800160a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800160c:	2003      	movs	r0, #3
 800160e:	f000 f8d1 	bl	80017b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001612:	2000      	movs	r0, #0
 8001614:	f7ff ff32 	bl	800147c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001618:	f7ff fe20 	bl	800125c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40022000 	.word	0x40022000

08001628 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <HAL_IncTick+0x1c>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b05      	ldr	r3, [pc, #20]	; (8001648 <HAL_IncTick+0x20>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4413      	add	r3, r2
 8001638:	4a03      	ldr	r2, [pc, #12]	; (8001648 <HAL_IncTick+0x20>)
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr
 8001644:	20000008 	.word	0x20000008
 8001648:	2000369c 	.word	0x2000369c

0800164c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return uwTick;
 8001650:	4b02      	ldr	r3, [pc, #8]	; (800165c <HAL_GetTick+0x10>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	2000369c 	.word	0x2000369c

08001660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800167c:	4013      	ands	r3, r2
 800167e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800168c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001692:	4a04      	ldr	r2, [pc, #16]	; (80016a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	60d3      	str	r3, [r2, #12]
}
 8001698:	bf00      	nop
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	0a1b      	lsrs	r3, r3, #8
 80016b2:	f003 0307 	and.w	r3, r3, #7
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	db0b      	blt.n	80016ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	f003 021f 	and.w	r2, r3, #31
 80016dc:	4906      	ldr	r1, [pc, #24]	; (80016f8 <__NVIC_EnableIRQ+0x34>)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	095b      	lsrs	r3, r3, #5
 80016e4:	2001      	movs	r0, #1
 80016e6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	e000e100 	.word	0xe000e100

080016fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	6039      	str	r1, [r7, #0]
 8001706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170c:	2b00      	cmp	r3, #0
 800170e:	db0a      	blt.n	8001726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	b2da      	uxtb	r2, r3
 8001714:	490c      	ldr	r1, [pc, #48]	; (8001748 <__NVIC_SetPriority+0x4c>)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	0112      	lsls	r2, r2, #4
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	440b      	add	r3, r1
 8001720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001724:	e00a      	b.n	800173c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4908      	ldr	r1, [pc, #32]	; (800174c <__NVIC_SetPriority+0x50>)
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	3b04      	subs	r3, #4
 8001734:	0112      	lsls	r2, r2, #4
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	440b      	add	r3, r1
 800173a:	761a      	strb	r2, [r3, #24]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000e100 	.word	0xe000e100
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001750:	b480      	push	{r7}
 8001752:	b089      	sub	sp, #36	; 0x24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f1c3 0307 	rsb	r3, r3, #7
 800176a:	2b04      	cmp	r3, #4
 800176c:	bf28      	it	cs
 800176e:	2304      	movcs	r3, #4
 8001770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3304      	adds	r3, #4
 8001776:	2b06      	cmp	r3, #6
 8001778:	d902      	bls.n	8001780 <NVIC_EncodePriority+0x30>
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3b03      	subs	r3, #3
 800177e:	e000      	b.n	8001782 <NVIC_EncodePriority+0x32>
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001784:	f04f 32ff 	mov.w	r2, #4294967295
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43da      	mvns	r2, r3
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	401a      	ands	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001798:	f04f 31ff 	mov.w	r1, #4294967295
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	fa01 f303 	lsl.w	r3, r1, r3
 80017a2:	43d9      	mvns	r1, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	4313      	orrs	r3, r2
         );
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3724      	adds	r7, #36	; 0x24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ff4f 	bl	8001660 <__NVIC_SetPriorityGrouping>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b086      	sub	sp, #24
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017dc:	f7ff ff64 	bl	80016a8 <__NVIC_GetPriorityGrouping>
 80017e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	6978      	ldr	r0, [r7, #20]
 80017e8:	f7ff ffb2 	bl	8001750 <NVIC_EncodePriority>
 80017ec:	4602      	mov	r2, r0
 80017ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff81 	bl	80016fc <__NVIC_SetPriority>
}
 80017fa:	bf00      	nop
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff57 	bl	80016c4 <__NVIC_EnableIRQ>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001828:	2300      	movs	r3, #0
 800182a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001832:	2b02      	cmp	r3, #2
 8001834:	d005      	beq.n	8001842 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2204      	movs	r2, #4
 800183a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	73fb      	strb	r3, [r7, #15]
 8001840:	e051      	b.n	80018e6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 020e 	bic.w	r2, r2, #14
 8001850:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 0201 	bic.w	r2, r2, #1
 8001860:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a22      	ldr	r2, [pc, #136]	; (80018f0 <HAL_DMA_Abort_IT+0xd0>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d029      	beq.n	80018c0 <HAL_DMA_Abort_IT+0xa0>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a20      	ldr	r2, [pc, #128]	; (80018f4 <HAL_DMA_Abort_IT+0xd4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d022      	beq.n	80018bc <HAL_DMA_Abort_IT+0x9c>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a1f      	ldr	r2, [pc, #124]	; (80018f8 <HAL_DMA_Abort_IT+0xd8>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d01a      	beq.n	80018b6 <HAL_DMA_Abort_IT+0x96>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a1d      	ldr	r2, [pc, #116]	; (80018fc <HAL_DMA_Abort_IT+0xdc>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d012      	beq.n	80018b0 <HAL_DMA_Abort_IT+0x90>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a1c      	ldr	r2, [pc, #112]	; (8001900 <HAL_DMA_Abort_IT+0xe0>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d00a      	beq.n	80018aa <HAL_DMA_Abort_IT+0x8a>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a1a      	ldr	r2, [pc, #104]	; (8001904 <HAL_DMA_Abort_IT+0xe4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d102      	bne.n	80018a4 <HAL_DMA_Abort_IT+0x84>
 800189e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018a2:	e00e      	b.n	80018c2 <HAL_DMA_Abort_IT+0xa2>
 80018a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018a8:	e00b      	b.n	80018c2 <HAL_DMA_Abort_IT+0xa2>
 80018aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ae:	e008      	b.n	80018c2 <HAL_DMA_Abort_IT+0xa2>
 80018b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b4:	e005      	b.n	80018c2 <HAL_DMA_Abort_IT+0xa2>
 80018b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ba:	e002      	b.n	80018c2 <HAL_DMA_Abort_IT+0xa2>
 80018bc:	2310      	movs	r3, #16
 80018be:	e000      	b.n	80018c2 <HAL_DMA_Abort_IT+0xa2>
 80018c0:	2301      	movs	r3, #1
 80018c2:	4a11      	ldr	r2, [pc, #68]	; (8001908 <HAL_DMA_Abort_IT+0xe8>)
 80018c4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	4798      	blx	r3
    } 
  }
  return status;
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40020008 	.word	0x40020008
 80018f4:	4002001c 	.word	0x4002001c
 80018f8:	40020030 	.word	0x40020030
 80018fc:	40020044 	.word	0x40020044
 8001900:	40020058 	.word	0x40020058
 8001904:	4002006c 	.word	0x4002006c
 8001908:	40020000 	.word	0x40020000

0800190c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800190c:	b480      	push	{r7}
 800190e:	b08b      	sub	sp, #44	; 0x2c
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001916:	2300      	movs	r3, #0
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800191a:	2300      	movs	r3, #0
 800191c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191e:	e169      	b.n	8001bf4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001920:	2201      	movs	r2, #1
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	429a      	cmp	r2, r3
 800193a:	f040 8158 	bne.w	8001bee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4a9a      	ldr	r2, [pc, #616]	; (8001bac <HAL_GPIO_Init+0x2a0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d05e      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 8001948:	4a98      	ldr	r2, [pc, #608]	; (8001bac <HAL_GPIO_Init+0x2a0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d875      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 800194e:	4a98      	ldr	r2, [pc, #608]	; (8001bb0 <HAL_GPIO_Init+0x2a4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d058      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 8001954:	4a96      	ldr	r2, [pc, #600]	; (8001bb0 <HAL_GPIO_Init+0x2a4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d86f      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 800195a:	4a96      	ldr	r2, [pc, #600]	; (8001bb4 <HAL_GPIO_Init+0x2a8>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d052      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 8001960:	4a94      	ldr	r2, [pc, #592]	; (8001bb4 <HAL_GPIO_Init+0x2a8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d869      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 8001966:	4a94      	ldr	r2, [pc, #592]	; (8001bb8 <HAL_GPIO_Init+0x2ac>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d04c      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 800196c:	4a92      	ldr	r2, [pc, #584]	; (8001bb8 <HAL_GPIO_Init+0x2ac>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d863      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 8001972:	4a92      	ldr	r2, [pc, #584]	; (8001bbc <HAL_GPIO_Init+0x2b0>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d046      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 8001978:	4a90      	ldr	r2, [pc, #576]	; (8001bbc <HAL_GPIO_Init+0x2b0>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d85d      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 800197e:	2b12      	cmp	r3, #18
 8001980:	d82a      	bhi.n	80019d8 <HAL_GPIO_Init+0xcc>
 8001982:	2b12      	cmp	r3, #18
 8001984:	d859      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 8001986:	a201      	add	r2, pc, #4	; (adr r2, 800198c <HAL_GPIO_Init+0x80>)
 8001988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198c:	08001a07 	.word	0x08001a07
 8001990:	080019e1 	.word	0x080019e1
 8001994:	080019f3 	.word	0x080019f3
 8001998:	08001a35 	.word	0x08001a35
 800199c:	08001a3b 	.word	0x08001a3b
 80019a0:	08001a3b 	.word	0x08001a3b
 80019a4:	08001a3b 	.word	0x08001a3b
 80019a8:	08001a3b 	.word	0x08001a3b
 80019ac:	08001a3b 	.word	0x08001a3b
 80019b0:	08001a3b 	.word	0x08001a3b
 80019b4:	08001a3b 	.word	0x08001a3b
 80019b8:	08001a3b 	.word	0x08001a3b
 80019bc:	08001a3b 	.word	0x08001a3b
 80019c0:	08001a3b 	.word	0x08001a3b
 80019c4:	08001a3b 	.word	0x08001a3b
 80019c8:	08001a3b 	.word	0x08001a3b
 80019cc:	08001a3b 	.word	0x08001a3b
 80019d0:	080019e9 	.word	0x080019e9
 80019d4:	080019fd 	.word	0x080019fd
 80019d8:	4a79      	ldr	r2, [pc, #484]	; (8001bc0 <HAL_GPIO_Init+0x2b4>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d013      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019de:	e02c      	b.n	8001a3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	623b      	str	r3, [r7, #32]
          break;
 80019e6:	e029      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	3304      	adds	r3, #4
 80019ee:	623b      	str	r3, [r7, #32]
          break;
 80019f0:	e024      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	3308      	adds	r3, #8
 80019f8:	623b      	str	r3, [r7, #32]
          break;
 80019fa:	e01f      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	330c      	adds	r3, #12
 8001a02:	623b      	str	r3, [r7, #32]
          break;
 8001a04:	e01a      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d102      	bne.n	8001a14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a0e:	2304      	movs	r3, #4
 8001a10:	623b      	str	r3, [r7, #32]
          break;
 8001a12:	e013      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d105      	bne.n	8001a28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	611a      	str	r2, [r3, #16]
          break;
 8001a26:	e009      	b.n	8001a3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a28:	2308      	movs	r3, #8
 8001a2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	615a      	str	r2, [r3, #20]
          break;
 8001a32:	e003      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]
          break;
 8001a38:	e000      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          break;
 8001a3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2bff      	cmp	r3, #255	; 0xff
 8001a40:	d801      	bhi.n	8001a46 <HAL_GPIO_Init+0x13a>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	e001      	b.n	8001a4a <HAL_GPIO_Init+0x13e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	2bff      	cmp	r3, #255	; 0xff
 8001a50:	d802      	bhi.n	8001a58 <HAL_GPIO_Init+0x14c>
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	e002      	b.n	8001a5e <HAL_GPIO_Init+0x152>
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	3b08      	subs	r3, #8
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	210f      	movs	r1, #15
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	401a      	ands	r2, r3
 8001a70:	6a39      	ldr	r1, [r7, #32]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 80b1 	beq.w	8001bee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a8c:	4b4d      	ldr	r3, [pc, #308]	; (8001bc4 <HAL_GPIO_Init+0x2b8>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	4a4c      	ldr	r2, [pc, #304]	; (8001bc4 <HAL_GPIO_Init+0x2b8>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6193      	str	r3, [r2, #24]
 8001a98:	4b4a      	ldr	r3, [pc, #296]	; (8001bc4 <HAL_GPIO_Init+0x2b8>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001aa4:	4a48      	ldr	r2, [pc, #288]	; (8001bc8 <HAL_GPIO_Init+0x2bc>)
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	089b      	lsrs	r3, r3, #2
 8001aaa:	3302      	adds	r3, #2
 8001aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	220f      	movs	r2, #15
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a40      	ldr	r2, [pc, #256]	; (8001bcc <HAL_GPIO_Init+0x2c0>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d013      	beq.n	8001af8 <HAL_GPIO_Init+0x1ec>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a3f      	ldr	r2, [pc, #252]	; (8001bd0 <HAL_GPIO_Init+0x2c4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d00d      	beq.n	8001af4 <HAL_GPIO_Init+0x1e8>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a3e      	ldr	r2, [pc, #248]	; (8001bd4 <HAL_GPIO_Init+0x2c8>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d007      	beq.n	8001af0 <HAL_GPIO_Init+0x1e4>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a3d      	ldr	r2, [pc, #244]	; (8001bd8 <HAL_GPIO_Init+0x2cc>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d101      	bne.n	8001aec <HAL_GPIO_Init+0x1e0>
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e006      	b.n	8001afa <HAL_GPIO_Init+0x1ee>
 8001aec:	2304      	movs	r3, #4
 8001aee:	e004      	b.n	8001afa <HAL_GPIO_Init+0x1ee>
 8001af0:	2302      	movs	r3, #2
 8001af2:	e002      	b.n	8001afa <HAL_GPIO_Init+0x1ee>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <HAL_GPIO_Init+0x1ee>
 8001af8:	2300      	movs	r3, #0
 8001afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afc:	f002 0203 	and.w	r2, r2, #3
 8001b00:	0092      	lsls	r2, r2, #2
 8001b02:	4093      	lsls	r3, r2
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b0a:	492f      	ldr	r1, [pc, #188]	; (8001bc8 <HAL_GPIO_Init+0x2bc>)
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	089b      	lsrs	r3, r3, #2
 8001b10:	3302      	adds	r3, #2
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d006      	beq.n	8001b32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b24:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	492c      	ldr	r1, [pc, #176]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]
 8001b30:	e006      	b.n	8001b40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b32:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	4928      	ldr	r1, [pc, #160]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d006      	beq.n	8001b5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b4c:	4b23      	ldr	r3, [pc, #140]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	4922      	ldr	r1, [pc, #136]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
 8001b58:	e006      	b.n	8001b68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b5a:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	491e      	ldr	r1, [pc, #120]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d006      	beq.n	8001b82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b74:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	4918      	ldr	r1, [pc, #96]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	608b      	str	r3, [r1, #8]
 8001b80:	e006      	b.n	8001b90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b82:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	4914      	ldr	r1, [pc, #80]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d021      	beq.n	8001be0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	490e      	ldr	r1, [pc, #56]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	60cb      	str	r3, [r1, #12]
 8001ba8:	e021      	b.n	8001bee <HAL_GPIO_Init+0x2e2>
 8001baa:	bf00      	nop
 8001bac:	10320000 	.word	0x10320000
 8001bb0:	10310000 	.word	0x10310000
 8001bb4:	10220000 	.word	0x10220000
 8001bb8:	10210000 	.word	0x10210000
 8001bbc:	10120000 	.word	0x10120000
 8001bc0:	10110000 	.word	0x10110000
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40010000 	.word	0x40010000
 8001bcc:	40010800 	.word	0x40010800
 8001bd0:	40010c00 	.word	0x40010c00
 8001bd4:	40011000 	.word	0x40011000
 8001bd8:	40011400 	.word	0x40011400
 8001bdc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	4909      	ldr	r1, [pc, #36]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f47f ae8e 	bne.w	8001920 <HAL_GPIO_Init+0x14>
  }
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	372c      	adds	r7, #44	; 0x2c
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	40010400 	.word	0x40010400

08001c14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	887b      	ldrh	r3, [r7, #2]
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d002      	beq.n	8001c32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	73fb      	strb	r3, [r7, #15]
 8001c30:	e001      	b.n	8001c36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c32:	2300      	movs	r3, #0
 8001c34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr

08001c42 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	807b      	strh	r3, [r7, #2]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c52:	787b      	ldrb	r3, [r7, #1]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c58:	887a      	ldrh	r2, [r7, #2]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c5e:	e003      	b.n	8001c68 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c60:	887b      	ldrh	r3, [r7, #2]
 8001c62:	041a      	lsls	r2, r3, #16
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	611a      	str	r2, [r3, #16]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr

08001c72 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b085      	sub	sp, #20
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c84:	887a      	ldrh	r2, [r7, #2]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	041a      	lsls	r2, r3, #16
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	43d9      	mvns	r1, r3
 8001c90:	887b      	ldrh	r3, [r7, #2]
 8001c92:	400b      	ands	r3, r1
 8001c94:	431a      	orrs	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	611a      	str	r2, [r3, #16]
}
 8001c9a:	bf00      	nop
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e26c      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 8087 	beq.w	8001dd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cc4:	4b92      	ldr	r3, [pc, #584]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	d00c      	beq.n	8001cea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cd0:	4b8f      	ldr	r3, [pc, #572]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 030c 	and.w	r3, r3, #12
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d112      	bne.n	8001d02 <HAL_RCC_OscConfig+0x5e>
 8001cdc:	4b8c      	ldr	r3, [pc, #560]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce8:	d10b      	bne.n	8001d02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cea:	4b89      	ldr	r3, [pc, #548]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d06c      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x12c>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d168      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e246      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d0a:	d106      	bne.n	8001d1a <HAL_RCC_OscConfig+0x76>
 8001d0c:	4b80      	ldr	r3, [pc, #512]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a7f      	ldr	r2, [pc, #508]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	e02e      	b.n	8001d78 <HAL_RCC_OscConfig+0xd4>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x98>
 8001d22:	4b7b      	ldr	r3, [pc, #492]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a7a      	ldr	r2, [pc, #488]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	4b78      	ldr	r3, [pc, #480]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a77      	ldr	r2, [pc, #476]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	e01d      	b.n	8001d78 <HAL_RCC_OscConfig+0xd4>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d44:	d10c      	bne.n	8001d60 <HAL_RCC_OscConfig+0xbc>
 8001d46:	4b72      	ldr	r3, [pc, #456]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a71      	ldr	r2, [pc, #452]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	4b6f      	ldr	r3, [pc, #444]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a6e      	ldr	r2, [pc, #440]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	e00b      	b.n	8001d78 <HAL_RCC_OscConfig+0xd4>
 8001d60:	4b6b      	ldr	r3, [pc, #428]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a6a      	ldr	r2, [pc, #424]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	4b68      	ldr	r3, [pc, #416]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a67      	ldr	r2, [pc, #412]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d013      	beq.n	8001da8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7ff fc64 	bl	800164c <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d88:	f7ff fc60 	bl	800164c <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b64      	cmp	r3, #100	; 0x64
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e1fa      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9a:	4b5d      	ldr	r3, [pc, #372]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0xe4>
 8001da6:	e014      	b.n	8001dd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7ff fc50 	bl	800164c <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db0:	f7ff fc4c 	bl	800164c <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b64      	cmp	r3, #100	; 0x64
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e1e6      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc2:	4b53      	ldr	r3, [pc, #332]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x10c>
 8001dce:	e000      	b.n	8001dd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d063      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dde:	4b4c      	ldr	r3, [pc, #304]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00b      	beq.n	8001e02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dea:	4b49      	ldr	r3, [pc, #292]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b08      	cmp	r3, #8
 8001df4:	d11c      	bne.n	8001e30 <HAL_RCC_OscConfig+0x18c>
 8001df6:	4b46      	ldr	r3, [pc, #280]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d116      	bne.n	8001e30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e02:	4b43      	ldr	r3, [pc, #268]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d005      	beq.n	8001e1a <HAL_RCC_OscConfig+0x176>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d001      	beq.n	8001e1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e1ba      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1a:	4b3d      	ldr	r3, [pc, #244]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4939      	ldr	r1, [pc, #228]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2e:	e03a      	b.n	8001ea6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d020      	beq.n	8001e7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e38:	4b36      	ldr	r3, [pc, #216]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3e:	f7ff fc05 	bl	800164c <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e46:	f7ff fc01 	bl	800164c <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e19b      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e58:	4b2d      	ldr	r3, [pc, #180]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0f0      	beq.n	8001e46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e64:	4b2a      	ldr	r3, [pc, #168]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	4927      	ldr	r1, [pc, #156]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	600b      	str	r3, [r1, #0]
 8001e78:	e015      	b.n	8001ea6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e7a:	4b26      	ldr	r3, [pc, #152]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7ff fbe4 	bl	800164c <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e88:	f7ff fbe0 	bl	800164c <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e17a      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9a:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d03a      	beq.n	8001f28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d019      	beq.n	8001eee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eba:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec0:	f7ff fbc4 	bl	800164c <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec8:	f7ff fbc0 	bl	800164c <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e15a      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	f000 fb08 	bl	80024fc <RCC_Delay>
 8001eec:	e01c      	b.n	8001f28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eee:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef4:	f7ff fbaa 	bl	800164c <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001efa:	e00f      	b.n	8001f1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001efc:	f7ff fba6 	bl	800164c <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d908      	bls.n	8001f1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e140      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000
 8001f14:	42420000 	.word	0x42420000
 8001f18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1c:	4b9e      	ldr	r3, [pc, #632]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1e9      	bne.n	8001efc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 80a6 	beq.w	8002082 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f36:	2300      	movs	r3, #0
 8001f38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f3a:	4b97      	ldr	r3, [pc, #604]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10d      	bne.n	8001f62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f46:	4b94      	ldr	r3, [pc, #592]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	4a93      	ldr	r2, [pc, #588]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f50:	61d3      	str	r3, [r2, #28]
 8001f52:	4b91      	ldr	r3, [pc, #580]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f62:	4b8e      	ldr	r3, [pc, #568]	; (800219c <HAL_RCC_OscConfig+0x4f8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d118      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f6e:	4b8b      	ldr	r3, [pc, #556]	; (800219c <HAL_RCC_OscConfig+0x4f8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a8a      	ldr	r2, [pc, #552]	; (800219c <HAL_RCC_OscConfig+0x4f8>)
 8001f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f7a:	f7ff fb67 	bl	800164c <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f82:	f7ff fb63 	bl	800164c <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b64      	cmp	r3, #100	; 0x64
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e0fd      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f94:	4b81      	ldr	r3, [pc, #516]	; (800219c <HAL_RCC_OscConfig+0x4f8>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d106      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x312>
 8001fa8:	4b7b      	ldr	r3, [pc, #492]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4a7a      	ldr	r2, [pc, #488]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	6213      	str	r3, [r2, #32]
 8001fb4:	e02d      	b.n	8002012 <HAL_RCC_OscConfig+0x36e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10c      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x334>
 8001fbe:	4b76      	ldr	r3, [pc, #472]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	4a75      	ldr	r2, [pc, #468]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001fc4:	f023 0301 	bic.w	r3, r3, #1
 8001fc8:	6213      	str	r3, [r2, #32]
 8001fca:	4b73      	ldr	r3, [pc, #460]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	4a72      	ldr	r2, [pc, #456]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	f023 0304 	bic.w	r3, r3, #4
 8001fd4:	6213      	str	r3, [r2, #32]
 8001fd6:	e01c      	b.n	8002012 <HAL_RCC_OscConfig+0x36e>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	2b05      	cmp	r3, #5
 8001fde:	d10c      	bne.n	8001ffa <HAL_RCC_OscConfig+0x356>
 8001fe0:	4b6d      	ldr	r3, [pc, #436]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	4a6c      	ldr	r2, [pc, #432]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001fe6:	f043 0304 	orr.w	r3, r3, #4
 8001fea:	6213      	str	r3, [r2, #32]
 8001fec:	4b6a      	ldr	r3, [pc, #424]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	4a69      	ldr	r2, [pc, #420]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6213      	str	r3, [r2, #32]
 8001ff8:	e00b      	b.n	8002012 <HAL_RCC_OscConfig+0x36e>
 8001ffa:	4b67      	ldr	r3, [pc, #412]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	4a66      	ldr	r2, [pc, #408]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8002000:	f023 0301 	bic.w	r3, r3, #1
 8002004:	6213      	str	r3, [r2, #32]
 8002006:	4b64      	ldr	r3, [pc, #400]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	4a63      	ldr	r2, [pc, #396]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 800200c:	f023 0304 	bic.w	r3, r3, #4
 8002010:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d015      	beq.n	8002046 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201a:	f7ff fb17 	bl	800164c <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002020:	e00a      	b.n	8002038 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002022:	f7ff fb13 	bl	800164c <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002030:	4293      	cmp	r3, r2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e0ab      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002038:	4b57      	ldr	r3, [pc, #348]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0ee      	beq.n	8002022 <HAL_RCC_OscConfig+0x37e>
 8002044:	e014      	b.n	8002070 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002046:	f7ff fb01 	bl	800164c <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800204c:	e00a      	b.n	8002064 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204e:	f7ff fafd 	bl	800164c <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	f241 3288 	movw	r2, #5000	; 0x1388
 800205c:	4293      	cmp	r3, r2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e095      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002064:	4b4c      	ldr	r3, [pc, #304]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1ee      	bne.n	800204e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002070:	7dfb      	ldrb	r3, [r7, #23]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d105      	bne.n	8002082 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002076:	4b48      	ldr	r3, [pc, #288]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	4a47      	ldr	r2, [pc, #284]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 800207c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002080:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 8081 	beq.w	800218e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800208c:	4b42      	ldr	r3, [pc, #264]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 030c 	and.w	r3, r3, #12
 8002094:	2b08      	cmp	r3, #8
 8002096:	d061      	beq.n	800215c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d146      	bne.n	800212e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a0:	4b3f      	ldr	r3, [pc, #252]	; (80021a0 <HAL_RCC_OscConfig+0x4fc>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a6:	f7ff fad1 	bl	800164c <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ae:	f7ff facd 	bl	800164c <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e067      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c0:	4b35      	ldr	r3, [pc, #212]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f0      	bne.n	80020ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d4:	d108      	bne.n	80020e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020d6:	4b30      	ldr	r3, [pc, #192]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	492d      	ldr	r1, [pc, #180]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020e8:	4b2b      	ldr	r3, [pc, #172]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a19      	ldr	r1, [r3, #32]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	430b      	orrs	r3, r1
 80020fa:	4927      	ldr	r1, [pc, #156]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002100:	4b27      	ldr	r3, [pc, #156]	; (80021a0 <HAL_RCC_OscConfig+0x4fc>)
 8002102:	2201      	movs	r2, #1
 8002104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002106:	f7ff faa1 	bl	800164c <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210e:	f7ff fa9d 	bl	800164c <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e037      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002120:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x46a>
 800212c:	e02f      	b.n	800218e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212e:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <HAL_RCC_OscConfig+0x4fc>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7ff fa8a 	bl	800164c <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213c:	f7ff fa86 	bl	800164c <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e020      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800214e:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x498>
 800215a:	e018      	b.n	800218e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d101      	bne.n	8002168 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e013      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	429a      	cmp	r2, r3
 800217a:	d106      	bne.n	800218a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002186:	429a      	cmp	r2, r3
 8002188:	d001      	beq.n	800218e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40021000 	.word	0x40021000
 800219c:	40007000 	.word	0x40007000
 80021a0:	42420060 	.word	0x42420060

080021a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0d0      	b.n	800235a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021b8:	4b6a      	ldr	r3, [pc, #424]	; (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d910      	bls.n	80021e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c6:	4b67      	ldr	r3, [pc, #412]	; (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 0207 	bic.w	r2, r3, #7
 80021ce:	4965      	ldr	r1, [pc, #404]	; (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d6:	4b63      	ldr	r3, [pc, #396]	; (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d001      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0b8      	b.n	800235a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d020      	beq.n	8002236 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002200:	4b59      	ldr	r3, [pc, #356]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	4a58      	ldr	r2, [pc, #352]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800220a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002218:	4b53      	ldr	r3, [pc, #332]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	4a52      	ldr	r2, [pc, #328]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 800221e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002222:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002224:	4b50      	ldr	r3, [pc, #320]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	494d      	ldr	r1, [pc, #308]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	4313      	orrs	r3, r2
 8002234:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d040      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d107      	bne.n	800225a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224a:	4b47      	ldr	r3, [pc, #284]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d115      	bne.n	8002282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e07f      	b.n	800235a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d107      	bne.n	8002272 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002262:	4b41      	ldr	r3, [pc, #260]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d109      	bne.n	8002282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e073      	b.n	800235a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002272:	4b3d      	ldr	r3, [pc, #244]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e06b      	b.n	800235a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002282:	4b39      	ldr	r3, [pc, #228]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f023 0203 	bic.w	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	4936      	ldr	r1, [pc, #216]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002290:	4313      	orrs	r3, r2
 8002292:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002294:	f7ff f9da 	bl	800164c <HAL_GetTick>
 8002298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229a:	e00a      	b.n	80022b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800229c:	f7ff f9d6 	bl	800164c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e053      	b.n	800235a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b2:	4b2d      	ldr	r3, [pc, #180]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 020c 	and.w	r2, r3, #12
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d1eb      	bne.n	800229c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022c4:	4b27      	ldr	r3, [pc, #156]	; (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d210      	bcs.n	80022f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d2:	4b24      	ldr	r3, [pc, #144]	; (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 0207 	bic.w	r2, r3, #7
 80022da:	4922      	ldr	r1, [pc, #136]	; (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e2:	4b20      	ldr	r3, [pc, #128]	; (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e032      	b.n	800235a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002300:	4b19      	ldr	r3, [pc, #100]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4916      	ldr	r1, [pc, #88]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	4313      	orrs	r3, r2
 8002310:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d009      	beq.n	8002332 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800231e:	4b12      	ldr	r3, [pc, #72]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	490e      	ldr	r1, [pc, #56]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	4313      	orrs	r3, r2
 8002330:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002332:	f000 f821 	bl	8002378 <HAL_RCC_GetSysClockFreq>
 8002336:	4602      	mov	r2, r0
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	490a      	ldr	r1, [pc, #40]	; (800236c <HAL_RCC_ClockConfig+0x1c8>)
 8002344:	5ccb      	ldrb	r3, [r1, r3]
 8002346:	fa22 f303 	lsr.w	r3, r2, r3
 800234a:	4a09      	ldr	r2, [pc, #36]	; (8002370 <HAL_RCC_ClockConfig+0x1cc>)
 800234c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <HAL_RCC_ClockConfig+0x1d0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff f892 	bl	800147c <HAL_InitTick>

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40022000 	.word	0x40022000
 8002368:	40021000 	.word	0x40021000
 800236c:	08006d60 	.word	0x08006d60
 8002370:	20000000 	.word	0x20000000
 8002374:	20000004 	.word	0x20000004

08002378 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002378:	b490      	push	{r4, r7}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800237e:	4b2a      	ldr	r3, [pc, #168]	; (8002428 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002380:	1d3c      	adds	r4, r7, #4
 8002382:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002384:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002388:	f240 2301 	movw	r3, #513	; 0x201
 800238c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	2300      	movs	r3, #0
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	2300      	movs	r3, #0
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023a2:	4b22      	ldr	r3, [pc, #136]	; (800242c <HAL_RCC_GetSysClockFreq+0xb4>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d002      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0x40>
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d003      	beq.n	80023be <HAL_RCC_GetSysClockFreq+0x46>
 80023b6:	e02d      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023b8:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ba:	623b      	str	r3, [r7, #32]
      break;
 80023bc:	e02d      	b.n	800241a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	0c9b      	lsrs	r3, r3, #18
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023ca:	4413      	add	r3, r2
 80023cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d013      	beq.n	8002404 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023dc:	4b13      	ldr	r3, [pc, #76]	; (800242c <HAL_RCC_GetSysClockFreq+0xb4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	0c5b      	lsrs	r3, r3, #17
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023ea:	4413      	add	r3, r2
 80023ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	4a0e      	ldr	r2, [pc, #56]	; (8002430 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023f6:	fb02 f203 	mul.w	r2, r2, r3
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
 8002402:	e004      	b.n	800240e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	4a0b      	ldr	r2, [pc, #44]	; (8002434 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002408:	fb02 f303 	mul.w	r3, r2, r3
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	623b      	str	r3, [r7, #32]
      break;
 8002412:	e002      	b.n	800241a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002414:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002416:	623b      	str	r3, [r7, #32]
      break;
 8002418:	bf00      	nop
    }
  }
  return sysclockfreq;
 800241a:	6a3b      	ldr	r3, [r7, #32]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3728      	adds	r7, #40	; 0x28
 8002420:	46bd      	mov	sp, r7
 8002422:	bc90      	pop	{r4, r7}
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	08006c90 	.word	0x08006c90
 800242c:	40021000 	.word	0x40021000
 8002430:	007a1200 	.word	0x007a1200
 8002434:	003d0900 	.word	0x003d0900

08002438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800243c:	4b02      	ldr	r3, [pc, #8]	; (8002448 <HAL_RCC_GetHCLKFreq+0x10>)
 800243e:	681b      	ldr	r3, [r3, #0]
}
 8002440:	4618      	mov	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr
 8002448:	20000000 	.word	0x20000000

0800244c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002450:	f7ff fff2 	bl	8002438 <HAL_RCC_GetHCLKFreq>
 8002454:	4602      	mov	r2, r0
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	0a1b      	lsrs	r3, r3, #8
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	4903      	ldr	r1, [pc, #12]	; (8002470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002462:	5ccb      	ldrb	r3, [r1, r3]
 8002464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002468:	4618      	mov	r0, r3
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40021000 	.word	0x40021000
 8002470:	08006d70 	.word	0x08006d70

08002474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002478:	f7ff ffde 	bl	8002438 <HAL_RCC_GetHCLKFreq>
 800247c:	4602      	mov	r2, r0
 800247e:	4b05      	ldr	r3, [pc, #20]	; (8002494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	0adb      	lsrs	r3, r3, #11
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	4903      	ldr	r1, [pc, #12]	; (8002498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800248a:	5ccb      	ldrb	r3, [r1, r3]
 800248c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002490:	4618      	mov	r0, r3
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40021000 	.word	0x40021000
 8002498:	08006d70 	.word	0x08006d70

0800249c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	220f      	movs	r2, #15
 80024aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024ac:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <HAL_RCC_GetClockConfig+0x58>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0203 	and.w	r2, r3, #3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80024b8:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <HAL_RCC_GetClockConfig+0x58>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_RCC_GetClockConfig+0x58>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80024d0:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <HAL_RCC_GetClockConfig+0x58>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	08db      	lsrs	r3, r3, #3
 80024d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_RCC_GetClockConfig+0x5c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0207 	and.w	r2, r3, #7
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40022000 	.word	0x40022000

080024fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002504:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <RCC_Delay+0x34>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <RCC_Delay+0x38>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	0a5b      	lsrs	r3, r3, #9
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	fb02 f303 	mul.w	r3, r2, r3
 8002516:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002518:	bf00      	nop
  }
  while (Delay --);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1e5a      	subs	r2, r3, #1
 800251e:	60fa      	str	r2, [r7, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1f9      	bne.n	8002518 <RCC_Delay+0x1c>
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr
 8002530:	20000000 	.word	0x20000000
 8002534:	10624dd3 	.word	0x10624dd3

08002538 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e041      	b.n	80025ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d106      	bne.n	8002564 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f839 	bl	80025d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3304      	adds	r3, #4
 8002574:	4619      	mov	r1, r3
 8002576:	4610      	mov	r0, r2
 8002578:	f000 f9b4 	bl	80028e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr

080025e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d001      	beq.n	8002600 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e03a      	b.n	8002676 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a18      	ldr	r2, [pc, #96]	; (8002680 <HAL_TIM_Base_Start_IT+0x98>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d00e      	beq.n	8002640 <HAL_TIM_Base_Start_IT+0x58>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800262a:	d009      	beq.n	8002640 <HAL_TIM_Base_Start_IT+0x58>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a14      	ldr	r2, [pc, #80]	; (8002684 <HAL_TIM_Base_Start_IT+0x9c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d004      	beq.n	8002640 <HAL_TIM_Base_Start_IT+0x58>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a13      	ldr	r2, [pc, #76]	; (8002688 <HAL_TIM_Base_Start_IT+0xa0>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d111      	bne.n	8002664 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2b06      	cmp	r3, #6
 8002650:	d010      	beq.n	8002674 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 0201 	orr.w	r2, r2, #1
 8002660:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002662:	e007      	b.n	8002674 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0201 	orr.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	40012c00 	.word	0x40012c00
 8002684:	40000400 	.word	0x40000400
 8002688:	40000800 	.word	0x40000800

0800268c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d122      	bne.n	80026e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d11b      	bne.n	80026e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f06f 0202 	mvn.w	r2, #2
 80026b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f8ed 	bl	80028ae <HAL_TIM_IC_CaptureCallback>
 80026d4:	e005      	b.n	80026e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f8e0 	bl	800289c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f8ef 	bl	80028c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d122      	bne.n	800273c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b04      	cmp	r3, #4
 8002702:	d11b      	bne.n	800273c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f06f 0204 	mvn.w	r2, #4
 800270c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2202      	movs	r2, #2
 8002712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f8c3 	bl	80028ae <HAL_TIM_IC_CaptureCallback>
 8002728:	e005      	b.n	8002736 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f8b6 	bl	800289c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f8c5 	bl	80028c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b08      	cmp	r3, #8
 8002748:	d122      	bne.n	8002790 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f003 0308 	and.w	r3, r3, #8
 8002754:	2b08      	cmp	r3, #8
 8002756:	d11b      	bne.n	8002790 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f06f 0208 	mvn.w	r2, #8
 8002760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2204      	movs	r2, #4
 8002766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f899 	bl	80028ae <HAL_TIM_IC_CaptureCallback>
 800277c:	e005      	b.n	800278a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f88c 	bl	800289c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f89b 	bl	80028c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	2b10      	cmp	r3, #16
 800279c:	d122      	bne.n	80027e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 0310 	and.w	r3, r3, #16
 80027a8:	2b10      	cmp	r3, #16
 80027aa:	d11b      	bne.n	80027e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0210 	mvn.w	r2, #16
 80027b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2208      	movs	r2, #8
 80027ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f86f 	bl	80028ae <HAL_TIM_IC_CaptureCallback>
 80027d0:	e005      	b.n	80027de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f862 	bl	800289c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f871 	bl	80028c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d10e      	bne.n	8002810 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d107      	bne.n	8002810 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f06f 0201 	mvn.w	r2, #1
 8002808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7fe fd0e 	bl	800122c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281a:	2b80      	cmp	r3, #128	; 0x80
 800281c:	d10e      	bne.n	800283c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002828:	2b80      	cmp	r3, #128	; 0x80
 800282a:	d107      	bne.n	800283c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f8bf 	bl	80029ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002846:	2b40      	cmp	r3, #64	; 0x40
 8002848:	d10e      	bne.n	8002868 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002854:	2b40      	cmp	r3, #64	; 0x40
 8002856:	d107      	bne.n	8002868 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f835 	bl	80028d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f003 0320 	and.w	r3, r3, #32
 8002872:	2b20      	cmp	r3, #32
 8002874:	d10e      	bne.n	8002894 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0320 	and.w	r3, r3, #32
 8002880:	2b20      	cmp	r3, #32
 8002882:	d107      	bne.n	8002894 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0220 	mvn.w	r2, #32
 800288c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f88a 	bl	80029a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr

080028ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a29      	ldr	r2, [pc, #164]	; (800299c <TIM_Base_SetConfig+0xb8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d00b      	beq.n	8002914 <TIM_Base_SetConfig+0x30>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002902:	d007      	beq.n	8002914 <TIM_Base_SetConfig+0x30>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a26      	ldr	r2, [pc, #152]	; (80029a0 <TIM_Base_SetConfig+0xbc>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d003      	beq.n	8002914 <TIM_Base_SetConfig+0x30>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a25      	ldr	r2, [pc, #148]	; (80029a4 <TIM_Base_SetConfig+0xc0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d108      	bne.n	8002926 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a1c      	ldr	r2, [pc, #112]	; (800299c <TIM_Base_SetConfig+0xb8>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00b      	beq.n	8002946 <TIM_Base_SetConfig+0x62>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002934:	d007      	beq.n	8002946 <TIM_Base_SetConfig+0x62>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a19      	ldr	r2, [pc, #100]	; (80029a0 <TIM_Base_SetConfig+0xbc>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d003      	beq.n	8002946 <TIM_Base_SetConfig+0x62>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a18      	ldr	r2, [pc, #96]	; (80029a4 <TIM_Base_SetConfig+0xc0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d108      	bne.n	8002958 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800294c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4313      	orrs	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	4313      	orrs	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a07      	ldr	r2, [pc, #28]	; (800299c <TIM_Base_SetConfig+0xb8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d103      	bne.n	800298c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	615a      	str	r2, [r3, #20]
}
 8002992:	bf00      	nop
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr
 800299c:	40012c00 	.word	0x40012c00
 80029a0:	40000400 	.word	0x40000400
 80029a4:	40000800 	.word	0x40000800

080029a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr

080029ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr

080029cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e03f      	b.n	8002a5e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d106      	bne.n	80029f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7fe fc6a 	bl	80012cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2224      	movs	r2, #36	; 0x24
 80029fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 faa7 	bl	8002f64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695a      	ldr	r2, [r3, #20]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2220      	movs	r2, #32
 8002a58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b085      	sub	sp, #20
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	4613      	mov	r3, r2
 8002a72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d140      	bne.n	8002b02 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <HAL_UART_Receive_IT+0x26>
 8002a86:	88fb      	ldrh	r3, [r7, #6]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e039      	b.n	8002b04 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d101      	bne.n	8002a9e <HAL_UART_Receive_IT+0x38>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e032      	b.n	8002b04 <HAL_UART_Receive_IT+0x9e>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	88fa      	ldrh	r2, [r7, #6]
 8002ab0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	88fa      	ldrh	r2, [r7, #6]
 8002ab6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2222      	movs	r2, #34	; 0x22
 8002ac2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002adc:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695a      	ldr	r2, [r3, #20]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f042 0201 	orr.w	r2, r2, #1
 8002aec:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0220 	orr.w	r2, r2, #32
 8002afc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	e000      	b.n	8002b04 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002b02:	2302      	movs	r3, #2
  }
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr
	...

08002b10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10d      	bne.n	8002b62 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	f003 0320 	and.w	r3, r3, #32
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_UART_IRQHandler+0x52>
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	f003 0320 	and.w	r3, r3, #32
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f982 	bl	8002e64 <UART_Receive_IT>
      return;
 8002b60:	e0d0      	b.n	8002d04 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 80b0 	beq.w	8002cca <HAL_UART_IRQHandler+0x1ba>
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d105      	bne.n	8002b80 <HAL_UART_IRQHandler+0x70>
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 80a5 	beq.w	8002cca <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <HAL_UART_IRQHandler+0x90>
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b98:	f043 0201 	orr.w	r2, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_UART_IRQHandler+0xb0>
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb8:	f043 0202 	orr.w	r2, r3, #2
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <HAL_UART_IRQHandler+0xd0>
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd8:	f043 0204 	orr.w	r2, r3, #4
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00f      	beq.n	8002c0a <HAL_UART_IRQHandler+0xfa>
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d104      	bne.n	8002bfe <HAL_UART_IRQHandler+0xee>
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d005      	beq.n	8002c0a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c02:	f043 0208 	orr.w	r2, r3, #8
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d077      	beq.n	8002d02 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f003 0320 	and.w	r3, r3, #32
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d007      	beq.n	8002c2c <HAL_UART_IRQHandler+0x11c>
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f91c 	bl	8002e64 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	bf14      	ite	ne
 8002c3a:	2301      	movne	r3, #1
 8002c3c:	2300      	moveq	r3, #0
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d102      	bne.n	8002c54 <HAL_UART_IRQHandler+0x144>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d031      	beq.n	8002cb8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 f86d 	bl	8002d34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d023      	beq.n	8002cb0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695a      	ldr	r2, [r3, #20]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c76:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d013      	beq.n	8002ca8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c84:	4a21      	ldr	r2, [pc, #132]	; (8002d0c <HAL_UART_IRQHandler+0x1fc>)
 8002c86:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fe fdc7 	bl	8001820 <HAL_DMA_Abort_IT>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d016      	beq.n	8002cc6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca6:	e00e      	b.n	8002cc6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f83a 	bl	8002d22 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cae:	e00a      	b.n	8002cc6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f836 	bl	8002d22 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb6:	e006      	b.n	8002cc6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f832 	bl	8002d22 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002cc4:	e01d      	b.n	8002d02 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc6:	bf00      	nop
    return;
 8002cc8:	e01b      	b.n	8002d02 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d008      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x1d6>
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f859 	bl	8002d96 <UART_Transmit_IT>
    return;
 8002ce4:	e00e      	b.n	8002d04 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d009      	beq.n	8002d04 <HAL_UART_IRQHandler+0x1f4>
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d004      	beq.n	8002d04 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f89a 	bl	8002e34 <UART_EndTransmit_IT>
    return;
 8002d00:	e000      	b.n	8002d04 <HAL_UART_IRQHandler+0x1f4>
    return;
 8002d02:	bf00      	nop
  }
}
 8002d04:	3720      	adds	r7, #32
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	08002d6f 	.word	0x08002d6f

08002d10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr

08002d34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d4a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695a      	ldr	r2, [r3, #20]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0201 	bic.w	r2, r2, #1
 8002d5a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f7ff ffca 	bl	8002d22 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d8e:	bf00      	nop
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b085      	sub	sp, #20
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b21      	cmp	r3, #33	; 0x21
 8002da8:	d13e      	bne.n	8002e28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db2:	d114      	bne.n	8002dde <UART_Transmit_IT+0x48>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d110      	bne.n	8002dde <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dd0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	1c9a      	adds	r2, r3, #2
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	621a      	str	r2, [r3, #32]
 8002ddc:	e008      	b.n	8002df0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	1c59      	adds	r1, r3, #1
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6211      	str	r1, [r2, #32]
 8002de8:	781a      	ldrb	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10f      	bne.n	8002e24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	e000      	b.n	8002e2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e28:	2302      	movs	r3, #2
  }
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e4a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff ff5b 	bl	8002d10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b22      	cmp	r3, #34	; 0x22
 8002e76:	d170      	bne.n	8002f5a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e80:	d117      	bne.n	8002eb2 <UART_Receive_IT+0x4e>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d113      	bne.n	8002eb2 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eaa:	1c9a      	adds	r2, r3, #2
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	629a      	str	r2, [r3, #40]	; 0x28
 8002eb0:	e026      	b.n	8002f00 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec4:	d007      	beq.n	8002ed6 <UART_Receive_IT+0x72>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10a      	bne.n	8002ee4 <UART_Receive_IT+0x80>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	e008      	b.n	8002ef6 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d120      	bne.n	8002f56 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0220 	bic.w	r2, r2, #32
 8002f22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695a      	ldr	r2, [r3, #20]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0201 	bic.w	r2, r2, #1
 8002f42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f003 fb8f 	bl	8006670 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	e002      	b.n	8002f5c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	e000      	b.n	8002f5c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002f5a:	2302      	movs	r3, #2
  }
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f9e:	f023 030c 	bic.w	r3, r3, #12
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6812      	ldr	r2, [r2, #0]
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a2c      	ldr	r2, [pc, #176]	; (8003078 <UART_SetConfig+0x114>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d103      	bne.n	8002fd4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002fcc:	f7ff fa52 	bl	8002474 <HAL_RCC_GetPCLK2Freq>
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	e002      	b.n	8002fda <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002fd4:	f7ff fa3a 	bl	800244c <HAL_RCC_GetPCLK1Freq>
 8002fd8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	009a      	lsls	r2, r3, #2
 8002fe4:	441a      	add	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff0:	4a22      	ldr	r2, [pc, #136]	; (800307c <UART_SetConfig+0x118>)
 8002ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	0119      	lsls	r1, r3, #4
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	009a      	lsls	r2, r3, #2
 8003004:	441a      	add	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003010:	4b1a      	ldr	r3, [pc, #104]	; (800307c <UART_SetConfig+0x118>)
 8003012:	fba3 0302 	umull	r0, r3, r3, r2
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	2064      	movs	r0, #100	; 0x64
 800301a:	fb00 f303 	mul.w	r3, r0, r3
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	3332      	adds	r3, #50	; 0x32
 8003024:	4a15      	ldr	r2, [pc, #84]	; (800307c <UART_SetConfig+0x118>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	095b      	lsrs	r3, r3, #5
 800302c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003030:	4419      	add	r1, r3
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	009a      	lsls	r2, r3, #2
 800303c:	441a      	add	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	fbb2 f2f3 	udiv	r2, r2, r3
 8003048:	4b0c      	ldr	r3, [pc, #48]	; (800307c <UART_SetConfig+0x118>)
 800304a:	fba3 0302 	umull	r0, r3, r3, r2
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	2064      	movs	r0, #100	; 0x64
 8003052:	fb00 f303 	mul.w	r3, r0, r3
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	3332      	adds	r3, #50	; 0x32
 800305c:	4a07      	ldr	r2, [pc, #28]	; (800307c <UART_SetConfig+0x118>)
 800305e:	fba2 2303 	umull	r2, r3, r2, r3
 8003062:	095b      	lsrs	r3, r3, #5
 8003064:	f003 020f 	and.w	r2, r3, #15
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	440a      	add	r2, r1
 800306e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003070:	bf00      	nop
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40013800 	.word	0x40013800
 800307c:	51eb851f 	.word	0x51eb851f

08003080 <IO_init>:
 */
#include "InputOutputInterface.h"
IO_interface inputOutputs;


void IO_init(void){
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
	inputOutputs.switch_1=false;
 8003084:	4b19      	ldr	r3, [pc, #100]	; (80030ec <IO_init+0x6c>)
 8003086:	2200      	movs	r2, #0
 8003088:	701a      	strb	r2, [r3, #0]
	inputOutputs.switch_2=false;
 800308a:	4b18      	ldr	r3, [pc, #96]	; (80030ec <IO_init+0x6c>)
 800308c:	2200      	movs	r2, #0
 800308e:	705a      	strb	r2, [r3, #1]
	inputOutputs.switch_3=false;
 8003090:	4b16      	ldr	r3, [pc, #88]	; (80030ec <IO_init+0x6c>)
 8003092:	2200      	movs	r2, #0
 8003094:	709a      	strb	r2, [r3, #2]
	inputOutputs.switch_4=false;
 8003096:	4b15      	ldr	r3, [pc, #84]	; (80030ec <IO_init+0x6c>)
 8003098:	2200      	movs	r2, #0
 800309a:	70da      	strb	r2, [r3, #3]
	inputOutputs.switch_5=false;
 800309c:	4b13      	ldr	r3, [pc, #76]	; (80030ec <IO_init+0x6c>)
 800309e:	2200      	movs	r2, #0
 80030a0:	711a      	strb	r2, [r3, #4]
	inputOutputs.switch_6=false;
 80030a2:	4b12      	ldr	r3, [pc, #72]	; (80030ec <IO_init+0x6c>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	715a      	strb	r2, [r3, #5]
	inputOutputs.switch_7=false;
 80030a8:	4b10      	ldr	r3, [pc, #64]	; (80030ec <IO_init+0x6c>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	719a      	strb	r2, [r3, #6]
	inputOutputs.switch_8=false;
 80030ae:	4b0f      	ldr	r3, [pc, #60]	; (80030ec <IO_init+0x6c>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	71da      	strb	r2, [r3, #7]

	inputOutputs.relay_1=false;
 80030b4:	4b0d      	ldr	r3, [pc, #52]	; (80030ec <IO_init+0x6c>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	721a      	strb	r2, [r3, #8]
	inputOutputs.relay_2=false;
 80030ba:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <IO_init+0x6c>)
 80030bc:	2200      	movs	r2, #0
 80030be:	725a      	strb	r2, [r3, #9]
	inputOutputs.relay_3=false;
 80030c0:	4b0a      	ldr	r3, [pc, #40]	; (80030ec <IO_init+0x6c>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	729a      	strb	r2, [r3, #10]
	inputOutputs.relay_4=false;
 80030c6:	4b09      	ldr	r3, [pc, #36]	; (80030ec <IO_init+0x6c>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	72da      	strb	r2, [r3, #11]
	inputOutputs.relay_5=false;
 80030cc:	4b07      	ldr	r3, [pc, #28]	; (80030ec <IO_init+0x6c>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	731a      	strb	r2, [r3, #12]
	inputOutputs.relay_6=false;
 80030d2:	4b06      	ldr	r3, [pc, #24]	; (80030ec <IO_init+0x6c>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	735a      	strb	r2, [r3, #13]
	inputOutputs.relay_7=false;
 80030d8:	4b04      	ldr	r3, [pc, #16]	; (80030ec <IO_init+0x6c>)
 80030da:	2200      	movs	r2, #0
 80030dc:	739a      	strb	r2, [r3, #14]
	inputOutputs.relay_8=false;
 80030de:	4b03      	ldr	r3, [pc, #12]	; (80030ec <IO_init+0x6c>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	73da      	strb	r2, [r3, #15]
}
 80030e4:	bf00      	nop
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr
 80030ec:	200036a4 	.word	0x200036a4

080030f0 <IO_readInputSwitchs>:

void IO_readInputSwitchs(void){
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
	inputOutputs.switch_1=!SW_I_1;
 80030f4:	2102      	movs	r1, #2
 80030f6:	4830      	ldr	r0, [pc, #192]	; (80031b8 <IO_readInputSwitchs+0xc8>)
 80030f8:	f7fe fd8c 	bl	8001c14 <HAL_GPIO_ReadPin>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	bf0c      	ite	eq
 8003102:	2301      	moveq	r3, #1
 8003104:	2300      	movne	r3, #0
 8003106:	b2da      	uxtb	r2, r3
 8003108:	4b2c      	ldr	r3, [pc, #176]	; (80031bc <IO_readInputSwitchs+0xcc>)
 800310a:	701a      	strb	r2, [r3, #0]
	inputOutputs.switch_2=!SW_I_2;
 800310c:	2101      	movs	r1, #1
 800310e:	482a      	ldr	r0, [pc, #168]	; (80031b8 <IO_readInputSwitchs+0xc8>)
 8003110:	f7fe fd80 	bl	8001c14 <HAL_GPIO_ReadPin>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	bf0c      	ite	eq
 800311a:	2301      	moveq	r3, #1
 800311c:	2300      	movne	r3, #0
 800311e:	b2da      	uxtb	r2, r3
 8003120:	4b26      	ldr	r3, [pc, #152]	; (80031bc <IO_readInputSwitchs+0xcc>)
 8003122:	705a      	strb	r2, [r3, #1]
	inputOutputs.switch_3=!SW_I_3;
 8003124:	2180      	movs	r1, #128	; 0x80
 8003126:	4826      	ldr	r0, [pc, #152]	; (80031c0 <IO_readInputSwitchs+0xd0>)
 8003128:	f7fe fd74 	bl	8001c14 <HAL_GPIO_ReadPin>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	bf0c      	ite	eq
 8003132:	2301      	moveq	r3, #1
 8003134:	2300      	movne	r3, #0
 8003136:	b2da      	uxtb	r2, r3
 8003138:	4b20      	ldr	r3, [pc, #128]	; (80031bc <IO_readInputSwitchs+0xcc>)
 800313a:	709a      	strb	r2, [r3, #2]
	inputOutputs.switch_4=!SW_I_4;
 800313c:	2110      	movs	r1, #16
 800313e:	481e      	ldr	r0, [pc, #120]	; (80031b8 <IO_readInputSwitchs+0xc8>)
 8003140:	f7fe fd68 	bl	8001c14 <HAL_GPIO_ReadPin>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	bf0c      	ite	eq
 800314a:	2301      	moveq	r3, #1
 800314c:	2300      	movne	r3, #0
 800314e:	b2da      	uxtb	r2, r3
 8003150:	4b1a      	ldr	r3, [pc, #104]	; (80031bc <IO_readInputSwitchs+0xcc>)
 8003152:	70da      	strb	r2, [r3, #3]
	inputOutputs.switch_5=!SW_I_5;
 8003154:	2120      	movs	r1, #32
 8003156:	481a      	ldr	r0, [pc, #104]	; (80031c0 <IO_readInputSwitchs+0xd0>)
 8003158:	f7fe fd5c 	bl	8001c14 <HAL_GPIO_ReadPin>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	bf0c      	ite	eq
 8003162:	2301      	moveq	r3, #1
 8003164:	2300      	movne	r3, #0
 8003166:	b2da      	uxtb	r2, r3
 8003168:	4b14      	ldr	r3, [pc, #80]	; (80031bc <IO_readInputSwitchs+0xcc>)
 800316a:	711a      	strb	r2, [r3, #4]
	inputOutputs.switch_6=!SW_I_6;
 800316c:	2110      	movs	r1, #16
 800316e:	4814      	ldr	r0, [pc, #80]	; (80031c0 <IO_readInputSwitchs+0xd0>)
 8003170:	f7fe fd50 	bl	8001c14 <HAL_GPIO_ReadPin>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	bf0c      	ite	eq
 800317a:	2301      	moveq	r3, #1
 800317c:	2300      	movne	r3, #0
 800317e:	b2da      	uxtb	r2, r3
 8003180:	4b0e      	ldr	r3, [pc, #56]	; (80031bc <IO_readInputSwitchs+0xcc>)
 8003182:	715a      	strb	r2, [r3, #5]
	inputOutputs.switch_7=!SW_I_7;
 8003184:	2102      	movs	r1, #2
 8003186:	480e      	ldr	r0, [pc, #56]	; (80031c0 <IO_readInputSwitchs+0xd0>)
 8003188:	f7fe fd44 	bl	8001c14 <HAL_GPIO_ReadPin>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	bf0c      	ite	eq
 8003192:	2301      	moveq	r3, #1
 8003194:	2300      	movne	r3, #0
 8003196:	b2da      	uxtb	r2, r3
 8003198:	4b08      	ldr	r3, [pc, #32]	; (80031bc <IO_readInputSwitchs+0xcc>)
 800319a:	719a      	strb	r2, [r3, #6]
	inputOutputs.switch_8=!SW_I_8;
 800319c:	2108      	movs	r1, #8
 800319e:	4806      	ldr	r0, [pc, #24]	; (80031b8 <IO_readInputSwitchs+0xc8>)
 80031a0:	f7fe fd38 	bl	8001c14 <HAL_GPIO_ReadPin>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	bf0c      	ite	eq
 80031aa:	2301      	moveq	r3, #1
 80031ac:	2300      	movne	r3, #0
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	4b02      	ldr	r3, [pc, #8]	; (80031bc <IO_readInputSwitchs+0xcc>)
 80031b2:	71da      	strb	r2, [r3, #7]
}
 80031b4:	bf00      	nop
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40010c00 	.word	0x40010c00
 80031bc:	200036a4 	.word	0x200036a4
 80031c0:	40010800 	.word	0x40010800

080031c4 <IO_testInputOutput>:
	if(inputOutputs.relay_6)R_6_O_HIGH; else R_6_O_LOW;
	if(inputOutputs.relay_7)R_7_O_HIGH; else R_7_O_LOW;
	if(inputOutputs.relay_8)R_8_O_HIGH; else R_8_O_LOW;
}
uint8_t testBtye[1];
void IO_testInputOutput(void){
 80031c4:	b598      	push	{r3, r4, r7, lr}
 80031c6:	af00      	add	r7, sp, #0
	if(inputOutputs.switch_5)R_5_O_HIGH; else R_5_O_LOW;
	if(inputOutputs.switch_6)R_6_O_HIGH; else R_6_O_LOW;
	if(inputOutputs.switch_7)R_7_O_HIGH; else R_7_O_LOW;
	if(inputOutputs.switch_8)R_8_O_HIGH; else R_8_O_LOW;*/

	testBtye[0]=IO_inputsBitsPackageToByte(inputOutputs);
 80031c8:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <IO_testInputOutput+0x38>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	2000      	movs	r0, #0
 80031ce:	4610      	mov	r0, r2
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	2100      	movs	r1, #0
 80031d4:	4611      	mov	r1, r2
 80031d6:	689c      	ldr	r4, [r3, #8]
 80031d8:	2200      	movs	r2, #0
 80031da:	4622      	mov	r2, r4
 80031dc:	68dc      	ldr	r4, [r3, #12]
 80031de:	2300      	movs	r3, #0
 80031e0:	4623      	mov	r3, r4
 80031e2:	f000 f80f 	bl	8003204 <IO_inputsBitsPackageToByte>
 80031e6:	4603      	mov	r3, r0
 80031e8:	461a      	mov	r2, r3
 80031ea:	4b05      	ldr	r3, [pc, #20]	; (8003200 <IO_testInputOutput+0x3c>)
 80031ec:	701a      	strb	r2, [r3, #0]
	IO_outputByteToBitsPackage(testBtye[0]);
 80031ee:	4b04      	ldr	r3, [pc, #16]	; (8003200 <IO_testInputOutput+0x3c>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 f838 	bl	8003268 <IO_outputByteToBitsPackage>

}
 80031f8:	bf00      	nop
 80031fa:	bd98      	pop	{r3, r4, r7, pc}
 80031fc:	200036a4 	.word	0x200036a4
 8003200:	200036a0 	.word	0x200036a0

08003204 <IO_inputsBitsPackageToByte>:

uint8_t IO_inputsBitsPackageToByte(IO_interface inputBits){
 8003204:	b490      	push	{r4, r7}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	463c      	mov	r4, r7
 800320c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t bitPackage;
	bitPackage = (inputBits.switch_8 << 7) | (inputBits.switch_7 << 6) |
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	01db      	lsls	r3, r3, #7
 8003214:	b25a      	sxtb	r2, r3
 8003216:	79bb      	ldrb	r3, [r7, #6]
 8003218:	019b      	lsls	r3, r3, #6
 800321a:	b25b      	sxtb	r3, r3
 800321c:	4313      	orrs	r3, r2
 800321e:	b25a      	sxtb	r2, r3
	(inputBits.switch_6 << 5) | (inputBits.switch_5 << 4) |
 8003220:	797b      	ldrb	r3, [r7, #5]
 8003222:	015b      	lsls	r3, r3, #5
	bitPackage = (inputBits.switch_8 << 7) | (inputBits.switch_7 << 6) |
 8003224:	b25b      	sxtb	r3, r3
 8003226:	4313      	orrs	r3, r2
 8003228:	b25a      	sxtb	r2, r3
	(inputBits.switch_6 << 5) | (inputBits.switch_5 << 4) |
 800322a:	793b      	ldrb	r3, [r7, #4]
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	b25b      	sxtb	r3, r3
 8003230:	4313      	orrs	r3, r2
 8003232:	b25a      	sxtb	r2, r3
	(inputBits.switch_4 << 3) | (inputBits.switch_3 << 2) |
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	00db      	lsls	r3, r3, #3
	(inputBits.switch_6 << 5) | (inputBits.switch_5 << 4) |
 8003238:	b25b      	sxtb	r3, r3
 800323a:	4313      	orrs	r3, r2
 800323c:	b25a      	sxtb	r2, r3
	(inputBits.switch_4 << 3) | (inputBits.switch_3 << 2) |
 800323e:	78bb      	ldrb	r3, [r7, #2]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	b25b      	sxtb	r3, r3
 8003244:	4313      	orrs	r3, r2
 8003246:	b25a      	sxtb	r2, r3
    (inputBits.switch_2 << 1) | (inputBits.switch_1);
 8003248:	787b      	ldrb	r3, [r7, #1]
 800324a:	005b      	lsls	r3, r3, #1
	(inputBits.switch_4 << 3) | (inputBits.switch_3 << 2) |
 800324c:	b25b      	sxtb	r3, r3
 800324e:	4313      	orrs	r3, r2
 8003250:	b25a      	sxtb	r2, r3
    (inputBits.switch_2 << 1) | (inputBits.switch_1);
 8003252:	783b      	ldrb	r3, [r7, #0]
 8003254:	b25b      	sxtb	r3, r3
 8003256:	4313      	orrs	r3, r2
 8003258:	b25b      	sxtb	r3, r3
	bitPackage = (inputBits.switch_8 << 7) | (inputBits.switch_7 << 6) |
 800325a:	75fb      	strb	r3, [r7, #23]
	return bitPackage;
 800325c:	7dfb      	ldrb	r3, [r7, #23]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bc90      	pop	{r4, r7}
 8003266:	4770      	bx	lr

08003268 <IO_outputByteToBitsPackage>:

void IO_outputByteToBitsPackage(uint8_t byte){
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	71fb      	strb	r3, [r7, #7]
	inputOutputs.relay_1=(bool)(byte & IO_BIT_0);
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	bf14      	ite	ne
 800327c:	2301      	movne	r3, #1
 800327e:	2300      	moveq	r3, #0
 8003280:	b2da      	uxtb	r2, r3
 8003282:	4b25      	ldr	r3, [pc, #148]	; (8003318 <IO_outputByteToBitsPackage+0xb0>)
 8003284:	721a      	strb	r2, [r3, #8]
	inputOutputs.relay_2=(bool)(byte & IO_BIT_1);
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	bf14      	ite	ne
 8003290:	2301      	movne	r3, #1
 8003292:	2300      	moveq	r3, #0
 8003294:	b2da      	uxtb	r2, r3
 8003296:	4b20      	ldr	r3, [pc, #128]	; (8003318 <IO_outputByteToBitsPackage+0xb0>)
 8003298:	725a      	strb	r2, [r3, #9]
	inputOutputs.relay_3=(bool)(byte & IO_BIT_2);
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	bf14      	ite	ne
 80032a4:	2301      	movne	r3, #1
 80032a6:	2300      	moveq	r3, #0
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	4b1b      	ldr	r3, [pc, #108]	; (8003318 <IO_outputByteToBitsPackage+0xb0>)
 80032ac:	729a      	strb	r2, [r3, #10]
	inputOutputs.relay_4=(bool)(byte & IO_BIT_3);
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf14      	ite	ne
 80032b8:	2301      	movne	r3, #1
 80032ba:	2300      	moveq	r3, #0
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	4b16      	ldr	r3, [pc, #88]	; (8003318 <IO_outputByteToBitsPackage+0xb0>)
 80032c0:	72da      	strb	r2, [r3, #11]
	inputOutputs.relay_5=(bool)(byte & IO_BIT_4);
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	bf14      	ite	ne
 80032cc:	2301      	movne	r3, #1
 80032ce:	2300      	moveq	r3, #0
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	4b11      	ldr	r3, [pc, #68]	; (8003318 <IO_outputByteToBitsPackage+0xb0>)
 80032d4:	731a      	strb	r2, [r3, #12]
	inputOutputs.relay_6=(bool)(byte & IO_BIT_5);
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	f003 0320 	and.w	r3, r3, #32
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bf14      	ite	ne
 80032e0:	2301      	movne	r3, #1
 80032e2:	2300      	moveq	r3, #0
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <IO_outputByteToBitsPackage+0xb0>)
 80032e8:	735a      	strb	r2, [r3, #13]
	inputOutputs.relay_7=(bool)(byte & IO_BIT_6);
 80032ea:	79fb      	ldrb	r3, [r7, #7]
 80032ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	bf14      	ite	ne
 80032f4:	2301      	movne	r3, #1
 80032f6:	2300      	moveq	r3, #0
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	4b07      	ldr	r3, [pc, #28]	; (8003318 <IO_outputByteToBitsPackage+0xb0>)
 80032fc:	739a      	strb	r2, [r3, #14]
	inputOutputs.relay_8=(bool)(byte & IO_BIT_7);
 80032fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	09db      	lsrs	r3, r3, #7
 8003306:	b2da      	uxtb	r2, r3
 8003308:	4b03      	ldr	r3, [pc, #12]	; (8003318 <IO_outputByteToBitsPackage+0xb0>)
 800330a:	73da      	strb	r2, [r3, #15]
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	200036a4 	.word	0x200036a4

0800331c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003322:	f3ef 8305 	mrs	r3, IPSR
 8003326:	60bb      	str	r3, [r7, #8]
  return(result);
 8003328:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10f      	bne.n	800334e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800332e:	f3ef 8310 	mrs	r3, PRIMASK
 8003332:	607b      	str	r3, [r7, #4]
  return(result);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d109      	bne.n	800334e <osKernelInitialize+0x32>
 800333a:	4b10      	ldr	r3, [pc, #64]	; (800337c <osKernelInitialize+0x60>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d109      	bne.n	8003356 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003342:	f3ef 8311 	mrs	r3, BASEPRI
 8003346:	603b      	str	r3, [r7, #0]
  return(result);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800334e:	f06f 0305 	mvn.w	r3, #5
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	e00c      	b.n	8003370 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003356:	4b09      	ldr	r3, [pc, #36]	; (800337c <osKernelInitialize+0x60>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d105      	bne.n	800336a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800335e:	4b07      	ldr	r3, [pc, #28]	; (800337c <osKernelInitialize+0x60>)
 8003360:	2201      	movs	r2, #1
 8003362:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003364:	2300      	movs	r3, #0
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	e002      	b.n	8003370 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800336a:	f04f 33ff 	mov.w	r3, #4294967295
 800336e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003370:	68fb      	ldr	r3, [r7, #12]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr
 800337c:	20000040 	.word	0x20000040

08003380 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003386:	f3ef 8305 	mrs	r3, IPSR
 800338a:	60bb      	str	r3, [r7, #8]
  return(result);
 800338c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10f      	bne.n	80033b2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003392:	f3ef 8310 	mrs	r3, PRIMASK
 8003396:	607b      	str	r3, [r7, #4]
  return(result);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d109      	bne.n	80033b2 <osKernelStart+0x32>
 800339e:	4b11      	ldr	r3, [pc, #68]	; (80033e4 <osKernelStart+0x64>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d109      	bne.n	80033ba <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033a6:	f3ef 8311 	mrs	r3, BASEPRI
 80033aa:	603b      	str	r3, [r7, #0]
  return(result);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <osKernelStart+0x3a>
    stat = osErrorISR;
 80033b2:	f06f 0305 	mvn.w	r3, #5
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	e00e      	b.n	80033d8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80033ba:	4b0a      	ldr	r3, [pc, #40]	; (80033e4 <osKernelStart+0x64>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d107      	bne.n	80033d2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80033c2:	4b08      	ldr	r3, [pc, #32]	; (80033e4 <osKernelStart+0x64>)
 80033c4:	2202      	movs	r2, #2
 80033c6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80033c8:	f001 f9da 	bl	8004780 <vTaskStartScheduler>
      stat = osOK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	e002      	b.n	80033d8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80033d2:	f04f 33ff 	mov.w	r3, #4294967295
 80033d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80033d8:	68fb      	ldr	r3, [r7, #12]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000040 	.word	0x20000040

080033e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b092      	sub	sp, #72	; 0x48
 80033ec:	af04      	add	r7, sp, #16
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033f8:	f3ef 8305 	mrs	r3, IPSR
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003400:	2b00      	cmp	r3, #0
 8003402:	f040 8094 	bne.w	800352e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003406:	f3ef 8310 	mrs	r3, PRIMASK
 800340a:	623b      	str	r3, [r7, #32]
  return(result);
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	2b00      	cmp	r3, #0
 8003410:	f040 808d 	bne.w	800352e <osThreadNew+0x146>
 8003414:	4b48      	ldr	r3, [pc, #288]	; (8003538 <osThreadNew+0x150>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b02      	cmp	r3, #2
 800341a:	d106      	bne.n	800342a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800341c:	f3ef 8311 	mrs	r3, BASEPRI
 8003420:	61fb      	str	r3, [r7, #28]
  return(result);
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	2b00      	cmp	r3, #0
 8003426:	f040 8082 	bne.w	800352e <osThreadNew+0x146>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d07e      	beq.n	800352e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003430:	2380      	movs	r3, #128	; 0x80
 8003432:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003434:	2318      	movs	r3, #24
 8003436:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003438:	2300      	movs	r3, #0
 800343a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800343c:	f107 031b 	add.w	r3, r7, #27
 8003440:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003442:	f04f 33ff 	mov.w	r3, #4294967295
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d045      	beq.n	80034da <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <osThreadNew+0x74>
        name = attr->name;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d002      	beq.n	800346a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800346a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346c:	2b00      	cmp	r3, #0
 800346e:	d008      	beq.n	8003482 <osThreadNew+0x9a>
 8003470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003472:	2b38      	cmp	r3, #56	; 0x38
 8003474:	d805      	bhi.n	8003482 <osThreadNew+0x9a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <osThreadNew+0x9e>
        return (NULL);
 8003482:	2300      	movs	r3, #0
 8003484:	e054      	b.n	8003530 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	089b      	lsrs	r3, r3, #2
 8003494:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00e      	beq.n	80034bc <osThreadNew+0xd4>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	2b5b      	cmp	r3, #91	; 0x5b
 80034a4:	d90a      	bls.n	80034bc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d006      	beq.n	80034bc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <osThreadNew+0xd4>
        mem = 1;
 80034b6:	2301      	movs	r3, #1
 80034b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ba:	e010      	b.n	80034de <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10c      	bne.n	80034de <osThreadNew+0xf6>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d108      	bne.n	80034de <osThreadNew+0xf6>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d104      	bne.n	80034de <osThreadNew+0xf6>
          mem = 0;
 80034d4:	2300      	movs	r3, #0
 80034d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80034d8:	e001      	b.n	80034de <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80034da:	2300      	movs	r3, #0
 80034dc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80034de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d110      	bne.n	8003506 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80034ec:	9202      	str	r2, [sp, #8]
 80034ee:	9301      	str	r3, [sp, #4]
 80034f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 ff74 	bl	80043e8 <xTaskCreateStatic>
 8003500:	4603      	mov	r3, r0
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	e013      	b.n	800352e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003508:	2b00      	cmp	r3, #0
 800350a:	d110      	bne.n	800352e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800350c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350e:	b29a      	uxth	r2, r3
 8003510:	f107 0314 	add.w	r3, r7, #20
 8003514:	9301      	str	r3, [sp, #4]
 8003516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 ffbe 	bl	80044a0 <xTaskCreate>
 8003524:	4603      	mov	r3, r0
 8003526:	2b01      	cmp	r3, #1
 8003528:	d001      	beq.n	800352e <osThreadNew+0x146>
          hTask = NULL;
 800352a:	2300      	movs	r3, #0
 800352c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800352e:	697b      	ldr	r3, [r7, #20]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3738      	adds	r7, #56	; 0x38
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20000040 	.word	0x20000040

0800353c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003544:	f3ef 8305 	mrs	r3, IPSR
 8003548:	613b      	str	r3, [r7, #16]
  return(result);
 800354a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10f      	bne.n	8003570 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003550:	f3ef 8310 	mrs	r3, PRIMASK
 8003554:	60fb      	str	r3, [r7, #12]
  return(result);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d109      	bne.n	8003570 <osDelay+0x34>
 800355c:	4b0d      	ldr	r3, [pc, #52]	; (8003594 <osDelay+0x58>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b02      	cmp	r3, #2
 8003562:	d109      	bne.n	8003578 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003564:	f3ef 8311 	mrs	r3, BASEPRI
 8003568:	60bb      	str	r3, [r7, #8]
  return(result);
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <osDelay+0x3c>
    stat = osErrorISR;
 8003570:	f06f 0305 	mvn.w	r3, #5
 8003574:	617b      	str	r3, [r7, #20]
 8003576:	e007      	b.n	8003588 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f001 f8c8 	bl	8004718 <vTaskDelay>
    }
  }

  return (stat);
 8003588:	697b      	ldr	r3, [r7, #20]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	20000040 	.word	0x20000040

08003598 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4a06      	ldr	r2, [pc, #24]	; (80035c0 <vApplicationGetIdleTaskMemory+0x28>)
 80035a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4a05      	ldr	r2, [pc, #20]	; (80035c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80035ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2280      	movs	r2, #128	; 0x80
 80035b4:	601a      	str	r2, [r3, #0]
}
 80035b6:	bf00      	nop
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr
 80035c0:	20000044 	.word	0x20000044
 80035c4:	200000a0 	.word	0x200000a0

080035c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4a07      	ldr	r2, [pc, #28]	; (80035f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80035d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	4a06      	ldr	r2, [pc, #24]	; (80035f8 <vApplicationGetTimerTaskMemory+0x30>)
 80035de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035e6:	601a      	str	r2, [r3, #0]
}
 80035e8:	bf00      	nop
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc80      	pop	{r7}
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	200002a0 	.word	0x200002a0
 80035f8:	200002fc 	.word	0x200002fc

080035fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f103 0208 	add.w	r2, r3, #8
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f04f 32ff 	mov.w	r2, #4294967295
 8003614:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f103 0208 	add.w	r2, r3, #8
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f103 0208 	add.w	r2, r3, #8
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr

0800363a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr

08003652 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003652:	b480      	push	{r7}
 8003654:	b085      	sub	sp, #20
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
 800365a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	601a      	str	r2, [r3, #0]
}
 800368e:	bf00      	nop
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	bc80      	pop	{r7}
 8003696:	4770      	bx	lr

08003698 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ae:	d103      	bne.n	80036b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	e00c      	b.n	80036d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3308      	adds	r3, #8
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	e002      	b.n	80036c6 <vListInsert+0x2e>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d2f6      	bcs.n	80036c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	601a      	str	r2, [r3, #0]
}
 80036fe:	bf00      	nop
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr

08003708 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6892      	ldr	r2, [r2, #8]
 800371e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6852      	ldr	r2, [r2, #4]
 8003728:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	429a      	cmp	r2, r3
 8003732:	d103      	bne.n	800373c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	1e5a      	subs	r2, r3, #1
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr
	...

0800375c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10a      	bne.n	8003786 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003782:	bf00      	nop
 8003784:	e7fe      	b.n	8003784 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003786:	f002 fa31 	bl	8005bec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003792:	68f9      	ldr	r1, [r7, #12]
 8003794:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003796:	fb01 f303 	mul.w	r3, r1, r3
 800379a:	441a      	add	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b6:	3b01      	subs	r3, #1
 80037b8:	68f9      	ldr	r1, [r7, #12]
 80037ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037bc:	fb01 f303 	mul.w	r3, r1, r3
 80037c0:	441a      	add	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	22ff      	movs	r2, #255	; 0xff
 80037ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	22ff      	movs	r2, #255	; 0xff
 80037d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d114      	bne.n	8003806 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d01a      	beq.n	800381a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	3310      	adds	r3, #16
 80037e8:	4618      	mov	r0, r3
 80037ea:	f001 fa53 	bl	8004c94 <xTaskRemoveFromEventList>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d012      	beq.n	800381a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80037f4:	4b0c      	ldr	r3, [pc, #48]	; (8003828 <xQueueGenericReset+0xcc>)
 80037f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	f3bf 8f4f 	dsb	sy
 8003800:	f3bf 8f6f 	isb	sy
 8003804:	e009      	b.n	800381a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	3310      	adds	r3, #16
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff fef6 	bl	80035fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	3324      	adds	r3, #36	; 0x24
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff fef1 	bl	80035fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800381a:	f002 fa17 	bl	8005c4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800381e:	2301      	movs	r3, #1
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	e000ed04 	.word	0xe000ed04

0800382c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800382c:	b580      	push	{r7, lr}
 800382e:	b08e      	sub	sp, #56	; 0x38
 8003830:	af02      	add	r7, sp, #8
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
 8003838:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10a      	bne.n	8003856 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003844:	f383 8811 	msr	BASEPRI, r3
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003852:	bf00      	nop
 8003854:	e7fe      	b.n	8003854 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10a      	bne.n	8003872 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800385c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003860:	f383 8811 	msr	BASEPRI, r3
 8003864:	f3bf 8f6f 	isb	sy
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800386e:	bf00      	nop
 8003870:	e7fe      	b.n	8003870 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <xQueueGenericCreateStatic+0x52>
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <xQueueGenericCreateStatic+0x56>
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <xQueueGenericCreateStatic+0x58>
 8003882:	2300      	movs	r3, #0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10a      	bne.n	800389e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	623b      	str	r3, [r7, #32]
}
 800389a:	bf00      	nop
 800389c:	e7fe      	b.n	800389c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d102      	bne.n	80038aa <xQueueGenericCreateStatic+0x7e>
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <xQueueGenericCreateStatic+0x82>
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <xQueueGenericCreateStatic+0x84>
 80038ae:	2300      	movs	r3, #0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10a      	bne.n	80038ca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80038b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b8:	f383 8811 	msr	BASEPRI, r3
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	61fb      	str	r3, [r7, #28]
}
 80038c6:	bf00      	nop
 80038c8:	e7fe      	b.n	80038c8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80038ca:	2350      	movs	r3, #80	; 0x50
 80038cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2b50      	cmp	r3, #80	; 0x50
 80038d2:	d00a      	beq.n	80038ea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80038d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d8:	f383 8811 	msr	BASEPRI, r3
 80038dc:	f3bf 8f6f 	isb	sy
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	61bb      	str	r3, [r7, #24]
}
 80038e6:	bf00      	nop
 80038e8:	e7fe      	b.n	80038e8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80038ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00d      	beq.n	8003910 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80038f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80038fc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	4613      	mov	r3, r2
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	68b9      	ldr	r1, [r7, #8]
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 f843 	bl	8003996 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003912:	4618      	mov	r0, r3
 8003914:	3730      	adds	r7, #48	; 0x30
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800391a:	b580      	push	{r7, lr}
 800391c:	b08a      	sub	sp, #40	; 0x28
 800391e:	af02      	add	r7, sp, #8
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	4613      	mov	r3, r2
 8003926:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10a      	bne.n	8003944 <xQueueGenericCreate+0x2a>
	__asm volatile
 800392e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003932:	f383 8811 	msr	BASEPRI, r3
 8003936:	f3bf 8f6f 	isb	sy
 800393a:	f3bf 8f4f 	dsb	sy
 800393e:	613b      	str	r3, [r7, #16]
}
 8003940:	bf00      	nop
 8003942:	e7fe      	b.n	8003942 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d102      	bne.n	8003950 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800394a:	2300      	movs	r3, #0
 800394c:	61fb      	str	r3, [r7, #28]
 800394e:	e004      	b.n	800395a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	fb02 f303 	mul.w	r3, r2, r3
 8003958:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	3350      	adds	r3, #80	; 0x50
 800395e:	4618      	mov	r0, r3
 8003960:	f002 fa44 	bl	8005dec <pvPortMalloc>
 8003964:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00f      	beq.n	800398c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	3350      	adds	r3, #80	; 0x50
 8003970:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800397a:	79fa      	ldrb	r2, [r7, #7]
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	4613      	mov	r3, r2
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	68b9      	ldr	r1, [r7, #8]
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 f805 	bl	8003996 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800398c:	69bb      	ldr	r3, [r7, #24]
	}
 800398e:	4618      	mov	r0, r3
 8003990:	3720      	adds	r7, #32
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b084      	sub	sp, #16
 800399a:	af00      	add	r7, sp, #0
 800399c:	60f8      	str	r0, [r7, #12]
 800399e:	60b9      	str	r1, [r7, #8]
 80039a0:	607a      	str	r2, [r7, #4]
 80039a2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d103      	bne.n	80039b2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	e002      	b.n	80039b8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80039c4:	2101      	movs	r1, #1
 80039c6:	69b8      	ldr	r0, [r7, #24]
 80039c8:	f7ff fec8 	bl	800375c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	78fa      	ldrb	r2, [r7, #3]
 80039d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80039d4:	bf00      	nop
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08e      	sub	sp, #56	; 0x38
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80039ea:	2300      	movs	r3, #0
 80039ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80039f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10a      	bne.n	8003a0e <xQueueGenericSend+0x32>
	__asm volatile
 80039f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a0a:	bf00      	nop
 8003a0c:	e7fe      	b.n	8003a0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d103      	bne.n	8003a1c <xQueueGenericSend+0x40>
 8003a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <xQueueGenericSend+0x44>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <xQueueGenericSend+0x46>
 8003a20:	2300      	movs	r3, #0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10a      	bne.n	8003a3c <xQueueGenericSend+0x60>
	__asm volatile
 8003a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2a:	f383 8811 	msr	BASEPRI, r3
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a38:	bf00      	nop
 8003a3a:	e7fe      	b.n	8003a3a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d103      	bne.n	8003a4a <xQueueGenericSend+0x6e>
 8003a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d101      	bne.n	8003a4e <xQueueGenericSend+0x72>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <xQueueGenericSend+0x74>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10a      	bne.n	8003a6a <xQueueGenericSend+0x8e>
	__asm volatile
 8003a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	623b      	str	r3, [r7, #32]
}
 8003a66:	bf00      	nop
 8003a68:	e7fe      	b.n	8003a68 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a6a:	f001 fad5 	bl	8005018 <xTaskGetSchedulerState>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d102      	bne.n	8003a7a <xQueueGenericSend+0x9e>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <xQueueGenericSend+0xa2>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <xQueueGenericSend+0xa4>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10a      	bne.n	8003a9a <xQueueGenericSend+0xbe>
	__asm volatile
 8003a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	61fb      	str	r3, [r7, #28]
}
 8003a96:	bf00      	nop
 8003a98:	e7fe      	b.n	8003a98 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a9a:	f002 f8a7 	bl	8005bec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d302      	bcc.n	8003ab0 <xQueueGenericSend+0xd4>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d129      	bne.n	8003b04 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	68b9      	ldr	r1, [r7, #8]
 8003ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ab6:	f000 fb2a 	bl	800410e <prvCopyDataToQueue>
 8003aba:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d010      	beq.n	8003ae6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac6:	3324      	adds	r3, #36	; 0x24
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f001 f8e3 	bl	8004c94 <xTaskRemoveFromEventList>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d013      	beq.n	8003afc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ad4:	4b3f      	ldr	r3, [pc, #252]	; (8003bd4 <xQueueGenericSend+0x1f8>)
 8003ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	e00a      	b.n	8003afc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d007      	beq.n	8003afc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003aec:	4b39      	ldr	r3, [pc, #228]	; (8003bd4 <xQueueGenericSend+0x1f8>)
 8003aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003afc:	f002 f8a6 	bl	8005c4c <vPortExitCritical>
				return pdPASS;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e063      	b.n	8003bcc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d103      	bne.n	8003b12 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b0a:	f002 f89f 	bl	8005c4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e05c      	b.n	8003bcc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d106      	bne.n	8003b26 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b18:	f107 0314 	add.w	r3, r7, #20
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f001 f91d 	bl	8004d5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b22:	2301      	movs	r3, #1
 8003b24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b26:	f002 f891 	bl	8005c4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b2a:	f000 fe8f 	bl	800484c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b2e:	f002 f85d 	bl	8005bec <vPortEnterCritical>
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b38:	b25b      	sxtb	r3, r3
 8003b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3e:	d103      	bne.n	8003b48 <xQueueGenericSend+0x16c>
 8003b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b4e:	b25b      	sxtb	r3, r3
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b54:	d103      	bne.n	8003b5e <xQueueGenericSend+0x182>
 8003b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b5e:	f002 f875 	bl	8005c4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b62:	1d3a      	adds	r2, r7, #4
 8003b64:	f107 0314 	add.w	r3, r7, #20
 8003b68:	4611      	mov	r1, r2
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f001 f90c 	bl	8004d88 <xTaskCheckForTimeOut>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d124      	bne.n	8003bc0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b78:	f000 fbc1 	bl	80042fe <prvIsQueueFull>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d018      	beq.n	8003bb4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b84:	3310      	adds	r3, #16
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	4611      	mov	r1, r2
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f001 f832 	bl	8004bf4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b92:	f000 fb4c 	bl	800422e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b96:	f000 fe67 	bl	8004868 <xTaskResumeAll>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f47f af7c 	bne.w	8003a9a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003ba2:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <xQueueGenericSend+0x1f8>)
 8003ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	f3bf 8f6f 	isb	sy
 8003bb2:	e772      	b.n	8003a9a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bb6:	f000 fb3a 	bl	800422e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bba:	f000 fe55 	bl	8004868 <xTaskResumeAll>
 8003bbe:	e76c      	b.n	8003a9a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003bc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bc2:	f000 fb34 	bl	800422e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bc6:	f000 fe4f 	bl	8004868 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003bca:	2300      	movs	r3, #0
		}
	}
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3738      	adds	r7, #56	; 0x38
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	e000ed04 	.word	0xe000ed04

08003bd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08e      	sub	sp, #56	; 0x38
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
 8003be4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10a      	bne.n	8003c06 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf4:	f383 8811 	msr	BASEPRI, r3
 8003bf8:	f3bf 8f6f 	isb	sy
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c02:	bf00      	nop
 8003c04:	e7fe      	b.n	8003c04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d103      	bne.n	8003c14 <xQueueGenericSendFromISR+0x3c>
 8003c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <xQueueGenericSendFromISR+0x40>
 8003c14:	2301      	movs	r3, #1
 8003c16:	e000      	b.n	8003c1a <xQueueGenericSendFromISR+0x42>
 8003c18:	2300      	movs	r3, #0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10a      	bne.n	8003c34 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c22:	f383 8811 	msr	BASEPRI, r3
 8003c26:	f3bf 8f6f 	isb	sy
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	623b      	str	r3, [r7, #32]
}
 8003c30:	bf00      	nop
 8003c32:	e7fe      	b.n	8003c32 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d103      	bne.n	8003c42 <xQueueGenericSendFromISR+0x6a>
 8003c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <xQueueGenericSendFromISR+0x6e>
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <xQueueGenericSendFromISR+0x70>
 8003c46:	2300      	movs	r3, #0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10a      	bne.n	8003c62 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c50:	f383 8811 	msr	BASEPRI, r3
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	61fb      	str	r3, [r7, #28]
}
 8003c5e:	bf00      	nop
 8003c60:	e7fe      	b.n	8003c60 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c62:	f002 f885 	bl	8005d70 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c66:	f3ef 8211 	mrs	r2, BASEPRI
 8003c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6e:	f383 8811 	msr	BASEPRI, r3
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	61ba      	str	r2, [r7, #24]
 8003c7c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c7e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d302      	bcc.n	8003c94 <xQueueGenericSendFromISR+0xbc>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d12c      	bne.n	8003cee <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	68b9      	ldr	r1, [r7, #8]
 8003ca2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ca4:	f000 fa33 	bl	800410e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ca8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb0:	d112      	bne.n	8003cd8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d016      	beq.n	8003ce8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbc:	3324      	adds	r3, #36	; 0x24
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 ffe8 	bl	8004c94 <xTaskRemoveFromEventList>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00e      	beq.n	8003ce8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00b      	beq.n	8003ce8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	e007      	b.n	8003ce8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003cd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003cdc:	3301      	adds	r3, #1
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	b25a      	sxtb	r2, r3
 8003ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003cec:	e001      	b.n	8003cf2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8003cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003cfc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3738      	adds	r7, #56	; 0x38
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b08c      	sub	sp, #48	; 0x30
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d14:	2300      	movs	r3, #0
 8003d16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10a      	bne.n	8003d38 <xQueueReceive+0x30>
	__asm volatile
 8003d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d26:	f383 8811 	msr	BASEPRI, r3
 8003d2a:	f3bf 8f6f 	isb	sy
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	623b      	str	r3, [r7, #32]
}
 8003d34:	bf00      	nop
 8003d36:	e7fe      	b.n	8003d36 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d103      	bne.n	8003d46 <xQueueReceive+0x3e>
 8003d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <xQueueReceive+0x42>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <xQueueReceive+0x44>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10a      	bne.n	8003d66 <xQueueReceive+0x5e>
	__asm volatile
 8003d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d54:	f383 8811 	msr	BASEPRI, r3
 8003d58:	f3bf 8f6f 	isb	sy
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	61fb      	str	r3, [r7, #28]
}
 8003d62:	bf00      	nop
 8003d64:	e7fe      	b.n	8003d64 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d66:	f001 f957 	bl	8005018 <xTaskGetSchedulerState>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d102      	bne.n	8003d76 <xQueueReceive+0x6e>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <xQueueReceive+0x72>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <xQueueReceive+0x74>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10a      	bne.n	8003d96 <xQueueReceive+0x8e>
	__asm volatile
 8003d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	61bb      	str	r3, [r7, #24]
}
 8003d92:	bf00      	nop
 8003d94:	e7fe      	b.n	8003d94 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d96:	f001 ff29 	bl	8005bec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d01f      	beq.n	8003de6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003da6:	68b9      	ldr	r1, [r7, #8]
 8003da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003daa:	f000 fa1a 	bl	80041e2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	1e5a      	subs	r2, r3, #1
 8003db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00f      	beq.n	8003dde <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc0:	3310      	adds	r3, #16
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 ff66 	bl	8004c94 <xTaskRemoveFromEventList>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d007      	beq.n	8003dde <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003dce:	4b3d      	ldr	r3, [pc, #244]	; (8003ec4 <xQueueReceive+0x1bc>)
 8003dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003dde:	f001 ff35 	bl	8005c4c <vPortExitCritical>
				return pdPASS;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e069      	b.n	8003eba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d103      	bne.n	8003df4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003dec:	f001 ff2e 	bl	8005c4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003df0:	2300      	movs	r3, #0
 8003df2:	e062      	b.n	8003eba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d106      	bne.n	8003e08 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003dfa:	f107 0310 	add.w	r3, r7, #16
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 ffac 	bl	8004d5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e04:	2301      	movs	r3, #1
 8003e06:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e08:	f001 ff20 	bl	8005c4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e0c:	f000 fd1e 	bl	800484c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e10:	f001 feec 	bl	8005bec <vPortEnterCritical>
 8003e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e1a:	b25b      	sxtb	r3, r3
 8003e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e20:	d103      	bne.n	8003e2a <xQueueReceive+0x122>
 8003e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e30:	b25b      	sxtb	r3, r3
 8003e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e36:	d103      	bne.n	8003e40 <xQueueReceive+0x138>
 8003e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e40:	f001 ff04 	bl	8005c4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e44:	1d3a      	adds	r2, r7, #4
 8003e46:	f107 0310 	add.w	r3, r7, #16
 8003e4a:	4611      	mov	r1, r2
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 ff9b 	bl	8004d88 <xTaskCheckForTimeOut>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d123      	bne.n	8003ea0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e5a:	f000 fa3a 	bl	80042d2 <prvIsQueueEmpty>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d017      	beq.n	8003e94 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e66:	3324      	adds	r3, #36	; 0x24
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 fec1 	bl	8004bf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e74:	f000 f9db 	bl	800422e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e78:	f000 fcf6 	bl	8004868 <xTaskResumeAll>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d189      	bne.n	8003d96 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003e82:	4b10      	ldr	r3, [pc, #64]	; (8003ec4 <xQueueReceive+0x1bc>)
 8003e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	e780      	b.n	8003d96 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e96:	f000 f9ca 	bl	800422e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e9a:	f000 fce5 	bl	8004868 <xTaskResumeAll>
 8003e9e:	e77a      	b.n	8003d96 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003ea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ea2:	f000 f9c4 	bl	800422e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ea6:	f000 fcdf 	bl	8004868 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eac:	f000 fa11 	bl	80042d2 <prvIsQueueEmpty>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f43f af6f 	beq.w	8003d96 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003eb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3730      	adds	r7, #48	; 0x30
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	e000ed04 	.word	0xe000ed04

08003ec8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08e      	sub	sp, #56	; 0x38
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003eda:	2300      	movs	r3, #0
 8003edc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10a      	bne.n	8003efa <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee8:	f383 8811 	msr	BASEPRI, r3
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	623b      	str	r3, [r7, #32]
}
 8003ef6:	bf00      	nop
 8003ef8:	e7fe      	b.n	8003ef8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f06:	f383 8811 	msr	BASEPRI, r3
 8003f0a:	f3bf 8f6f 	isb	sy
 8003f0e:	f3bf 8f4f 	dsb	sy
 8003f12:	61fb      	str	r3, [r7, #28]
}
 8003f14:	bf00      	nop
 8003f16:	e7fe      	b.n	8003f16 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f18:	f001 f87e 	bl	8005018 <xTaskGetSchedulerState>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d102      	bne.n	8003f28 <xQueueSemaphoreTake+0x60>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <xQueueSemaphoreTake+0x64>
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e000      	b.n	8003f2e <xQueueSemaphoreTake+0x66>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10a      	bne.n	8003f48 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f36:	f383 8811 	msr	BASEPRI, r3
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	f3bf 8f4f 	dsb	sy
 8003f42:	61bb      	str	r3, [r7, #24]
}
 8003f44:	bf00      	nop
 8003f46:	e7fe      	b.n	8003f46 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f48:	f001 fe50 	bl	8005bec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f50:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d024      	beq.n	8003fa2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5a:	1e5a      	subs	r2, r3, #1
 8003f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d104      	bne.n	8003f72 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003f68:	f001 f9d6 	bl	8005318 <pvTaskIncrementMutexHeldCount>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f70:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00f      	beq.n	8003f9a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7c:	3310      	adds	r3, #16
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 fe88 	bl	8004c94 <xTaskRemoveFromEventList>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d007      	beq.n	8003f9a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f8a:	4b54      	ldr	r3, [pc, #336]	; (80040dc <xQueueSemaphoreTake+0x214>)
 8003f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f9a:	f001 fe57 	bl	8005c4c <vPortExitCritical>
				return pdPASS;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e097      	b.n	80040d2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d111      	bne.n	8003fcc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb2:	f383 8811 	msr	BASEPRI, r3
 8003fb6:	f3bf 8f6f 	isb	sy
 8003fba:	f3bf 8f4f 	dsb	sy
 8003fbe:	617b      	str	r3, [r7, #20]
}
 8003fc0:	bf00      	nop
 8003fc2:	e7fe      	b.n	8003fc2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003fc4:	f001 fe42 	bl	8005c4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	e082      	b.n	80040d2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d106      	bne.n	8003fe0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fd2:	f107 030c 	add.w	r3, r7, #12
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 fec0 	bl	8004d5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fe0:	f001 fe34 	bl	8005c4c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003fe4:	f000 fc32 	bl	800484c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fe8:	f001 fe00 	bl	8005bec <vPortEnterCritical>
 8003fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ff2:	b25b      	sxtb	r3, r3
 8003ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff8:	d103      	bne.n	8004002 <xQueueSemaphoreTake+0x13a>
 8003ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004004:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004008:	b25b      	sxtb	r3, r3
 800400a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400e:	d103      	bne.n	8004018 <xQueueSemaphoreTake+0x150>
 8004010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004018:	f001 fe18 	bl	8005c4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800401c:	463a      	mov	r2, r7
 800401e:	f107 030c 	add.w	r3, r7, #12
 8004022:	4611      	mov	r1, r2
 8004024:	4618      	mov	r0, r3
 8004026:	f000 feaf 	bl	8004d88 <xTaskCheckForTimeOut>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d132      	bne.n	8004096 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004030:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004032:	f000 f94e 	bl	80042d2 <prvIsQueueEmpty>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d026      	beq.n	800408a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800403c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d109      	bne.n	8004058 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004044:	f001 fdd2 	bl	8005bec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	4618      	mov	r0, r3
 800404e:	f001 f801 	bl	8005054 <xTaskPriorityInherit>
 8004052:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004054:	f001 fdfa 	bl	8005c4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405a:	3324      	adds	r3, #36	; 0x24
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	4611      	mov	r1, r2
 8004060:	4618      	mov	r0, r3
 8004062:	f000 fdc7 	bl	8004bf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004066:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004068:	f000 f8e1 	bl	800422e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800406c:	f000 fbfc 	bl	8004868 <xTaskResumeAll>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	f47f af68 	bne.w	8003f48 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004078:	4b18      	ldr	r3, [pc, #96]	; (80040dc <xQueueSemaphoreTake+0x214>)
 800407a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	e75e      	b.n	8003f48 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800408a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800408c:	f000 f8cf 	bl	800422e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004090:	f000 fbea 	bl	8004868 <xTaskResumeAll>
 8004094:	e758      	b.n	8003f48 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004096:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004098:	f000 f8c9 	bl	800422e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800409c:	f000 fbe4 	bl	8004868 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80040a2:	f000 f916 	bl	80042d2 <prvIsQueueEmpty>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f43f af4d 	beq.w	8003f48 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80040ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00d      	beq.n	80040d0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80040b4:	f001 fd9a 	bl	8005bec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80040b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80040ba:	f000 f811 	bl	80040e0 <prvGetDisinheritPriorityAfterTimeout>
 80040be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80040c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040c6:	4618      	mov	r0, r3
 80040c8:	f001 f8a0 	bl	800520c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80040cc:	f001 fdbe 	bl	8005c4c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80040d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3738      	adds	r7, #56	; 0x38
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	e000ed04 	.word	0xe000ed04

080040e0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d006      	beq.n	80040fe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	e001      	b.n	8004102 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80040fe:	2300      	movs	r3, #0
 8004100:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004102:	68fb      	ldr	r3, [r7, #12]
	}
 8004104:	4618      	mov	r0, r3
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr

0800410e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b086      	sub	sp, #24
 8004112:	af00      	add	r7, sp, #0
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	60b9      	str	r1, [r7, #8]
 8004118:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800411a:	2300      	movs	r3, #0
 800411c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004122:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10d      	bne.n	8004148 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d14d      	bne.n	80041d0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	4618      	mov	r0, r3
 800413a:	f000 fff9 	bl	8005130 <xTaskPriorityDisinherit>
 800413e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	605a      	str	r2, [r3, #4]
 8004146:	e043      	b.n	80041d0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d119      	bne.n	8004182 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6898      	ldr	r0, [r3, #8]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	461a      	mov	r2, r3
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	f002 fd71 	bl	8006c40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	441a      	add	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	429a      	cmp	r2, r3
 8004176:	d32b      	bcc.n	80041d0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	609a      	str	r2, [r3, #8]
 8004180:	e026      	b.n	80041d0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	68d8      	ldr	r0, [r3, #12]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	461a      	mov	r2, r3
 800418c:	68b9      	ldr	r1, [r7, #8]
 800418e:	f002 fd57 	bl	8006c40 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	425b      	negs	r3, r3
 800419c:	441a      	add	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d207      	bcs.n	80041be <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	425b      	negs	r3, r3
 80041b8:	441a      	add	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d105      	bne.n	80041d0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	3b01      	subs	r3, #1
 80041ce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80041d8:	697b      	ldr	r3, [r7, #20]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b082      	sub	sp, #8
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d018      	beq.n	8004226 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	441a      	add	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68da      	ldr	r2, [r3, #12]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	429a      	cmp	r2, r3
 800420c:	d303      	bcc.n	8004216 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68d9      	ldr	r1, [r3, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	461a      	mov	r2, r3
 8004220:	6838      	ldr	r0, [r7, #0]
 8004222:	f002 fd0d 	bl	8006c40 <memcpy>
	}
}
 8004226:	bf00      	nop
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b084      	sub	sp, #16
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004236:	f001 fcd9 	bl	8005bec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004240:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004242:	e011      	b.n	8004268 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	2b00      	cmp	r3, #0
 800424a:	d012      	beq.n	8004272 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3324      	adds	r3, #36	; 0x24
 8004250:	4618      	mov	r0, r3
 8004252:	f000 fd1f 	bl	8004c94 <xTaskRemoveFromEventList>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800425c:	f000 fdf6 	bl	8004e4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	3b01      	subs	r3, #1
 8004264:	b2db      	uxtb	r3, r3
 8004266:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800426c:	2b00      	cmp	r3, #0
 800426e:	dce9      	bgt.n	8004244 <prvUnlockQueue+0x16>
 8004270:	e000      	b.n	8004274 <prvUnlockQueue+0x46>
					break;
 8004272:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	22ff      	movs	r2, #255	; 0xff
 8004278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800427c:	f001 fce6 	bl	8005c4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004280:	f001 fcb4 	bl	8005bec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800428a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800428c:	e011      	b.n	80042b2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d012      	beq.n	80042bc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	3310      	adds	r3, #16
 800429a:	4618      	mov	r0, r3
 800429c:	f000 fcfa 	bl	8004c94 <xTaskRemoveFromEventList>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80042a6:	f000 fdd1 	bl	8004e4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80042aa:	7bbb      	ldrb	r3, [r7, #14]
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	dce9      	bgt.n	800428e <prvUnlockQueue+0x60>
 80042ba:	e000      	b.n	80042be <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80042bc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	22ff      	movs	r2, #255	; 0xff
 80042c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80042c6:	f001 fcc1 	bl	8005c4c <vPortExitCritical>
}
 80042ca:	bf00      	nop
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b084      	sub	sp, #16
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042da:	f001 fc87 	bl	8005bec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d102      	bne.n	80042ec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80042e6:	2301      	movs	r3, #1
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	e001      	b.n	80042f0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80042ec:	2300      	movs	r3, #0
 80042ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042f0:	f001 fcac 	bl	8005c4c <vPortExitCritical>

	return xReturn;
 80042f4:	68fb      	ldr	r3, [r7, #12]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b084      	sub	sp, #16
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004306:	f001 fc71 	bl	8005bec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004312:	429a      	cmp	r2, r3
 8004314:	d102      	bne.n	800431c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004316:	2301      	movs	r3, #1
 8004318:	60fb      	str	r3, [r7, #12]
 800431a:	e001      	b.n	8004320 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800431c:	2300      	movs	r3, #0
 800431e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004320:	f001 fc94 	bl	8005c4c <vPortExitCritical>

	return xReturn;
 8004324:	68fb      	ldr	r3, [r7, #12]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800433a:	2300      	movs	r3, #0
 800433c:	60fb      	str	r3, [r7, #12]
 800433e:	e014      	b.n	800436a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004340:	4a0e      	ldr	r2, [pc, #56]	; (800437c <vQueueAddToRegistry+0x4c>)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10b      	bne.n	8004364 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800434c:	490b      	ldr	r1, [pc, #44]	; (800437c <vQueueAddToRegistry+0x4c>)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004356:	4a09      	ldr	r2, [pc, #36]	; (800437c <vQueueAddToRegistry+0x4c>)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	4413      	add	r3, r2
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004362:	e006      	b.n	8004372 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	3301      	adds	r3, #1
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b07      	cmp	r3, #7
 800436e:	d9e7      	bls.n	8004340 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004370:	bf00      	nop
 8004372:	bf00      	nop
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr
 800437c:	200036b4 	.word	0x200036b4

08004380 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004390:	f001 fc2c 	bl	8005bec <vPortEnterCritical>
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800439a:	b25b      	sxtb	r3, r3
 800439c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a0:	d103      	bne.n	80043aa <vQueueWaitForMessageRestricted+0x2a>
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043b0:	b25b      	sxtb	r3, r3
 80043b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b6:	d103      	bne.n	80043c0 <vQueueWaitForMessageRestricted+0x40>
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043c0:	f001 fc44 	bl	8005c4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d106      	bne.n	80043da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	3324      	adds	r3, #36	; 0x24
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	68b9      	ldr	r1, [r7, #8]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 fc31 	bl	8004c3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80043da:	6978      	ldr	r0, [r7, #20]
 80043dc:	f7ff ff27 	bl	800422e <prvUnlockQueue>
	}
 80043e0:	bf00      	nop
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08e      	sub	sp, #56	; 0x38
 80043ec:	af04      	add	r7, sp, #16
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
 80043f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80043f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10a      	bne.n	8004412 <xTaskCreateStatic+0x2a>
	__asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	623b      	str	r3, [r7, #32]
}
 800440e:	bf00      	nop
 8004410:	e7fe      	b.n	8004410 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10a      	bne.n	800442e <xTaskCreateStatic+0x46>
	__asm volatile
 8004418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441c:	f383 8811 	msr	BASEPRI, r3
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	61fb      	str	r3, [r7, #28]
}
 800442a:	bf00      	nop
 800442c:	e7fe      	b.n	800442c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800442e:	235c      	movs	r3, #92	; 0x5c
 8004430:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	2b5c      	cmp	r3, #92	; 0x5c
 8004436:	d00a      	beq.n	800444e <xTaskCreateStatic+0x66>
	__asm volatile
 8004438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	61bb      	str	r3, [r7, #24]
}
 800444a:	bf00      	nop
 800444c:	e7fe      	b.n	800444c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800444e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004450:	2b00      	cmp	r3, #0
 8004452:	d01e      	beq.n	8004492 <xTaskCreateStatic+0xaa>
 8004454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004456:	2b00      	cmp	r3, #0
 8004458:	d01b      	beq.n	8004492 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800445a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004462:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	2202      	movs	r2, #2
 8004468:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800446c:	2300      	movs	r3, #0
 800446e:	9303      	str	r3, [sp, #12]
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	9302      	str	r3, [sp, #8]
 8004474:	f107 0314 	add.w	r3, r7, #20
 8004478:	9301      	str	r3, [sp, #4]
 800447a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	68b9      	ldr	r1, [r7, #8]
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 f850 	bl	800452a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800448a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800448c:	f000 f8d4 	bl	8004638 <prvAddNewTaskToReadyList>
 8004490:	e001      	b.n	8004496 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004496:	697b      	ldr	r3, [r7, #20]
	}
 8004498:	4618      	mov	r0, r3
 800449a:	3728      	adds	r7, #40	; 0x28
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08c      	sub	sp, #48	; 0x30
 80044a4:	af04      	add	r7, sp, #16
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	4613      	mov	r3, r2
 80044ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044b0:	88fb      	ldrh	r3, [r7, #6]
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4618      	mov	r0, r3
 80044b6:	f001 fc99 	bl	8005dec <pvPortMalloc>
 80044ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00e      	beq.n	80044e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80044c2:	205c      	movs	r0, #92	; 0x5c
 80044c4:	f001 fc92 	bl	8005dec <pvPortMalloc>
 80044c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	631a      	str	r2, [r3, #48]	; 0x30
 80044d6:	e005      	b.n	80044e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80044d8:	6978      	ldr	r0, [r7, #20]
 80044da:	f001 fd4b 	bl	8005f74 <vPortFree>
 80044de:	e001      	b.n	80044e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80044e0:	2300      	movs	r3, #0
 80044e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d017      	beq.n	800451a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80044f2:	88fa      	ldrh	r2, [r7, #6]
 80044f4:	2300      	movs	r3, #0
 80044f6:	9303      	str	r3, [sp, #12]
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	9302      	str	r3, [sp, #8]
 80044fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fe:	9301      	str	r3, [sp, #4]
 8004500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	68b9      	ldr	r1, [r7, #8]
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 f80e 	bl	800452a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800450e:	69f8      	ldr	r0, [r7, #28]
 8004510:	f000 f892 	bl	8004638 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004514:	2301      	movs	r3, #1
 8004516:	61bb      	str	r3, [r7, #24]
 8004518:	e002      	b.n	8004520 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800451a:	f04f 33ff 	mov.w	r3, #4294967295
 800451e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004520:	69bb      	ldr	r3, [r7, #24]
	}
 8004522:	4618      	mov	r0, r3
 8004524:	3720      	adds	r7, #32
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b088      	sub	sp, #32
 800452e:	af00      	add	r7, sp, #0
 8004530:	60f8      	str	r0, [r7, #12]
 8004532:	60b9      	str	r1, [r7, #8]
 8004534:	607a      	str	r2, [r7, #4]
 8004536:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	461a      	mov	r2, r3
 8004542:	21a5      	movs	r1, #165	; 0xa5
 8004544:	f002 fb8a 	bl	8006c5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004552:	3b01      	subs	r3, #1
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	f023 0307 	bic.w	r3, r3, #7
 8004560:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <prvInitialiseNewTask+0x58>
	__asm volatile
 800456c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	617b      	str	r3, [r7, #20]
}
 800457e:	bf00      	nop
 8004580:	e7fe      	b.n	8004580 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004582:	2300      	movs	r3, #0
 8004584:	61fb      	str	r3, [r7, #28]
 8004586:	e012      	b.n	80045ae <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	4413      	add	r3, r2
 800458e:	7819      	ldrb	r1, [r3, #0]
 8004590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	4413      	add	r3, r2
 8004596:	3334      	adds	r3, #52	; 0x34
 8004598:	460a      	mov	r2, r1
 800459a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	4413      	add	r3, r2
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d006      	beq.n	80045b6 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	3301      	adds	r3, #1
 80045ac:	61fb      	str	r3, [r7, #28]
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	2b0f      	cmp	r3, #15
 80045b2:	d9e9      	bls.n	8004588 <prvInitialiseNewTask+0x5e>
 80045b4:	e000      	b.n	80045b8 <prvInitialiseNewTask+0x8e>
		{
			break;
 80045b6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80045b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80045c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c2:	2b37      	cmp	r3, #55	; 0x37
 80045c4:	d901      	bls.n	80045ca <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80045c6:	2337      	movs	r3, #55	; 0x37
 80045c8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80045ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045ce:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80045d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045d4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80045d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d8:	2200      	movs	r2, #0
 80045da:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80045dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045de:	3304      	adds	r3, #4
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff f82a 	bl	800363a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80045e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e8:	3318      	adds	r3, #24
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff f825 	bl	800363a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80045f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80045fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004604:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004608:	2200      	movs	r2, #0
 800460a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	68f9      	ldr	r1, [r7, #12]
 8004618:	69b8      	ldr	r0, [r7, #24]
 800461a:	f001 f9f7 	bl	8005a0c <pxPortInitialiseStack>
 800461e:	4602      	mov	r2, r0
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004626:	2b00      	cmp	r3, #0
 8004628:	d002      	beq.n	8004630 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800462a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800462e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004630:	bf00      	nop
 8004632:	3720      	adds	r7, #32
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004640:	f001 fad4 	bl	8005bec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004644:	4b2d      	ldr	r3, [pc, #180]	; (80046fc <prvAddNewTaskToReadyList+0xc4>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3301      	adds	r3, #1
 800464a:	4a2c      	ldr	r2, [pc, #176]	; (80046fc <prvAddNewTaskToReadyList+0xc4>)
 800464c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800464e:	4b2c      	ldr	r3, [pc, #176]	; (8004700 <prvAddNewTaskToReadyList+0xc8>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d109      	bne.n	800466a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004656:	4a2a      	ldr	r2, [pc, #168]	; (8004700 <prvAddNewTaskToReadyList+0xc8>)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800465c:	4b27      	ldr	r3, [pc, #156]	; (80046fc <prvAddNewTaskToReadyList+0xc4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d110      	bne.n	8004686 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004664:	f000 fc16 	bl	8004e94 <prvInitialiseTaskLists>
 8004668:	e00d      	b.n	8004686 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800466a:	4b26      	ldr	r3, [pc, #152]	; (8004704 <prvAddNewTaskToReadyList+0xcc>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d109      	bne.n	8004686 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004672:	4b23      	ldr	r3, [pc, #140]	; (8004700 <prvAddNewTaskToReadyList+0xc8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	429a      	cmp	r2, r3
 800467e:	d802      	bhi.n	8004686 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004680:	4a1f      	ldr	r2, [pc, #124]	; (8004700 <prvAddNewTaskToReadyList+0xc8>)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004686:	4b20      	ldr	r3, [pc, #128]	; (8004708 <prvAddNewTaskToReadyList+0xd0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3301      	adds	r3, #1
 800468c:	4a1e      	ldr	r2, [pc, #120]	; (8004708 <prvAddNewTaskToReadyList+0xd0>)
 800468e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004690:	4b1d      	ldr	r3, [pc, #116]	; (8004708 <prvAddNewTaskToReadyList+0xd0>)
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800469c:	4b1b      	ldr	r3, [pc, #108]	; (800470c <prvAddNewTaskToReadyList+0xd4>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d903      	bls.n	80046ac <prvAddNewTaskToReadyList+0x74>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	4a18      	ldr	r2, [pc, #96]	; (800470c <prvAddNewTaskToReadyList+0xd4>)
 80046aa:	6013      	str	r3, [r2, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4a15      	ldr	r2, [pc, #84]	; (8004710 <prvAddNewTaskToReadyList+0xd8>)
 80046ba:	441a      	add	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3304      	adds	r3, #4
 80046c0:	4619      	mov	r1, r3
 80046c2:	4610      	mov	r0, r2
 80046c4:	f7fe ffc5 	bl	8003652 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80046c8:	f001 fac0 	bl	8005c4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80046cc:	4b0d      	ldr	r3, [pc, #52]	; (8004704 <prvAddNewTaskToReadyList+0xcc>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00e      	beq.n	80046f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80046d4:	4b0a      	ldr	r3, [pc, #40]	; (8004700 <prvAddNewTaskToReadyList+0xc8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	429a      	cmp	r2, r3
 80046e0:	d207      	bcs.n	80046f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80046e2:	4b0c      	ldr	r3, [pc, #48]	; (8004714 <prvAddNewTaskToReadyList+0xdc>)
 80046e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	20000bd0 	.word	0x20000bd0
 8004700:	200006fc 	.word	0x200006fc
 8004704:	20000bdc 	.word	0x20000bdc
 8004708:	20000bec 	.word	0x20000bec
 800470c:	20000bd8 	.word	0x20000bd8
 8004710:	20000700 	.word	0x20000700
 8004714:	e000ed04 	.word	0xe000ed04

08004718 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004720:	2300      	movs	r3, #0
 8004722:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d017      	beq.n	800475a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800472a:	4b13      	ldr	r3, [pc, #76]	; (8004778 <vTaskDelay+0x60>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <vTaskDelay+0x30>
	__asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	60bb      	str	r3, [r7, #8]
}
 8004744:	bf00      	nop
 8004746:	e7fe      	b.n	8004746 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004748:	f000 f880 	bl	800484c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800474c:	2100      	movs	r1, #0
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fdf6 	bl	8005340 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004754:	f000 f888 	bl	8004868 <xTaskResumeAll>
 8004758:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d107      	bne.n	8004770 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004760:	4b06      	ldr	r3, [pc, #24]	; (800477c <vTaskDelay+0x64>)
 8004762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004770:	bf00      	nop
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	20000bf8 	.word	0x20000bf8
 800477c:	e000ed04 	.word	0xe000ed04

08004780 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08a      	sub	sp, #40	; 0x28
 8004784:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004786:	2300      	movs	r3, #0
 8004788:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800478a:	2300      	movs	r3, #0
 800478c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800478e:	463a      	mov	r2, r7
 8004790:	1d39      	adds	r1, r7, #4
 8004792:	f107 0308 	add.w	r3, r7, #8
 8004796:	4618      	mov	r0, r3
 8004798:	f7fe fefe 	bl	8003598 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800479c:	6839      	ldr	r1, [r7, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	9202      	str	r2, [sp, #8]
 80047a4:	9301      	str	r3, [sp, #4]
 80047a6:	2300      	movs	r3, #0
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	2300      	movs	r3, #0
 80047ac:	460a      	mov	r2, r1
 80047ae:	4921      	ldr	r1, [pc, #132]	; (8004834 <vTaskStartScheduler+0xb4>)
 80047b0:	4821      	ldr	r0, [pc, #132]	; (8004838 <vTaskStartScheduler+0xb8>)
 80047b2:	f7ff fe19 	bl	80043e8 <xTaskCreateStatic>
 80047b6:	4603      	mov	r3, r0
 80047b8:	4a20      	ldr	r2, [pc, #128]	; (800483c <vTaskStartScheduler+0xbc>)
 80047ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80047bc:	4b1f      	ldr	r3, [pc, #124]	; (800483c <vTaskStartScheduler+0xbc>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80047c4:	2301      	movs	r3, #1
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	e001      	b.n	80047ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d102      	bne.n	80047da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80047d4:	f000 fe08 	bl	80053e8 <xTimerCreateTimerTask>
 80047d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d116      	bne.n	800480e <vTaskStartScheduler+0x8e>
	__asm volatile
 80047e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	613b      	str	r3, [r7, #16]
}
 80047f2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80047f4:	4b12      	ldr	r3, [pc, #72]	; (8004840 <vTaskStartScheduler+0xc0>)
 80047f6:	f04f 32ff 	mov.w	r2, #4294967295
 80047fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80047fc:	4b11      	ldr	r3, [pc, #68]	; (8004844 <vTaskStartScheduler+0xc4>)
 80047fe:	2201      	movs	r2, #1
 8004800:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004802:	4b11      	ldr	r3, [pc, #68]	; (8004848 <vTaskStartScheduler+0xc8>)
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004808:	f001 f97e 	bl	8005b08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800480c:	e00e      	b.n	800482c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004814:	d10a      	bne.n	800482c <vTaskStartScheduler+0xac>
	__asm volatile
 8004816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	60fb      	str	r3, [r7, #12]
}
 8004828:	bf00      	nop
 800482a:	e7fe      	b.n	800482a <vTaskStartScheduler+0xaa>
}
 800482c:	bf00      	nop
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	08006ca0 	.word	0x08006ca0
 8004838:	08004e65 	.word	0x08004e65
 800483c:	20000bf4 	.word	0x20000bf4
 8004840:	20000bf0 	.word	0x20000bf0
 8004844:	20000bdc 	.word	0x20000bdc
 8004848:	20000bd4 	.word	0x20000bd4

0800484c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004850:	4b04      	ldr	r3, [pc, #16]	; (8004864 <vTaskSuspendAll+0x18>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3301      	adds	r3, #1
 8004856:	4a03      	ldr	r2, [pc, #12]	; (8004864 <vTaskSuspendAll+0x18>)
 8004858:	6013      	str	r3, [r2, #0]
}
 800485a:	bf00      	nop
 800485c:	46bd      	mov	sp, r7
 800485e:	bc80      	pop	{r7}
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	20000bf8 	.word	0x20000bf8

08004868 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004872:	2300      	movs	r3, #0
 8004874:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004876:	4b42      	ldr	r3, [pc, #264]	; (8004980 <xTaskResumeAll+0x118>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10a      	bne.n	8004894 <xTaskResumeAll+0x2c>
	__asm volatile
 800487e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	603b      	str	r3, [r7, #0]
}
 8004890:	bf00      	nop
 8004892:	e7fe      	b.n	8004892 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004894:	f001 f9aa 	bl	8005bec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004898:	4b39      	ldr	r3, [pc, #228]	; (8004980 <xTaskResumeAll+0x118>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3b01      	subs	r3, #1
 800489e:	4a38      	ldr	r2, [pc, #224]	; (8004980 <xTaskResumeAll+0x118>)
 80048a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048a2:	4b37      	ldr	r3, [pc, #220]	; (8004980 <xTaskResumeAll+0x118>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d162      	bne.n	8004970 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80048aa:	4b36      	ldr	r3, [pc, #216]	; (8004984 <xTaskResumeAll+0x11c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d05e      	beq.n	8004970 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048b2:	e02f      	b.n	8004914 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80048b4:	4b34      	ldr	r3, [pc, #208]	; (8004988 <xTaskResumeAll+0x120>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	3318      	adds	r3, #24
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7fe ff21 	bl	8003708 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3304      	adds	r3, #4
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fe ff1c 	bl	8003708 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d4:	4b2d      	ldr	r3, [pc, #180]	; (800498c <xTaskResumeAll+0x124>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d903      	bls.n	80048e4 <xTaskResumeAll+0x7c>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e0:	4a2a      	ldr	r2, [pc, #168]	; (800498c <xTaskResumeAll+0x124>)
 80048e2:	6013      	str	r3, [r2, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e8:	4613      	mov	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4a27      	ldr	r2, [pc, #156]	; (8004990 <xTaskResumeAll+0x128>)
 80048f2:	441a      	add	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	3304      	adds	r3, #4
 80048f8:	4619      	mov	r1, r3
 80048fa:	4610      	mov	r0, r2
 80048fc:	f7fe fea9 	bl	8003652 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004904:	4b23      	ldr	r3, [pc, #140]	; (8004994 <xTaskResumeAll+0x12c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490a:	429a      	cmp	r2, r3
 800490c:	d302      	bcc.n	8004914 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800490e:	4b22      	ldr	r3, [pc, #136]	; (8004998 <xTaskResumeAll+0x130>)
 8004910:	2201      	movs	r2, #1
 8004912:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004914:	4b1c      	ldr	r3, [pc, #112]	; (8004988 <xTaskResumeAll+0x120>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1cb      	bne.n	80048b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004922:	f000 fb55 	bl	8004fd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004926:	4b1d      	ldr	r3, [pc, #116]	; (800499c <xTaskResumeAll+0x134>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d010      	beq.n	8004954 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004932:	f000 f845 	bl	80049c0 <xTaskIncrementTick>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d002      	beq.n	8004942 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800493c:	4b16      	ldr	r3, [pc, #88]	; (8004998 <xTaskResumeAll+0x130>)
 800493e:	2201      	movs	r2, #1
 8004940:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3b01      	subs	r3, #1
 8004946:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1f1      	bne.n	8004932 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800494e:	4b13      	ldr	r3, [pc, #76]	; (800499c <xTaskResumeAll+0x134>)
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004954:	4b10      	ldr	r3, [pc, #64]	; (8004998 <xTaskResumeAll+0x130>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d009      	beq.n	8004970 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800495c:	2301      	movs	r3, #1
 800495e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004960:	4b0f      	ldr	r3, [pc, #60]	; (80049a0 <xTaskResumeAll+0x138>)
 8004962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004970:	f001 f96c 	bl	8005c4c <vPortExitCritical>

	return xAlreadyYielded;
 8004974:	68bb      	ldr	r3, [r7, #8]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20000bf8 	.word	0x20000bf8
 8004984:	20000bd0 	.word	0x20000bd0
 8004988:	20000b90 	.word	0x20000b90
 800498c:	20000bd8 	.word	0x20000bd8
 8004990:	20000700 	.word	0x20000700
 8004994:	200006fc 	.word	0x200006fc
 8004998:	20000be4 	.word	0x20000be4
 800499c:	20000be0 	.word	0x20000be0
 80049a0:	e000ed04 	.word	0xe000ed04

080049a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80049aa:	4b04      	ldr	r3, [pc, #16]	; (80049bc <xTaskGetTickCount+0x18>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80049b0:	687b      	ldr	r3, [r7, #4]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bc80      	pop	{r7}
 80049ba:	4770      	bx	lr
 80049bc:	20000bd4 	.word	0x20000bd4

080049c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80049c6:	2300      	movs	r3, #0
 80049c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049ca:	4b51      	ldr	r3, [pc, #324]	; (8004b10 <xTaskIncrementTick+0x150>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f040 808e 	bne.w	8004af0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049d4:	4b4f      	ldr	r3, [pc, #316]	; (8004b14 <xTaskIncrementTick+0x154>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3301      	adds	r3, #1
 80049da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80049dc:	4a4d      	ldr	r2, [pc, #308]	; (8004b14 <xTaskIncrementTick+0x154>)
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d120      	bne.n	8004a2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80049e8:	4b4b      	ldr	r3, [pc, #300]	; (8004b18 <xTaskIncrementTick+0x158>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <xTaskIncrementTick+0x48>
	__asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	603b      	str	r3, [r7, #0]
}
 8004a04:	bf00      	nop
 8004a06:	e7fe      	b.n	8004a06 <xTaskIncrementTick+0x46>
 8004a08:	4b43      	ldr	r3, [pc, #268]	; (8004b18 <xTaskIncrementTick+0x158>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	4b43      	ldr	r3, [pc, #268]	; (8004b1c <xTaskIncrementTick+0x15c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a41      	ldr	r2, [pc, #260]	; (8004b18 <xTaskIncrementTick+0x158>)
 8004a14:	6013      	str	r3, [r2, #0]
 8004a16:	4a41      	ldr	r2, [pc, #260]	; (8004b1c <xTaskIncrementTick+0x15c>)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6013      	str	r3, [r2, #0]
 8004a1c:	4b40      	ldr	r3, [pc, #256]	; (8004b20 <xTaskIncrementTick+0x160>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3301      	adds	r3, #1
 8004a22:	4a3f      	ldr	r2, [pc, #252]	; (8004b20 <xTaskIncrementTick+0x160>)
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	f000 fad3 	bl	8004fd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a2a:	4b3e      	ldr	r3, [pc, #248]	; (8004b24 <xTaskIncrementTick+0x164>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d34e      	bcc.n	8004ad2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a34:	4b38      	ldr	r3, [pc, #224]	; (8004b18 <xTaskIncrementTick+0x158>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <xTaskIncrementTick+0x82>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e000      	b.n	8004a44 <xTaskIncrementTick+0x84>
 8004a42:	2300      	movs	r3, #0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d004      	beq.n	8004a52 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a48:	4b36      	ldr	r3, [pc, #216]	; (8004b24 <xTaskIncrementTick+0x164>)
 8004a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a4e:	601a      	str	r2, [r3, #0]
					break;
 8004a50:	e03f      	b.n	8004ad2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a52:	4b31      	ldr	r3, [pc, #196]	; (8004b18 <xTaskIncrementTick+0x158>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d203      	bcs.n	8004a72 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a6a:	4a2e      	ldr	r2, [pc, #184]	; (8004b24 <xTaskIncrementTick+0x164>)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6013      	str	r3, [r2, #0]
						break;
 8004a70:	e02f      	b.n	8004ad2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	3304      	adds	r3, #4
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fe fe46 	bl	8003708 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d004      	beq.n	8004a8e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	3318      	adds	r3, #24
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fe fe3d 	bl	8003708 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a92:	4b25      	ldr	r3, [pc, #148]	; (8004b28 <xTaskIncrementTick+0x168>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d903      	bls.n	8004aa2 <xTaskIncrementTick+0xe2>
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9e:	4a22      	ldr	r2, [pc, #136]	; (8004b28 <xTaskIncrementTick+0x168>)
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4a1f      	ldr	r2, [pc, #124]	; (8004b2c <xTaskIncrementTick+0x16c>)
 8004ab0:	441a      	add	r2, r3
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4610      	mov	r0, r2
 8004aba:	f7fe fdca 	bl	8003652 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac2:	4b1b      	ldr	r3, [pc, #108]	; (8004b30 <xTaskIncrementTick+0x170>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d3b3      	bcc.n	8004a34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004acc:	2301      	movs	r3, #1
 8004ace:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ad0:	e7b0      	b.n	8004a34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ad2:	4b17      	ldr	r3, [pc, #92]	; (8004b30 <xTaskIncrementTick+0x170>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad8:	4914      	ldr	r1, [pc, #80]	; (8004b2c <xTaskIncrementTick+0x16c>)
 8004ada:	4613      	mov	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	440b      	add	r3, r1
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d907      	bls.n	8004afa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004aea:	2301      	movs	r3, #1
 8004aec:	617b      	str	r3, [r7, #20]
 8004aee:	e004      	b.n	8004afa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004af0:	4b10      	ldr	r3, [pc, #64]	; (8004b34 <xTaskIncrementTick+0x174>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3301      	adds	r3, #1
 8004af6:	4a0f      	ldr	r2, [pc, #60]	; (8004b34 <xTaskIncrementTick+0x174>)
 8004af8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004afa:	4b0f      	ldr	r3, [pc, #60]	; (8004b38 <xTaskIncrementTick+0x178>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004b02:	2301      	movs	r3, #1
 8004b04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004b06:	697b      	ldr	r3, [r7, #20]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3718      	adds	r7, #24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	20000bf8 	.word	0x20000bf8
 8004b14:	20000bd4 	.word	0x20000bd4
 8004b18:	20000b88 	.word	0x20000b88
 8004b1c:	20000b8c 	.word	0x20000b8c
 8004b20:	20000be8 	.word	0x20000be8
 8004b24:	20000bf0 	.word	0x20000bf0
 8004b28:	20000bd8 	.word	0x20000bd8
 8004b2c:	20000700 	.word	0x20000700
 8004b30:	200006fc 	.word	0x200006fc
 8004b34:	20000be0 	.word	0x20000be0
 8004b38:	20000be4 	.word	0x20000be4

08004b3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b42:	4b27      	ldr	r3, [pc, #156]	; (8004be0 <vTaskSwitchContext+0xa4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b4a:	4b26      	ldr	r3, [pc, #152]	; (8004be4 <vTaskSwitchContext+0xa8>)
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b50:	e041      	b.n	8004bd6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004b52:	4b24      	ldr	r3, [pc, #144]	; (8004be4 <vTaskSwitchContext+0xa8>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004b58:	4b23      	ldr	r3, [pc, #140]	; (8004be8 <vTaskSwitchContext+0xac>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	e010      	b.n	8004b82 <vTaskSwitchContext+0x46>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10a      	bne.n	8004b7c <vTaskSwitchContext+0x40>
	__asm volatile
 8004b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	607b      	str	r3, [r7, #4]
}
 8004b78:	bf00      	nop
 8004b7a:	e7fe      	b.n	8004b7a <vTaskSwitchContext+0x3e>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	491a      	ldr	r1, [pc, #104]	; (8004bec <vTaskSwitchContext+0xb0>)
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4613      	mov	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	440b      	add	r3, r1
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0e4      	beq.n	8004b60 <vTaskSwitchContext+0x24>
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4a12      	ldr	r2, [pc, #72]	; (8004bec <vTaskSwitchContext+0xb0>)
 8004ba2:	4413      	add	r3, r2
 8004ba4:	60bb      	str	r3, [r7, #8]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	605a      	str	r2, [r3, #4]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	3308      	adds	r3, #8
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d104      	bne.n	8004bc6 <vTaskSwitchContext+0x8a>
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	605a      	str	r2, [r3, #4]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	4a08      	ldr	r2, [pc, #32]	; (8004bf0 <vTaskSwitchContext+0xb4>)
 8004bce:	6013      	str	r3, [r2, #0]
 8004bd0:	4a05      	ldr	r2, [pc, #20]	; (8004be8 <vTaskSwitchContext+0xac>)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6013      	str	r3, [r2, #0]
}
 8004bd6:	bf00      	nop
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bc80      	pop	{r7}
 8004bde:	4770      	bx	lr
 8004be0:	20000bf8 	.word	0x20000bf8
 8004be4:	20000be4 	.word	0x20000be4
 8004be8:	20000bd8 	.word	0x20000bd8
 8004bec:	20000700 	.word	0x20000700
 8004bf0:	200006fc 	.word	0x200006fc

08004bf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10a      	bne.n	8004c1a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	60fb      	str	r3, [r7, #12]
}
 8004c16:	bf00      	nop
 8004c18:	e7fe      	b.n	8004c18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c1a:	4b07      	ldr	r3, [pc, #28]	; (8004c38 <vTaskPlaceOnEventList+0x44>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3318      	adds	r3, #24
 8004c20:	4619      	mov	r1, r3
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7fe fd38 	bl	8003698 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c28:	2101      	movs	r1, #1
 8004c2a:	6838      	ldr	r0, [r7, #0]
 8004c2c:	f000 fb88 	bl	8005340 <prvAddCurrentTaskToDelayedList>
}
 8004c30:	bf00      	nop
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	200006fc 	.word	0x200006fc

08004c3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10a      	bne.n	8004c64 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	617b      	str	r3, [r7, #20]
}
 8004c60:	bf00      	nop
 8004c62:	e7fe      	b.n	8004c62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c64:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <vTaskPlaceOnEventListRestricted+0x54>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3318      	adds	r3, #24
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f7fe fcf0 	bl	8003652 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d002      	beq.n	8004c7e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004c78:	f04f 33ff 	mov.w	r3, #4294967295
 8004c7c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	68b8      	ldr	r0, [r7, #8]
 8004c82:	f000 fb5d 	bl	8005340 <prvAddCurrentTaskToDelayedList>
	}
 8004c86:	bf00      	nop
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	200006fc 	.word	0x200006fc

08004c94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10a      	bne.n	8004cc0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cae:	f383 8811 	msr	BASEPRI, r3
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	60fb      	str	r3, [r7, #12]
}
 8004cbc:	bf00      	nop
 8004cbe:	e7fe      	b.n	8004cbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	3318      	adds	r3, #24
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fe fd1f 	bl	8003708 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cca:	4b1e      	ldr	r3, [pc, #120]	; (8004d44 <xTaskRemoveFromEventList+0xb0>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d11d      	bne.n	8004d0e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fe fd16 	bl	8003708 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce0:	4b19      	ldr	r3, [pc, #100]	; (8004d48 <xTaskRemoveFromEventList+0xb4>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d903      	bls.n	8004cf0 <xTaskRemoveFromEventList+0x5c>
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	4a16      	ldr	r2, [pc, #88]	; (8004d48 <xTaskRemoveFromEventList+0xb4>)
 8004cee:	6013      	str	r3, [r2, #0]
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4a13      	ldr	r2, [pc, #76]	; (8004d4c <xTaskRemoveFromEventList+0xb8>)
 8004cfe:	441a      	add	r2, r3
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	3304      	adds	r3, #4
 8004d04:	4619      	mov	r1, r3
 8004d06:	4610      	mov	r0, r2
 8004d08:	f7fe fca3 	bl	8003652 <vListInsertEnd>
 8004d0c:	e005      	b.n	8004d1a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	3318      	adds	r3, #24
 8004d12:	4619      	mov	r1, r3
 8004d14:	480e      	ldr	r0, [pc, #56]	; (8004d50 <xTaskRemoveFromEventList+0xbc>)
 8004d16:	f7fe fc9c 	bl	8003652 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d1e:	4b0d      	ldr	r3, [pc, #52]	; (8004d54 <xTaskRemoveFromEventList+0xc0>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d905      	bls.n	8004d34 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d2c:	4b0a      	ldr	r3, [pc, #40]	; (8004d58 <xTaskRemoveFromEventList+0xc4>)
 8004d2e:	2201      	movs	r2, #1
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	e001      	b.n	8004d38 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004d34:	2300      	movs	r3, #0
 8004d36:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004d38:	697b      	ldr	r3, [r7, #20]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3718      	adds	r7, #24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	20000bf8 	.word	0x20000bf8
 8004d48:	20000bd8 	.word	0x20000bd8
 8004d4c:	20000700 	.word	0x20000700
 8004d50:	20000b90 	.word	0x20000b90
 8004d54:	200006fc 	.word	0x200006fc
 8004d58:	20000be4 	.word	0x20000be4

08004d5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d64:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <vTaskInternalSetTimeOutState+0x24>)
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d6c:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <vTaskInternalSetTimeOutState+0x28>)
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	605a      	str	r2, [r3, #4]
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bc80      	pop	{r7}
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	20000be8 	.word	0x20000be8
 8004d84:	20000bd4 	.word	0x20000bd4

08004d88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10a      	bne.n	8004dae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9c:	f383 8811 	msr	BASEPRI, r3
 8004da0:	f3bf 8f6f 	isb	sy
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	613b      	str	r3, [r7, #16]
}
 8004daa:	bf00      	nop
 8004dac:	e7fe      	b.n	8004dac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10a      	bne.n	8004dca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db8:	f383 8811 	msr	BASEPRI, r3
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	60fb      	str	r3, [r7, #12]
}
 8004dc6:	bf00      	nop
 8004dc8:	e7fe      	b.n	8004dc8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004dca:	f000 ff0f 	bl	8005bec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004dce:	4b1d      	ldr	r3, [pc, #116]	; (8004e44 <xTaskCheckForTimeOut+0xbc>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de6:	d102      	bne.n	8004dee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004de8:	2300      	movs	r3, #0
 8004dea:	61fb      	str	r3, [r7, #28]
 8004dec:	e023      	b.n	8004e36 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	4b15      	ldr	r3, [pc, #84]	; (8004e48 <xTaskCheckForTimeOut+0xc0>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d007      	beq.n	8004e0a <xTaskCheckForTimeOut+0x82>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d302      	bcc.n	8004e0a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004e04:	2301      	movs	r3, #1
 8004e06:	61fb      	str	r3, [r7, #28]
 8004e08:	e015      	b.n	8004e36 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d20b      	bcs.n	8004e2c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	1ad2      	subs	r2, r2, r3
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f7ff ff9b 	bl	8004d5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e26:	2300      	movs	r3, #0
 8004e28:	61fb      	str	r3, [r7, #28]
 8004e2a:	e004      	b.n	8004e36 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004e32:	2301      	movs	r3, #1
 8004e34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004e36:	f000 ff09 	bl	8005c4c <vPortExitCritical>

	return xReturn;
 8004e3a:	69fb      	ldr	r3, [r7, #28]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3720      	adds	r7, #32
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	20000bd4 	.word	0x20000bd4
 8004e48:	20000be8 	.word	0x20000be8

08004e4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004e50:	4b03      	ldr	r3, [pc, #12]	; (8004e60 <vTaskMissedYield+0x14>)
 8004e52:	2201      	movs	r2, #1
 8004e54:	601a      	str	r2, [r3, #0]
}
 8004e56:	bf00      	nop
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bc80      	pop	{r7}
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	20000be4 	.word	0x20000be4

08004e64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e6c:	f000 f852 	bl	8004f14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e70:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <prvIdleTask+0x28>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d9f9      	bls.n	8004e6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e78:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <prvIdleTask+0x2c>)
 8004e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e88:	e7f0      	b.n	8004e6c <prvIdleTask+0x8>
 8004e8a:	bf00      	nop
 8004e8c:	20000700 	.word	0x20000700
 8004e90:	e000ed04 	.word	0xe000ed04

08004e94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	607b      	str	r3, [r7, #4]
 8004e9e:	e00c      	b.n	8004eba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4a12      	ldr	r2, [pc, #72]	; (8004ef4 <prvInitialiseTaskLists+0x60>)
 8004eac:	4413      	add	r3, r2
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fe fba4 	bl	80035fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	607b      	str	r3, [r7, #4]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b37      	cmp	r3, #55	; 0x37
 8004ebe:	d9ef      	bls.n	8004ea0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ec0:	480d      	ldr	r0, [pc, #52]	; (8004ef8 <prvInitialiseTaskLists+0x64>)
 8004ec2:	f7fe fb9b 	bl	80035fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ec6:	480d      	ldr	r0, [pc, #52]	; (8004efc <prvInitialiseTaskLists+0x68>)
 8004ec8:	f7fe fb98 	bl	80035fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ecc:	480c      	ldr	r0, [pc, #48]	; (8004f00 <prvInitialiseTaskLists+0x6c>)
 8004ece:	f7fe fb95 	bl	80035fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ed2:	480c      	ldr	r0, [pc, #48]	; (8004f04 <prvInitialiseTaskLists+0x70>)
 8004ed4:	f7fe fb92 	bl	80035fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ed8:	480b      	ldr	r0, [pc, #44]	; (8004f08 <prvInitialiseTaskLists+0x74>)
 8004eda:	f7fe fb8f 	bl	80035fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ede:	4b0b      	ldr	r3, [pc, #44]	; (8004f0c <prvInitialiseTaskLists+0x78>)
 8004ee0:	4a05      	ldr	r2, [pc, #20]	; (8004ef8 <prvInitialiseTaskLists+0x64>)
 8004ee2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ee4:	4b0a      	ldr	r3, [pc, #40]	; (8004f10 <prvInitialiseTaskLists+0x7c>)
 8004ee6:	4a05      	ldr	r2, [pc, #20]	; (8004efc <prvInitialiseTaskLists+0x68>)
 8004ee8:	601a      	str	r2, [r3, #0]
}
 8004eea:	bf00      	nop
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20000700 	.word	0x20000700
 8004ef8:	20000b60 	.word	0x20000b60
 8004efc:	20000b74 	.word	0x20000b74
 8004f00:	20000b90 	.word	0x20000b90
 8004f04:	20000ba4 	.word	0x20000ba4
 8004f08:	20000bbc 	.word	0x20000bbc
 8004f0c:	20000b88 	.word	0x20000b88
 8004f10:	20000b8c 	.word	0x20000b8c

08004f14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f1a:	e019      	b.n	8004f50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f1c:	f000 fe66 	bl	8005bec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004f20:	4b10      	ldr	r3, [pc, #64]	; (8004f64 <prvCheckTasksWaitingTermination+0x50>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7fe fbeb 	bl	8003708 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f32:	4b0d      	ldr	r3, [pc, #52]	; (8004f68 <prvCheckTasksWaitingTermination+0x54>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	4a0b      	ldr	r2, [pc, #44]	; (8004f68 <prvCheckTasksWaitingTermination+0x54>)
 8004f3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f3c:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <prvCheckTasksWaitingTermination+0x58>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3b01      	subs	r3, #1
 8004f42:	4a0a      	ldr	r2, [pc, #40]	; (8004f6c <prvCheckTasksWaitingTermination+0x58>)
 8004f44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f46:	f000 fe81 	bl	8005c4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f810 	bl	8004f70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f50:	4b06      	ldr	r3, [pc, #24]	; (8004f6c <prvCheckTasksWaitingTermination+0x58>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1e1      	bne.n	8004f1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f58:	bf00      	nop
 8004f5a:	bf00      	nop
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	20000ba4 	.word	0x20000ba4
 8004f68:	20000bd0 	.word	0x20000bd0
 8004f6c:	20000bb8 	.word	0x20000bb8

08004f70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d108      	bne.n	8004f94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 fff4 	bl	8005f74 <vPortFree>
				vPortFree( pxTCB );
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 fff1 	bl	8005f74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f92:	e018      	b.n	8004fc6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d103      	bne.n	8004fa6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 ffe8 	bl	8005f74 <vPortFree>
	}
 8004fa4:	e00f      	b.n	8004fc6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d00a      	beq.n	8004fc6 <prvDeleteTCB+0x56>
	__asm volatile
 8004fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	60fb      	str	r3, [r7, #12]
}
 8004fc2:	bf00      	nop
 8004fc4:	e7fe      	b.n	8004fc4 <prvDeleteTCB+0x54>
	}
 8004fc6:	bf00      	nop
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
	...

08004fd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fd6:	4b0e      	ldr	r3, [pc, #56]	; (8005010 <prvResetNextTaskUnblockTime+0x40>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <prvResetNextTaskUnblockTime+0x14>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e000      	b.n	8004fe6 <prvResetNextTaskUnblockTime+0x16>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d004      	beq.n	8004ff4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004fea:	4b0a      	ldr	r3, [pc, #40]	; (8005014 <prvResetNextTaskUnblockTime+0x44>)
 8004fec:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ff2:	e008      	b.n	8005006 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ff4:	4b06      	ldr	r3, [pc, #24]	; (8005010 <prvResetNextTaskUnblockTime+0x40>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	4a04      	ldr	r2, [pc, #16]	; (8005014 <prvResetNextTaskUnblockTime+0x44>)
 8005004:	6013      	str	r3, [r2, #0]
}
 8005006:	bf00      	nop
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	bc80      	pop	{r7}
 800500e:	4770      	bx	lr
 8005010:	20000b88 	.word	0x20000b88
 8005014:	20000bf0 	.word	0x20000bf0

08005018 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800501e:	4b0b      	ldr	r3, [pc, #44]	; (800504c <xTaskGetSchedulerState+0x34>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d102      	bne.n	800502c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005026:	2301      	movs	r3, #1
 8005028:	607b      	str	r3, [r7, #4]
 800502a:	e008      	b.n	800503e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800502c:	4b08      	ldr	r3, [pc, #32]	; (8005050 <xTaskGetSchedulerState+0x38>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d102      	bne.n	800503a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005034:	2302      	movs	r3, #2
 8005036:	607b      	str	r3, [r7, #4]
 8005038:	e001      	b.n	800503e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800503a:	2300      	movs	r3, #0
 800503c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800503e:	687b      	ldr	r3, [r7, #4]
	}
 8005040:	4618      	mov	r0, r3
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	bc80      	pop	{r7}
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	20000bdc 	.word	0x20000bdc
 8005050:	20000bf8 	.word	0x20000bf8

08005054 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005060:	2300      	movs	r3, #0
 8005062:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d056      	beq.n	8005118 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800506e:	4b2d      	ldr	r3, [pc, #180]	; (8005124 <xTaskPriorityInherit+0xd0>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	429a      	cmp	r2, r3
 8005076:	d246      	bcs.n	8005106 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	2b00      	cmp	r3, #0
 800507e:	db06      	blt.n	800508e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005080:	4b28      	ldr	r3, [pc, #160]	; (8005124 <xTaskPriorityInherit+0xd0>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005086:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	6959      	ldr	r1, [r3, #20]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4a22      	ldr	r2, [pc, #136]	; (8005128 <xTaskPriorityInherit+0xd4>)
 80050a0:	4413      	add	r3, r2
 80050a2:	4299      	cmp	r1, r3
 80050a4:	d101      	bne.n	80050aa <xTaskPriorityInherit+0x56>
 80050a6:	2301      	movs	r3, #1
 80050a8:	e000      	b.n	80050ac <xTaskPriorityInherit+0x58>
 80050aa:	2300      	movs	r3, #0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d022      	beq.n	80050f6 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	3304      	adds	r3, #4
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fe fb27 	bl	8003708 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80050ba:	4b1a      	ldr	r3, [pc, #104]	; (8005124 <xTaskPriorityInherit+0xd0>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c8:	4b18      	ldr	r3, [pc, #96]	; (800512c <xTaskPriorityInherit+0xd8>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d903      	bls.n	80050d8 <xTaskPriorityInherit+0x84>
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	4a15      	ldr	r2, [pc, #84]	; (800512c <xTaskPriorityInherit+0xd8>)
 80050d6:	6013      	str	r3, [r2, #0]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050dc:	4613      	mov	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4a10      	ldr	r2, [pc, #64]	; (8005128 <xTaskPriorityInherit+0xd4>)
 80050e6:	441a      	add	r2, r3
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	3304      	adds	r3, #4
 80050ec:	4619      	mov	r1, r3
 80050ee:	4610      	mov	r0, r2
 80050f0:	f7fe faaf 	bl	8003652 <vListInsertEnd>
 80050f4:	e004      	b.n	8005100 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80050f6:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <xTaskPriorityInherit+0xd0>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005100:	2301      	movs	r3, #1
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	e008      	b.n	8005118 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800510a:	4b06      	ldr	r3, [pc, #24]	; (8005124 <xTaskPriorityInherit+0xd0>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005110:	429a      	cmp	r2, r3
 8005112:	d201      	bcs.n	8005118 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005114:	2301      	movs	r3, #1
 8005116:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005118:	68fb      	ldr	r3, [r7, #12]
	}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	200006fc 	.word	0x200006fc
 8005128:	20000700 	.word	0x20000700
 800512c:	20000bd8 	.word	0x20000bd8

08005130 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800513c:	2300      	movs	r3, #0
 800513e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d056      	beq.n	80051f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005146:	4b2e      	ldr	r3, [pc, #184]	; (8005200 <xTaskPriorityDisinherit+0xd0>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	429a      	cmp	r2, r3
 800514e:	d00a      	beq.n	8005166 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	60fb      	str	r3, [r7, #12]
}
 8005162:	bf00      	nop
 8005164:	e7fe      	b.n	8005164 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10a      	bne.n	8005184 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	60bb      	str	r3, [r7, #8]
}
 8005180:	bf00      	nop
 8005182:	e7fe      	b.n	8005182 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005188:	1e5a      	subs	r2, r3, #1
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005196:	429a      	cmp	r2, r3
 8005198:	d02c      	beq.n	80051f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d128      	bne.n	80051f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	3304      	adds	r3, #4
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fe faae 	bl	8003708 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c4:	4b0f      	ldr	r3, [pc, #60]	; (8005204 <xTaskPriorityDisinherit+0xd4>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d903      	bls.n	80051d4 <xTaskPriorityDisinherit+0xa4>
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d0:	4a0c      	ldr	r2, [pc, #48]	; (8005204 <xTaskPriorityDisinherit+0xd4>)
 80051d2:	6013      	str	r3, [r2, #0]
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d8:	4613      	mov	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4a09      	ldr	r2, [pc, #36]	; (8005208 <xTaskPriorityDisinherit+0xd8>)
 80051e2:	441a      	add	r2, r3
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	3304      	adds	r3, #4
 80051e8:	4619      	mov	r1, r3
 80051ea:	4610      	mov	r0, r2
 80051ec:	f7fe fa31 	bl	8003652 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80051f0:	2301      	movs	r3, #1
 80051f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80051f4:	697b      	ldr	r3, [r7, #20]
	}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3718      	adds	r7, #24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	200006fc 	.word	0x200006fc
 8005204:	20000bd8 	.word	0x20000bd8
 8005208:	20000700 	.word	0x20000700

0800520c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800521a:	2301      	movs	r3, #1
 800521c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d06f      	beq.n	8005304 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10a      	bne.n	8005242 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	60fb      	str	r3, [r7, #12]
}
 800523e:	bf00      	nop
 8005240:	e7fe      	b.n	8005240 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	429a      	cmp	r2, r3
 800524a:	d902      	bls.n	8005252 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	61fb      	str	r3, [r7, #28]
 8005250:	e002      	b.n	8005258 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005256:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525c:	69fa      	ldr	r2, [r7, #28]
 800525e:	429a      	cmp	r2, r3
 8005260:	d050      	beq.n	8005304 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	429a      	cmp	r2, r3
 800526a:	d14b      	bne.n	8005304 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800526c:	4b27      	ldr	r3, [pc, #156]	; (800530c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	429a      	cmp	r2, r3
 8005274:	d10a      	bne.n	800528c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	60bb      	str	r3, [r7, #8]
}
 8005288:	bf00      	nop
 800528a:	e7fe      	b.n	800528a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005290:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	69fa      	ldr	r2, [r7, #28]
 8005296:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	2b00      	cmp	r3, #0
 800529e:	db04      	blt.n	80052aa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	6959      	ldr	r1, [r3, #20]
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	4613      	mov	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4a15      	ldr	r2, [pc, #84]	; (8005310 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80052ba:	4413      	add	r3, r2
 80052bc:	4299      	cmp	r1, r3
 80052be:	d101      	bne.n	80052c4 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80052c0:	2301      	movs	r3, #1
 80052c2:	e000      	b.n	80052c6 <vTaskPriorityDisinheritAfterTimeout+0xba>
 80052c4:	2300      	movs	r3, #0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d01c      	beq.n	8005304 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	3304      	adds	r3, #4
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fe fa1a 	bl	8003708 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d8:	4b0e      	ldr	r3, [pc, #56]	; (8005314 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d903      	bls.n	80052e8 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e4:	4a0b      	ldr	r2, [pc, #44]	; (8005314 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80052e6:	6013      	str	r3, [r2, #0]
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ec:	4613      	mov	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4a06      	ldr	r2, [pc, #24]	; (8005310 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80052f6:	441a      	add	r2, r3
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	3304      	adds	r3, #4
 80052fc:	4619      	mov	r1, r3
 80052fe:	4610      	mov	r0, r2
 8005300:	f7fe f9a7 	bl	8003652 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005304:	bf00      	nop
 8005306:	3720      	adds	r7, #32
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	200006fc 	.word	0x200006fc
 8005310:	20000700 	.word	0x20000700
 8005314:	20000bd8 	.word	0x20000bd8

08005318 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800531c:	4b07      	ldr	r3, [pc, #28]	; (800533c <pvTaskIncrementMutexHeldCount+0x24>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d004      	beq.n	800532e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005324:	4b05      	ldr	r3, [pc, #20]	; (800533c <pvTaskIncrementMutexHeldCount+0x24>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800532a:	3201      	adds	r2, #1
 800532c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800532e:	4b03      	ldr	r3, [pc, #12]	; (800533c <pvTaskIncrementMutexHeldCount+0x24>)
 8005330:	681b      	ldr	r3, [r3, #0]
	}
 8005332:	4618      	mov	r0, r3
 8005334:	46bd      	mov	sp, r7
 8005336:	bc80      	pop	{r7}
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	200006fc 	.word	0x200006fc

08005340 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800534a:	4b21      	ldr	r3, [pc, #132]	; (80053d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005350:	4b20      	ldr	r3, [pc, #128]	; (80053d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3304      	adds	r3, #4
 8005356:	4618      	mov	r0, r3
 8005358:	f7fe f9d6 	bl	8003708 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005362:	d10a      	bne.n	800537a <prvAddCurrentTaskToDelayedList+0x3a>
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d007      	beq.n	800537a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800536a:	4b1a      	ldr	r3, [pc, #104]	; (80053d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3304      	adds	r3, #4
 8005370:	4619      	mov	r1, r3
 8005372:	4819      	ldr	r0, [pc, #100]	; (80053d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005374:	f7fe f96d 	bl	8003652 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005378:	e026      	b.n	80053c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4413      	add	r3, r2
 8005380:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005382:	4b14      	ldr	r3, [pc, #80]	; (80053d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	429a      	cmp	r2, r3
 8005390:	d209      	bcs.n	80053a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005392:	4b12      	ldr	r3, [pc, #72]	; (80053dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	4b0f      	ldr	r3, [pc, #60]	; (80053d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3304      	adds	r3, #4
 800539c:	4619      	mov	r1, r3
 800539e:	4610      	mov	r0, r2
 80053a0:	f7fe f97a 	bl	8003698 <vListInsert>
}
 80053a4:	e010      	b.n	80053c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053a6:	4b0e      	ldr	r3, [pc, #56]	; (80053e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	4b0a      	ldr	r3, [pc, #40]	; (80053d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3304      	adds	r3, #4
 80053b0:	4619      	mov	r1, r3
 80053b2:	4610      	mov	r0, r2
 80053b4:	f7fe f970 	bl	8003698 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80053b8:	4b0a      	ldr	r3, [pc, #40]	; (80053e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d202      	bcs.n	80053c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80053c2:	4a08      	ldr	r2, [pc, #32]	; (80053e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	6013      	str	r3, [r2, #0]
}
 80053c8:	bf00      	nop
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	20000bd4 	.word	0x20000bd4
 80053d4:	200006fc 	.word	0x200006fc
 80053d8:	20000bbc 	.word	0x20000bbc
 80053dc:	20000b8c 	.word	0x20000b8c
 80053e0:	20000b88 	.word	0x20000b88
 80053e4:	20000bf0 	.word	0x20000bf0

080053e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08a      	sub	sp, #40	; 0x28
 80053ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80053f2:	f000 facb 	bl	800598c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80053f6:	4b1c      	ldr	r3, [pc, #112]	; (8005468 <xTimerCreateTimerTask+0x80>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d021      	beq.n	8005442 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80053fe:	2300      	movs	r3, #0
 8005400:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005402:	2300      	movs	r3, #0
 8005404:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005406:	1d3a      	adds	r2, r7, #4
 8005408:	f107 0108 	add.w	r1, r7, #8
 800540c:	f107 030c 	add.w	r3, r7, #12
 8005410:	4618      	mov	r0, r3
 8005412:	f7fe f8d9 	bl	80035c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005416:	6879      	ldr	r1, [r7, #4]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	9202      	str	r2, [sp, #8]
 800541e:	9301      	str	r3, [sp, #4]
 8005420:	2302      	movs	r3, #2
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	2300      	movs	r3, #0
 8005426:	460a      	mov	r2, r1
 8005428:	4910      	ldr	r1, [pc, #64]	; (800546c <xTimerCreateTimerTask+0x84>)
 800542a:	4811      	ldr	r0, [pc, #68]	; (8005470 <xTimerCreateTimerTask+0x88>)
 800542c:	f7fe ffdc 	bl	80043e8 <xTaskCreateStatic>
 8005430:	4603      	mov	r3, r0
 8005432:	4a10      	ldr	r2, [pc, #64]	; (8005474 <xTimerCreateTimerTask+0x8c>)
 8005434:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005436:	4b0f      	ldr	r3, [pc, #60]	; (8005474 <xTimerCreateTimerTask+0x8c>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800543e:	2301      	movs	r3, #1
 8005440:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10a      	bne.n	800545e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	613b      	str	r3, [r7, #16]
}
 800545a:	bf00      	nop
 800545c:	e7fe      	b.n	800545c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800545e:	697b      	ldr	r3, [r7, #20]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3718      	adds	r7, #24
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	20000c2c 	.word	0x20000c2c
 800546c:	08006ca8 	.word	0x08006ca8
 8005470:	08005595 	.word	0x08005595
 8005474:	20000c30 	.word	0x20000c30

08005478 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b08a      	sub	sp, #40	; 0x28
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
 8005484:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005486:	2300      	movs	r3, #0
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10a      	bne.n	80054a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	623b      	str	r3, [r7, #32]
}
 80054a2:	bf00      	nop
 80054a4:	e7fe      	b.n	80054a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80054a6:	4b1a      	ldr	r3, [pc, #104]	; (8005510 <xTimerGenericCommand+0x98>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d02a      	beq.n	8005504 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2b05      	cmp	r3, #5
 80054be:	dc18      	bgt.n	80054f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80054c0:	f7ff fdaa 	bl	8005018 <xTaskGetSchedulerState>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d109      	bne.n	80054de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80054ca:	4b11      	ldr	r3, [pc, #68]	; (8005510 <xTimerGenericCommand+0x98>)
 80054cc:	6818      	ldr	r0, [r3, #0]
 80054ce:	f107 0110 	add.w	r1, r7, #16
 80054d2:	2300      	movs	r3, #0
 80054d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054d6:	f7fe fa81 	bl	80039dc <xQueueGenericSend>
 80054da:	6278      	str	r0, [r7, #36]	; 0x24
 80054dc:	e012      	b.n	8005504 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80054de:	4b0c      	ldr	r3, [pc, #48]	; (8005510 <xTimerGenericCommand+0x98>)
 80054e0:	6818      	ldr	r0, [r3, #0]
 80054e2:	f107 0110 	add.w	r1, r7, #16
 80054e6:	2300      	movs	r3, #0
 80054e8:	2200      	movs	r2, #0
 80054ea:	f7fe fa77 	bl	80039dc <xQueueGenericSend>
 80054ee:	6278      	str	r0, [r7, #36]	; 0x24
 80054f0:	e008      	b.n	8005504 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80054f2:	4b07      	ldr	r3, [pc, #28]	; (8005510 <xTimerGenericCommand+0x98>)
 80054f4:	6818      	ldr	r0, [r3, #0]
 80054f6:	f107 0110 	add.w	r1, r7, #16
 80054fa:	2300      	movs	r3, #0
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	f7fe fb6b 	bl	8003bd8 <xQueueGenericSendFromISR>
 8005502:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005506:	4618      	mov	r0, r3
 8005508:	3728      	adds	r7, #40	; 0x28
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	20000c2c 	.word	0x20000c2c

08005514 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b088      	sub	sp, #32
 8005518:	af02      	add	r7, sp, #8
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800551e:	4b1c      	ldr	r3, [pc, #112]	; (8005590 <prvProcessExpiredTimer+0x7c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	3304      	adds	r3, #4
 800552c:	4618      	mov	r0, r3
 800552e:	f7fe f8eb 	bl	8003708 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d122      	bne.n	8005580 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	18d1      	adds	r1, r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	6978      	ldr	r0, [r7, #20]
 8005548:	f000 f8c8 	bl	80056dc <prvInsertTimerInActiveList>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d016      	beq.n	8005580 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005552:	2300      	movs	r3, #0
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	2300      	movs	r3, #0
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	2100      	movs	r1, #0
 800555c:	6978      	ldr	r0, [r7, #20]
 800555e:	f7ff ff8b 	bl	8005478 <xTimerGenericCommand>
 8005562:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10a      	bne.n	8005580 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	60fb      	str	r3, [r7, #12]
}
 800557c:	bf00      	nop
 800557e:	e7fe      	b.n	800557e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	6978      	ldr	r0, [r7, #20]
 8005586:	4798      	blx	r3
}
 8005588:	bf00      	nop
 800558a:	3718      	adds	r7, #24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	20000c24 	.word	0x20000c24

08005594 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800559c:	f107 0308 	add.w	r3, r7, #8
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 f857 	bl	8005654 <prvGetNextExpireTime>
 80055a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	4619      	mov	r1, r3
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f000 f803 	bl	80055b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80055b2:	f000 f8d5 	bl	8005760 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80055b6:	e7f1      	b.n	800559c <prvTimerTask+0x8>

080055b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80055c2:	f7ff f943 	bl	800484c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055c6:	f107 0308 	add.w	r3, r7, #8
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 f866 	bl	800569c <prvSampleTimeNow>
 80055d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d130      	bne.n	800563a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10a      	bne.n	80055f4 <prvProcessTimerOrBlockTask+0x3c>
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d806      	bhi.n	80055f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80055e6:	f7ff f93f 	bl	8004868 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80055ea:	68f9      	ldr	r1, [r7, #12]
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7ff ff91 	bl	8005514 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80055f2:	e024      	b.n	800563e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d008      	beq.n	800560c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80055fa:	4b13      	ldr	r3, [pc, #76]	; (8005648 <prvProcessTimerOrBlockTask+0x90>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	bf0c      	ite	eq
 8005604:	2301      	moveq	r3, #1
 8005606:	2300      	movne	r3, #0
 8005608:	b2db      	uxtb	r3, r3
 800560a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800560c:	4b0f      	ldr	r3, [pc, #60]	; (800564c <prvProcessTimerOrBlockTask+0x94>)
 800560e:	6818      	ldr	r0, [r3, #0]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	4619      	mov	r1, r3
 800561a:	f7fe feb1 	bl	8004380 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800561e:	f7ff f923 	bl	8004868 <xTaskResumeAll>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10a      	bne.n	800563e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005628:	4b09      	ldr	r3, [pc, #36]	; (8005650 <prvProcessTimerOrBlockTask+0x98>)
 800562a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	f3bf 8f6f 	isb	sy
}
 8005638:	e001      	b.n	800563e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800563a:	f7ff f915 	bl	8004868 <xTaskResumeAll>
}
 800563e:	bf00      	nop
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	20000c28 	.word	0x20000c28
 800564c:	20000c2c 	.word	0x20000c2c
 8005650:	e000ed04 	.word	0xe000ed04

08005654 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800565c:	4b0e      	ldr	r3, [pc, #56]	; (8005698 <prvGetNextExpireTime+0x44>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	bf0c      	ite	eq
 8005666:	2301      	moveq	r3, #1
 8005668:	2300      	movne	r3, #0
 800566a:	b2db      	uxtb	r3, r3
 800566c:	461a      	mov	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d105      	bne.n	8005686 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800567a:	4b07      	ldr	r3, [pc, #28]	; (8005698 <prvGetNextExpireTime+0x44>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	e001      	b.n	800568a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005686:	2300      	movs	r3, #0
 8005688:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800568a:	68fb      	ldr	r3, [r7, #12]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	bc80      	pop	{r7}
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	20000c24 	.word	0x20000c24

0800569c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80056a4:	f7ff f97e 	bl	80049a4 <xTaskGetTickCount>
 80056a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80056aa:	4b0b      	ldr	r3, [pc, #44]	; (80056d8 <prvSampleTimeNow+0x3c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d205      	bcs.n	80056c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80056b4:	f000 f908 	bl	80058c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	e002      	b.n	80056c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80056c6:	4a04      	ldr	r2, [pc, #16]	; (80056d8 <prvSampleTimeNow+0x3c>)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80056cc:	68fb      	ldr	r3, [r7, #12]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	20000c34 	.word	0x20000c34

080056dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
 80056e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80056ea:	2300      	movs	r3, #0
 80056ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d812      	bhi.n	8005728 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	1ad2      	subs	r2, r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	429a      	cmp	r2, r3
 800570e:	d302      	bcc.n	8005716 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005710:	2301      	movs	r3, #1
 8005712:	617b      	str	r3, [r7, #20]
 8005714:	e01b      	b.n	800574e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005716:	4b10      	ldr	r3, [pc, #64]	; (8005758 <prvInsertTimerInActiveList+0x7c>)
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	3304      	adds	r3, #4
 800571e:	4619      	mov	r1, r3
 8005720:	4610      	mov	r0, r2
 8005722:	f7fd ffb9 	bl	8003698 <vListInsert>
 8005726:	e012      	b.n	800574e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	429a      	cmp	r2, r3
 800572e:	d206      	bcs.n	800573e <prvInsertTimerInActiveList+0x62>
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	429a      	cmp	r2, r3
 8005736:	d302      	bcc.n	800573e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005738:	2301      	movs	r3, #1
 800573a:	617b      	str	r3, [r7, #20]
 800573c:	e007      	b.n	800574e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800573e:	4b07      	ldr	r3, [pc, #28]	; (800575c <prvInsertTimerInActiveList+0x80>)
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	3304      	adds	r3, #4
 8005746:	4619      	mov	r1, r3
 8005748:	4610      	mov	r0, r2
 800574a:	f7fd ffa5 	bl	8003698 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800574e:	697b      	ldr	r3, [r7, #20]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	20000c28 	.word	0x20000c28
 800575c:	20000c24 	.word	0x20000c24

08005760 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b08e      	sub	sp, #56	; 0x38
 8005764:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005766:	e09d      	b.n	80058a4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	da18      	bge.n	80057a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800576e:	1d3b      	adds	r3, r7, #4
 8005770:	3304      	adds	r3, #4
 8005772:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10a      	bne.n	8005790 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800577a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577e:	f383 8811 	msr	BASEPRI, r3
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	61fb      	str	r3, [r7, #28]
}
 800578c:	bf00      	nop
 800578e:	e7fe      	b.n	800578e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005796:	6850      	ldr	r0, [r2, #4]
 8005798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800579a:	6892      	ldr	r2, [r2, #8]
 800579c:	4611      	mov	r1, r2
 800579e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	db7d      	blt.n	80058a2 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80057aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d004      	beq.n	80057bc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b4:	3304      	adds	r3, #4
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fd ffa6 	bl	8003708 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80057bc:	463b      	mov	r3, r7
 80057be:	4618      	mov	r0, r3
 80057c0:	f7ff ff6c 	bl	800569c <prvSampleTimeNow>
 80057c4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b09      	cmp	r3, #9
 80057ca:	d86b      	bhi.n	80058a4 <prvProcessReceivedCommands+0x144>
 80057cc:	a201      	add	r2, pc, #4	; (adr r2, 80057d4 <prvProcessReceivedCommands+0x74>)
 80057ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d2:	bf00      	nop
 80057d4:	080057fd 	.word	0x080057fd
 80057d8:	080057fd 	.word	0x080057fd
 80057dc:	080057fd 	.word	0x080057fd
 80057e0:	080058a5 	.word	0x080058a5
 80057e4:	08005859 	.word	0x08005859
 80057e8:	08005891 	.word	0x08005891
 80057ec:	080057fd 	.word	0x080057fd
 80057f0:	080057fd 	.word	0x080057fd
 80057f4:	080058a5 	.word	0x080058a5
 80057f8:	08005859 	.word	0x08005859
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	18d1      	adds	r1, r2, r3
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800580a:	f7ff ff67 	bl	80056dc <prvInsertTimerInActiveList>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d047      	beq.n	80058a4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800581a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800581c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581e:	69db      	ldr	r3, [r3, #28]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d13f      	bne.n	80058a4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	441a      	add	r2, r3
 800582c:	2300      	movs	r3, #0
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	2300      	movs	r3, #0
 8005832:	2100      	movs	r1, #0
 8005834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005836:	f7ff fe1f 	bl	8005478 <xTimerGenericCommand>
 800583a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d130      	bne.n	80058a4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005846:	f383 8811 	msr	BASEPRI, r3
 800584a:	f3bf 8f6f 	isb	sy
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	61bb      	str	r3, [r7, #24]
}
 8005854:	bf00      	nop
 8005856:	e7fe      	b.n	8005856 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800585e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10a      	bne.n	800587c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	617b      	str	r3, [r7, #20]
}
 8005878:	bf00      	nop
 800587a:	e7fe      	b.n	800587a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800587c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587e:	699a      	ldr	r2, [r3, #24]
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	18d1      	adds	r1, r2, r3
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800588a:	f7ff ff27 	bl	80056dc <prvInsertTimerInActiveList>
					break;
 800588e:	e009      	b.n	80058a4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005892:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005896:	2b00      	cmp	r3, #0
 8005898:	d104      	bne.n	80058a4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800589a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800589c:	f000 fb6a 	bl	8005f74 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80058a0:	e000      	b.n	80058a4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80058a2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058a4:	4b07      	ldr	r3, [pc, #28]	; (80058c4 <prvProcessReceivedCommands+0x164>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	1d39      	adds	r1, r7, #4
 80058aa:	2200      	movs	r2, #0
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7fe fa2b 	bl	8003d08 <xQueueReceive>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f47f af57 	bne.w	8005768 <prvProcessReceivedCommands+0x8>
	}
}
 80058ba:	bf00      	nop
 80058bc:	bf00      	nop
 80058be:	3730      	adds	r7, #48	; 0x30
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	20000c2c 	.word	0x20000c2c

080058c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b088      	sub	sp, #32
 80058cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80058ce:	e045      	b.n	800595c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058d0:	4b2c      	ldr	r3, [pc, #176]	; (8005984 <prvSwitchTimerLists+0xbc>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058da:	4b2a      	ldr	r3, [pc, #168]	; (8005984 <prvSwitchTimerLists+0xbc>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3304      	adds	r3, #4
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7fd ff0d 	bl	8003708 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d12e      	bne.n	800595c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	4413      	add	r3, r2
 8005906:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	429a      	cmp	r2, r3
 800590e:	d90e      	bls.n	800592e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800591c:	4b19      	ldr	r3, [pc, #100]	; (8005984 <prvSwitchTimerLists+0xbc>)
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	3304      	adds	r3, #4
 8005924:	4619      	mov	r1, r3
 8005926:	4610      	mov	r0, r2
 8005928:	f7fd feb6 	bl	8003698 <vListInsert>
 800592c:	e016      	b.n	800595c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800592e:	2300      	movs	r3, #0
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	2300      	movs	r3, #0
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	2100      	movs	r1, #0
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f7ff fd9d 	bl	8005478 <xTimerGenericCommand>
 800593e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10a      	bne.n	800595c <prvSwitchTimerLists+0x94>
	__asm volatile
 8005946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	603b      	str	r3, [r7, #0]
}
 8005958:	bf00      	nop
 800595a:	e7fe      	b.n	800595a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800595c:	4b09      	ldr	r3, [pc, #36]	; (8005984 <prvSwitchTimerLists+0xbc>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1b4      	bne.n	80058d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005966:	4b07      	ldr	r3, [pc, #28]	; (8005984 <prvSwitchTimerLists+0xbc>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800596c:	4b06      	ldr	r3, [pc, #24]	; (8005988 <prvSwitchTimerLists+0xc0>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a04      	ldr	r2, [pc, #16]	; (8005984 <prvSwitchTimerLists+0xbc>)
 8005972:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005974:	4a04      	ldr	r2, [pc, #16]	; (8005988 <prvSwitchTimerLists+0xc0>)
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	6013      	str	r3, [r2, #0]
}
 800597a:	bf00      	nop
 800597c:	3718      	adds	r7, #24
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	20000c24 	.word	0x20000c24
 8005988:	20000c28 	.word	0x20000c28

0800598c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005992:	f000 f92b 	bl	8005bec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005996:	4b15      	ldr	r3, [pc, #84]	; (80059ec <prvCheckForValidListAndQueue+0x60>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d120      	bne.n	80059e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800599e:	4814      	ldr	r0, [pc, #80]	; (80059f0 <prvCheckForValidListAndQueue+0x64>)
 80059a0:	f7fd fe2c 	bl	80035fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80059a4:	4813      	ldr	r0, [pc, #76]	; (80059f4 <prvCheckForValidListAndQueue+0x68>)
 80059a6:	f7fd fe29 	bl	80035fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80059aa:	4b13      	ldr	r3, [pc, #76]	; (80059f8 <prvCheckForValidListAndQueue+0x6c>)
 80059ac:	4a10      	ldr	r2, [pc, #64]	; (80059f0 <prvCheckForValidListAndQueue+0x64>)
 80059ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80059b0:	4b12      	ldr	r3, [pc, #72]	; (80059fc <prvCheckForValidListAndQueue+0x70>)
 80059b2:	4a10      	ldr	r2, [pc, #64]	; (80059f4 <prvCheckForValidListAndQueue+0x68>)
 80059b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80059b6:	2300      	movs	r3, #0
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	4b11      	ldr	r3, [pc, #68]	; (8005a00 <prvCheckForValidListAndQueue+0x74>)
 80059bc:	4a11      	ldr	r2, [pc, #68]	; (8005a04 <prvCheckForValidListAndQueue+0x78>)
 80059be:	2110      	movs	r1, #16
 80059c0:	200a      	movs	r0, #10
 80059c2:	f7fd ff33 	bl	800382c <xQueueGenericCreateStatic>
 80059c6:	4603      	mov	r3, r0
 80059c8:	4a08      	ldr	r2, [pc, #32]	; (80059ec <prvCheckForValidListAndQueue+0x60>)
 80059ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80059cc:	4b07      	ldr	r3, [pc, #28]	; (80059ec <prvCheckForValidListAndQueue+0x60>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d005      	beq.n	80059e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80059d4:	4b05      	ldr	r3, [pc, #20]	; (80059ec <prvCheckForValidListAndQueue+0x60>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	490b      	ldr	r1, [pc, #44]	; (8005a08 <prvCheckForValidListAndQueue+0x7c>)
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fe fca8 	bl	8004330 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059e0:	f000 f934 	bl	8005c4c <vPortExitCritical>
}
 80059e4:	bf00      	nop
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	20000c2c 	.word	0x20000c2c
 80059f0:	20000bfc 	.word	0x20000bfc
 80059f4:	20000c10 	.word	0x20000c10
 80059f8:	20000c24 	.word	0x20000c24
 80059fc:	20000c28 	.word	0x20000c28
 8005a00:	20000cd8 	.word	0x20000cd8
 8005a04:	20000c38 	.word	0x20000c38
 8005a08:	08006cb0 	.word	0x08006cb0

08005a0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	3b04      	subs	r3, #4
 8005a1c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	3b04      	subs	r3, #4
 8005a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f023 0201 	bic.w	r2, r3, #1
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	3b04      	subs	r3, #4
 8005a3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a3c:	4a08      	ldr	r2, [pc, #32]	; (8005a60 <pxPortInitialiseStack+0x54>)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	3b14      	subs	r3, #20
 8005a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	3b20      	subs	r3, #32
 8005a52:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a54:	68fb      	ldr	r3, [r7, #12]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bc80      	pop	{r7}
 8005a5e:	4770      	bx	lr
 8005a60:	08005a65 	.word	0x08005a65

08005a64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a6e:	4b12      	ldr	r3, [pc, #72]	; (8005ab8 <prvTaskExitError+0x54>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a76:	d00a      	beq.n	8005a8e <prvTaskExitError+0x2a>
	__asm volatile
 8005a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7c:	f383 8811 	msr	BASEPRI, r3
 8005a80:	f3bf 8f6f 	isb	sy
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	60fb      	str	r3, [r7, #12]
}
 8005a8a:	bf00      	nop
 8005a8c:	e7fe      	b.n	8005a8c <prvTaskExitError+0x28>
	__asm volatile
 8005a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a92:	f383 8811 	msr	BASEPRI, r3
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	60bb      	str	r3, [r7, #8]
}
 8005aa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005aa2:	bf00      	nop
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d0fc      	beq.n	8005aa4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005aaa:	bf00      	nop
 8005aac:	bf00      	nop
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bc80      	pop	{r7}
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	2000000c 	.word	0x2000000c
 8005abc:	00000000 	.word	0x00000000

08005ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ac0:	4b07      	ldr	r3, [pc, #28]	; (8005ae0 <pxCurrentTCBConst2>)
 8005ac2:	6819      	ldr	r1, [r3, #0]
 8005ac4:	6808      	ldr	r0, [r1, #0]
 8005ac6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005aca:	f380 8809 	msr	PSP, r0
 8005ace:	f3bf 8f6f 	isb	sy
 8005ad2:	f04f 0000 	mov.w	r0, #0
 8005ad6:	f380 8811 	msr	BASEPRI, r0
 8005ada:	f04e 0e0d 	orr.w	lr, lr, #13
 8005ade:	4770      	bx	lr

08005ae0 <pxCurrentTCBConst2>:
 8005ae0:	200006fc 	.word	0x200006fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ae4:	bf00      	nop
 8005ae6:	bf00      	nop

08005ae8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005ae8:	4806      	ldr	r0, [pc, #24]	; (8005b04 <prvPortStartFirstTask+0x1c>)
 8005aea:	6800      	ldr	r0, [r0, #0]
 8005aec:	6800      	ldr	r0, [r0, #0]
 8005aee:	f380 8808 	msr	MSP, r0
 8005af2:	b662      	cpsie	i
 8005af4:	b661      	cpsie	f
 8005af6:	f3bf 8f4f 	dsb	sy
 8005afa:	f3bf 8f6f 	isb	sy
 8005afe:	df00      	svc	0
 8005b00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b02:	bf00      	nop
 8005b04:	e000ed08 	.word	0xe000ed08

08005b08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b0e:	4b32      	ldr	r3, [pc, #200]	; (8005bd8 <xPortStartScheduler+0xd0>)
 8005b10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	22ff      	movs	r2, #255	; 0xff
 8005b1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b28:	78fb      	ldrb	r3, [r7, #3]
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	4b2a      	ldr	r3, [pc, #168]	; (8005bdc <xPortStartScheduler+0xd4>)
 8005b34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b36:	4b2a      	ldr	r3, [pc, #168]	; (8005be0 <xPortStartScheduler+0xd8>)
 8005b38:	2207      	movs	r2, #7
 8005b3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b3c:	e009      	b.n	8005b52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005b3e:	4b28      	ldr	r3, [pc, #160]	; (8005be0 <xPortStartScheduler+0xd8>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3b01      	subs	r3, #1
 8005b44:	4a26      	ldr	r2, [pc, #152]	; (8005be0 <xPortStartScheduler+0xd8>)
 8005b46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b48:	78fb      	ldrb	r3, [r7, #3]
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b52:	78fb      	ldrb	r3, [r7, #3]
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b5a:	2b80      	cmp	r3, #128	; 0x80
 8005b5c:	d0ef      	beq.n	8005b3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b5e:	4b20      	ldr	r3, [pc, #128]	; (8005be0 <xPortStartScheduler+0xd8>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f1c3 0307 	rsb	r3, r3, #7
 8005b66:	2b04      	cmp	r3, #4
 8005b68:	d00a      	beq.n	8005b80 <xPortStartScheduler+0x78>
	__asm volatile
 8005b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6e:	f383 8811 	msr	BASEPRI, r3
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	60bb      	str	r3, [r7, #8]
}
 8005b7c:	bf00      	nop
 8005b7e:	e7fe      	b.n	8005b7e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b80:	4b17      	ldr	r3, [pc, #92]	; (8005be0 <xPortStartScheduler+0xd8>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	021b      	lsls	r3, r3, #8
 8005b86:	4a16      	ldr	r2, [pc, #88]	; (8005be0 <xPortStartScheduler+0xd8>)
 8005b88:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b8a:	4b15      	ldr	r3, [pc, #84]	; (8005be0 <xPortStartScheduler+0xd8>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b92:	4a13      	ldr	r2, [pc, #76]	; (8005be0 <xPortStartScheduler+0xd8>)
 8005b94:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b9e:	4b11      	ldr	r3, [pc, #68]	; (8005be4 <xPortStartScheduler+0xdc>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a10      	ldr	r2, [pc, #64]	; (8005be4 <xPortStartScheduler+0xdc>)
 8005ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ba8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005baa:	4b0e      	ldr	r3, [pc, #56]	; (8005be4 <xPortStartScheduler+0xdc>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a0d      	ldr	r2, [pc, #52]	; (8005be4 <xPortStartScheduler+0xdc>)
 8005bb0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005bb4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005bb6:	f000 f8b9 	bl	8005d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005bba:	4b0b      	ldr	r3, [pc, #44]	; (8005be8 <xPortStartScheduler+0xe0>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005bc0:	f7ff ff92 	bl	8005ae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005bc4:	f7fe ffba 	bl	8004b3c <vTaskSwitchContext>
	prvTaskExitError();
 8005bc8:	f7ff ff4c 	bl	8005a64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	e000e400 	.word	0xe000e400
 8005bdc:	20000d28 	.word	0x20000d28
 8005be0:	20000d2c 	.word	0x20000d2c
 8005be4:	e000ed20 	.word	0xe000ed20
 8005be8:	2000000c 	.word	0x2000000c

08005bec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
	__asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	607b      	str	r3, [r7, #4]
}
 8005c04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c06:	4b0f      	ldr	r3, [pc, #60]	; (8005c44 <vPortEnterCritical+0x58>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	4a0d      	ldr	r2, [pc, #52]	; (8005c44 <vPortEnterCritical+0x58>)
 8005c0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c10:	4b0c      	ldr	r3, [pc, #48]	; (8005c44 <vPortEnterCritical+0x58>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d10f      	bne.n	8005c38 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c18:	4b0b      	ldr	r3, [pc, #44]	; (8005c48 <vPortEnterCritical+0x5c>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00a      	beq.n	8005c38 <vPortEnterCritical+0x4c>
	__asm volatile
 8005c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c26:	f383 8811 	msr	BASEPRI, r3
 8005c2a:	f3bf 8f6f 	isb	sy
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	603b      	str	r3, [r7, #0]
}
 8005c34:	bf00      	nop
 8005c36:	e7fe      	b.n	8005c36 <vPortEnterCritical+0x4a>
	}
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bc80      	pop	{r7}
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	2000000c 	.word	0x2000000c
 8005c48:	e000ed04 	.word	0xe000ed04

08005c4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c52:	4b11      	ldr	r3, [pc, #68]	; (8005c98 <vPortExitCritical+0x4c>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10a      	bne.n	8005c70 <vPortExitCritical+0x24>
	__asm volatile
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	607b      	str	r3, [r7, #4]
}
 8005c6c:	bf00      	nop
 8005c6e:	e7fe      	b.n	8005c6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005c70:	4b09      	ldr	r3, [pc, #36]	; (8005c98 <vPortExitCritical+0x4c>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	4a08      	ldr	r2, [pc, #32]	; (8005c98 <vPortExitCritical+0x4c>)
 8005c78:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c7a:	4b07      	ldr	r3, [pc, #28]	; (8005c98 <vPortExitCritical+0x4c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d105      	bne.n	8005c8e <vPortExitCritical+0x42>
 8005c82:	2300      	movs	r3, #0
 8005c84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	f383 8811 	msr	BASEPRI, r3
}
 8005c8c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c8e:	bf00      	nop
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bc80      	pop	{r7}
 8005c96:	4770      	bx	lr
 8005c98:	2000000c 	.word	0x2000000c
 8005c9c:	00000000 	.word	0x00000000

08005ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ca0:	f3ef 8009 	mrs	r0, PSP
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	4b0d      	ldr	r3, [pc, #52]	; (8005ce0 <pxCurrentTCBConst>)
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005cb0:	6010      	str	r0, [r2, #0]
 8005cb2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005cb6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005cba:	f380 8811 	msr	BASEPRI, r0
 8005cbe:	f7fe ff3d 	bl	8004b3c <vTaskSwitchContext>
 8005cc2:	f04f 0000 	mov.w	r0, #0
 8005cc6:	f380 8811 	msr	BASEPRI, r0
 8005cca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005cce:	6819      	ldr	r1, [r3, #0]
 8005cd0:	6808      	ldr	r0, [r1, #0]
 8005cd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005cd6:	f380 8809 	msr	PSP, r0
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	4770      	bx	lr

08005ce0 <pxCurrentTCBConst>:
 8005ce0:	200006fc 	.word	0x200006fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ce4:	bf00      	nop
 8005ce6:	bf00      	nop

08005ce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
	__asm volatile
 8005cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	607b      	str	r3, [r7, #4]
}
 8005d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d02:	f7fe fe5d 	bl	80049c0 <xTaskIncrementTick>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d0c:	4b06      	ldr	r3, [pc, #24]	; (8005d28 <SysTick_Handler+0x40>)
 8005d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	2300      	movs	r3, #0
 8005d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	f383 8811 	msr	BASEPRI, r3
}
 8005d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d20:	bf00      	nop
 8005d22:	3708      	adds	r7, #8
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	e000ed04 	.word	0xe000ed04

08005d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d30:	4b0a      	ldr	r3, [pc, #40]	; (8005d5c <vPortSetupTimerInterrupt+0x30>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d36:	4b0a      	ldr	r3, [pc, #40]	; (8005d60 <vPortSetupTimerInterrupt+0x34>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d3c:	4b09      	ldr	r3, [pc, #36]	; (8005d64 <vPortSetupTimerInterrupt+0x38>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a09      	ldr	r2, [pc, #36]	; (8005d68 <vPortSetupTimerInterrupt+0x3c>)
 8005d42:	fba2 2303 	umull	r2, r3, r2, r3
 8005d46:	099b      	lsrs	r3, r3, #6
 8005d48:	4a08      	ldr	r2, [pc, #32]	; (8005d6c <vPortSetupTimerInterrupt+0x40>)
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d4e:	4b03      	ldr	r3, [pc, #12]	; (8005d5c <vPortSetupTimerInterrupt+0x30>)
 8005d50:	2207      	movs	r2, #7
 8005d52:	601a      	str	r2, [r3, #0]
}
 8005d54:	bf00      	nop
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bc80      	pop	{r7}
 8005d5a:	4770      	bx	lr
 8005d5c:	e000e010 	.word	0xe000e010
 8005d60:	e000e018 	.word	0xe000e018
 8005d64:	20000000 	.word	0x20000000
 8005d68:	10624dd3 	.word	0x10624dd3
 8005d6c:	e000e014 	.word	0xe000e014

08005d70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005d76:	f3ef 8305 	mrs	r3, IPSR
 8005d7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2b0f      	cmp	r3, #15
 8005d80:	d914      	bls.n	8005dac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005d82:	4a16      	ldr	r2, [pc, #88]	; (8005ddc <vPortValidateInterruptPriority+0x6c>)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4413      	add	r3, r2
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005d8c:	4b14      	ldr	r3, [pc, #80]	; (8005de0 <vPortValidateInterruptPriority+0x70>)
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	7afa      	ldrb	r2, [r7, #11]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d20a      	bcs.n	8005dac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9a:	f383 8811 	msr	BASEPRI, r3
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f3bf 8f4f 	dsb	sy
 8005da6:	607b      	str	r3, [r7, #4]
}
 8005da8:	bf00      	nop
 8005daa:	e7fe      	b.n	8005daa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005dac:	4b0d      	ldr	r3, [pc, #52]	; (8005de4 <vPortValidateInterruptPriority+0x74>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005db4:	4b0c      	ldr	r3, [pc, #48]	; (8005de8 <vPortValidateInterruptPriority+0x78>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d90a      	bls.n	8005dd2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	603b      	str	r3, [r7, #0]
}
 8005dce:	bf00      	nop
 8005dd0:	e7fe      	b.n	8005dd0 <vPortValidateInterruptPriority+0x60>
	}
 8005dd2:	bf00      	nop
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bc80      	pop	{r7}
 8005dda:	4770      	bx	lr
 8005ddc:	e000e3f0 	.word	0xe000e3f0
 8005de0:	20000d28 	.word	0x20000d28
 8005de4:	e000ed0c 	.word	0xe000ed0c
 8005de8:	20000d2c 	.word	0x20000d2c

08005dec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b08a      	sub	sp, #40	; 0x28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005df4:	2300      	movs	r3, #0
 8005df6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005df8:	f7fe fd28 	bl	800484c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005dfc:	4b58      	ldr	r3, [pc, #352]	; (8005f60 <pvPortMalloc+0x174>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e04:	f000 f910 	bl	8006028 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e08:	4b56      	ldr	r3, [pc, #344]	; (8005f64 <pvPortMalloc+0x178>)
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f040 808e 	bne.w	8005f32 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d01d      	beq.n	8005e58 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005e1c:	2208      	movs	r2, #8
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4413      	add	r3, r2
 8005e22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f003 0307 	and.w	r3, r3, #7
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d014      	beq.n	8005e58 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f023 0307 	bic.w	r3, r3, #7
 8005e34:	3308      	adds	r3, #8
 8005e36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f003 0307 	and.w	r3, r3, #7
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00a      	beq.n	8005e58 <pvPortMalloc+0x6c>
	__asm volatile
 8005e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e46:	f383 8811 	msr	BASEPRI, r3
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	617b      	str	r3, [r7, #20]
}
 8005e54:	bf00      	nop
 8005e56:	e7fe      	b.n	8005e56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d069      	beq.n	8005f32 <pvPortMalloc+0x146>
 8005e5e:	4b42      	ldr	r3, [pc, #264]	; (8005f68 <pvPortMalloc+0x17c>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d864      	bhi.n	8005f32 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e68:	4b40      	ldr	r3, [pc, #256]	; (8005f6c <pvPortMalloc+0x180>)
 8005e6a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005e6c:	4b3f      	ldr	r3, [pc, #252]	; (8005f6c <pvPortMalloc+0x180>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e72:	e004      	b.n	8005e7e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d903      	bls.n	8005e90 <pvPortMalloc+0xa4>
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1f1      	bne.n	8005e74 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e90:	4b33      	ldr	r3, [pc, #204]	; (8005f60 <pvPortMalloc+0x174>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d04b      	beq.n	8005f32 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e9a:	6a3b      	ldr	r3, [r7, #32]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2208      	movs	r2, #8
 8005ea0:	4413      	add	r3, r2
 8005ea2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	1ad2      	subs	r2, r2, r3
 8005eb4:	2308      	movs	r3, #8
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d91f      	bls.n	8005efc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	f003 0307 	and.w	r3, r3, #7
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00a      	beq.n	8005ee4 <pvPortMalloc+0xf8>
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	613b      	str	r3, [r7, #16]
}
 8005ee0:	bf00      	nop
 8005ee2:	e7fe      	b.n	8005ee2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	1ad2      	subs	r2, r2, r3
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ef6:	69b8      	ldr	r0, [r7, #24]
 8005ef8:	f000 f8f8 	bl	80060ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005efc:	4b1a      	ldr	r3, [pc, #104]	; (8005f68 <pvPortMalloc+0x17c>)
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	4a18      	ldr	r2, [pc, #96]	; (8005f68 <pvPortMalloc+0x17c>)
 8005f08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f0a:	4b17      	ldr	r3, [pc, #92]	; (8005f68 <pvPortMalloc+0x17c>)
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	4b18      	ldr	r3, [pc, #96]	; (8005f70 <pvPortMalloc+0x184>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d203      	bcs.n	8005f1e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f16:	4b14      	ldr	r3, [pc, #80]	; (8005f68 <pvPortMalloc+0x17c>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a15      	ldr	r2, [pc, #84]	; (8005f70 <pvPortMalloc+0x184>)
 8005f1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	4b10      	ldr	r3, [pc, #64]	; (8005f64 <pvPortMalloc+0x178>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	431a      	orrs	r2, r3
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	2200      	movs	r2, #0
 8005f30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f32:	f7fe fc99 	bl	8004868 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	f003 0307 	and.w	r3, r3, #7
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00a      	beq.n	8005f56 <pvPortMalloc+0x16a>
	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	60fb      	str	r3, [r7, #12]
}
 8005f52:	bf00      	nop
 8005f54:	e7fe      	b.n	8005f54 <pvPortMalloc+0x168>
	return pvReturn;
 8005f56:	69fb      	ldr	r3, [r7, #28]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3728      	adds	r7, #40	; 0x28
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	20003538 	.word	0x20003538
 8005f64:	20003544 	.word	0x20003544
 8005f68:	2000353c 	.word	0x2000353c
 8005f6c:	20003530 	.word	0x20003530
 8005f70:	20003540 	.word	0x20003540

08005f74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d048      	beq.n	8006018 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f86:	2308      	movs	r3, #8
 8005f88:	425b      	negs	r3, r3
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	4b21      	ldr	r3, [pc, #132]	; (8006020 <vPortFree+0xac>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10a      	bne.n	8005fb8 <vPortFree+0x44>
	__asm volatile
 8005fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa6:	f383 8811 	msr	BASEPRI, r3
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	60fb      	str	r3, [r7, #12]
}
 8005fb4:	bf00      	nop
 8005fb6:	e7fe      	b.n	8005fb6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00a      	beq.n	8005fd6 <vPortFree+0x62>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	60bb      	str	r3, [r7, #8]
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	4b11      	ldr	r3, [pc, #68]	; (8006020 <vPortFree+0xac>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d019      	beq.n	8006018 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d115      	bne.n	8006018 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	685a      	ldr	r2, [r3, #4]
 8005ff0:	4b0b      	ldr	r3, [pc, #44]	; (8006020 <vPortFree+0xac>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	43db      	mvns	r3, r3
 8005ff6:	401a      	ands	r2, r3
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ffc:	f7fe fc26 	bl	800484c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	4b07      	ldr	r3, [pc, #28]	; (8006024 <vPortFree+0xb0>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4413      	add	r3, r2
 800600a:	4a06      	ldr	r2, [pc, #24]	; (8006024 <vPortFree+0xb0>)
 800600c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800600e:	6938      	ldr	r0, [r7, #16]
 8006010:	f000 f86c 	bl	80060ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006014:	f7fe fc28 	bl	8004868 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006018:	bf00      	nop
 800601a:	3718      	adds	r7, #24
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	20003544 	.word	0x20003544
 8006024:	2000353c 	.word	0x2000353c

08006028 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800602e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006032:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006034:	4b27      	ldr	r3, [pc, #156]	; (80060d4 <prvHeapInit+0xac>)
 8006036:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f003 0307 	and.w	r3, r3, #7
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00c      	beq.n	800605c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	3307      	adds	r3, #7
 8006046:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f023 0307 	bic.w	r3, r3, #7
 800604e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	4a1f      	ldr	r2, [pc, #124]	; (80060d4 <prvHeapInit+0xac>)
 8006058:	4413      	add	r3, r2
 800605a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006060:	4a1d      	ldr	r2, [pc, #116]	; (80060d8 <prvHeapInit+0xb0>)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006066:	4b1c      	ldr	r3, [pc, #112]	; (80060d8 <prvHeapInit+0xb0>)
 8006068:	2200      	movs	r2, #0
 800606a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	4413      	add	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006074:	2208      	movs	r2, #8
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	1a9b      	subs	r3, r3, r2
 800607a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f023 0307 	bic.w	r3, r3, #7
 8006082:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4a15      	ldr	r2, [pc, #84]	; (80060dc <prvHeapInit+0xb4>)
 8006088:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800608a:	4b14      	ldr	r3, [pc, #80]	; (80060dc <prvHeapInit+0xb4>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2200      	movs	r2, #0
 8006090:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006092:	4b12      	ldr	r3, [pc, #72]	; (80060dc <prvHeapInit+0xb4>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2200      	movs	r2, #0
 8006098:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	1ad2      	subs	r2, r2, r3
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80060a8:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <prvHeapInit+0xb4>)
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	4a0a      	ldr	r2, [pc, #40]	; (80060e0 <prvHeapInit+0xb8>)
 80060b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	4a09      	ldr	r2, [pc, #36]	; (80060e4 <prvHeapInit+0xbc>)
 80060be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80060c0:	4b09      	ldr	r3, [pc, #36]	; (80060e8 <prvHeapInit+0xc0>)
 80060c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80060c6:	601a      	str	r2, [r3, #0]
}
 80060c8:	bf00      	nop
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bc80      	pop	{r7}
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	20000d30 	.word	0x20000d30
 80060d8:	20003530 	.word	0x20003530
 80060dc:	20003538 	.word	0x20003538
 80060e0:	20003540 	.word	0x20003540
 80060e4:	2000353c 	.word	0x2000353c
 80060e8:	20003544 	.word	0x20003544

080060ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80060f4:	4b27      	ldr	r3, [pc, #156]	; (8006194 <prvInsertBlockIntoFreeList+0xa8>)
 80060f6:	60fb      	str	r3, [r7, #12]
 80060f8:	e002      	b.n	8006100 <prvInsertBlockIntoFreeList+0x14>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	60fb      	str	r3, [r7, #12]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	429a      	cmp	r2, r3
 8006108:	d8f7      	bhi.n	80060fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	4413      	add	r3, r2
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	429a      	cmp	r2, r3
 800611a:	d108      	bne.n	800612e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	441a      	add	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	441a      	add	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	429a      	cmp	r2, r3
 8006140:	d118      	bne.n	8006174 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	4b14      	ldr	r3, [pc, #80]	; (8006198 <prvInsertBlockIntoFreeList+0xac>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	429a      	cmp	r2, r3
 800614c:	d00d      	beq.n	800616a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	441a      	add	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	601a      	str	r2, [r3, #0]
 8006168:	e008      	b.n	800617c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800616a:	4b0b      	ldr	r3, [pc, #44]	; (8006198 <prvInsertBlockIntoFreeList+0xac>)
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	e003      	b.n	800617c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	429a      	cmp	r2, r3
 8006182:	d002      	beq.n	800618a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800618a:	bf00      	nop
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	bc80      	pop	{r7}
 8006192:	4770      	bx	lr
 8006194:	20003530 	.word	0x20003530
 8006198:	20003538 	.word	0x20003538

0800619c <MDI_writeSmallDataWithRegister>:
 * @brief Write small data to Motor Driver
 * @param uartChannel -> get uart channel
 * @param data -> data to write
 * @return none
 */
void MDI_writeSmallDataWithRegister(UART_HandleTypeDef *uartChannel, uint8_t data){
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	460b      	mov	r3, r1
 80061a6:	70fb      	strb	r3, [r7, #3]
	while((uartChannel->Instance->SR & USART_SR_TXE)!=USART_SR_TXE);
 80061a8:	bf00      	nop
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b4:	2b80      	cmp	r3, #128	; 0x80
 80061b6:	d1f8      	bne.n	80061aa <MDI_writeSmallDataWithRegister+0xe>
	uartChannel->Instance->DR=data;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	78fa      	ldrb	r2, [r7, #3]
 80061be:	605a      	str	r2, [r3, #4]
	while((uartChannel->Instance->SR & USART_SR_TC)!=USART_SR_TC);
 80061c0:	bf00      	nop
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061cc:	2b40      	cmp	r3, #64	; 0x40
 80061ce:	d1f8      	bne.n	80061c2 <MDI_writeSmallDataWithRegister+0x26>
}
 80061d0:	bf00      	nop
 80061d2:	bf00      	nop
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bc80      	pop	{r7}
 80061da:	4770      	bx	lr

080061dc <MDI_sendDataChannel1Ver2>:
 * @param kd -> get Pid kd value
 * @param factor -> get factor of Pid elements
 * @return none
 */
void MDI_sendDataChannel1Ver2(uint16_t angleVal, uint8_t kp, uint8_t ki,
		uint8_t kd, uint8_t factor) {
 80061dc:	b590      	push	{r4, r7, lr}
 80061de:	b089      	sub	sp, #36	; 0x24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	4604      	mov	r4, r0
 80061e4:	4608      	mov	r0, r1
 80061e6:	4611      	mov	r1, r2
 80061e8:	461a      	mov	r2, r3
 80061ea:	4623      	mov	r3, r4
 80061ec:	80fb      	strh	r3, [r7, #6]
 80061ee:	4603      	mov	r3, r0
 80061f0:	717b      	strb	r3, [r7, #5]
 80061f2:	460b      	mov	r3, r1
 80061f4:	713b      	strb	r3, [r7, #4]
 80061f6:	4613      	mov	r3, r2
 80061f8:	70fb      	strb	r3, [r7, #3]
	uint16_t checksumTmp = 0;
 80061fa:	2300      	movs	r3, #0
 80061fc:	83bb      	strh	r3, [r7, #28]
	uint8_t tmpArr[] = { angleVal >> 8, angleVal & 0xFF };
 80061fe:	88fb      	ldrh	r3, [r7, #6]
 8006200:	0a1b      	lsrs	r3, r3, #8
 8006202:	b29b      	uxth	r3, r3
 8006204:	b2db      	uxtb	r3, r3
 8006206:	763b      	strb	r3, [r7, #24]
 8006208:	88fb      	ldrh	r3, [r7, #6]
 800620a:	b2db      	uxtb	r3, r3
 800620c:	767b      	strb	r3, [r7, #25]
	checksumTmp += tmpArr[0];
 800620e:	7e3b      	ldrb	r3, [r7, #24]
 8006210:	b29a      	uxth	r2, r3
 8006212:	8bbb      	ldrh	r3, [r7, #28]
 8006214:	4413      	add	r3, r2
 8006216:	83bb      	strh	r3, [r7, #28]
	checksumTmp += tmpArr[1];
 8006218:	7e7b      	ldrb	r3, [r7, #25]
 800621a:	b29a      	uxth	r2, r3
 800621c:	8bbb      	ldrh	r3, [r7, #28]
 800621e:	4413      	add	r3, r2
 8006220:	83bb      	strh	r3, [r7, #28]
	checksumTmp += kp;
 8006222:	797b      	ldrb	r3, [r7, #5]
 8006224:	b29a      	uxth	r2, r3
 8006226:	8bbb      	ldrh	r3, [r7, #28]
 8006228:	4413      	add	r3, r2
 800622a:	83bb      	strh	r3, [r7, #28]
	checksumTmp += ki;
 800622c:	793b      	ldrb	r3, [r7, #4]
 800622e:	b29a      	uxth	r2, r3
 8006230:	8bbb      	ldrh	r3, [r7, #28]
 8006232:	4413      	add	r3, r2
 8006234:	83bb      	strh	r3, [r7, #28]
	checksumTmp += kd;
 8006236:	78fb      	ldrb	r3, [r7, #3]
 8006238:	b29a      	uxth	r2, r3
 800623a:	8bbb      	ldrh	r3, [r7, #28]
 800623c:	4413      	add	r3, r2
 800623e:	83bb      	strh	r3, [r7, #28]
	checksumTmp += factor;
 8006240:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006244:	b29a      	uxth	r2, r3
 8006246:	8bbb      	ldrh	r3, [r7, #28]
 8006248:	4413      	add	r3, r2
 800624a:	83bb      	strh	r3, [r7, #28]
	uint8_t tmp = checksumTmp % 256;
 800624c:	8bbb      	ldrh	r3, [r7, #28]
 800624e:	76fb      	strb	r3, [r7, #27]
	uint8_t tmpComp = ~tmp;
 8006250:	7efb      	ldrb	r3, [r7, #27]
 8006252:	43db      	mvns	r3, r3
 8006254:	76bb      	strb	r3, [r7, #26]
	uint8_t sendBuff[10] = { 0XFF, 0XFF, tmpArr[0], tmpArr[1], kp, ki, kd,
 8006256:	23ff      	movs	r3, #255	; 0xff
 8006258:	733b      	strb	r3, [r7, #12]
 800625a:	23ff      	movs	r3, #255	; 0xff
 800625c:	737b      	strb	r3, [r7, #13]
 800625e:	7e3b      	ldrb	r3, [r7, #24]
 8006260:	73bb      	strb	r3, [r7, #14]
 8006262:	7e7b      	ldrb	r3, [r7, #25]
 8006264:	73fb      	strb	r3, [r7, #15]
 8006266:	797b      	ldrb	r3, [r7, #5]
 8006268:	743b      	strb	r3, [r7, #16]
 800626a:	793b      	ldrb	r3, [r7, #4]
 800626c:	747b      	strb	r3, [r7, #17]
 800626e:	78fb      	ldrb	r3, [r7, #3]
 8006270:	74bb      	strb	r3, [r7, #18]
 8006272:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006276:	74fb      	strb	r3, [r7, #19]
 8006278:	7efb      	ldrb	r3, [r7, #27]
 800627a:	753b      	strb	r3, [r7, #20]
 800627c:	7ebb      	ldrb	r3, [r7, #26]
 800627e:	757b      	strb	r3, [r7, #21]
			factor, tmp, tmpComp };
	for (uint8_t counter = 0; counter < 10; counter++) {
 8006280:	2300      	movs	r3, #0
 8006282:	77fb      	strb	r3, [r7, #31]
 8006284:	e00f      	b.n	80062a6 <MDI_sendDataChannel1Ver2+0xca>
		MDI_writeSmallDataWithRegister(&MDI_channel1TX, sendBuff[counter]);
 8006286:	7ffb      	ldrb	r3, [r7, #31]
 8006288:	f107 0220 	add.w	r2, r7, #32
 800628c:	4413      	add	r3, r2
 800628e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006292:	4619      	mov	r1, r3
 8006294:	4808      	ldr	r0, [pc, #32]	; (80062b8 <MDI_sendDataChannel1Ver2+0xdc>)
 8006296:	f7ff ff81 	bl	800619c <MDI_writeSmallDataWithRegister>
#if SEND_VAL_CHECK==0
		vTaskDelay(1);
#elif SEND_VAL_CHECK==1
		vTaskDelay(50);
 800629a:	2032      	movs	r0, #50	; 0x32
 800629c:	f7fe fa3c 	bl	8004718 <vTaskDelay>
	for (uint8_t counter = 0; counter < 10; counter++) {
 80062a0:	7ffb      	ldrb	r3, [r7, #31]
 80062a2:	3301      	adds	r3, #1
 80062a4:	77fb      	strb	r3, [r7, #31]
 80062a6:	7ffb      	ldrb	r3, [r7, #31]
 80062a8:	2b09      	cmp	r3, #9
 80062aa:	d9ec      	bls.n	8006286 <MDI_sendDataChannel1Ver2+0xaa>
#endif
	}
}
 80062ac:	bf00      	nop
 80062ae:	bf00      	nop
 80062b0:	3724      	adds	r7, #36	; 0x24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd90      	pop	{r4, r7, pc}
 80062b6:	bf00      	nop
 80062b8:	20003614 	.word	0x20003614

080062bc <MDI_enableGetDataChannel1>:
uint8_t  getTmpCH1 = 0;
/**
 * @brief set enable for MDI channel 1 receive
 * @return none
 */
void MDI_enableGetDataChannel1(void){
 80062bc:	b580      	push	{r7, lr}
 80062be:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&MDI_channel1RX,&getTmpCH1,1);
 80062c0:	2201      	movs	r2, #1
 80062c2:	4903      	ldr	r1, [pc, #12]	; (80062d0 <MDI_enableGetDataChannel1+0x14>)
 80062c4:	4803      	ldr	r0, [pc, #12]	; (80062d4 <MDI_enableGetDataChannel1+0x18>)
 80062c6:	f7fc fbce 	bl	8002a66 <HAL_UART_Receive_IT>
}
 80062ca:	bf00      	nop
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20003548 	.word	0x20003548
 80062d4:	20003614 	.word	0x20003614

080062d8 <MDI_getDataChannel1_IT>:
static uint8_t tmpArr1[10];
/**
 * @brief get to Motor Driver 1 values
 * @return none
 */
void MDI_getDataChannel1_IT(UART_HandleTypeDef *callBackHandle) {
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
	volatile UART_HandleTypeDef *tmpHandle;
	tmpHandle = &MDI_channel1RX;
 80062e0:	4b3b      	ldr	r3, [pc, #236]	; (80063d0 <MDI_getDataChannel1_IT+0xf8>)
 80062e2:	613b      	str	r3, [r7, #16]
	if(callBackHandle->Instance == tmpHandle->Instance){
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d16a      	bne.n	80063c6 <MDI_getDataChannel1_IT+0xee>
		static uint8_t counter = 0, getTmpBeff = 0;
			if (0xFF == getTmpCH1 && 0xFF == getTmpBeff) {
 80062f0:	4b38      	ldr	r3, [pc, #224]	; (80063d4 <MDI_getDataChannel1_IT+0xfc>)
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2bff      	cmp	r3, #255	; 0xff
 80062f6:	d10c      	bne.n	8006312 <MDI_getDataChannel1_IT+0x3a>
 80062f8:	4b37      	ldr	r3, [pc, #220]	; (80063d8 <MDI_getDataChannel1_IT+0x100>)
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	2bff      	cmp	r3, #255	; 0xff
 80062fe:	d108      	bne.n	8006312 <MDI_getDataChannel1_IT+0x3a>
					tmpArr1[0] = 0xFF;
 8006300:	4b36      	ldr	r3, [pc, #216]	; (80063dc <MDI_getDataChannel1_IT+0x104>)
 8006302:	22ff      	movs	r2, #255	; 0xff
 8006304:	701a      	strb	r2, [r3, #0]
					tmpArr1[1] = 0xFF;
 8006306:	4b35      	ldr	r3, [pc, #212]	; (80063dc <MDI_getDataChannel1_IT+0x104>)
 8006308:	22ff      	movs	r2, #255	; 0xff
 800630a:	705a      	strb	r2, [r3, #1]
					counter = 1;
 800630c:	4b34      	ldr	r3, [pc, #208]	; (80063e0 <MDI_getDataChannel1_IT+0x108>)
 800630e:	2201      	movs	r2, #1
 8006310:	701a      	strb	r2, [r3, #0]
				}
				tmpArr1[counter] = getTmpCH1;
 8006312:	4b33      	ldr	r3, [pc, #204]	; (80063e0 <MDI_getDataChannel1_IT+0x108>)
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	461a      	mov	r2, r3
 8006318:	4b2e      	ldr	r3, [pc, #184]	; (80063d4 <MDI_getDataChannel1_IT+0xfc>)
 800631a:	7819      	ldrb	r1, [r3, #0]
 800631c:	4b2f      	ldr	r3, [pc, #188]	; (80063dc <MDI_getDataChannel1_IT+0x104>)
 800631e:	5499      	strb	r1, [r3, r2]
				getTmpBeff = getTmpCH1;
 8006320:	4b2c      	ldr	r3, [pc, #176]	; (80063d4 <MDI_getDataChannel1_IT+0xfc>)
 8006322:	781a      	ldrb	r2, [r3, #0]
 8006324:	4b2c      	ldr	r3, [pc, #176]	; (80063d8 <MDI_getDataChannel1_IT+0x100>)
 8006326:	701a      	strb	r2, [r3, #0]
				counter++;
 8006328:	4b2d      	ldr	r3, [pc, #180]	; (80063e0 <MDI_getDataChannel1_IT+0x108>)
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	3301      	adds	r3, #1
 800632e:	b2da      	uxtb	r2, r3
 8006330:	4b2b      	ldr	r3, [pc, #172]	; (80063e0 <MDI_getDataChannel1_IT+0x108>)
 8006332:	701a      	strb	r2, [r3, #0]
				if (counter > 9) {
 8006334:	4b2a      	ldr	r3, [pc, #168]	; (80063e0 <MDI_getDataChannel1_IT+0x108>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b09      	cmp	r3, #9
 800633a:	d93f      	bls.n	80063bc <MDI_getDataChannel1_IT+0xe4>
					counter = 0;
 800633c:	4b28      	ldr	r3, [pc, #160]	; (80063e0 <MDI_getDataChannel1_IT+0x108>)
 800633e:	2200      	movs	r2, #0
 8006340:	701a      	strb	r2, [r3, #0]
					uint16_t checksumTmp = 0;
 8006342:	2300      	movs	r3, #0
 8006344:	82fb      	strh	r3, [r7, #22]
					for (uint8_t c = 2; c < 8; c++)
 8006346:	2302      	movs	r3, #2
 8006348:	757b      	strb	r3, [r7, #21]
 800634a:	e009      	b.n	8006360 <MDI_getDataChannel1_IT+0x88>
						checksumTmp += tmpArr1[c];
 800634c:	7d7b      	ldrb	r3, [r7, #21]
 800634e:	4a23      	ldr	r2, [pc, #140]	; (80063dc <MDI_getDataChannel1_IT+0x104>)
 8006350:	5cd3      	ldrb	r3, [r2, r3]
 8006352:	b29a      	uxth	r2, r3
 8006354:	8afb      	ldrh	r3, [r7, #22]
 8006356:	4413      	add	r3, r2
 8006358:	82fb      	strh	r3, [r7, #22]
					for (uint8_t c = 2; c < 8; c++)
 800635a:	7d7b      	ldrb	r3, [r7, #21]
 800635c:	3301      	adds	r3, #1
 800635e:	757b      	strb	r3, [r7, #21]
 8006360:	7d7b      	ldrb	r3, [r7, #21]
 8006362:	2b07      	cmp	r3, #7
 8006364:	d9f2      	bls.n	800634c <MDI_getDataChannel1_IT+0x74>
					uint8_t tmp = checksumTmp % 256;
 8006366:	8afb      	ldrh	r3, [r7, #22]
 8006368:	73fb      	strb	r3, [r7, #15]
					uint8_t tmpComp = ~tmp;
 800636a:	7bfb      	ldrb	r3, [r7, #15]
 800636c:	43db      	mvns	r3, r3
 800636e:	73bb      	strb	r3, [r7, #14]
					if (tmp == tmpArr1[8] && tmpComp == tmpArr1[9]) {
 8006370:	4b1a      	ldr	r3, [pc, #104]	; (80063dc <MDI_getDataChannel1_IT+0x104>)
 8006372:	7a1b      	ldrb	r3, [r3, #8]
 8006374:	7bfa      	ldrb	r2, [r7, #15]
 8006376:	429a      	cmp	r2, r3
 8006378:	d120      	bne.n	80063bc <MDI_getDataChannel1_IT+0xe4>
 800637a:	4b18      	ldr	r3, [pc, #96]	; (80063dc <MDI_getDataChannel1_IT+0x104>)
 800637c:	7a5b      	ldrb	r3, [r3, #9]
 800637e:	7bba      	ldrb	r2, [r7, #14]
 8006380:	429a      	cmp	r2, r3
 8006382:	d11b      	bne.n	80063bc <MDI_getDataChannel1_IT+0xe4>
						driver1.angle = ((uint16_t) tmpArr1[2] << 8) | tmpArr1[3];
 8006384:	4b15      	ldr	r3, [pc, #84]	; (80063dc <MDI_getDataChannel1_IT+0x104>)
 8006386:	789b      	ldrb	r3, [r3, #2]
 8006388:	021b      	lsls	r3, r3, #8
 800638a:	b21a      	sxth	r2, r3
 800638c:	4b13      	ldr	r3, [pc, #76]	; (80063dc <MDI_getDataChannel1_IT+0x104>)
 800638e:	78db      	ldrb	r3, [r3, #3]
 8006390:	b21b      	sxth	r3, r3
 8006392:	4313      	orrs	r3, r2
 8006394:	b21b      	sxth	r3, r3
 8006396:	b29a      	uxth	r2, r3
 8006398:	4b12      	ldr	r3, [pc, #72]	; (80063e4 <MDI_getDataChannel1_IT+0x10c>)
 800639a:	809a      	strh	r2, [r3, #4]
						driver1.pid_kp = tmpArr1[4];
 800639c:	4b0f      	ldr	r3, [pc, #60]	; (80063dc <MDI_getDataChannel1_IT+0x104>)
 800639e:	791a      	ldrb	r2, [r3, #4]
 80063a0:	4b10      	ldr	r3, [pc, #64]	; (80063e4 <MDI_getDataChannel1_IT+0x10c>)
 80063a2:	709a      	strb	r2, [r3, #2]
						driver1.pid_ki = tmpArr1[5];
 80063a4:	4b0d      	ldr	r3, [pc, #52]	; (80063dc <MDI_getDataChannel1_IT+0x104>)
 80063a6:	795a      	ldrb	r2, [r3, #5]
 80063a8:	4b0e      	ldr	r3, [pc, #56]	; (80063e4 <MDI_getDataChannel1_IT+0x10c>)
 80063aa:	705a      	strb	r2, [r3, #1]
						driver1.pid_kd = tmpArr1[6];
 80063ac:	4b0b      	ldr	r3, [pc, #44]	; (80063dc <MDI_getDataChannel1_IT+0x104>)
 80063ae:	799a      	ldrb	r2, [r3, #6]
 80063b0:	4b0c      	ldr	r3, [pc, #48]	; (80063e4 <MDI_getDataChannel1_IT+0x10c>)
 80063b2:	701a      	strb	r2, [r3, #0]
						driver1.factor = tmpArr1[7];
 80063b4:	4b09      	ldr	r3, [pc, #36]	; (80063dc <MDI_getDataChannel1_IT+0x104>)
 80063b6:	79da      	ldrb	r2, [r3, #7]
 80063b8:	4b0a      	ldr	r3, [pc, #40]	; (80063e4 <MDI_getDataChannel1_IT+0x10c>)
 80063ba:	70da      	strb	r2, [r3, #3]
					}
				}
				HAL_UART_Receive_IT(callBackHandle, &getTmpCH1, 1);
 80063bc:	2201      	movs	r2, #1
 80063be:	4905      	ldr	r1, [pc, #20]	; (80063d4 <MDI_getDataChannel1_IT+0xfc>)
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7fc fb50 	bl	8002a66 <HAL_UART_Receive_IT>
	}
}
 80063c6:	bf00      	nop
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20003614 	.word	0x20003614
 80063d4:	20003548 	.word	0x20003548
 80063d8:	20003568 	.word	0x20003568
 80063dc:	2000354c 	.word	0x2000354c
 80063e0:	20003569 	.word	0x20003569
 80063e4:	200036fc 	.word	0x200036fc

080063e8 <MDI_sendDataChannel2Ver2>:
 * @param kd -> get Pid kd value
 * @param factor -> get factor of Pid elements
 * @return none
 */
void MDI_sendDataChannel2Ver2(int16_t speed, uint8_t kp, uint8_t ki,uint8_t kd,
		uint8_t soft_k, uint8_t soft_f) {
 80063e8:	b590      	push	{r4, r7, lr}
 80063ea:	b089      	sub	sp, #36	; 0x24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	4604      	mov	r4, r0
 80063f0:	4608      	mov	r0, r1
 80063f2:	4611      	mov	r1, r2
 80063f4:	461a      	mov	r2, r3
 80063f6:	4623      	mov	r3, r4
 80063f8:	80fb      	strh	r3, [r7, #6]
 80063fa:	4603      	mov	r3, r0
 80063fc:	717b      	strb	r3, [r7, #5]
 80063fe:	460b      	mov	r3, r1
 8006400:	713b      	strb	r3, [r7, #4]
 8006402:	4613      	mov	r3, r2
 8006404:	70fb      	strb	r3, [r7, #3]
	uint16_t checksumTmp = 0;
 8006406:	2300      	movs	r3, #0
 8006408:	83bb      	strh	r3, [r7, #28]
	uint8_t tmpArr[] = { speed >> 8, speed & 0xFF };
 800640a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800640e:	121b      	asrs	r3, r3, #8
 8006410:	b21b      	sxth	r3, r3
 8006412:	b2db      	uxtb	r3, r3
 8006414:	763b      	strb	r3, [r7, #24]
 8006416:	88fb      	ldrh	r3, [r7, #6]
 8006418:	b2db      	uxtb	r3, r3
 800641a:	767b      	strb	r3, [r7, #25]
	checksumTmp += tmpArr[0];
 800641c:	7e3b      	ldrb	r3, [r7, #24]
 800641e:	b29a      	uxth	r2, r3
 8006420:	8bbb      	ldrh	r3, [r7, #28]
 8006422:	4413      	add	r3, r2
 8006424:	83bb      	strh	r3, [r7, #28]
	checksumTmp += tmpArr[1];
 8006426:	7e7b      	ldrb	r3, [r7, #25]
 8006428:	b29a      	uxth	r2, r3
 800642a:	8bbb      	ldrh	r3, [r7, #28]
 800642c:	4413      	add	r3, r2
 800642e:	83bb      	strh	r3, [r7, #28]
	checksumTmp += kp;
 8006430:	797b      	ldrb	r3, [r7, #5]
 8006432:	b29a      	uxth	r2, r3
 8006434:	8bbb      	ldrh	r3, [r7, #28]
 8006436:	4413      	add	r3, r2
 8006438:	83bb      	strh	r3, [r7, #28]
	checksumTmp += ki;
 800643a:	793b      	ldrb	r3, [r7, #4]
 800643c:	b29a      	uxth	r2, r3
 800643e:	8bbb      	ldrh	r3, [r7, #28]
 8006440:	4413      	add	r3, r2
 8006442:	83bb      	strh	r3, [r7, #28]
	checksumTmp += kd;
 8006444:	78fb      	ldrb	r3, [r7, #3]
 8006446:	b29a      	uxth	r2, r3
 8006448:	8bbb      	ldrh	r3, [r7, #28]
 800644a:	4413      	add	r3, r2
 800644c:	83bb      	strh	r3, [r7, #28]
	checksumTmp += soft_k;
 800644e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006452:	b29a      	uxth	r2, r3
 8006454:	8bbb      	ldrh	r3, [r7, #28]
 8006456:	4413      	add	r3, r2
 8006458:	83bb      	strh	r3, [r7, #28]
	checksumTmp += soft_f;
 800645a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800645e:	b29a      	uxth	r2, r3
 8006460:	8bbb      	ldrh	r3, [r7, #28]
 8006462:	4413      	add	r3, r2
 8006464:	83bb      	strh	r3, [r7, #28]
	uint8_t tmp = checksumTmp % 256;
 8006466:	8bbb      	ldrh	r3, [r7, #28]
 8006468:	76fb      	strb	r3, [r7, #27]
	uint8_t tmpComp = ~tmp;
 800646a:	7efb      	ldrb	r3, [r7, #27]
 800646c:	43db      	mvns	r3, r3
 800646e:	76bb      	strb	r3, [r7, #26]
	uint8_t sendBuff[11] = { 0XFF, 0XFF,kp, tmpArr[0],ki, tmpArr[1], kd,
 8006470:	23ff      	movs	r3, #255	; 0xff
 8006472:	733b      	strb	r3, [r7, #12]
 8006474:	23ff      	movs	r3, #255	; 0xff
 8006476:	737b      	strb	r3, [r7, #13]
 8006478:	797b      	ldrb	r3, [r7, #5]
 800647a:	73bb      	strb	r3, [r7, #14]
 800647c:	7e3b      	ldrb	r3, [r7, #24]
 800647e:	73fb      	strb	r3, [r7, #15]
 8006480:	793b      	ldrb	r3, [r7, #4]
 8006482:	743b      	strb	r3, [r7, #16]
 8006484:	7e7b      	ldrb	r3, [r7, #25]
 8006486:	747b      	strb	r3, [r7, #17]
 8006488:	78fb      	ldrb	r3, [r7, #3]
 800648a:	74bb      	strb	r3, [r7, #18]
 800648c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006490:	74fb      	strb	r3, [r7, #19]
 8006492:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006496:	753b      	strb	r3, [r7, #20]
 8006498:	7efb      	ldrb	r3, [r7, #27]
 800649a:	757b      	strb	r3, [r7, #21]
 800649c:	7ebb      	ldrb	r3, [r7, #26]
 800649e:	75bb      	strb	r3, [r7, #22]
			soft_k,soft_f, tmp, tmpComp };
	for (uint8_t counter = 0; counter < 11; counter++) {
 80064a0:	2300      	movs	r3, #0
 80064a2:	77fb      	strb	r3, [r7, #31]
 80064a4:	e00f      	b.n	80064c6 <MDI_sendDataChannel2Ver2+0xde>
		MDI_writeSmallDataWithRegister(&MDI_channel2TX, sendBuff[counter]);
 80064a6:	7ffb      	ldrb	r3, [r7, #31]
 80064a8:	f107 0220 	add.w	r2, r7, #32
 80064ac:	4413      	add	r3, r2
 80064ae:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80064b2:	4619      	mov	r1, r3
 80064b4:	4808      	ldr	r0, [pc, #32]	; (80064d8 <MDI_sendDataChannel2Ver2+0xf0>)
 80064b6:	f7ff fe71 	bl	800619c <MDI_writeSmallDataWithRegister>
	#if SEND_VAL_CHECK==0
		vTaskDelay(1);
	#elif SEND_VAL_CHECK==1
		vTaskDelay(50);
 80064ba:	2032      	movs	r0, #50	; 0x32
 80064bc:	f7fe f92c 	bl	8004718 <vTaskDelay>
	for (uint8_t counter = 0; counter < 11; counter++) {
 80064c0:	7ffb      	ldrb	r3, [r7, #31]
 80064c2:	3301      	adds	r3, #1
 80064c4:	77fb      	strb	r3, [r7, #31]
 80064c6:	7ffb      	ldrb	r3, [r7, #31]
 80064c8:	2b0a      	cmp	r3, #10
 80064ca:	d9ec      	bls.n	80064a6 <MDI_sendDataChannel2Ver2+0xbe>
	#endif
	}
}
 80064cc:	bf00      	nop
 80064ce:	bf00      	nop
 80064d0:	3724      	adds	r7, #36	; 0x24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd90      	pop	{r4, r7, pc}
 80064d6:	bf00      	nop
 80064d8:	20003594 	.word	0x20003594

080064dc <MDI_enableGetDataChannel2>:
/**
 * @brief set enable for MDI channel 2 receive
 * @return none
 */
uint8_t  getTmpCH2 = 0;
void MDI_enableGetDataChannel2(void){
 80064dc:	b580      	push	{r7, lr}
 80064de:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&MDI_channel2RX,&getTmpCH2,1);
 80064e0:	2201      	movs	r2, #1
 80064e2:	4903      	ldr	r1, [pc, #12]	; (80064f0 <MDI_enableGetDataChannel2+0x14>)
 80064e4:	4803      	ldr	r0, [pc, #12]	; (80064f4 <MDI_enableGetDataChannel2+0x18>)
 80064e6:	f7fc fabe 	bl	8002a66 <HAL_UART_Receive_IT>
}
 80064ea:	bf00      	nop
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	20003556 	.word	0x20003556
 80064f4:	20003594 	.word	0x20003594

080064f8 <MDI_getDataChannel2_IT>:
/**
 * @brief get to Motor Driver 2 values
 * @return callBackHandle-> get u(s)art handle
 */
static uint8_t tmpArr2[16];
void MDI_getDataChannel2_IT(UART_HandleTypeDef *callBackHandle) {
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
	volatile UART_HandleTypeDef *tmpHandle;
	tmpHandle = &MDI_channel2RX;
 8006500:	4b44      	ldr	r3, [pc, #272]	; (8006614 <MDI_getDataChannel2_IT+0x11c>)
 8006502:	613b      	str	r3, [r7, #16]
	if(callBackHandle->Instance == tmpHandle->Instance){
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	429a      	cmp	r2, r3
 800650e:	d17d      	bne.n	800660c <MDI_getDataChannel2_IT+0x114>
		static uint8_t counter = 0, getTmpBeff = 0;
			if (0xFF == getTmpCH2 && 0xFF == getTmpBeff) {
 8006510:	4b41      	ldr	r3, [pc, #260]	; (8006618 <MDI_getDataChannel2_IT+0x120>)
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	2bff      	cmp	r3, #255	; 0xff
 8006516:	d10c      	bne.n	8006532 <MDI_getDataChannel2_IT+0x3a>
 8006518:	4b40      	ldr	r3, [pc, #256]	; (800661c <MDI_getDataChannel2_IT+0x124>)
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	2bff      	cmp	r3, #255	; 0xff
 800651e:	d108      	bne.n	8006532 <MDI_getDataChannel2_IT+0x3a>
				tmpArr2[0] = 0xFF;
 8006520:	4b3f      	ldr	r3, [pc, #252]	; (8006620 <MDI_getDataChannel2_IT+0x128>)
 8006522:	22ff      	movs	r2, #255	; 0xff
 8006524:	701a      	strb	r2, [r3, #0]
				tmpArr2[1] = 0xFF;
 8006526:	4b3e      	ldr	r3, [pc, #248]	; (8006620 <MDI_getDataChannel2_IT+0x128>)
 8006528:	22ff      	movs	r2, #255	; 0xff
 800652a:	705a      	strb	r2, [r3, #1]
				counter = 1;
 800652c:	4b3d      	ldr	r3, [pc, #244]	; (8006624 <MDI_getDataChannel2_IT+0x12c>)
 800652e:	2201      	movs	r2, #1
 8006530:	701a      	strb	r2, [r3, #0]
			}
			tmpArr2[counter] = getTmpCH2;
 8006532:	4b3c      	ldr	r3, [pc, #240]	; (8006624 <MDI_getDataChannel2_IT+0x12c>)
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	461a      	mov	r2, r3
 8006538:	4b37      	ldr	r3, [pc, #220]	; (8006618 <MDI_getDataChannel2_IT+0x120>)
 800653a:	7819      	ldrb	r1, [r3, #0]
 800653c:	4b38      	ldr	r3, [pc, #224]	; (8006620 <MDI_getDataChannel2_IT+0x128>)
 800653e:	5499      	strb	r1, [r3, r2]
			getTmpBeff = getTmpCH2;
 8006540:	4b35      	ldr	r3, [pc, #212]	; (8006618 <MDI_getDataChannel2_IT+0x120>)
 8006542:	781a      	ldrb	r2, [r3, #0]
 8006544:	4b35      	ldr	r3, [pc, #212]	; (800661c <MDI_getDataChannel2_IT+0x124>)
 8006546:	701a      	strb	r2, [r3, #0]
			counter++;
 8006548:	4b36      	ldr	r3, [pc, #216]	; (8006624 <MDI_getDataChannel2_IT+0x12c>)
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	3301      	adds	r3, #1
 800654e:	b2da      	uxtb	r2, r3
 8006550:	4b34      	ldr	r3, [pc, #208]	; (8006624 <MDI_getDataChannel2_IT+0x12c>)
 8006552:	701a      	strb	r2, [r3, #0]
			if (counter > 15) {
 8006554:	4b33      	ldr	r3, [pc, #204]	; (8006624 <MDI_getDataChannel2_IT+0x12c>)
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2b0f      	cmp	r3, #15
 800655a:	d952      	bls.n	8006602 <MDI_getDataChannel2_IT+0x10a>
				counter = 0;
 800655c:	4b31      	ldr	r3, [pc, #196]	; (8006624 <MDI_getDataChannel2_IT+0x12c>)
 800655e:	2200      	movs	r2, #0
 8006560:	701a      	strb	r2, [r3, #0]
				uint16_t checksumTmp = 0;
 8006562:	2300      	movs	r3, #0
 8006564:	82fb      	strh	r3, [r7, #22]
				for (uint8_t c = 2; c < 14; c++)
 8006566:	2302      	movs	r3, #2
 8006568:	757b      	strb	r3, [r7, #21]
 800656a:	e009      	b.n	8006580 <MDI_getDataChannel2_IT+0x88>
					checksumTmp += tmpArr2[c];
 800656c:	7d7b      	ldrb	r3, [r7, #21]
 800656e:	4a2c      	ldr	r2, [pc, #176]	; (8006620 <MDI_getDataChannel2_IT+0x128>)
 8006570:	5cd3      	ldrb	r3, [r2, r3]
 8006572:	b29a      	uxth	r2, r3
 8006574:	8afb      	ldrh	r3, [r7, #22]
 8006576:	4413      	add	r3, r2
 8006578:	82fb      	strh	r3, [r7, #22]
				for (uint8_t c = 2; c < 14; c++)
 800657a:	7d7b      	ldrb	r3, [r7, #21]
 800657c:	3301      	adds	r3, #1
 800657e:	757b      	strb	r3, [r7, #21]
 8006580:	7d7b      	ldrb	r3, [r7, #21]
 8006582:	2b0d      	cmp	r3, #13
 8006584:	d9f2      	bls.n	800656c <MDI_getDataChannel2_IT+0x74>
				uint8_t tmp = checksumTmp % 256;
 8006586:	8afb      	ldrh	r3, [r7, #22]
 8006588:	73fb      	strb	r3, [r7, #15]
				uint8_t tmpComp = ~tmp;
 800658a:	7bfb      	ldrb	r3, [r7, #15]
 800658c:	43db      	mvns	r3, r3
 800658e:	73bb      	strb	r3, [r7, #14]
				if (tmp == tmpArr2[14] && tmpComp == tmpArr2[15]) {
 8006590:	4b23      	ldr	r3, [pc, #140]	; (8006620 <MDI_getDataChannel2_IT+0x128>)
 8006592:	7b9b      	ldrb	r3, [r3, #14]
 8006594:	7bfa      	ldrb	r2, [r7, #15]
 8006596:	429a      	cmp	r2, r3
 8006598:	d133      	bne.n	8006602 <MDI_getDataChannel2_IT+0x10a>
 800659a:	4b21      	ldr	r3, [pc, #132]	; (8006620 <MDI_getDataChannel2_IT+0x128>)
 800659c:	7bdb      	ldrb	r3, [r3, #15]
 800659e:	7bba      	ldrb	r2, [r7, #14]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d12e      	bne.n	8006602 <MDI_getDataChannel2_IT+0x10a>
					travelMotor.encoder =(((tmpArr2[7] << 24)) | ((tmpArr2[9]<< 16)) | ((tmpArr2[11]<< 8)) | (tmpArr2[13] & 0xFF));
 80065a4:	4b1e      	ldr	r3, [pc, #120]	; (8006620 <MDI_getDataChannel2_IT+0x128>)
 80065a6:	79db      	ldrb	r3, [r3, #7]
 80065a8:	061a      	lsls	r2, r3, #24
 80065aa:	4b1d      	ldr	r3, [pc, #116]	; (8006620 <MDI_getDataChannel2_IT+0x128>)
 80065ac:	7a5b      	ldrb	r3, [r3, #9]
 80065ae:	041b      	lsls	r3, r3, #16
 80065b0:	431a      	orrs	r2, r3
 80065b2:	4b1b      	ldr	r3, [pc, #108]	; (8006620 <MDI_getDataChannel2_IT+0x128>)
 80065b4:	7adb      	ldrb	r3, [r3, #11]
 80065b6:	021b      	lsls	r3, r3, #8
 80065b8:	4313      	orrs	r3, r2
 80065ba:	4a19      	ldr	r2, [pc, #100]	; (8006620 <MDI_getDataChannel2_IT+0x128>)
 80065bc:	7b52      	ldrb	r2, [r2, #13]
 80065be:	4313      	orrs	r3, r2
 80065c0:	4a19      	ldr	r2, [pc, #100]	; (8006628 <MDI_getDataChannel2_IT+0x130>)
 80065c2:	6093      	str	r3, [r2, #8]
					travelMotor.speed = ( (tmpArr2[3] << 8) |(tmpArr2[5] & 0xFF));
 80065c4:	4b16      	ldr	r3, [pc, #88]	; (8006620 <MDI_getDataChannel2_IT+0x128>)
 80065c6:	78db      	ldrb	r3, [r3, #3]
 80065c8:	021b      	lsls	r3, r3, #8
 80065ca:	b21a      	sxth	r2, r3
 80065cc:	4b14      	ldr	r3, [pc, #80]	; (8006620 <MDI_getDataChannel2_IT+0x128>)
 80065ce:	795b      	ldrb	r3, [r3, #5]
 80065d0:	b21b      	sxth	r3, r3
 80065d2:	4313      	orrs	r3, r2
 80065d4:	b21a      	sxth	r2, r3
 80065d6:	4b14      	ldr	r3, [pc, #80]	; (8006628 <MDI_getDataChannel2_IT+0x130>)
 80065d8:	809a      	strh	r2, [r3, #4]
					travelMotor.pid_kp = tmpArr2[2];
 80065da:	4b11      	ldr	r3, [pc, #68]	; (8006620 <MDI_getDataChannel2_IT+0x128>)
 80065dc:	789a      	ldrb	r2, [r3, #2]
 80065de:	4b12      	ldr	r3, [pc, #72]	; (8006628 <MDI_getDataChannel2_IT+0x130>)
 80065e0:	701a      	strb	r2, [r3, #0]
					travelMotor.pid_ki = tmpArr2[4];
 80065e2:	4b0f      	ldr	r3, [pc, #60]	; (8006620 <MDI_getDataChannel2_IT+0x128>)
 80065e4:	791a      	ldrb	r2, [r3, #4]
 80065e6:	4b10      	ldr	r3, [pc, #64]	; (8006628 <MDI_getDataChannel2_IT+0x130>)
 80065e8:	705a      	strb	r2, [r3, #1]
					travelMotor.pid_kd = tmpArr2[6];
 80065ea:	4b0d      	ldr	r3, [pc, #52]	; (8006620 <MDI_getDataChannel2_IT+0x128>)
 80065ec:	799a      	ldrb	r2, [r3, #6]
 80065ee:	4b0e      	ldr	r3, [pc, #56]	; (8006628 <MDI_getDataChannel2_IT+0x130>)
 80065f0:	709a      	strb	r2, [r3, #2]
					travelMotor.soft_k = tmpArr2[8];
 80065f2:	4b0b      	ldr	r3, [pc, #44]	; (8006620 <MDI_getDataChannel2_IT+0x128>)
 80065f4:	7a1a      	ldrb	r2, [r3, #8]
 80065f6:	4b0c      	ldr	r3, [pc, #48]	; (8006628 <MDI_getDataChannel2_IT+0x130>)
 80065f8:	71da      	strb	r2, [r3, #7]
					travelMotor.soft_f = tmpArr2[10];
 80065fa:	4b09      	ldr	r3, [pc, #36]	; (8006620 <MDI_getDataChannel2_IT+0x128>)
 80065fc:	7a9a      	ldrb	r2, [r3, #10]
 80065fe:	4b0a      	ldr	r3, [pc, #40]	; (8006628 <MDI_getDataChannel2_IT+0x130>)
 8006600:	719a      	strb	r2, [r3, #6]
				}
			}
			HAL_UART_Receive_IT(callBackHandle, &getTmpCH2, 1);
 8006602:	2201      	movs	r2, #1
 8006604:	4904      	ldr	r1, [pc, #16]	; (8006618 <MDI_getDataChannel2_IT+0x120>)
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7fc fa2d 	bl	8002a66 <HAL_UART_Receive_IT>
	}
}
 800660c:	bf00      	nop
 800660e:	3718      	adds	r7, #24
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	20003594 	.word	0x20003594
 8006618:	20003556 	.word	0x20003556
 800661c:	2000356a 	.word	0x2000356a
 8006620:	20003558 	.word	0x20003558
 8006624:	2000356b 	.word	0x2000356b
 8006628:	2000371c 	.word	0x2000371c

0800662c <getDriver1ReceiveVal>:
}
uint16_t getDriver2angle(void) {
	return driver2.factor;
}

mD_interface getDriver1ReceiveVal(void) {
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
	return driver1;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a05      	ldr	r2, [pc, #20]	; (800664c <getDriver1ReceiveVal+0x20>)
 8006638:	6811      	ldr	r1, [r2, #0]
 800663a:	6019      	str	r1, [r3, #0]
 800663c:	8892      	ldrh	r2, [r2, #4]
 800663e:	809a      	strh	r2, [r3, #4]
}
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	bc80      	pop	{r7}
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	200036fc 	.word	0x200036fc

08006650 <getDriver2ReceiveVal>:
tMD_interface getDriver2ReceiveVal(void) {
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
	return travelMotor;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a04      	ldr	r2, [pc, #16]	; (800666c <getDriver2ReceiveVal+0x1c>)
 800665c:	ca07      	ldmia	r2, {r0, r1, r2}
 800665e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	bc80      	pop	{r7}
 800666a:	4770      	bx	lr
 800666c:	2000371c 	.word	0x2000371c

08006670 <HAL_UART_RxCpltCallback>:
xSemaphoreHandle uart1SemphrHandle=NULL;
xSemaphoreHandle uart2SemphrHandle=NULL;
xSemaphoreHandle uart3SemphrHandle=NULL;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
	MDI_getDataChannel1_IT(huart);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7ff fe2d 	bl	80062d8 <MDI_getDataChannel1_IT>
	MDI_getDataChannel2_IT(huart);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7ff ff3a 	bl	80064f8 <MDI_getDataChannel2_IT>
	CI_getDataChannel_IT(huart);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7fa fba7 	bl	8000dd8 <CI_getDataChannel_IT>
}
 800668a:	bf00      	nop
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
	...

08006694 <tasks_init>:

void tasks_init(void){
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af02      	add	r7, sp, #8
	 * @param usStackDepth-> stack size
	 * @param pvParameters-> function parameters
	 * @param uxPriority -> Priority
	 * @param pxCreatedTask -> handle so id
	 * */
	vSemaphoreCreateBinary(uart1SemphrHandle);
 800669a:	2203      	movs	r2, #3
 800669c:	2100      	movs	r1, #0
 800669e:	2001      	movs	r0, #1
 80066a0:	f7fd f93b 	bl	800391a <xQueueGenericCreate>
 80066a4:	4603      	mov	r3, r0
 80066a6:	4a56      	ldr	r2, [pc, #344]	; (8006800 <tasks_init+0x16c>)
 80066a8:	6013      	str	r3, [r2, #0]
 80066aa:	4b55      	ldr	r3, [pc, #340]	; (8006800 <tasks_init+0x16c>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d006      	beq.n	80066c0 <tasks_init+0x2c>
 80066b2:	4b53      	ldr	r3, [pc, #332]	; (8006800 <tasks_init+0x16c>)
 80066b4:	6818      	ldr	r0, [r3, #0]
 80066b6:	2300      	movs	r3, #0
 80066b8:	2200      	movs	r2, #0
 80066ba:	2100      	movs	r1, #0
 80066bc:	f7fd f98e 	bl	80039dc <xQueueGenericSend>
	vSemaphoreCreateBinary(uart2SemphrHandle);
 80066c0:	2203      	movs	r2, #3
 80066c2:	2100      	movs	r1, #0
 80066c4:	2001      	movs	r0, #1
 80066c6:	f7fd f928 	bl	800391a <xQueueGenericCreate>
 80066ca:	4603      	mov	r3, r0
 80066cc:	4a4d      	ldr	r2, [pc, #308]	; (8006804 <tasks_init+0x170>)
 80066ce:	6013      	str	r3, [r2, #0]
 80066d0:	4b4c      	ldr	r3, [pc, #304]	; (8006804 <tasks_init+0x170>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d006      	beq.n	80066e6 <tasks_init+0x52>
 80066d8:	4b4a      	ldr	r3, [pc, #296]	; (8006804 <tasks_init+0x170>)
 80066da:	6818      	ldr	r0, [r3, #0]
 80066dc:	2300      	movs	r3, #0
 80066de:	2200      	movs	r2, #0
 80066e0:	2100      	movs	r1, #0
 80066e2:	f7fd f97b 	bl	80039dc <xQueueGenericSend>
	vSemaphoreCreateBinary(uart3SemphrHandle);
 80066e6:	2203      	movs	r2, #3
 80066e8:	2100      	movs	r1, #0
 80066ea:	2001      	movs	r0, #1
 80066ec:	f7fd f915 	bl	800391a <xQueueGenericCreate>
 80066f0:	4603      	mov	r3, r0
 80066f2:	4a45      	ldr	r2, [pc, #276]	; (8006808 <tasks_init+0x174>)
 80066f4:	6013      	str	r3, [r2, #0]
 80066f6:	4b44      	ldr	r3, [pc, #272]	; (8006808 <tasks_init+0x174>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d006      	beq.n	800670c <tasks_init+0x78>
 80066fe:	4b42      	ldr	r3, [pc, #264]	; (8006808 <tasks_init+0x174>)
 8006700:	6818      	ldr	r0, [r3, #0]
 8006702:	2300      	movs	r3, #0
 8006704:	2200      	movs	r2, #0
 8006706:	2100      	movs	r1, #0
 8006708:	f7fd f968 	bl	80039dc <xQueueGenericSend>


	if(uart1SemphrHandle!=NULL && uart2SemphrHandle!=NULL && uart3SemphrHandle!=NULL){
 800670c:	4b3c      	ldr	r3, [pc, #240]	; (8006800 <tasks_init+0x16c>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d071      	beq.n	80067f8 <tasks_init+0x164>
 8006714:	4b3b      	ldr	r3, [pc, #236]	; (8006804 <tasks_init+0x170>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d06d      	beq.n	80067f8 <tasks_init+0x164>
 800671c:	4b3a      	ldr	r3, [pc, #232]	; (8006808 <tasks_init+0x174>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d069      	beq.n	80067f8 <tasks_init+0x164>


		xTaskCreate(computerValTask, "calc Uart 3val", configMINIMAL_STACK_SIZE, NULL,  55, NULL);
 8006724:	2300      	movs	r3, #0
 8006726:	9301      	str	r3, [sp, #4]
 8006728:	2337      	movs	r3, #55	; 0x37
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	2300      	movs	r3, #0
 800672e:	2280      	movs	r2, #128	; 0x80
 8006730:	4936      	ldr	r1, [pc, #216]	; (800680c <tasks_init+0x178>)
 8006732:	4837      	ldr	r0, [pc, #220]	; (8006810 <tasks_init+0x17c>)
 8006734:	f7fd feb4 	bl	80044a0 <xTaskCreate>
		xTaskCreate(computerGetTask, "send Uart 3", configMINIMAL_STACK_SIZE, NULL,  55, NULL);
 8006738:	2300      	movs	r3, #0
 800673a:	9301      	str	r3, [sp, #4]
 800673c:	2337      	movs	r3, #55	; 0x37
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	2300      	movs	r3, #0
 8006742:	2280      	movs	r2, #128	; 0x80
 8006744:	4933      	ldr	r1, [pc, #204]	; (8006814 <tasks_init+0x180>)
 8006746:	4834      	ldr	r0, [pc, #208]	; (8006818 <tasks_init+0x184>)
 8006748:	f7fd feaa 	bl	80044a0 <xTaskCreate>
		xTaskCreate(computerSendTask, "get Uart 3", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 800674c:	2300      	movs	r3, #0
 800674e:	9301      	str	r3, [sp, #4]
 8006750:	2337      	movs	r3, #55	; 0x37
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	2300      	movs	r3, #0
 8006756:	2280      	movs	r2, #128	; 0x80
 8006758:	4930      	ldr	r1, [pc, #192]	; (800681c <tasks_init+0x188>)
 800675a:	4831      	ldr	r0, [pc, #196]	; (8006820 <tasks_init+0x18c>)
 800675c:	f7fd fea0 	bl	80044a0 <xTaskCreate>

		xTaskCreate(sendDataUart1Task, "send Uart 1", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 8006760:	2300      	movs	r3, #0
 8006762:	9301      	str	r3, [sp, #4]
 8006764:	2337      	movs	r3, #55	; 0x37
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	2300      	movs	r3, #0
 800676a:	2280      	movs	r2, #128	; 0x80
 800676c:	492d      	ldr	r1, [pc, #180]	; (8006824 <tasks_init+0x190>)
 800676e:	482e      	ldr	r0, [pc, #184]	; (8006828 <tasks_init+0x194>)
 8006770:	f7fd fe96 	bl	80044a0 <xTaskCreate>
		xTaskCreate(sendDataUart2Task, "send Uart 2", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 8006774:	2300      	movs	r3, #0
 8006776:	9301      	str	r3, [sp, #4]
 8006778:	2337      	movs	r3, #55	; 0x37
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	2300      	movs	r3, #0
 800677e:	2280      	movs	r2, #128	; 0x80
 8006780:	492a      	ldr	r1, [pc, #168]	; (800682c <tasks_init+0x198>)
 8006782:	482b      	ldr	r0, [pc, #172]	; (8006830 <tasks_init+0x19c>)
 8006784:	f7fd fe8c 	bl	80044a0 <xTaskCreate>

		xTaskCreate(getDataUart1Task, "get Uart 1", configMINIMAL_STACK_SIZE, NULL,  55, NULL);
 8006788:	2300      	movs	r3, #0
 800678a:	9301      	str	r3, [sp, #4]
 800678c:	2337      	movs	r3, #55	; 0x37
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	2300      	movs	r3, #0
 8006792:	2280      	movs	r2, #128	; 0x80
 8006794:	4927      	ldr	r1, [pc, #156]	; (8006834 <tasks_init+0x1a0>)
 8006796:	4828      	ldr	r0, [pc, #160]	; (8006838 <tasks_init+0x1a4>)
 8006798:	f7fd fe82 	bl	80044a0 <xTaskCreate>
		xTaskCreate(getDataUart2Task, "get Uart 2", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 800679c:	2300      	movs	r3, #0
 800679e:	9301      	str	r3, [sp, #4]
 80067a0:	2337      	movs	r3, #55	; 0x37
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	2300      	movs	r3, #0
 80067a6:	2280      	movs	r2, #128	; 0x80
 80067a8:	4924      	ldr	r1, [pc, #144]	; (800683c <tasks_init+0x1a8>)
 80067aa:	4825      	ldr	r0, [pc, #148]	; (8006840 <tasks_init+0x1ac>)
 80067ac:	f7fd fe78 	bl	80044a0 <xTaskCreate>

		xTaskCreate(readSwitchsTask, "read switchs", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 80067b0:	2300      	movs	r3, #0
 80067b2:	9301      	str	r3, [sp, #4]
 80067b4:	2337      	movs	r3, #55	; 0x37
 80067b6:	9300      	str	r3, [sp, #0]
 80067b8:	2300      	movs	r3, #0
 80067ba:	2280      	movs	r2, #128	; 0x80
 80067bc:	4921      	ldr	r1, [pc, #132]	; (8006844 <tasks_init+0x1b0>)
 80067be:	4822      	ldr	r0, [pc, #136]	; (8006848 <tasks_init+0x1b4>)
 80067c0:	f7fd fe6e 	bl	80044a0 <xTaskCreate>
		xTaskCreate(writeRelaysTask, "write relays", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 80067c4:	2300      	movs	r3, #0
 80067c6:	9301      	str	r3, [sp, #4]
 80067c8:	2337      	movs	r3, #55	; 0x37
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	2300      	movs	r3, #0
 80067ce:	2280      	movs	r2, #128	; 0x80
 80067d0:	491e      	ldr	r1, [pc, #120]	; (800684c <tasks_init+0x1b8>)
 80067d2:	481f      	ldr	r0, [pc, #124]	; (8006850 <tasks_init+0x1bc>)
 80067d4:	f7fd fe64 	bl	80044a0 <xTaskCreate>


		xTaskCreate(ledTestTask, "led task", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 80067d8:	2300      	movs	r3, #0
 80067da:	9301      	str	r3, [sp, #4]
 80067dc:	2337      	movs	r3, #55	; 0x37
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	2300      	movs	r3, #0
 80067e2:	2280      	movs	r2, #128	; 0x80
 80067e4:	491b      	ldr	r1, [pc, #108]	; (8006854 <tasks_init+0x1c0>)
 80067e6:	481c      	ldr	r0, [pc, #112]	; (8006858 <tasks_init+0x1c4>)
 80067e8:	f7fd fe5a 	bl	80044a0 <xTaskCreate>



		driverInit();
 80067ec:	f000 f9a6 	bl	8006b3c <driverInit>
		IO_init();
 80067f0:	f7fc fc46 	bl	8003080 <IO_init>
		vTaskStartScheduler();
 80067f4:	f7fd ffc4 	bl	8004780 <vTaskStartScheduler>
	}
}
 80067f8:	bf00      	nop
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	2000356c 	.word	0x2000356c
 8006804:	20003570 	.word	0x20003570
 8006808:	20003574 	.word	0x20003574
 800680c:	08006cb8 	.word	0x08006cb8
 8006810:	080068c9 	.word	0x080068c9
 8006814:	08006cc8 	.word	0x08006cc8
 8006818:	08006899 	.word	0x08006899
 800681c:	08006cd4 	.word	0x08006cd4
 8006820:	08006a15 	.word	0x08006a15
 8006824:	08006ce0 	.word	0x08006ce0
 8006828:	08006a39 	.word	0x08006a39
 800682c:	08006cec 	.word	0x08006cec
 8006830:	08006a85 	.word	0x08006a85
 8006834:	08006cf8 	.word	0x08006cf8
 8006838:	08006add 	.word	0x08006add
 800683c:	08006d04 	.word	0x08006d04
 8006840:	08006b0d 	.word	0x08006b0d
 8006844:	08006d10 	.word	0x08006d10
 8006848:	0800685d 	.word	0x0800685d
 800684c:	08006d20 	.word	0x08006d20
 8006850:	0800686b 	.word	0x0800686b
 8006854:	08006d30 	.word	0x08006d30
 8006858:	08006879 	.word	0x08006879

0800685c <readSwitchsTask>:

void readSwitchsTask(void *params){
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
	while(1){
		IO_readInputSwitchs();
 8006864:	f7fc fc44 	bl	80030f0 <IO_readInputSwitchs>
 8006868:	e7fc      	b.n	8006864 <readSwitchsTask+0x8>

0800686a <writeRelaysTask>:
	}
}
void writeRelaysTask(void *params){
 800686a:	b580      	push	{r7, lr}
 800686c:	b082      	sub	sp, #8
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
	while(1){
		IO_testInputOutput();
 8006872:	f7fc fca7 	bl	80031c4 <IO_testInputOutput>
 8006876:	e7fc      	b.n	8006872 <writeRelaysTask+0x8>

08006878 <ledTestTask>:
	}
}
void ledTestTask(void *params){
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 8006880:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006884:	4803      	ldr	r0, [pc, #12]	; (8006894 <ledTestTask+0x1c>)
 8006886:	f7fb f9f4 	bl	8001c72 <HAL_GPIO_TogglePin>

		vTaskDelay(500);
 800688a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800688e:	f7fd ff43 	bl	8004718 <vTaskDelay>
		HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 8006892:	e7f5      	b.n	8006880 <ledTestTask+0x8>
 8006894:	40011000 	.word	0x40011000

08006898 <computerGetTask>:
	}
}



void computerGetTask(void *params){
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(uart3SemphrHandle, portMAX_DELAY);
 80068a0:	4b08      	ldr	r3, [pc, #32]	; (80068c4 <computerGetTask+0x2c>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f04f 31ff 	mov.w	r1, #4294967295
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7fd fb0d 	bl	8003ec8 <xQueueSemaphoreTake>
		CI_enableGetDataChannel();
 80068ae:	f7fa fa85 	bl	8000dbc <CI_enableGetDataChannel>
		xSemaphoreGive(uart3SemphrHandle);
 80068b2:	4b04      	ldr	r3, [pc, #16]	; (80068c4 <computerGetTask+0x2c>)
 80068b4:	6818      	ldr	r0, [r3, #0]
 80068b6:	2300      	movs	r3, #0
 80068b8:	2200      	movs	r2, #0
 80068ba:	2100      	movs	r1, #0
 80068bc:	f7fd f88e 	bl	80039dc <xQueueGenericSend>
		xSemaphoreTake(uart3SemphrHandle, portMAX_DELAY);
 80068c0:	e7ee      	b.n	80068a0 <computerGetTask+0x8>
 80068c2:	bf00      	nop
 80068c4:	20003574 	.word	0x20003574

080068c8 <computerValTask>:
	}
}
void computerValTask(void *params){
 80068c8:	b590      	push	{r4, r7, lr}
 80068ca:	b097      	sub	sp, #92	; 0x5c
 80068cc:	af02      	add	r7, sp, #8
 80068ce:	6078      	str	r0, [r7, #4]
	while(1){
		llsendComputerVals.drive_speed=(int32_t)(getDriver2ReceiveVal().speed)*10000;
 80068d0:	f107 0308 	add.w	r3, r7, #8
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7ff febb 	bl	8006650 <getDriver2ReceiveVal>
 80068da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80068de:	461a      	mov	r2, r3
 80068e0:	f242 7310 	movw	r3, #10000	; 0x2710
 80068e4:	fb03 f302 	mul.w	r3, r3, r2
 80068e8:	4a47      	ldr	r2, [pc, #284]	; (8006a08 <computerValTask+0x140>)
 80068ea:	6053      	str	r3, [r2, #4]
		llsendComputerVals.steer_pos =(int32_t)(getDriver1ReceiveVal().angle)*10000;
 80068ec:	f107 0314 	add.w	r3, r7, #20
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7ff fe9b 	bl	800662c <getDriver1ReceiveVal>
 80068f6:	8b3b      	ldrh	r3, [r7, #24]
 80068f8:	461a      	mov	r2, r3
 80068fa:	f242 7310 	movw	r3, #10000	; 0x2710
 80068fe:	fb03 f302 	mul.w	r3, r3, r2
 8006902:	4a41      	ldr	r2, [pc, #260]	; (8006a08 <computerValTask+0x140>)
 8006904:	6013      	str	r3, [r2, #0]
		int16_t tmp =((getDriver2ReceiveVal().encoder)/1200);
 8006906:	f107 031c 	add.w	r3, r7, #28
 800690a:	4618      	mov	r0, r3
 800690c:	f7ff fea0 	bl	8006650 <getDriver2ReceiveVal>
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	4a3e      	ldr	r2, [pc, #248]	; (8006a0c <computerValTask+0x144>)
 8006914:	fb82 1203 	smull	r1, r2, r2, r3
 8006918:	11d2      	asrs	r2, r2, #7
 800691a:	17db      	asrs	r3, r3, #31
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		uint16_t tmp2;
		if(((getDriver2ReceiveVal().encoder)%1200)<0)tmp2 = -0.1*((getDriver2ReceiveVal().encoder)%600);
 8006922:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006926:	4618      	mov	r0, r3
 8006928:	f7ff fe92 	bl	8006650 <getDriver2ReceiveVal>
 800692c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800692e:	4b37      	ldr	r3, [pc, #220]	; (8006a0c <computerValTask+0x144>)
 8006930:	fb83 1302 	smull	r1, r3, r3, r2
 8006934:	11d9      	asrs	r1, r3, #7
 8006936:	17d3      	asrs	r3, r2, #31
 8006938:	1acb      	subs	r3, r1, r3
 800693a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800693e:	fb01 f303 	mul.w	r3, r1, r3
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	da22      	bge.n	800698e <computerValTask+0xc6>
 8006948:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800694c:	4618      	mov	r0, r3
 800694e:	f7ff fe7f 	bl	8006650 <getDriver2ReceiveVal>
 8006952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006954:	4a2d      	ldr	r2, [pc, #180]	; (8006a0c <computerValTask+0x144>)
 8006956:	fb82 1203 	smull	r1, r2, r2, r3
 800695a:	1191      	asrs	r1, r2, #6
 800695c:	17da      	asrs	r2, r3, #31
 800695e:	1a8a      	subs	r2, r1, r2
 8006960:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006964:	fb01 f202 	mul.w	r2, r1, r2
 8006968:	1a9a      	subs	r2, r3, r2
 800696a:	4610      	mov	r0, r2
 800696c:	f7f9 fe6c 	bl	8000648 <__aeabi_i2d>
 8006970:	a323      	add	r3, pc, #140	; (adr r3, 8006a00 <computerValTask+0x138>)
 8006972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006976:	f7f9 fbeb 	bl	8000150 <__aeabi_dmul>
 800697a:	4602      	mov	r2, r0
 800697c:	460b      	mov	r3, r1
 800697e:	4610      	mov	r0, r2
 8006980:	4619      	mov	r1, r3
 8006982:	f7f9 fecb 	bl	800071c <__aeabi_d2uiz>
 8006986:	4603      	mov	r3, r0
 8006988:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800698c:	e013      	b.n	80069b6 <computerValTask+0xee>
		else tmp2=((getDriver2ReceiveVal().encoder)%1200);
 800698e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006992:	4618      	mov	r0, r3
 8006994:	f7ff fe5c 	bl	8006650 <getDriver2ReceiveVal>
 8006998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800699a:	4a1c      	ldr	r2, [pc, #112]	; (8006a0c <computerValTask+0x144>)
 800699c:	fb82 1203 	smull	r1, r2, r2, r3
 80069a0:	11d1      	asrs	r1, r2, #7
 80069a2:	17da      	asrs	r2, r3, #31
 80069a4:	1a8a      	subs	r2, r1, r2
 80069a6:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80069aa:	fb01 f202 	mul.w	r2, r1, r2
 80069ae:	1a9a      	subs	r2, r3, r2
 80069b0:	4613      	mov	r3, r2
 80069b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		llsendComputerVals.drive_pos= (tmp+valuesMapforFloat(tmp2,0,1200,0.0f,1.0f))*10000;
 80069b6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7f9 ff88 	bl	80008d0 <__aeabi_i2f>
 80069c0:	4604      	mov	r4, r0
 80069c2:	f8b7 004e 	ldrh.w	r0, [r7, #78]	; 0x4e
 80069c6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	f04f 0300 	mov.w	r3, #0
 80069d0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80069d4:	2100      	movs	r1, #0
 80069d6:	f000 f8dd 	bl	8006b94 <valuesMapforFloat>
 80069da:	4603      	mov	r3, r0
 80069dc:	4619      	mov	r1, r3
 80069de:	4620      	mov	r0, r4
 80069e0:	f7f9 fec2 	bl	8000768 <__addsf3>
 80069e4:	4603      	mov	r3, r0
 80069e6:	490a      	ldr	r1, [pc, #40]	; (8006a10 <computerValTask+0x148>)
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7f9 ffc5 	bl	8000978 <__aeabi_fmul>
 80069ee:	4603      	mov	r3, r0
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7fa f911 	bl	8000c18 <__aeabi_f2iz>
 80069f6:	4603      	mov	r3, r0
 80069f8:	4a03      	ldr	r2, [pc, #12]	; (8006a08 <computerValTask+0x140>)
 80069fa:	6093      	str	r3, [r2, #8]
	while(1){
 80069fc:	e768      	b.n	80068d0 <computerValTask+0x8>
 80069fe:	bf00      	nop
 8006a00:	9999999a 	.word	0x9999999a
 8006a04:	bfb99999 	.word	0xbfb99999
 8006a08:	2000374c 	.word	0x2000374c
 8006a0c:	1b4e81b5 	.word	0x1b4e81b5
 8006a10:	461c4000 	.word	0x461c4000

08006a14 <computerSendTask>:
	}

}
void computerSendTask(void *params){
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af02      	add	r7, sp, #8
 8006a1a:	6078      	str	r0, [r7, #4]
	while(1){
		CI_sendDataChannel(0x11,llsendComputerVals.steer_pos ,llsendComputerVals.drive_pos,
 8006a1c:	4b05      	ldr	r3, [pc, #20]	; (8006a34 <computerSendTask+0x20>)
 8006a1e:	6819      	ldr	r1, [r3, #0]
 8006a20:	4b04      	ldr	r3, [pc, #16]	; (8006a34 <computerSendTask+0x20>)
 8006a22:	689a      	ldr	r2, [r3, #8]
 8006a24:	4b03      	ldr	r3, [pc, #12]	; (8006a34 <computerSendTask+0x20>)
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	2032      	movs	r0, #50	; 0x32
 8006a2a:	9000      	str	r0, [sp, #0]
 8006a2c:	2011      	movs	r0, #17
 8006a2e:	f7fa f939 	bl	8000ca4 <CI_sendDataChannel>
 8006a32:	e7f3      	b.n	8006a1c <computerSendTask+0x8>
 8006a34:	2000374c 	.word	0x2000374c

08006a38 <sendDataUart1Task>:
				llsendComputerVals.drive_speed,50);
	}
}
void sendDataUart1Task(void *params){
 8006a38:	b590      	push	{r4, r7, lr}
 8006a3a:	b089      	sub	sp, #36	; 0x24
 8006a3c:	af02      	add	r7, sp, #8
 8006a3e:	6078      	str	r0, [r7, #4]

	while(1){
		driveDriver.angle=(uint16_t)((getComputerVals().steer_pos)/10000);
 8006a40:	f107 030c 	add.w	r3, r7, #12
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fa fa47 	bl	8000ed8 <getComputerVals>
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	4a0b      	ldr	r2, [pc, #44]	; (8006a7c <sendDataUart1Task+0x44>)
 8006a4e:	fb82 1203 	smull	r1, r2, r2, r3
 8006a52:	1312      	asrs	r2, r2, #12
 8006a54:	17db      	asrs	r3, r3, #31
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	4b09      	ldr	r3, [pc, #36]	; (8006a80 <sendDataUart1Task+0x48>)
 8006a5c:	809a      	strh	r2, [r3, #4]
		MDI_sendDataChannel1Ver2(driveDriver.angle,driveDriver.pid_kp,driveDriver.pid_ki,driveDriver.pid_kd,driveDriver.factor);
 8006a5e:	4b08      	ldr	r3, [pc, #32]	; (8006a80 <sendDataUart1Task+0x48>)
 8006a60:	8898      	ldrh	r0, [r3, #4]
 8006a62:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <sendDataUart1Task+0x48>)
 8006a64:	7899      	ldrb	r1, [r3, #2]
 8006a66:	4b06      	ldr	r3, [pc, #24]	; (8006a80 <sendDataUart1Task+0x48>)
 8006a68:	785a      	ldrb	r2, [r3, #1]
 8006a6a:	4b05      	ldr	r3, [pc, #20]	; (8006a80 <sendDataUart1Task+0x48>)
 8006a6c:	781c      	ldrb	r4, [r3, #0]
 8006a6e:	4b04      	ldr	r3, [pc, #16]	; (8006a80 <sendDataUart1Task+0x48>)
 8006a70:	78db      	ldrb	r3, [r3, #3]
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	4623      	mov	r3, r4
 8006a76:	f7ff fbb1 	bl	80061dc <MDI_sendDataChannel1Ver2>
		driveDriver.angle=(uint16_t)((getComputerVals().steer_pos)/10000);
 8006a7a:	e7e1      	b.n	8006a40 <sendDataUart1Task+0x8>
 8006a7c:	68db8bad 	.word	0x68db8bad
 8006a80:	20003758 	.word	0x20003758

08006a84 <sendDataUart2Task>:

	}
}
void sendDataUart2Task(void *params){
 8006a84:	b5b0      	push	{r4, r5, r7, lr}
 8006a86:	b088      	sub	sp, #32
 8006a88:	af02      	add	r7, sp, #8
 8006a8a:	6078      	str	r0, [r7, #4]
	while(1){
		travelDriver.speed=(int16_t)((getComputerVals().drive_speed)/10000);
 8006a8c:	f107 030c 	add.w	r3, r7, #12
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fa fa21 	bl	8000ed8 <getComputerVals>
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	4a0e      	ldr	r2, [pc, #56]	; (8006ad4 <sendDataUart2Task+0x50>)
 8006a9a:	fb82 1203 	smull	r1, r2, r2, r3
 8006a9e:	1312      	asrs	r2, r2, #12
 8006aa0:	17db      	asrs	r3, r3, #31
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	b21a      	sxth	r2, r3
 8006aa6:	4b0c      	ldr	r3, [pc, #48]	; (8006ad8 <sendDataUart2Task+0x54>)
 8006aa8:	809a      	strh	r2, [r3, #4]
		MDI_sendDataChannel2Ver2(travelDriver.speed,travelDriver.pid_kp,travelDriver.pid_ki,travelDriver.pid_kd,travelDriver.soft_k,travelDriver.soft_f);
 8006aaa:	4b0b      	ldr	r3, [pc, #44]	; (8006ad8 <sendDataUart2Task+0x54>)
 8006aac:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8006ab0:	4b09      	ldr	r3, [pc, #36]	; (8006ad8 <sendDataUart2Task+0x54>)
 8006ab2:	7819      	ldrb	r1, [r3, #0]
 8006ab4:	4b08      	ldr	r3, [pc, #32]	; (8006ad8 <sendDataUart2Task+0x54>)
 8006ab6:	785c      	ldrb	r4, [r3, #1]
 8006ab8:	4b07      	ldr	r3, [pc, #28]	; (8006ad8 <sendDataUart2Task+0x54>)
 8006aba:	789d      	ldrb	r5, [r3, #2]
 8006abc:	4b06      	ldr	r3, [pc, #24]	; (8006ad8 <sendDataUart2Task+0x54>)
 8006abe:	79db      	ldrb	r3, [r3, #7]
 8006ac0:	4a05      	ldr	r2, [pc, #20]	; (8006ad8 <sendDataUart2Task+0x54>)
 8006ac2:	7992      	ldrb	r2, [r2, #6]
 8006ac4:	9201      	str	r2, [sp, #4]
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	462b      	mov	r3, r5
 8006aca:	4622      	mov	r2, r4
 8006acc:	f7ff fc8c 	bl	80063e8 <MDI_sendDataChannel2Ver2>
		travelDriver.speed=(int16_t)((getComputerVals().drive_speed)/10000);
 8006ad0:	e7dc      	b.n	8006a8c <sendDataUart2Task+0x8>
 8006ad2:	bf00      	nop
 8006ad4:	68db8bad 	.word	0x68db8bad
 8006ad8:	20003740 	.word	0x20003740

08006adc <getDataUart1Task>:
	}
}
void getDataUart1Task(void *params){
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(uart1SemphrHandle, portMAX_DELAY);
 8006ae4:	4b08      	ldr	r3, [pc, #32]	; (8006b08 <getDataUart1Task+0x2c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7fd f9eb 	bl	8003ec8 <xQueueSemaphoreTake>
		MDI_enableGetDataChannel1();
 8006af2:	f7ff fbe3 	bl	80062bc <MDI_enableGetDataChannel1>
		xSemaphoreGive(uart1SemphrHandle);
 8006af6:	4b04      	ldr	r3, [pc, #16]	; (8006b08 <getDataUart1Task+0x2c>)
 8006af8:	6818      	ldr	r0, [r3, #0]
 8006afa:	2300      	movs	r3, #0
 8006afc:	2200      	movs	r2, #0
 8006afe:	2100      	movs	r1, #0
 8006b00:	f7fc ff6c 	bl	80039dc <xQueueGenericSend>
		xSemaphoreTake(uart1SemphrHandle, portMAX_DELAY);
 8006b04:	e7ee      	b.n	8006ae4 <getDataUart1Task+0x8>
 8006b06:	bf00      	nop
 8006b08:	2000356c 	.word	0x2000356c

08006b0c <getDataUart2Task>:

	}
}
void getDataUart2Task(void *params){
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(uart2SemphrHandle, portMAX_DELAY);
 8006b14:	4b08      	ldr	r3, [pc, #32]	; (8006b38 <getDataUart2Task+0x2c>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f04f 31ff 	mov.w	r1, #4294967295
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fd f9d3 	bl	8003ec8 <xQueueSemaphoreTake>
		MDI_enableGetDataChannel2();
 8006b22:	f7ff fcdb 	bl	80064dc <MDI_enableGetDataChannel2>
		xSemaphoreGive(uart2SemphrHandle);
 8006b26:	4b04      	ldr	r3, [pc, #16]	; (8006b38 <getDataUart2Task+0x2c>)
 8006b28:	6818      	ldr	r0, [r3, #0]
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	2100      	movs	r1, #0
 8006b30:	f7fc ff54 	bl	80039dc <xQueueGenericSend>
		xSemaphoreTake(uart2SemphrHandle, portMAX_DELAY);
 8006b34:	e7ee      	b.n	8006b14 <getDataUart2Task+0x8>
 8006b36:	bf00      	nop
 8006b38:	20003570 	.word	0x20003570

08006b3c <driverInit>:
	}
}

void driverInit(void){
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
	driveDriver.angle=500;
 8006b40:	4b12      	ldr	r3, [pc, #72]	; (8006b8c <driverInit+0x50>)
 8006b42:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006b46:	809a      	strh	r2, [r3, #4]
	driveDriver.pid_kp=100;
 8006b48:	4b10      	ldr	r3, [pc, #64]	; (8006b8c <driverInit+0x50>)
 8006b4a:	2264      	movs	r2, #100	; 0x64
 8006b4c:	709a      	strb	r2, [r3, #2]
	driveDriver.pid_ki=1;
 8006b4e:	4b0f      	ldr	r3, [pc, #60]	; (8006b8c <driverInit+0x50>)
 8006b50:	2201      	movs	r2, #1
 8006b52:	705a      	strb	r2, [r3, #1]
	driveDriver.pid_kd=200;
 8006b54:	4b0d      	ldr	r3, [pc, #52]	; (8006b8c <driverInit+0x50>)
 8006b56:	22c8      	movs	r2, #200	; 0xc8
 8006b58:	701a      	strb	r2, [r3, #0]
	driveDriver.factor=100;
 8006b5a:	4b0c      	ldr	r3, [pc, #48]	; (8006b8c <driverInit+0x50>)
 8006b5c:	2264      	movs	r2, #100	; 0x64
 8006b5e:	70da      	strb	r2, [r3, #3]

	travelDriver.speed =0;
 8006b60:	4b0b      	ldr	r3, [pc, #44]	; (8006b90 <driverInit+0x54>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	809a      	strh	r2, [r3, #4]
	travelDriver.pid_kp=70;
 8006b66:	4b0a      	ldr	r3, [pc, #40]	; (8006b90 <driverInit+0x54>)
 8006b68:	2246      	movs	r2, #70	; 0x46
 8006b6a:	701a      	strb	r2, [r3, #0]
	travelDriver.pid_ki=1;
 8006b6c:	4b08      	ldr	r3, [pc, #32]	; (8006b90 <driverInit+0x54>)
 8006b6e:	2201      	movs	r2, #1
 8006b70:	705a      	strb	r2, [r3, #1]
	travelDriver.pid_kd=1;
 8006b72:	4b07      	ldr	r3, [pc, #28]	; (8006b90 <driverInit+0x54>)
 8006b74:	2201      	movs	r2, #1
 8006b76:	709a      	strb	r2, [r3, #2]
	travelDriver.soft_k =1;
 8006b78:	4b05      	ldr	r3, [pc, #20]	; (8006b90 <driverInit+0x54>)
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	71da      	strb	r2, [r3, #7]
	travelDriver.soft_f =1;
 8006b7e:	4b04      	ldr	r3, [pc, #16]	; (8006b90 <driverInit+0x54>)
 8006b80:	2201      	movs	r2, #1
 8006b82:	719a      	strb	r2, [r3, #6]

}
 8006b84:	bf00      	nop
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bc80      	pop	{r7}
 8006b8a:	4770      	bx	lr
 8006b8c:	20003758 	.word	0x20003758
 8006b90:	20003740 	.word	0x20003740

08006b94 <valuesMapforFloat>:
	return (inValue - inMin)*(outMax - outMin) / (inMax - inMin) + outMin;
}
int16_t valuesMapFloat(float inValue, float inMin, float inMax, int16_t outMin, int16_t outMax) {
	return (inValue - inMin)*(outMax - outMin) / (inMax - inMin) + outMin;
}
float valuesMapforFloat(uint16_t inValue, uint16_t inMin, uint16_t inMax, float outMin, float outMax) {
 8006b94:	b590      	push	{r4, r7, lr}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	607b      	str	r3, [r7, #4]
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	81fb      	strh	r3, [r7, #14]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	81bb      	strh	r3, [r7, #12]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	817b      	strh	r3, [r7, #10]
	return (inValue - inMin)*(outMax - outMin) / (inMax - inMin) + outMin;
 8006ba8:	89fa      	ldrh	r2, [r7, #14]
 8006baa:	89bb      	ldrh	r3, [r7, #12]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7f9 fe8e 	bl	80008d0 <__aeabi_i2f>
 8006bb4:	4604      	mov	r4, r0
 8006bb6:	6879      	ldr	r1, [r7, #4]
 8006bb8:	6a38      	ldr	r0, [r7, #32]
 8006bba:	f7f9 fdd3 	bl	8000764 <__aeabi_fsub>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	f7f9 fed8 	bl	8000978 <__aeabi_fmul>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	461c      	mov	r4, r3
 8006bcc:	897a      	ldrh	r2, [r7, #10]
 8006bce:	89bb      	ldrh	r3, [r7, #12]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7f9 fe7c 	bl	80008d0 <__aeabi_i2f>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	4619      	mov	r1, r3
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f7f9 ff7f 	bl	8000ae0 <__aeabi_fdiv>
 8006be2:	4603      	mov	r3, r0
 8006be4:	6879      	ldr	r1, [r7, #4]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7f9 fdbe 	bl	8000768 <__addsf3>
 8006bec:	4603      	mov	r3, r0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3714      	adds	r7, #20
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd90      	pop	{r4, r7, pc}
	...

08006bf8 <__libc_init_array>:
 8006bf8:	b570      	push	{r4, r5, r6, lr}
 8006bfa:	2600      	movs	r6, #0
 8006bfc:	4d0c      	ldr	r5, [pc, #48]	; (8006c30 <__libc_init_array+0x38>)
 8006bfe:	4c0d      	ldr	r4, [pc, #52]	; (8006c34 <__libc_init_array+0x3c>)
 8006c00:	1b64      	subs	r4, r4, r5
 8006c02:	10a4      	asrs	r4, r4, #2
 8006c04:	42a6      	cmp	r6, r4
 8006c06:	d109      	bne.n	8006c1c <__libc_init_array+0x24>
 8006c08:	f000 f830 	bl	8006c6c <_init>
 8006c0c:	2600      	movs	r6, #0
 8006c0e:	4d0a      	ldr	r5, [pc, #40]	; (8006c38 <__libc_init_array+0x40>)
 8006c10:	4c0a      	ldr	r4, [pc, #40]	; (8006c3c <__libc_init_array+0x44>)
 8006c12:	1b64      	subs	r4, r4, r5
 8006c14:	10a4      	asrs	r4, r4, #2
 8006c16:	42a6      	cmp	r6, r4
 8006c18:	d105      	bne.n	8006c26 <__libc_init_array+0x2e>
 8006c1a:	bd70      	pop	{r4, r5, r6, pc}
 8006c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c20:	4798      	blx	r3
 8006c22:	3601      	adds	r6, #1
 8006c24:	e7ee      	b.n	8006c04 <__libc_init_array+0xc>
 8006c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c2a:	4798      	blx	r3
 8006c2c:	3601      	adds	r6, #1
 8006c2e:	e7f2      	b.n	8006c16 <__libc_init_array+0x1e>
 8006c30:	08006d78 	.word	0x08006d78
 8006c34:	08006d78 	.word	0x08006d78
 8006c38:	08006d78 	.word	0x08006d78
 8006c3c:	08006d7c 	.word	0x08006d7c

08006c40 <memcpy>:
 8006c40:	440a      	add	r2, r1
 8006c42:	4291      	cmp	r1, r2
 8006c44:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c48:	d100      	bne.n	8006c4c <memcpy+0xc>
 8006c4a:	4770      	bx	lr
 8006c4c:	b510      	push	{r4, lr}
 8006c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c52:	4291      	cmp	r1, r2
 8006c54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c58:	d1f9      	bne.n	8006c4e <memcpy+0xe>
 8006c5a:	bd10      	pop	{r4, pc}

08006c5c <memset>:
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	4402      	add	r2, r0
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d100      	bne.n	8006c66 <memset+0xa>
 8006c64:	4770      	bx	lr
 8006c66:	f803 1b01 	strb.w	r1, [r3], #1
 8006c6a:	e7f9      	b.n	8006c60 <memset+0x4>

08006c6c <_init>:
 8006c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6e:	bf00      	nop
 8006c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c72:	bc08      	pop	{r3}
 8006c74:	469e      	mov	lr, r3
 8006c76:	4770      	bx	lr

08006c78 <_fini>:
 8006c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7a:	bf00      	nop
 8006c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c7e:	bc08      	pop	{r3}
 8006c80:	469e      	mov	lr, r3
 8006c82:	4770      	bx	lr
