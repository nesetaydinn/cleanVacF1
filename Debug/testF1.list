
testF1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c000  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800c110  0800c110  0001c110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c228  0800c228  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800c228  0800c228  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c228  0800c228  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c228  0800c228  0001c228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c22c  0800c22c  0001c22c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800c230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f30  20000180  0800c3b0  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040b0  0800c3b0  000240b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029ab4  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005821  00000000  00000000  00049c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c20  00000000  00000000  0004f480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019d8  00000000  00000000  000510a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d9a7  00000000  00000000  00052a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000216a0  00000000  00000000  0007041f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a172  00000000  00000000  00091abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012bc31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000748c  00000000  00000000  0012bc84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c0f8 	.word	0x0800c0f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	0800c0f8 	.word	0x0800c0f8

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__aeabi_f2iz>:
 800060c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000610:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000614:	d30f      	bcc.n	8000636 <__aeabi_f2iz+0x2a>
 8000616:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800061a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061e:	d90d      	bls.n	800063c <__aeabi_f2iz+0x30>
 8000620:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000628:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800062c:	fa23 f002 	lsr.w	r0, r3, r2
 8000630:	bf18      	it	ne
 8000632:	4240      	negne	r0, r0
 8000634:	4770      	bx	lr
 8000636:	f04f 0000 	mov.w	r0, #0
 800063a:	4770      	bx	lr
 800063c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000640:	d101      	bne.n	8000646 <__aeabi_f2iz+0x3a>
 8000642:	0242      	lsls	r2, r0, #9
 8000644:	d105      	bne.n	8000652 <__aeabi_f2iz+0x46>
 8000646:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800064a:	bf08      	it	eq
 800064c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000650:	4770      	bx	lr
 8000652:	f04f 0000 	mov.w	r0, #0
 8000656:	4770      	bx	lr

08000658 <CI_sendDataChannel>:
 * @param batt_per-> battery percent value
 * @return none
 */
uint32_t time1,time2,deltaTime;
void CI_sendDataChannel(uint16_t lenght, int32_t steer_poss,
		int32_t driver_poss, int32_t driver_speed,uint8_t inputStatus,uint8_t batt_per){
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
 800065e:	60b9      	str	r1, [r7, #8]
 8000660:	607a      	str	r2, [r7, #4]
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	4603      	mov	r3, r0
 8000666:	81fb      	strh	r3, [r7, #14]
	time1=HAL_GetTick();
 8000668:	f000 fc42 	bl	8000ef0 <HAL_GetTick>
 800066c:	4603      	mov	r3, r0
 800066e:	4a37      	ldr	r2, [pc, #220]	; (800074c <CI_sendDataChannel+0xf4>)
 8000670:	6013      	str	r3, [r2, #0]
	uint8_t sendBuff[] = { 0x43, 0X64,
 8000672:	2343      	movs	r3, #67	; 0x43
 8000674:	753b      	strb	r3, [r7, #20]
 8000676:	2364      	movs	r3, #100	; 0x64
 8000678:	757b      	strb	r3, [r7, #21]
 800067a:	89fb      	ldrh	r3, [r7, #14]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	75bb      	strb	r3, [r7, #22]
 8000680:	89fb      	ldrh	r3, [r7, #14]
 8000682:	0a1b      	lsrs	r3, r3, #8
 8000684:	b29b      	uxth	r3, r3
 8000686:	b2db      	uxtb	r3, r3
 8000688:	75fb      	strb	r3, [r7, #23]
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	763b      	strb	r3, [r7, #24]
			lenght & 0xFF,lenght >> 8,
			steer_poss & 0xFF,steer_poss >> 8,steer_poss >> 16,steer_poss >> 24,
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	121b      	asrs	r3, r3, #8
	uint8_t sendBuff[] = { 0x43, 0X64,
 8000694:	b2db      	uxtb	r3, r3
 8000696:	767b      	strb	r3, [r7, #25]
			steer_poss & 0xFF,steer_poss >> 8,steer_poss >> 16,steer_poss >> 24,
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	141b      	asrs	r3, r3, #16
	uint8_t sendBuff[] = { 0x43, 0X64,
 800069c:	b2db      	uxtb	r3, r3
 800069e:	76bb      	strb	r3, [r7, #26]
			steer_poss & 0xFF,steer_poss >> 8,steer_poss >> 16,steer_poss >> 24,
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	161b      	asrs	r3, r3, #24
	uint8_t sendBuff[] = { 0x43, 0X64,
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	76fb      	strb	r3, [r7, #27]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	773b      	strb	r3, [r7, #28]
			driver_poss & 0xFF,driver_poss >> 8,driver_poss >> 16,driver_poss >> 24,
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	121b      	asrs	r3, r3, #8
	uint8_t sendBuff[] = { 0x43, 0X64,
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	777b      	strb	r3, [r7, #29]
			driver_poss & 0xFF,driver_poss >> 8,driver_poss >> 16,driver_poss >> 24,
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	141b      	asrs	r3, r3, #16
	uint8_t sendBuff[] = { 0x43, 0X64,
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	77bb      	strb	r3, [r7, #30]
			driver_poss & 0xFF,driver_poss >> 8,driver_poss >> 16,driver_poss >> 24,
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	161b      	asrs	r3, r3, #24
	uint8_t sendBuff[] = { 0x43, 0X64,
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	77fb      	strb	r3, [r7, #31]
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f887 3020 	strb.w	r3, [r7, #32]
			driver_speed & 0xFF,driver_speed >> 8,driver_speed >> 16,driver_speed >> 24,
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	121b      	asrs	r3, r3, #8
	uint8_t sendBuff[] = { 0x43, 0X64,
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			driver_speed & 0xFF,driver_speed >> 8,driver_speed >> 16,driver_speed >> 24,
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	141b      	asrs	r3, r3, #16
	uint8_t sendBuff[] = { 0x43, 0X64,
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			driver_speed & 0xFF,driver_speed >> 8,driver_speed >> 16,driver_speed >> 24,
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	161b      	asrs	r3, r3, #24
	uint8_t sendBuff[] = { 0x43, 0X64,
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80006ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80006f0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80006f4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80006f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			inputStatus,batt_per };
	//uint8_t * tmp =;
	if(0x0D==getVals.size)CDC_Transmit_FS(sendBuff, 18);
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <CI_sendDataChannel+0xf8>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	2b0d      	cmp	r3, #13
 8000702:	d105      	bne.n	8000710 <CI_sendDataChannel+0xb8>
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	2112      	movs	r1, #18
 800070a:	4618      	mov	r0, r3
 800070c:	f00a fbae 	bl	800ae6c <CDC_Transmit_FS>
	getVals.size=0;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <CI_sendDataChannel+0xf8>)
 8000712:	2200      	movs	r2, #0
 8000714:	801a      	strh	r2, [r3, #0]
	#if SEND_VAL_CHECK==1
		vTaskDelay(50);
	#endif

	}*/
	time2=HAL_GetTick();
 8000716:	f000 fbeb 	bl	8000ef0 <HAL_GetTick>
 800071a:	4603      	mov	r3, r0
 800071c:	4a0d      	ldr	r2, [pc, #52]	; (8000754 <CI_sendDataChannel+0xfc>)
 800071e:	6013      	str	r3, [r2, #0]
	deltaTime=time2-time1;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <CI_sendDataChannel+0xfc>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <CI_sendDataChannel+0xf4>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	4a0b      	ldr	r2, [pc, #44]	; (8000758 <CI_sendDataChannel+0x100>)
 800072c:	6013      	str	r3, [r2, #0]
	if(deltaTime<10) vTaskDelay((10-deltaTime));
 800072e:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <CI_sendDataChannel+0x100>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b09      	cmp	r3, #9
 8000734:	d806      	bhi.n	8000744 <CI_sendDataChannel+0xec>
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <CI_sendDataChannel+0x100>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f1c3 030a 	rsb	r3, r3, #10
 800073e:	4618      	mov	r0, r3
 8000740:	f008 fd94 	bl	800926c <vTaskDelay>
}
 8000744:	bf00      	nop
 8000746:	3728      	adds	r7, #40	; 0x28
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200038f8 	.word	0x200038f8
 8000750:	200038fc 	.word	0x200038fc
 8000754:	20003908 	.word	0x20003908
 8000758:	2000390c 	.word	0x2000390c

0800075c <CI_getDataChannel_USB>:

/**
 * @brief get to Computer Variables
 * @return none
 */
void CI_getDataChannel_USB(uint8_t *bytes) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]

		//static uint8_t counter = 0, getTmpBeff = 0;
	//for(uint8_t c;c<13;c++)tmpArrUSB[c]=bytes[c];
	if (0x64 == bytes[0] && 0x43 == bytes[1]) {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b64      	cmp	r3, #100	; 0x64
 800076a:	d10b      	bne.n	8000784 <CI_getDataChannel_USB+0x28>
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3301      	adds	r3, #1
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b43      	cmp	r3, #67	; 0x43
 8000774:	d106      	bne.n	8000784 <CI_getDataChannel_USB+0x28>
				bytes[0] = 0x43;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2243      	movs	r2, #67	; 0x43
 800077a:	701a      	strb	r2, [r3, #0]
				bytes[1] = 0x64;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3301      	adds	r3, #1
 8000780:	2264      	movs	r2, #100	; 0x64
 8000782:	701a      	strb	r2, [r3, #0]
			/*bytes[counter] = byte;
				getTmpBeff = byte;*/
				//counter++;
				/*if (counter > 12) {
					counter = 0;*/
					if (0x43 == bytes[0] && 0x64 == bytes[1]) {
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b43      	cmp	r3, #67	; 0x43
 800078a:	d142      	bne.n	8000812 <CI_getDataChannel_USB+0xb6>
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3301      	adds	r3, #1
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b64      	cmp	r3, #100	; 0x64
 8000794:	d13d      	bne.n	8000812 <CI_getDataChannel_USB+0xb6>
						getVals.size=(bytes[2] & 0xFF )| (bytes[3] << 8);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	3302      	adds	r3, #2
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b21a      	sxth	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	3303      	adds	r3, #3
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	021b      	lsls	r3, r3, #8
 80007a6:	b21b      	sxth	r3, r3
 80007a8:	4313      	orrs	r3, r2
 80007aa:	b21b      	sxth	r3, r3
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	4b1b      	ldr	r3, [pc, #108]	; (800081c <CI_getDataChannel_USB+0xc0>)
 80007b0:	801a      	strh	r2, [r3, #0]
						getVals.steer_pos=(bytes[4] & 0xFF )| (bytes[5] << 8) | (bytes[6] << 16) | (bytes[7] << 24);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	3304      	adds	r3, #4
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	461a      	mov	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	3305      	adds	r3, #5
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	021b      	lsls	r3, r3, #8
 80007c2:	431a      	orrs	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3306      	adds	r3, #6
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	041b      	lsls	r3, r3, #16
 80007cc:	431a      	orrs	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	3307      	adds	r3, #7
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	061b      	lsls	r3, r3, #24
 80007d6:	4313      	orrs	r3, r2
 80007d8:	4a10      	ldr	r2, [pc, #64]	; (800081c <CI_getDataChannel_USB+0xc0>)
 80007da:	6053      	str	r3, [r2, #4]
						getVals.drive_speed=(bytes[8] & 0xFF) | (bytes[9] << 8) | (bytes[10] << 16) | (bytes[11] << 24);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3308      	adds	r3, #8
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	461a      	mov	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3309      	adds	r3, #9
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	021b      	lsls	r3, r3, #8
 80007ec:	431a      	orrs	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	330a      	adds	r3, #10
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	041b      	lsls	r3, r3, #16
 80007f6:	431a      	orrs	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	330b      	adds	r3, #11
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	061b      	lsls	r3, r3, #24
 8000800:	4313      	orrs	r3, r2
 8000802:	4a06      	ldr	r2, [pc, #24]	; (800081c <CI_getDataChannel_USB+0xc0>)
 8000804:	6093      	str	r3, [r2, #8]
						IO_outputByteToBitsPackage(bytes[12]);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	330c      	adds	r3, #12
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	4618      	mov	r0, r3
 800080e:	f005 ff37 	bl	8006680 <IO_outputByteToBitsPackage>

					}

			//	}

}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200038fc 	.word	0x200038fc

08000820 <getComputerVals>:

Com_interface getComputerVals(void) {return getVals;}
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a04      	ldr	r2, [pc, #16]	; (800083c <getComputerVals+0x1c>)
 800082c:	ca07      	ldmia	r2, {r0, r1, r2}
 800082e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	200038fc 	.word	0x200038fc

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000844:	f000 fb2c 	bl	8000ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000848:	f000 f81c 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084c:	f000 f8c8 	bl	80009e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000850:	f000 f872 	bl	8000938 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000854:	f000 f89a 	bl	800098c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  tasks_init();
 8000858:	f00b f95e 	bl	800bb18 <tasks_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800085c:	f007 fb08 	bl	8007e70 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000860:	4a05      	ldr	r2, [pc, #20]	; (8000878 <main+0x38>)
 8000862:	2100      	movs	r1, #0
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <main+0x3c>)
 8000866:	f007 fb69 	bl	8007f3c <osThreadNew>
 800086a:	4603      	mov	r3, r0
 800086c:	4a04      	ldr	r2, [pc, #16]	; (8000880 <main+0x40>)
 800086e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000870:	f007 fb30 	bl	8007ed4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000874:	e7fe      	b.n	8000874 <main+0x34>
 8000876:	bf00      	nop
 8000878:	0800c1ec 	.word	0x0800c1ec
 800087c:	08000b41 	.word	0x08000b41
 8000880:	20003910 	.word	0x20003910

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b094      	sub	sp, #80	; 0x50
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800088e:	2228      	movs	r2, #40	; 0x28
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f00b fc28 	bl	800c0e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b4:	2301      	movs	r3, #1
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c2:	2301      	movs	r3, #1
 80008c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c6:	2302      	movs	r3, #2
 80008c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008d0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 f9ac 	bl	8002c38 <HAL_RCC_OscConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80008e6:	f000 f947 	bl	8000b78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ea:	230f      	movs	r3, #15
 80008ec:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ee:	2302      	movs	r3, #2
 80008f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2102      	movs	r1, #2
 8000906:	4618      	mov	r0, r3
 8000908:	f002 fc16 	bl	8003138 <HAL_RCC_ClockConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000912:	f000 f931 	bl	8000b78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000916:	2310      	movs	r3, #16
 8000918:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	4618      	mov	r0, r3
 8000922:	f002 fdd3 	bl	80034cc <HAL_RCCEx_PeriphCLKConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800092c:	f000 f924 	bl	8000b78 <Error_Handler>
  }
}
 8000930:	bf00      	nop
 8000932:	3750      	adds	r7, #80	; 0x50
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 800093e:	4a12      	ldr	r2, [pc, #72]	; (8000988 <MX_USART2_UART_Init+0x50>)
 8000940:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 8000944:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000948:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 8000970:	f003 f8ac 	bl	8003acc <HAL_UART_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800097a:	f000 f8fd 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20003954 	.word	0x20003954
 8000988:	40004400 	.word	0x40004400

0800098c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 8000992:	4a12      	ldr	r2, [pc, #72]	; (80009dc <MX_USART3_UART_Init+0x50>)
 8000994:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 8000998:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800099c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009c4:	f003 f882 	bl	8003acc <HAL_UART_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009ce:	f000 f8d3 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20003914 	.word	0x20003914
 80009dc:	40004800 	.word	0x40004800

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 0310 	add.w	r3, r7, #16
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f4:	4b4e      	ldr	r3, [pc, #312]	; (8000b30 <MX_GPIO_Init+0x150>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a4d      	ldr	r2, [pc, #308]	; (8000b30 <MX_GPIO_Init+0x150>)
 80009fa:	f043 0310 	orr.w	r3, r3, #16
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b4b      	ldr	r3, [pc, #300]	; (8000b30 <MX_GPIO_Init+0x150>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0310 	and.w	r3, r3, #16
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0c:	4b48      	ldr	r3, [pc, #288]	; (8000b30 <MX_GPIO_Init+0x150>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a47      	ldr	r2, [pc, #284]	; (8000b30 <MX_GPIO_Init+0x150>)
 8000a12:	f043 0320 	orr.w	r3, r3, #32
 8000a16:	6193      	str	r3, [r2, #24]
 8000a18:	4b45      	ldr	r3, [pc, #276]	; (8000b30 <MX_GPIO_Init+0x150>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f003 0320 	and.w	r3, r3, #32
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a24:	4b42      	ldr	r3, [pc, #264]	; (8000b30 <MX_GPIO_Init+0x150>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a41      	ldr	r2, [pc, #260]	; (8000b30 <MX_GPIO_Init+0x150>)
 8000a2a:	f043 0304 	orr.w	r3, r3, #4
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b3f      	ldr	r3, [pc, #252]	; (8000b30 <MX_GPIO_Init+0x150>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f003 0304 	and.w	r3, r3, #4
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3c:	4b3c      	ldr	r3, [pc, #240]	; (8000b30 <MX_GPIO_Init+0x150>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4a3b      	ldr	r2, [pc, #236]	; (8000b30 <MX_GPIO_Init+0x150>)
 8000a42:	f043 0308 	orr.w	r3, r3, #8
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b39      	ldr	r3, [pc, #228]	; (8000b30 <MX_GPIO_Init+0x150>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f003 0308 	and.w	r3, r3, #8
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a5a:	4836      	ldr	r0, [pc, #216]	; (8000b34 <MX_GPIO_Init+0x154>)
 8000a5c:	f000 fd43 	bl	80014e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, relay_1_Pin|relay_2_Pin|relay_3_Pin|relay_4_Pin, GPIO_PIN_SET);
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000a66:	4834      	ldr	r0, [pc, #208]	; (8000b38 <MX_GPIO_Init+0x158>)
 8000a68:	f000 fd3d 	bl	80014e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, relay_5_Pin|relay_8_Pin, GPIO_PIN_SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8000a72:	4832      	ldr	r0, [pc, #200]	; (8000b3c <MX_GPIO_Init+0x15c>)
 8000a74:	f000 fd37 	bl	80014e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, relay_6_Pin|relay_7_Pin, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000a7e:	482f      	ldr	r0, [pc, #188]	; (8000b3c <MX_GPIO_Init+0x15c>)
 8000a80:	f000 fd31 	bl	80014e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 8000a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2302      	movs	r3, #2
 8000a94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 0310 	add.w	r3, r7, #16
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4825      	ldr	r0, [pc, #148]	; (8000b34 <MX_GPIO_Init+0x154>)
 8000a9e:	f000 fb87 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : switch_7_Pin switch_6_Pin switch_5_Pin switch_3_Pin */
  GPIO_InitStruct.Pin = switch_7_Pin|switch_6_Pin|switch_5_Pin|switch_3_Pin;
 8000aa2:	23b2      	movs	r3, #178	; 0xb2
 8000aa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 0310 	add.w	r3, r7, #16
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4821      	ldr	r0, [pc, #132]	; (8000b3c <MX_GPIO_Init+0x15c>)
 8000ab6:	f000 fb7b 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : switch_2_Pin switch_1_Pin switch_8_Pin */
  GPIO_InitStruct.Pin = switch_2_Pin|switch_1_Pin|switch_8_Pin;
 8000aba:	230b      	movs	r3, #11
 8000abc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac6:	f107 0310 	add.w	r3, r7, #16
 8000aca:	4619      	mov	r1, r3
 8000acc:	481a      	ldr	r0, [pc, #104]	; (8000b38 <MX_GPIO_Init+0x158>)
 8000ace:	f000 fb6f 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : relay_1_Pin relay_2_Pin relay_3_Pin relay_4_Pin */
  GPIO_InitStruct.Pin = relay_1_Pin|relay_2_Pin|relay_3_Pin|relay_4_Pin;
 8000ad2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000ad6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4813      	ldr	r0, [pc, #76]	; (8000b38 <MX_GPIO_Init+0x158>)
 8000aec:	f000 fb60 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : relay_5_Pin relay_6_Pin relay_7_Pin relay_8_Pin */
  GPIO_InitStruct.Pin = relay_5_Pin|relay_6_Pin|relay_7_Pin|relay_8_Pin;
 8000af0:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 8000af4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	4619      	mov	r1, r3
 8000b08:	480c      	ldr	r0, [pc, #48]	; (8000b3c <MX_GPIO_Init+0x15c>)
 8000b0a:	f000 fb51 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : switch_4_Pin */
  GPIO_InitStruct.Pin = switch_4_Pin;
 8000b0e:	2310      	movs	r3, #16
 8000b10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(switch_4_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 0310 	add.w	r3, r7, #16
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_GPIO_Init+0x158>)
 8000b22:	f000 fb45 	bl	80011b0 <HAL_GPIO_Init>

}
 8000b26:	bf00      	nop
 8000b28:	3720      	adds	r7, #32
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40021000 	.word	0x40021000
 8000b34:	40011000 	.word	0x40011000
 8000b38:	40010c00 	.word	0x40010c00
 8000b3c:	40010800 	.word	0x40010800

08000b40 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000b48:	f00a f8d0 	bl	800acec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f007 fa9f 	bl	8008090 <osDelay>
 8000b52:	e7fb      	b.n	8000b4c <StartDefaultTask+0xc>

08000b54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d101      	bne.n	8000b6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b66:	f000 f9b1 	bl	8000ecc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40012c00 	.word	0x40012c00

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <Error_Handler+0x8>
	...

08000b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <HAL_MspInit+0x68>)
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	4a17      	ldr	r2, [pc, #92]	; (8000bec <HAL_MspInit+0x68>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6193      	str	r3, [r2, #24]
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_MspInit+0x68>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba2:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_MspInit+0x68>)
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	4a11      	ldr	r2, [pc, #68]	; (8000bec <HAL_MspInit+0x68>)
 8000ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bac:	61d3      	str	r3, [r2, #28]
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_MspInit+0x68>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	210f      	movs	r1, #15
 8000bbe:	f06f 0001 	mvn.w	r0, #1
 8000bc2:	f000 fa54 	bl	800106e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <HAL_MspInit+0x6c>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <HAL_MspInit+0x6c>)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40010000 	.word	0x40010000

08000bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0318 	add.w	r3, r7, #24
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a3f      	ldr	r2, [pc, #252]	; (8000d0c <HAL_UART_MspInit+0x118>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d138      	bne.n	8000c86 <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c14:	4b3e      	ldr	r3, [pc, #248]	; (8000d10 <HAL_UART_MspInit+0x11c>)
 8000c16:	69db      	ldr	r3, [r3, #28]
 8000c18:	4a3d      	ldr	r2, [pc, #244]	; (8000d10 <HAL_UART_MspInit+0x11c>)
 8000c1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c1e:	61d3      	str	r3, [r2, #28]
 8000c20:	4b3b      	ldr	r3, [pc, #236]	; (8000d10 <HAL_UART_MspInit+0x11c>)
 8000c22:	69db      	ldr	r3, [r3, #28]
 8000c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c28:	617b      	str	r3, [r7, #20]
 8000c2a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2c:	4b38      	ldr	r3, [pc, #224]	; (8000d10 <HAL_UART_MspInit+0x11c>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a37      	ldr	r2, [pc, #220]	; (8000d10 <HAL_UART_MspInit+0x11c>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b35      	ldr	r3, [pc, #212]	; (8000d10 <HAL_UART_MspInit+0x11c>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c44:	2304      	movs	r3, #4
 8000c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c50:	f107 0318 	add.w	r3, r7, #24
 8000c54:	4619      	mov	r1, r3
 8000c56:	482f      	ldr	r0, [pc, #188]	; (8000d14 <HAL_UART_MspInit+0x120>)
 8000c58:	f000 faaa 	bl	80011b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c5c:	2308      	movs	r3, #8
 8000c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	f107 0318 	add.w	r3, r7, #24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4829      	ldr	r0, [pc, #164]	; (8000d14 <HAL_UART_MspInit+0x120>)
 8000c70:	f000 fa9e 	bl	80011b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2105      	movs	r1, #5
 8000c78:	2026      	movs	r0, #38	; 0x26
 8000c7a:	f000 f9f8 	bl	800106e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c7e:	2026      	movs	r0, #38	; 0x26
 8000c80:	f000 fa11 	bl	80010a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c84:	e03e      	b.n	8000d04 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART3)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a23      	ldr	r2, [pc, #140]	; (8000d18 <HAL_UART_MspInit+0x124>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d139      	bne.n	8000d04 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c90:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <HAL_UART_MspInit+0x11c>)
 8000c92:	69db      	ldr	r3, [r3, #28]
 8000c94:	4a1e      	ldr	r2, [pc, #120]	; (8000d10 <HAL_UART_MspInit+0x11c>)
 8000c96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c9a:	61d3      	str	r3, [r2, #28]
 8000c9c:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <HAL_UART_MspInit+0x11c>)
 8000c9e:	69db      	ldr	r3, [r3, #28]
 8000ca0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <HAL_UART_MspInit+0x11c>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a18      	ldr	r2, [pc, #96]	; (8000d10 <HAL_UART_MspInit+0x11c>)
 8000cae:	f043 0308 	orr.w	r3, r3, #8
 8000cb2:	6193      	str	r3, [r2, #24]
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <HAL_UART_MspInit+0x11c>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f003 0308 	and.w	r3, r3, #8
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cce:	f107 0318 	add.w	r3, r7, #24
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4811      	ldr	r0, [pc, #68]	; (8000d1c <HAL_UART_MspInit+0x128>)
 8000cd6:	f000 fa6b 	bl	80011b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000cda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce8:	f107 0318 	add.w	r3, r7, #24
 8000cec:	4619      	mov	r1, r3
 8000cee:	480b      	ldr	r0, [pc, #44]	; (8000d1c <HAL_UART_MspInit+0x128>)
 8000cf0:	f000 fa5e 	bl	80011b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2105      	movs	r1, #5
 8000cf8:	2027      	movs	r0, #39	; 0x27
 8000cfa:	f000 f9b8 	bl	800106e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cfe:	2027      	movs	r0, #39	; 0x27
 8000d00:	f000 f9d1 	bl	80010a6 <HAL_NVIC_EnableIRQ>
}
 8000d04:	bf00      	nop
 8000d06:	3728      	adds	r7, #40	; 0x28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40004400 	.word	0x40004400
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40010800 	.word	0x40010800
 8000d18:	40004800 	.word	0x40004800
 8000d1c:	40010c00 	.word	0x40010c00

08000d20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08c      	sub	sp, #48	; 0x30
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	2019      	movs	r0, #25
 8000d36:	f000 f99a 	bl	800106e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d3a:	2019      	movs	r0, #25
 8000d3c:	f000 f9b3 	bl	80010a6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d40:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <HAL_InitTick+0x9c>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a1d      	ldr	r2, [pc, #116]	; (8000dbc <HAL_InitTick+0x9c>)
 8000d46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <HAL_InitTick+0x9c>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d58:	f107 0210 	add.w	r2, r7, #16
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4611      	mov	r1, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f002 fb64 	bl	8003430 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d68:	f002 fb4e 	bl	8003408 <HAL_RCC_GetPCLK2Freq>
 8000d6c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d70:	4a13      	ldr	r2, [pc, #76]	; (8000dc0 <HAL_InitTick+0xa0>)
 8000d72:	fba2 2303 	umull	r2, r3, r2, r3
 8000d76:	0c9b      	lsrs	r3, r3, #18
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <HAL_InitTick+0xa4>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <HAL_InitTick+0xa8>)
 8000d80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <HAL_InitTick+0xa4>)
 8000d84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d88:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d8a:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <HAL_InitTick+0xa4>)
 8000d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d8e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <HAL_InitTick+0xa4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <HAL_InitTick+0xa4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d9c:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <HAL_InitTick+0xa4>)
 8000d9e:	f002 fc4b 	bl	8003638 <HAL_TIM_Base_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d104      	bne.n	8000db2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000da8:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <HAL_InitTick+0xa4>)
 8000daa:	f002 fc9d 	bl	80036e8 <HAL_TIM_Base_Start_IT>
 8000dae:	4603      	mov	r3, r0
 8000db0:	e000      	b.n	8000db4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3730      	adds	r7, #48	; 0x30
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	431bde83 	.word	0x431bde83
 8000dc4:	20003994 	.word	0x20003994
 8000dc8:	40012c00 	.word	0x40012c00

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr
	...

08000df8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000dfc:	4802      	ldr	r0, [pc, #8]	; (8000e08 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000dfe:	f000 fcbb 	bl	8001778 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20003d50 	.word	0x20003d50

08000e0c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <TIM1_UP_IRQHandler+0x10>)
 8000e12:	f002 fcbb 	bl	800378c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20003994 	.word	0x20003994

08000e20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <USART2_IRQHandler+0x10>)
 8000e26:	f002 fef3 	bl	8003c10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20003954 	.word	0x20003954

08000e34 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e38:	4802      	ldr	r0, [pc, #8]	; (8000e44 <USART3_IRQHandler+0x10>)
 8000e3a:	f002 fee9 	bl	8003c10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20003914 	.word	0x20003914

08000e48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e54:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e56:	e003      	b.n	8000e60 <LoopCopyDataInit>

08000e58 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000e5a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e5c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e5e:	3104      	adds	r1, #4

08000e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e60:	480a      	ldr	r0, [pc, #40]	; (8000e8c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000e64:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e66:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e68:	d3f6      	bcc.n	8000e58 <CopyDataInit>
  ldr r2, =_sbss
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000e6c:	e002      	b.n	8000e74 <LoopFillZerobss>

08000e6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e70:	f842 3b04 	str.w	r3, [r2], #4

08000e74 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000e76:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e78:	d3f9      	bcc.n	8000e6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e7a:	f7ff ffe5 	bl	8000e48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e7e:	f00b f901 	bl	800c084 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e82:	f7ff fcdd 	bl	8000840 <main>
  bx lr
 8000e86:	4770      	bx	lr
  ldr r3, =_sidata
 8000e88:	0800c230 	.word	0x0800c230
  ldr r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e90:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 8000e94:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 8000e98:	200040b0 	.word	0x200040b0

08000e9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e9c:	e7fe      	b.n	8000e9c <ADC1_2_IRQHandler>
	...

08000ea0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <HAL_Init+0x28>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <HAL_Init+0x28>)
 8000eaa:	f043 0310 	orr.w	r3, r3, #16
 8000eae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f000 f8d1 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f7ff ff32 	bl	8000d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ebc:	f7ff fe62 	bl	8000b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40022000 	.word	0x40022000

08000ecc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <HAL_IncTick+0x1c>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b05      	ldr	r3, [pc, #20]	; (8000eec <HAL_IncTick+0x20>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a03      	ldr	r2, [pc, #12]	; (8000eec <HAL_IncTick+0x20>)
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	200039dc 	.word	0x200039dc

08000ef0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef4:	4b02      	ldr	r3, [pc, #8]	; (8000f00 <HAL_GetTick+0x10>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	200039dc 	.word	0x200039dc

08000f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f20:	4013      	ands	r3, r2
 8000f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f36:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	60d3      	str	r3, [r2, #12]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f50:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <__NVIC_GetPriorityGrouping+0x18>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	f003 0307 	and.w	r3, r3, #7
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	db0b      	blt.n	8000f92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	f003 021f 	and.w	r2, r3, #31
 8000f80:	4906      	ldr	r1, [pc, #24]	; (8000f9c <__NVIC_EnableIRQ+0x34>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	095b      	lsrs	r3, r3, #5
 8000f88:	2001      	movs	r0, #1
 8000f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	e000e100 	.word	0xe000e100

08000fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	db0a      	blt.n	8000fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	490c      	ldr	r1, [pc, #48]	; (8000fec <__NVIC_SetPriority+0x4c>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	0112      	lsls	r2, r2, #4
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc8:	e00a      	b.n	8000fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4908      	ldr	r1, [pc, #32]	; (8000ff0 <__NVIC_SetPriority+0x50>)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	3b04      	subs	r3, #4
 8000fd8:	0112      	lsls	r2, r2, #4
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	440b      	add	r3, r1
 8000fde:	761a      	strb	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000e100 	.word	0xe000e100
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	; 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f1c3 0307 	rsb	r3, r3, #7
 800100e:	2b04      	cmp	r3, #4
 8001010:	bf28      	it	cs
 8001012:	2304      	movcs	r3, #4
 8001014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3304      	adds	r3, #4
 800101a:	2b06      	cmp	r3, #6
 800101c:	d902      	bls.n	8001024 <NVIC_EncodePriority+0x30>
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3b03      	subs	r3, #3
 8001022:	e000      	b.n	8001026 <NVIC_EncodePriority+0x32>
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	f04f 32ff 	mov.w	r2, #4294967295
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43da      	mvns	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	401a      	ands	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800103c:	f04f 31ff 	mov.w	r1, #4294967295
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	43d9      	mvns	r1, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	4313      	orrs	r3, r2
         );
}
 800104e:	4618      	mov	r0, r3
 8001050:	3724      	adds	r7, #36	; 0x24
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ff4f 	bl	8000f04 <__NVIC_SetPriorityGrouping>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001080:	f7ff ff64 	bl	8000f4c <__NVIC_GetPriorityGrouping>
 8001084:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	6978      	ldr	r0, [r7, #20]
 800108c:	f7ff ffb2 	bl	8000ff4 <NVIC_EncodePriority>
 8001090:	4602      	mov	r2, r0
 8001092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001096:	4611      	mov	r1, r2
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff81 	bl	8000fa0 <__NVIC_SetPriority>
}
 800109e:	bf00      	nop
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff57 	bl	8000f68 <__NVIC_EnableIRQ>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d005      	beq.n	80010e6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2204      	movs	r2, #4
 80010de:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	e051      	b.n	800118a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f022 020e 	bic.w	r2, r2, #14
 80010f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f022 0201 	bic.w	r2, r2, #1
 8001104:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a22      	ldr	r2, [pc, #136]	; (8001194 <HAL_DMA_Abort_IT+0xd0>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d029      	beq.n	8001164 <HAL_DMA_Abort_IT+0xa0>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a20      	ldr	r2, [pc, #128]	; (8001198 <HAL_DMA_Abort_IT+0xd4>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d022      	beq.n	8001160 <HAL_DMA_Abort_IT+0x9c>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a1f      	ldr	r2, [pc, #124]	; (800119c <HAL_DMA_Abort_IT+0xd8>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d01a      	beq.n	800115a <HAL_DMA_Abort_IT+0x96>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a1d      	ldr	r2, [pc, #116]	; (80011a0 <HAL_DMA_Abort_IT+0xdc>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d012      	beq.n	8001154 <HAL_DMA_Abort_IT+0x90>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a1c      	ldr	r2, [pc, #112]	; (80011a4 <HAL_DMA_Abort_IT+0xe0>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d00a      	beq.n	800114e <HAL_DMA_Abort_IT+0x8a>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a1a      	ldr	r2, [pc, #104]	; (80011a8 <HAL_DMA_Abort_IT+0xe4>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d102      	bne.n	8001148 <HAL_DMA_Abort_IT+0x84>
 8001142:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001146:	e00e      	b.n	8001166 <HAL_DMA_Abort_IT+0xa2>
 8001148:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800114c:	e00b      	b.n	8001166 <HAL_DMA_Abort_IT+0xa2>
 800114e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001152:	e008      	b.n	8001166 <HAL_DMA_Abort_IT+0xa2>
 8001154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001158:	e005      	b.n	8001166 <HAL_DMA_Abort_IT+0xa2>
 800115a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800115e:	e002      	b.n	8001166 <HAL_DMA_Abort_IT+0xa2>
 8001160:	2310      	movs	r3, #16
 8001162:	e000      	b.n	8001166 <HAL_DMA_Abort_IT+0xa2>
 8001164:	2301      	movs	r3, #1
 8001166:	4a11      	ldr	r2, [pc, #68]	; (80011ac <HAL_DMA_Abort_IT+0xe8>)
 8001168:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	4798      	blx	r3
    } 
  }
  return status;
 800118a:	7bfb      	ldrb	r3, [r7, #15]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40020008 	.word	0x40020008
 8001198:	4002001c 	.word	0x4002001c
 800119c:	40020030 	.word	0x40020030
 80011a0:	40020044 	.word	0x40020044
 80011a4:	40020058 	.word	0x40020058
 80011a8:	4002006c 	.word	0x4002006c
 80011ac:	40020000 	.word	0x40020000

080011b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b08b      	sub	sp, #44	; 0x2c
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ba:	2300      	movs	r3, #0
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011be:	2300      	movs	r3, #0
 80011c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c2:	e169      	b.n	8001498 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011c4:	2201      	movs	r2, #1
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	69fa      	ldr	r2, [r7, #28]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	429a      	cmp	r2, r3
 80011de:	f040 8158 	bne.w	8001492 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	4a9a      	ldr	r2, [pc, #616]	; (8001450 <HAL_GPIO_Init+0x2a0>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d05e      	beq.n	80012aa <HAL_GPIO_Init+0xfa>
 80011ec:	4a98      	ldr	r2, [pc, #608]	; (8001450 <HAL_GPIO_Init+0x2a0>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d875      	bhi.n	80012de <HAL_GPIO_Init+0x12e>
 80011f2:	4a98      	ldr	r2, [pc, #608]	; (8001454 <HAL_GPIO_Init+0x2a4>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d058      	beq.n	80012aa <HAL_GPIO_Init+0xfa>
 80011f8:	4a96      	ldr	r2, [pc, #600]	; (8001454 <HAL_GPIO_Init+0x2a4>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d86f      	bhi.n	80012de <HAL_GPIO_Init+0x12e>
 80011fe:	4a96      	ldr	r2, [pc, #600]	; (8001458 <HAL_GPIO_Init+0x2a8>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d052      	beq.n	80012aa <HAL_GPIO_Init+0xfa>
 8001204:	4a94      	ldr	r2, [pc, #592]	; (8001458 <HAL_GPIO_Init+0x2a8>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d869      	bhi.n	80012de <HAL_GPIO_Init+0x12e>
 800120a:	4a94      	ldr	r2, [pc, #592]	; (800145c <HAL_GPIO_Init+0x2ac>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d04c      	beq.n	80012aa <HAL_GPIO_Init+0xfa>
 8001210:	4a92      	ldr	r2, [pc, #584]	; (800145c <HAL_GPIO_Init+0x2ac>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d863      	bhi.n	80012de <HAL_GPIO_Init+0x12e>
 8001216:	4a92      	ldr	r2, [pc, #584]	; (8001460 <HAL_GPIO_Init+0x2b0>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d046      	beq.n	80012aa <HAL_GPIO_Init+0xfa>
 800121c:	4a90      	ldr	r2, [pc, #576]	; (8001460 <HAL_GPIO_Init+0x2b0>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d85d      	bhi.n	80012de <HAL_GPIO_Init+0x12e>
 8001222:	2b12      	cmp	r3, #18
 8001224:	d82a      	bhi.n	800127c <HAL_GPIO_Init+0xcc>
 8001226:	2b12      	cmp	r3, #18
 8001228:	d859      	bhi.n	80012de <HAL_GPIO_Init+0x12e>
 800122a:	a201      	add	r2, pc, #4	; (adr r2, 8001230 <HAL_GPIO_Init+0x80>)
 800122c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001230:	080012ab 	.word	0x080012ab
 8001234:	08001285 	.word	0x08001285
 8001238:	08001297 	.word	0x08001297
 800123c:	080012d9 	.word	0x080012d9
 8001240:	080012df 	.word	0x080012df
 8001244:	080012df 	.word	0x080012df
 8001248:	080012df 	.word	0x080012df
 800124c:	080012df 	.word	0x080012df
 8001250:	080012df 	.word	0x080012df
 8001254:	080012df 	.word	0x080012df
 8001258:	080012df 	.word	0x080012df
 800125c:	080012df 	.word	0x080012df
 8001260:	080012df 	.word	0x080012df
 8001264:	080012df 	.word	0x080012df
 8001268:	080012df 	.word	0x080012df
 800126c:	080012df 	.word	0x080012df
 8001270:	080012df 	.word	0x080012df
 8001274:	0800128d 	.word	0x0800128d
 8001278:	080012a1 	.word	0x080012a1
 800127c:	4a79      	ldr	r2, [pc, #484]	; (8001464 <HAL_GPIO_Init+0x2b4>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d013      	beq.n	80012aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001282:	e02c      	b.n	80012de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	623b      	str	r3, [r7, #32]
          break;
 800128a:	e029      	b.n	80012e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	3304      	adds	r3, #4
 8001292:	623b      	str	r3, [r7, #32]
          break;
 8001294:	e024      	b.n	80012e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	3308      	adds	r3, #8
 800129c:	623b      	str	r3, [r7, #32]
          break;
 800129e:	e01f      	b.n	80012e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	330c      	adds	r3, #12
 80012a6:	623b      	str	r3, [r7, #32]
          break;
 80012a8:	e01a      	b.n	80012e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d102      	bne.n	80012b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012b2:	2304      	movs	r3, #4
 80012b4:	623b      	str	r3, [r7, #32]
          break;
 80012b6:	e013      	b.n	80012e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d105      	bne.n	80012cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012c0:	2308      	movs	r3, #8
 80012c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69fa      	ldr	r2, [r7, #28]
 80012c8:	611a      	str	r2, [r3, #16]
          break;
 80012ca:	e009      	b.n	80012e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012cc:	2308      	movs	r3, #8
 80012ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69fa      	ldr	r2, [r7, #28]
 80012d4:	615a      	str	r2, [r3, #20]
          break;
 80012d6:	e003      	b.n	80012e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
          break;
 80012dc:	e000      	b.n	80012e0 <HAL_GPIO_Init+0x130>
          break;
 80012de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	2bff      	cmp	r3, #255	; 0xff
 80012e4:	d801      	bhi.n	80012ea <HAL_GPIO_Init+0x13a>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	e001      	b.n	80012ee <HAL_GPIO_Init+0x13e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3304      	adds	r3, #4
 80012ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	2bff      	cmp	r3, #255	; 0xff
 80012f4:	d802      	bhi.n	80012fc <HAL_GPIO_Init+0x14c>
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	e002      	b.n	8001302 <HAL_GPIO_Init+0x152>
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	3b08      	subs	r3, #8
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	210f      	movs	r1, #15
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	fa01 f303 	lsl.w	r3, r1, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	401a      	ands	r2, r3
 8001314:	6a39      	ldr	r1, [r7, #32]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	fa01 f303 	lsl.w	r3, r1, r3
 800131c:	431a      	orrs	r2, r3
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 80b1 	beq.w	8001492 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001330:	4b4d      	ldr	r3, [pc, #308]	; (8001468 <HAL_GPIO_Init+0x2b8>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a4c      	ldr	r2, [pc, #304]	; (8001468 <HAL_GPIO_Init+0x2b8>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b4a      	ldr	r3, [pc, #296]	; (8001468 <HAL_GPIO_Init+0x2b8>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001348:	4a48      	ldr	r2, [pc, #288]	; (800146c <HAL_GPIO_Init+0x2bc>)
 800134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134c:	089b      	lsrs	r3, r3, #2
 800134e:	3302      	adds	r3, #2
 8001350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001354:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	220f      	movs	r2, #15
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	4013      	ands	r3, r2
 800136a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a40      	ldr	r2, [pc, #256]	; (8001470 <HAL_GPIO_Init+0x2c0>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d013      	beq.n	800139c <HAL_GPIO_Init+0x1ec>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a3f      	ldr	r2, [pc, #252]	; (8001474 <HAL_GPIO_Init+0x2c4>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d00d      	beq.n	8001398 <HAL_GPIO_Init+0x1e8>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a3e      	ldr	r2, [pc, #248]	; (8001478 <HAL_GPIO_Init+0x2c8>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d007      	beq.n	8001394 <HAL_GPIO_Init+0x1e4>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a3d      	ldr	r2, [pc, #244]	; (800147c <HAL_GPIO_Init+0x2cc>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d101      	bne.n	8001390 <HAL_GPIO_Init+0x1e0>
 800138c:	2303      	movs	r3, #3
 800138e:	e006      	b.n	800139e <HAL_GPIO_Init+0x1ee>
 8001390:	2304      	movs	r3, #4
 8001392:	e004      	b.n	800139e <HAL_GPIO_Init+0x1ee>
 8001394:	2302      	movs	r3, #2
 8001396:	e002      	b.n	800139e <HAL_GPIO_Init+0x1ee>
 8001398:	2301      	movs	r3, #1
 800139a:	e000      	b.n	800139e <HAL_GPIO_Init+0x1ee>
 800139c:	2300      	movs	r3, #0
 800139e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a0:	f002 0203 	and.w	r2, r2, #3
 80013a4:	0092      	lsls	r2, r2, #2
 80013a6:	4093      	lsls	r3, r2
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013ae:	492f      	ldr	r1, [pc, #188]	; (800146c <HAL_GPIO_Init+0x2bc>)
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	089b      	lsrs	r3, r3, #2
 80013b4:	3302      	adds	r3, #2
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d006      	beq.n	80013d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	492c      	ldr	r1, [pc, #176]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	600b      	str	r3, [r1, #0]
 80013d4:	e006      	b.n	80013e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013d6:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	43db      	mvns	r3, r3
 80013de:	4928      	ldr	r1, [pc, #160]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d006      	beq.n	80013fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013f0:	4b23      	ldr	r3, [pc, #140]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	4922      	ldr	r1, [pc, #136]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	604b      	str	r3, [r1, #4]
 80013fc:	e006      	b.n	800140c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	43db      	mvns	r3, r3
 8001406:	491e      	ldr	r1, [pc, #120]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 8001408:	4013      	ands	r3, r2
 800140a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d006      	beq.n	8001426 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	4918      	ldr	r1, [pc, #96]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	608b      	str	r3, [r1, #8]
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	43db      	mvns	r3, r3
 800142e:	4914      	ldr	r1, [pc, #80]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 8001430:	4013      	ands	r3, r2
 8001432:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d021      	beq.n	8001484 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 8001442:	68da      	ldr	r2, [r3, #12]
 8001444:	490e      	ldr	r1, [pc, #56]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	60cb      	str	r3, [r1, #12]
 800144c:	e021      	b.n	8001492 <HAL_GPIO_Init+0x2e2>
 800144e:	bf00      	nop
 8001450:	10320000 	.word	0x10320000
 8001454:	10310000 	.word	0x10310000
 8001458:	10220000 	.word	0x10220000
 800145c:	10210000 	.word	0x10210000
 8001460:	10120000 	.word	0x10120000
 8001464:	10110000 	.word	0x10110000
 8001468:	40021000 	.word	0x40021000
 800146c:	40010000 	.word	0x40010000
 8001470:	40010800 	.word	0x40010800
 8001474:	40010c00 	.word	0x40010c00
 8001478:	40011000 	.word	0x40011000
 800147c:	40011400 	.word	0x40011400
 8001480:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001484:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <HAL_GPIO_Init+0x304>)
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	43db      	mvns	r3, r3
 800148c:	4909      	ldr	r1, [pc, #36]	; (80014b4 <HAL_GPIO_Init+0x304>)
 800148e:	4013      	ands	r3, r2
 8001490:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	3301      	adds	r3, #1
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	fa22 f303 	lsr.w	r3, r2, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f47f ae8e 	bne.w	80011c4 <HAL_GPIO_Init+0x14>
  }
}
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	372c      	adds	r7, #44	; 0x2c
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	40010400 	.word	0x40010400

080014b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	887b      	ldrh	r3, [r7, #2]
 80014ca:	4013      	ands	r3, r2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014d0:	2301      	movs	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
 80014d4:	e001      	b.n	80014da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014da:	7bfb      	ldrb	r3, [r7, #15]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	460b      	mov	r3, r1
 80014f0:	807b      	strh	r3, [r7, #2]
 80014f2:	4613      	mov	r3, r2
 80014f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014f6:	787b      	ldrb	r3, [r7, #1]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014fc:	887a      	ldrh	r2, [r7, #2]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001502:	e003      	b.n	800150c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001504:	887b      	ldrh	r3, [r7, #2]
 8001506:	041a      	lsls	r2, r3, #16
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	611a      	str	r2, [r3, #16]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr

08001516 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001516:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001518:	b08b      	sub	sp, #44	; 0x2c
 800151a:	af06      	add	r7, sp, #24
 800151c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e0fd      	b.n	8001724 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d106      	bne.n	8001542 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f009 fdc9 	bl	800b0d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2203      	movs	r2, #3
 8001546:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f002 fe3c 	bl	80041cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	687e      	ldr	r6, [r7, #4]
 800155c:	466d      	mov	r5, sp
 800155e:	f106 0410 	add.w	r4, r6, #16
 8001562:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001564:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001566:	6823      	ldr	r3, [r4, #0]
 8001568:	602b      	str	r3, [r5, #0]
 800156a:	1d33      	adds	r3, r6, #4
 800156c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800156e:	6838      	ldr	r0, [r7, #0]
 8001570:	f002 fe06 	bl	8004180 <USB_CoreInit>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d005      	beq.n	8001586 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2202      	movs	r2, #2
 800157e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e0ce      	b.n	8001724 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2100      	movs	r1, #0
 800158c:	4618      	mov	r0, r3
 800158e:	f002 fe37 	bl	8004200 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001592:	2300      	movs	r3, #0
 8001594:	73fb      	strb	r3, [r7, #15]
 8001596:	e04c      	b.n	8001632 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	1c5a      	adds	r2, r3, #1
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	440b      	add	r3, r1
 80015a8:	3301      	adds	r3, #1
 80015aa:	2201      	movs	r2, #1
 80015ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	440b      	add	r3, r1
 80015be:	7bfa      	ldrb	r2, [r7, #15]
 80015c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015c2:	7bfa      	ldrb	r2, [r7, #15]
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	b298      	uxth	r0, r3
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	440b      	add	r3, r1
 80015d4:	3336      	adds	r3, #54	; 0x36
 80015d6:	4602      	mov	r2, r0
 80015d8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	1c5a      	adds	r2, r3, #1
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	440b      	add	r3, r1
 80015ea:	3303      	adds	r3, #3
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	440b      	add	r3, r1
 80015fe:	3338      	adds	r3, #56	; 0x38
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	440b      	add	r3, r1
 8001612:	333c      	adds	r3, #60	; 0x3c
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001618:	7bfa      	ldrb	r2, [r7, #15]
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	440b      	add	r3, r1
 8001626:	3340      	adds	r3, #64	; 0x40
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	3301      	adds	r3, #1
 8001630:	73fb      	strb	r3, [r7, #15]
 8001632:	7bfa      	ldrb	r2, [r7, #15]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	429a      	cmp	r2, r3
 800163a:	d3ad      	bcc.n	8001598 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800163c:	2300      	movs	r3, #0
 800163e:	73fb      	strb	r3, [r7, #15]
 8001640:	e044      	b.n	80016cc <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001642:	7bfa      	ldrb	r2, [r7, #15]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	440b      	add	r3, r1
 8001650:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001658:	7bfa      	ldrb	r2, [r7, #15]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	440b      	add	r3, r1
 8001666:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800166a:	7bfa      	ldrb	r2, [r7, #15]
 800166c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800166e:	7bfa      	ldrb	r2, [r7, #15]
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	440b      	add	r3, r1
 800167c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001684:	7bfa      	ldrb	r2, [r7, #15]
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	440b      	add	r3, r1
 8001692:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800169a:	7bfa      	ldrb	r2, [r7, #15]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	440b      	add	r3, r1
 80016a8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016b0:	7bfa      	ldrb	r2, [r7, #15]
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	440b      	add	r3, r1
 80016be:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	3301      	adds	r3, #1
 80016ca:	73fb      	strb	r3, [r7, #15]
 80016cc:	7bfa      	ldrb	r2, [r7, #15]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d3b5      	bcc.n	8001642 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	687e      	ldr	r6, [r7, #4]
 80016de:	466d      	mov	r5, sp
 80016e0:	f106 0410 	add.w	r4, r6, #16
 80016e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e8:	6823      	ldr	r3, [r4, #0]
 80016ea:	602b      	str	r3, [r5, #0]
 80016ec:	1d33      	adds	r3, r6, #4
 80016ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016f0:	6838      	ldr	r0, [r7, #0]
 80016f2:	f002 fd91 	bl	8004218 <USB_DevInit>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2202      	movs	r2, #2
 8001700:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e00d      	b.n	8001724 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f004 fd2b 	bl	8006178 <USB_DevDisconnect>

  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800172c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800173a:	2b01      	cmp	r3, #1
 800173c:	d101      	bne.n	8001742 <HAL_PCD_Start+0x16>
 800173e:	2302      	movs	r3, #2
 8001740:	e016      	b.n	8001770 <HAL_PCD_Start+0x44>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f002 fd26 	bl	80041a0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001754:	2101      	movs	r1, #1
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f009 ff2f 	bl	800b5ba <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f004 fcff 	bl	8006164 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f004 fd01 	bl	800618c <USB_ReadInterrupts>
 800178a:	4603      	mov	r3, r0
 800178c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001794:	d102      	bne.n	800179c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 fb61 	bl	8001e5e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f004 fcf3 	bl	800618c <USB_ReadInterrupts>
 80017a6:	4603      	mov	r3, r0
 80017a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017b0:	d112      	bne.n	80017d8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017c4:	b292      	uxth	r2, r2
 80017c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f009 fcfd 	bl	800b1ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80017d0:	2100      	movs	r1, #0
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f925 	bl	8001a22 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f004 fcd5 	bl	800618c <USB_ReadInterrupts>
 80017e2:	4603      	mov	r3, r0
 80017e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017ec:	d10b      	bne.n	8001806 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001800:	b292      	uxth	r2, r2
 8001802:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f004 fcbe 	bl	800618c <USB_ReadInterrupts>
 8001810:	4603      	mov	r3, r0
 8001812:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800181a:	d10b      	bne.n	8001834 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001824:	b29a      	uxth	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800182e:	b292      	uxth	r2, r2
 8001830:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f004 fca7 	bl	800618c <USB_ReadInterrupts>
 800183e:	4603      	mov	r3, r0
 8001840:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001848:	d126      	bne.n	8001898 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001852:	b29a      	uxth	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 0204 	bic.w	r2, r2, #4
 800185c:	b292      	uxth	r2, r2
 800185e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800186a:	b29a      	uxth	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0208 	bic.w	r2, r2, #8
 8001874:	b292      	uxth	r2, r2
 8001876:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f009 fcde 	bl	800b23c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001888:	b29a      	uxth	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001892:	b292      	uxth	r2, r2
 8001894:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f004 fc75 	bl	800618c <USB_ReadInterrupts>
 80018a2:	4603      	mov	r3, r0
 80018a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018ac:	f040 8084 	bne.w	80019b8 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80018b0:	2300      	movs	r3, #0
 80018b2:	77fb      	strb	r3, [r7, #31]
 80018b4:	e011      	b.n	80018da <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	7ffb      	ldrb	r3, [r7, #31]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	441a      	add	r2, r3
 80018c2:	7ffb      	ldrb	r3, [r7, #31]
 80018c4:	8812      	ldrh	r2, [r2, #0]
 80018c6:	b292      	uxth	r2, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	f107 0120 	add.w	r1, r7, #32
 80018ce:	440b      	add	r3, r1
 80018d0:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80018d4:	7ffb      	ldrb	r3, [r7, #31]
 80018d6:	3301      	adds	r3, #1
 80018d8:	77fb      	strb	r3, [r7, #31]
 80018da:	7ffb      	ldrb	r3, [r7, #31]
 80018dc:	2b07      	cmp	r3, #7
 80018de:	d9ea      	bls.n	80018b6 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 0201 	orr.w	r2, r2, #1
 80018f2:	b292      	uxth	r2, r2
 80018f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001900:	b29a      	uxth	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 0201 	bic.w	r2, r2, #1
 800190a:	b292      	uxth	r2, r2
 800190c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001910:	bf00      	nop
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800191a:	b29b      	uxth	r3, r3
 800191c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f6      	beq.n	8001912 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800192c:	b29a      	uxth	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001936:	b292      	uxth	r2, r2
 8001938:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800193c:	2300      	movs	r3, #0
 800193e:	77fb      	strb	r3, [r7, #31]
 8001940:	e010      	b.n	8001964 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001942:	7ffb      	ldrb	r3, [r7, #31]
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	4611      	mov	r1, r2
 800194a:	7ffa      	ldrb	r2, [r7, #31]
 800194c:	0092      	lsls	r2, r2, #2
 800194e:	440a      	add	r2, r1
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	f107 0120 	add.w	r1, r7, #32
 8001956:	440b      	add	r3, r1
 8001958:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800195c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800195e:	7ffb      	ldrb	r3, [r7, #31]
 8001960:	3301      	adds	r3, #1
 8001962:	77fb      	strb	r3, [r7, #31]
 8001964:	7ffb      	ldrb	r3, [r7, #31]
 8001966:	2b07      	cmp	r3, #7
 8001968:	d9eb      	bls.n	8001942 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001972:	b29a      	uxth	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f042 0208 	orr.w	r2, r2, #8
 800197c:	b292      	uxth	r2, r2
 800197e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800198a:	b29a      	uxth	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001994:	b292      	uxth	r2, r2
 8001996:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f042 0204 	orr.w	r2, r2, #4
 80019ac:	b292      	uxth	r2, r2
 80019ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f009 fc28 	bl	800b208 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f004 fbe5 	bl	800618c <USB_ReadInterrupts>
 80019c2:	4603      	mov	r3, r0
 80019c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019cc:	d10e      	bne.n	80019ec <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019e0:	b292      	uxth	r2, r2
 80019e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f009 fbe1 	bl	800b1ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f004 fbcb 	bl	800618c <USB_ReadInterrupts>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a00:	d10b      	bne.n	8001a1a <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a14:	b292      	uxth	r2, r2
 8001a16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	3720      	adds	r7, #32
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d101      	bne.n	8001a3c <HAL_PCD_SetAddress+0x1a>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e013      	b.n	8001a64 <HAL_PCD_SetAddress+0x42>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	78fa      	ldrb	r2, [r7, #3]
 8001a48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	78fa      	ldrb	r2, [r7, #3]
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f004 fb72 	bl	800613e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	4608      	mov	r0, r1
 8001a76:	4611      	mov	r1, r2
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	70fb      	strb	r3, [r7, #3]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	803b      	strh	r3, [r7, #0]
 8001a82:	4613      	mov	r3, r2
 8001a84:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	da0e      	bge.n	8001ab0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a92:	78fb      	ldrb	r3, [r7, #3]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	705a      	strb	r2, [r3, #1]
 8001aae:	e00e      	b.n	8001ace <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ab0:	78fb      	ldrb	r3, [r7, #3]
 8001ab2:	f003 0207 	and.w	r2, r3, #7
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ace:	78fb      	ldrb	r3, [r7, #3]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ada:	883a      	ldrh	r2, [r7, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	78ba      	ldrb	r2, [r7, #2]
 8001ae4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	785b      	ldrb	r3, [r3, #1]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d004      	beq.n	8001af8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001af8:	78bb      	ldrb	r3, [r7, #2]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d102      	bne.n	8001b04 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d101      	bne.n	8001b12 <HAL_PCD_EP_Open+0xa6>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e00e      	b.n	8001b30 <HAL_PCD_EP_Open+0xc4>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68f9      	ldr	r1, [r7, #12]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f002 fb99 	bl	8004258 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001b2e:	7afb      	ldrb	r3, [r7, #11]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	da0e      	bge.n	8001b6a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	1c5a      	adds	r2, r3, #1
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	4413      	add	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2201      	movs	r2, #1
 8001b66:	705a      	strb	r2, [r3, #1]
 8001b68:	e00e      	b.n	8001b88 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	f003 0207 	and.w	r2, r3, #7
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	4413      	add	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b88:	78fb      	ldrb	r3, [r7, #3]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_PCD_EP_Close+0x6a>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e00e      	b.n	8001bc0 <HAL_PCD_EP_Close+0x88>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68f9      	ldr	r1, [r7, #12]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f002 febb 	bl	800492c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	607a      	str	r2, [r7, #4]
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bd8:	7afb      	ldrb	r3, [r7, #11]
 8001bda:	f003 0207 	and.w	r2, r3, #7
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	4413      	add	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2200      	movs	r2, #0
 8001c06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c08:	7afb      	ldrb	r3, [r7, #11]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c14:	7afb      	ldrb	r3, [r7, #11]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d106      	bne.n	8001c2c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6979      	ldr	r1, [r7, #20]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f003 f86d 	bl	8004d04 <USB_EPStartXfer>
 8001c2a:	e005      	b.n	8001c38 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6979      	ldr	r1, [r7, #20]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f003 f866 	bl	8004d04 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	f003 0207 	and.w	r2, r3, #7
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	440b      	add	r3, r1
 8001c60:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001c64:	681b      	ldr	r3, [r3, #0]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr

08001c70 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c80:	7afb      	ldrb	r3, [r7, #11]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	4413      	add	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cbc:	7afb      	ldrb	r3, [r7, #11]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cc8:	7afb      	ldrb	r3, [r7, #11]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d106      	bne.n	8001ce0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6979      	ldr	r1, [r7, #20]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f003 f813 	bl	8004d04 <USB_EPStartXfer>
 8001cde:	e005      	b.n	8001cec <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6979      	ldr	r1, [r7, #20]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f003 f80c 	bl	8004d04 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	f003 0207 	and.w	r2, r3, #7
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d901      	bls.n	8001d14 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e04c      	b.n	8001dae <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	da0e      	bge.n	8001d3a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	1c5a      	adds	r2, r3, #1
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	4413      	add	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2201      	movs	r2, #1
 8001d36:	705a      	strb	r2, [r3, #1]
 8001d38:	e00c      	b.n	8001d54 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d3a:	78fa      	ldrb	r2, [r7, #3]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2201      	movs	r2, #1
 8001d58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_PCD_EP_SetStall+0x7e>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e01c      	b.n	8001dae <HAL_PCD_EP_SetStall+0xb8>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68f9      	ldr	r1, [r7, #12]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f004 f8de 	bl	8005f44 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d88:	78fb      	ldrb	r3, [r7, #3]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d108      	bne.n	8001da4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4610      	mov	r0, r2
 8001da0:	f004 fa03 	bl	80061aa <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b084      	sub	sp, #16
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001dc2:	78fb      	ldrb	r3, [r7, #3]
 8001dc4:	f003 020f 	and.w	r2, r3, #15
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d901      	bls.n	8001dd4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e040      	b.n	8001e56 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	da0e      	bge.n	8001dfa <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	1c5a      	adds	r2, r3, #1
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	4413      	add	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2201      	movs	r2, #1
 8001df6:	705a      	strb	r2, [r3, #1]
 8001df8:	e00e      	b.n	8001e18 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dfa:	78fb      	ldrb	r3, [r7, #3]
 8001dfc:	f003 0207 	and.w	r2, r3, #7
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	4413      	add	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_PCD_EP_ClrStall+0x82>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e00e      	b.n	8001e56 <HAL_PCD_EP_ClrStall+0xa0>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68f9      	ldr	r1, [r7, #12]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f004 f8cc 	bl	8005fe4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b08e      	sub	sp, #56	; 0x38
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e66:	e2df      	b.n	8002428 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e70:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001e72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001e7e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f040 8158 	bne.w	8002138 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001e88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d152      	bne.n	8001f38 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ea2:	81fb      	strh	r3, [r7, #14]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	89fb      	ldrh	r3, [r7, #14]
 8001eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3328      	adds	r3, #40	; 0x28
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4413      	add	r3, r2
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	695a      	ldr	r2, [r3, #20]
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	441a      	add	r2, r3
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f009 f93e 	bl	800b17a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 828e 	beq.w	8002428 <PCD_EP_ISR_Handler+0x5ca>
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f040 8289 	bne.w	8002428 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	b292      	uxth	r2, r2
 8001f2a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f36:	e277      	b.n	8002428 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001f48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d034      	beq.n	8001fbc <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4413      	add	r3, r2
 8001f66:	3306      	adds	r3, #6
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6812      	ldr	r2, [r2, #0]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6818      	ldr	r0, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	f004 f95a 	bl	800624a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	823b      	strh	r3, [r7, #16]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	8a3a      	ldrh	r2, [r7, #16]
 8001fac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fb0:	b292      	uxth	r2, r2
 8001fb2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f009 f8b3 	bl	800b120 <HAL_PCD_SetupStageCallback>
 8001fba:	e235      	b.n	8002428 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001fbc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f280 8231 	bge.w	8002428 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	83bb      	strh	r3, [r7, #28]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	8bba      	ldrh	r2, [r7, #28]
 8001fdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fe0:	b292      	uxth	r2, r2
 8001fe2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	461a      	mov	r2, r3
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3306      	adds	r3, #6
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	4413      	add	r3, r2
 8002002:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d019      	beq.n	800204c <PCD_EP_ISR_Handler+0x1ee>
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d015      	beq.n	800204c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	6959      	ldr	r1, [r3, #20]
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002030:	b29b      	uxth	r3, r3
 8002032:	f004 f90a 	bl	800624a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	695a      	ldr	r2, [r3, #20]
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	441a      	add	r2, r3
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002044:	2100      	movs	r1, #0
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f009 f87c 	bl	800b144 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	61bb      	str	r3, [r7, #24]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800205a:	b29b      	uxth	r3, r3
 800205c:	461a      	mov	r2, r3
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	4413      	add	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d112      	bne.n	800209a <PCD_EP_ISR_Handler+0x23c>
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	b29b      	uxth	r3, r3
 800207a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800207e:	b29a      	uxth	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	801a      	strh	r2, [r3, #0]
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	b29b      	uxth	r3, r3
 800208a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800208e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002092:	b29a      	uxth	r2, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	801a      	strh	r2, [r3, #0]
 8002098:	e02f      	b.n	80020fa <PCD_EP_ISR_Handler+0x29c>
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	2b3e      	cmp	r3, #62	; 0x3e
 80020a0:	d813      	bhi.n	80020ca <PCD_EP_ISR_Handler+0x26c>
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	085b      	lsrs	r3, r3, #1
 80020a8:	633b      	str	r3, [r7, #48]	; 0x30
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d002      	beq.n	80020bc <PCD_EP_ISR_Handler+0x25e>
 80020b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b8:	3301      	adds	r3, #1
 80020ba:	633b      	str	r3, [r7, #48]	; 0x30
 80020bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020be:	b29b      	uxth	r3, r3
 80020c0:	029b      	lsls	r3, r3, #10
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	801a      	strh	r2, [r3, #0]
 80020c8:	e017      	b.n	80020fa <PCD_EP_ISR_Handler+0x29c>
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	633b      	str	r3, [r7, #48]	; 0x30
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f003 031f 	and.w	r3, r3, #31
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d102      	bne.n	80020e4 <PCD_EP_ISR_Handler+0x286>
 80020de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e0:	3b01      	subs	r3, #1
 80020e2:	633b      	str	r3, [r7, #48]	; 0x30
 80020e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	029b      	lsls	r3, r3, #10
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	b29b      	uxth	r3, r3
 8002102:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800210a:	827b      	strh	r3, [r7, #18]
 800210c:	8a7b      	ldrh	r3, [r7, #18]
 800210e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002112:	827b      	strh	r3, [r7, #18]
 8002114:	8a7b      	ldrh	r3, [r7, #18]
 8002116:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800211a:	827b      	strh	r3, [r7, #18]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	8a7b      	ldrh	r3, [r7, #18]
 8002122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800212a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800212e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002132:	b29b      	uxth	r3, r3
 8002134:	8013      	strh	r3, [r2, #0]
 8002136:	e177      	b.n	8002428 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	461a      	mov	r2, r3
 800213e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800214a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800214e:	2b00      	cmp	r3, #0
 8002150:	f280 80ea 	bge.w	8002328 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	461a      	mov	r2, r3
 800215a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	b29a      	uxth	r2, r3
 8002166:	f640 738f 	movw	r3, #3983	; 0xf8f
 800216a:	4013      	ands	r3, r2
 800216c:	853b      	strh	r3, [r7, #40]	; 0x28
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800217e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002182:	b292      	uxth	r2, r2
 8002184:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002186:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	7b1b      	ldrb	r3, [r3, #12]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d122      	bne.n	80021ea <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	461a      	mov	r2, r3
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4413      	add	r3, r2
 80021b8:	3306      	adds	r3, #6
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021cc:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80021ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 8087 	beq.w	80022e4 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6818      	ldr	r0, [r3, #0]
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	6959      	ldr	r1, [r3, #20]
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	88da      	ldrh	r2, [r3, #6]
 80021e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021e4:	f004 f831 	bl	800624a <USB_ReadPMA>
 80021e8:	e07c      	b.n	80022e4 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	78db      	ldrb	r3, [r3, #3]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d108      	bne.n	8002204 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80021f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021f4:	461a      	mov	r2, r3
 80021f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f923 	bl	8002444 <HAL_PCD_EP_DB_Receive>
 80021fe:	4603      	mov	r3, r0
 8002200:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002202:	e06f      	b.n	80022e4 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	b29b      	uxth	r3, r3
 8002216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800221a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800221e:	847b      	strh	r3, [r7, #34]	; 0x22
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	441a      	add	r2, r3
 800222e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002230:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002234:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800223c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002240:	b29b      	uxth	r3, r3
 8002242:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	b29b      	uxth	r3, r3
 8002256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d021      	beq.n	80022a2 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002266:	b29b      	uxth	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4413      	add	r3, r2
 8002272:	3302      	adds	r3, #2
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6812      	ldr	r2, [r2, #0]
 800227a:	4413      	add	r3, r2
 800227c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002286:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002288:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800228a:	2b00      	cmp	r3, #0
 800228c:	d02a      	beq.n	80022e4 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	6959      	ldr	r1, [r3, #20]
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	891a      	ldrh	r2, [r3, #8]
 800229a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800229c:	f003 ffd5 	bl	800624a <USB_ReadPMA>
 80022a0:	e020      	b.n	80022e4 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	461a      	mov	r2, r3
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	3306      	adds	r3, #6
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ca:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80022cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d008      	beq.n	80022e4 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	6959      	ldr	r1, [r3, #20]
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	895a      	ldrh	r2, [r3, #10]
 80022de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022e0:	f003 ffb3 	bl	800624a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	69da      	ldr	r2, [r3, #28]
 80022e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022ea:	441a      	add	r2, r3
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022f6:	441a      	add	r2, r3
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d004      	beq.n	800230e <PCD_EP_ISR_Handler+0x4b0>
 8002304:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	429a      	cmp	r2, r3
 800230c:	d206      	bcs.n	800231c <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	4619      	mov	r1, r3
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f008 ff15 	bl	800b144 <HAL_PCD_DataOutStageCallback>
 800231a:	e005      	b.n	8002328 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002322:	4618      	mov	r0, r3
 8002324:	f002 fcee 	bl	8004d04 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002328:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800232a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232e:	2b00      	cmp	r3, #0
 8002330:	d07a      	beq.n	8002428 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002332:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	4613      	mov	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	4413      	add	r3, r2
 8002344:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800235c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002360:	843b      	strh	r3, [r7, #32]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	441a      	add	r2, r3
 8002370:	8c3b      	ldrh	r3, [r7, #32]
 8002372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800237a:	b29b      	uxth	r3, r3
 800237c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	78db      	ldrb	r3, [r3, #3]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d108      	bne.n	8002398 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800238a:	2b02      	cmp	r3, #2
 800238c:	d146      	bne.n	800241c <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800238e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002394:	2b00      	cmp	r3, #0
 8002396:	d141      	bne.n	800241c <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	461a      	mov	r2, r3
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4413      	add	r3, r2
 80023ac:	3302      	adds	r3, #2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023c0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	699a      	ldr	r2, [r3, #24]
 80023c6:	8bfb      	ldrh	r3, [r7, #30]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d906      	bls.n	80023da <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	699a      	ldr	r2, [r3, #24]
 80023d0:	8bfb      	ldrh	r3, [r7, #30]
 80023d2:	1ad2      	subs	r2, r2, r3
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	619a      	str	r2, [r3, #24]
 80023d8:	e002      	b.n	80023e0 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d106      	bne.n	80023f6 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	4619      	mov	r1, r3
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f008 fec3 	bl	800b17a <HAL_PCD_DataInStageCallback>
 80023f4:	e018      	b.n	8002428 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	695a      	ldr	r2, [r3, #20]
 80023fa:	8bfb      	ldrh	r3, [r7, #30]
 80023fc:	441a      	add	r2, r3
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	69da      	ldr	r2, [r3, #28]
 8002406:	8bfb      	ldrh	r3, [r7, #30]
 8002408:	441a      	add	r2, r3
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002414:	4618      	mov	r0, r3
 8002416:	f002 fc75 	bl	8004d04 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800241a:	e005      	b.n	8002428 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800241c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800241e:	461a      	mov	r2, r3
 8002420:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f91b 	bl	800265e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002430:	b29b      	uxth	r3, r3
 8002432:	b21b      	sxth	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	f6ff ad17 	blt.w	8001e68 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3738      	adds	r7, #56	; 0x38
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	4613      	mov	r3, r2
 8002450:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002452:	88fb      	ldrh	r3, [r7, #6]
 8002454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d07e      	beq.n	800255a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002464:	b29b      	uxth	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4413      	add	r3, r2
 8002470:	3302      	adds	r3, #2
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	4413      	add	r3, r2
 800247a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002484:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	699a      	ldr	r2, [r3, #24]
 800248a:	8b7b      	ldrh	r3, [r7, #26]
 800248c:	429a      	cmp	r2, r3
 800248e:	d306      	bcc.n	800249e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	699a      	ldr	r2, [r3, #24]
 8002494:	8b7b      	ldrh	r3, [r7, #26]
 8002496:	1ad2      	subs	r2, r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	619a      	str	r2, [r3, #24]
 800249c:	e002      	b.n	80024a4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2200      	movs	r2, #0
 80024a2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d123      	bne.n	80024f4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	b29b      	uxth	r3, r3
 80024be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c6:	833b      	strh	r3, [r7, #24]
 80024c8:	8b3b      	ldrh	r3, [r7, #24]
 80024ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80024ce:	833b      	strh	r3, [r7, #24]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	441a      	add	r2, r3
 80024de:	8b3b      	ldrh	r3, [r7, #24]
 80024e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d01f      	beq.n	800253e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	b29b      	uxth	r3, r3
 8002510:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002518:	82fb      	strh	r3, [r7, #22]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	461a      	mov	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	441a      	add	r2, r3
 8002528:	8afb      	ldrh	r3, [r7, #22]
 800252a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800252e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002536:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800253a:	b29b      	uxth	r3, r3
 800253c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800253e:	8b7b      	ldrh	r3, [r7, #26]
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 8087 	beq.w	8002654 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	6959      	ldr	r1, [r3, #20]
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	891a      	ldrh	r2, [r3, #8]
 8002552:	8b7b      	ldrh	r3, [r7, #26]
 8002554:	f003 fe79 	bl	800624a <USB_ReadPMA>
 8002558:	e07c      	b.n	8002654 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002562:	b29b      	uxth	r3, r3
 8002564:	461a      	mov	r2, r3
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4413      	add	r3, r2
 800256e:	3306      	adds	r3, #6
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	4413      	add	r3, r2
 8002578:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002582:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	699a      	ldr	r2, [r3, #24]
 8002588:	8b7b      	ldrh	r3, [r7, #26]
 800258a:	429a      	cmp	r2, r3
 800258c:	d306      	bcc.n	800259c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	699a      	ldr	r2, [r3, #24]
 8002592:	8b7b      	ldrh	r3, [r7, #26]
 8002594:	1ad2      	subs	r2, r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	619a      	str	r2, [r3, #24]
 800259a:	e002      	b.n	80025a2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2200      	movs	r2, #0
 80025a0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d123      	bne.n	80025f2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c4:	83fb      	strh	r3, [r7, #30]
 80025c6:	8bfb      	ldrh	r3, [r7, #30]
 80025c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025cc:	83fb      	strh	r3, [r7, #30]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	441a      	add	r2, r3
 80025dc:	8bfb      	ldrh	r3, [r7, #30]
 80025de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80025f2:	88fb      	ldrh	r3, [r7, #6]
 80025f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d11f      	bne.n	800263c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	b29b      	uxth	r3, r3
 800260e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002616:	83bb      	strh	r3, [r7, #28]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	461a      	mov	r2, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	441a      	add	r2, r3
 8002626:	8bbb      	ldrh	r3, [r7, #28]
 8002628:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800262c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002630:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002634:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002638:	b29b      	uxth	r3, r3
 800263a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800263c:	8b7b      	ldrh	r3, [r7, #26]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d008      	beq.n	8002654 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	6959      	ldr	r1, [r3, #20]
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	895a      	ldrh	r2, [r3, #10]
 800264e:	8b7b      	ldrh	r3, [r7, #26]
 8002650:	f003 fdfb 	bl	800624a <USB_ReadPMA>
    }
  }

  return count;
 8002654:	8b7b      	ldrh	r3, [r7, #26]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3720      	adds	r7, #32
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b094      	sub	sp, #80	; 0x50
 8002662:	af00      	add	r7, sp, #0
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	4613      	mov	r3, r2
 800266a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800266c:	88fb      	ldrh	r3, [r7, #6]
 800266e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 8138 	beq.w	80028e8 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002680:	b29b      	uxth	r3, r3
 8002682:	461a      	mov	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4413      	add	r3, r2
 800268c:	3302      	adds	r3, #2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	4413      	add	r3, r2
 8002696:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026a0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	699a      	ldr	r2, [r3, #24]
 80026a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d907      	bls.n	80026c0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	699a      	ldr	r2, [r3, #24]
 80026b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026b8:	1ad2      	subs	r2, r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	619a      	str	r2, [r3, #24]
 80026be:	e002      	b.n	80026c6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2200      	movs	r2, #0
 80026c4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d12c      	bne.n	8002728 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	4619      	mov	r1, r3
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f008 fd50 	bl	800b17a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 823a 	beq.w	8002b5a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002700:	82fb      	strh	r3, [r7, #22]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	441a      	add	r2, r3
 8002710:	8afb      	ldrh	r3, [r7, #22]
 8002712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800271a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800271e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002722:	b29b      	uxth	r3, r3
 8002724:	8013      	strh	r3, [r2, #0]
 8002726:	e218      	b.n	8002b5a <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d01f      	beq.n	8002772 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	b29b      	uxth	r3, r3
 8002744:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	441a      	add	r2, r3
 800275c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800275e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002762:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002766:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800276a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800276e:	b29b      	uxth	r3, r3
 8002770:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002778:	2b01      	cmp	r3, #1
 800277a:	f040 81ee 	bne.w	8002b5a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	695a      	ldr	r2, [r3, #20]
 8002782:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002786:	441a      	add	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	69da      	ldr	r2, [r3, #28]
 8002790:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002794:	441a      	add	r2, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	6a1a      	ldr	r2, [r3, #32]
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d309      	bcc.n	80027ba <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	6a1a      	ldr	r2, [r3, #32]
 80027b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027b2:	1ad2      	subs	r2, r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	621a      	str	r2, [r3, #32]
 80027b8:	e015      	b.n	80027e6 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d107      	bne.n	80027d2 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 80027c2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027c6:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027d0:	e009      	b.n	80027e6 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2200      	movs	r2, #0
 80027e4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	785b      	ldrb	r3, [r3, #1]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d155      	bne.n	800289a <HAL_PCD_EP_DB_Transmit+0x23c>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	61fb      	str	r3, [r7, #28]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	461a      	mov	r2, r3
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	4413      	add	r3, r2
 8002804:	61fb      	str	r3, [r7, #28]
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	011a      	lsls	r2, r3, #4
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	4413      	add	r3, r2
 8002810:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002818:	2b00      	cmp	r3, #0
 800281a:	d112      	bne.n	8002842 <HAL_PCD_EP_DB_Transmit+0x1e4>
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	b29b      	uxth	r3, r3
 8002822:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002826:	b29a      	uxth	r2, r3
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	801a      	strh	r2, [r3, #0]
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	b29b      	uxth	r3, r3
 8002832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800283a:	b29a      	uxth	r2, r3
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	801a      	strh	r2, [r3, #0]
 8002840:	e047      	b.n	80028d2 <HAL_PCD_EP_DB_Transmit+0x274>
 8002842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002844:	2b3e      	cmp	r3, #62	; 0x3e
 8002846:	d811      	bhi.n	800286c <HAL_PCD_EP_DB_Transmit+0x20e>
 8002848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800284a:	085b      	lsrs	r3, r3, #1
 800284c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800284e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <HAL_PCD_EP_DB_Transmit+0x200>
 8002858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285a:	3301      	adds	r3, #1
 800285c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002860:	b29b      	uxth	r3, r3
 8002862:	029b      	lsls	r3, r3, #10
 8002864:	b29a      	uxth	r2, r3
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	801a      	strh	r2, [r3, #0]
 800286a:	e032      	b.n	80028d2 <HAL_PCD_EP_DB_Transmit+0x274>
 800286c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002874:	f003 031f 	and.w	r3, r3, #31
 8002878:	2b00      	cmp	r3, #0
 800287a:	d102      	bne.n	8002882 <HAL_PCD_EP_DB_Transmit+0x224>
 800287c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287e:	3b01      	subs	r3, #1
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002884:	b29b      	uxth	r3, r3
 8002886:	029b      	lsls	r3, r3, #10
 8002888:	b29b      	uxth	r3, r3
 800288a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800288e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002892:	b29a      	uxth	r2, r3
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	801a      	strh	r2, [r3, #0]
 8002898:	e01b      	b.n	80028d2 <HAL_PCD_EP_DB_Transmit+0x274>
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	785b      	ldrb	r3, [r3, #1]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d117      	bne.n	80028d2 <HAL_PCD_EP_DB_Transmit+0x274>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	461a      	mov	r2, r3
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	4413      	add	r3, r2
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	011a      	lsls	r2, r3, #4
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	4413      	add	r3, r2
 80028c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028c8:	623b      	str	r3, [r7, #32]
 80028ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	6959      	ldr	r1, [r3, #20]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	891a      	ldrh	r2, [r3, #8]
 80028de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	f003 fc6d 	bl	80061c0 <USB_WritePMA>
 80028e6:	e138      	b.n	8002b5a <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	461a      	mov	r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4413      	add	r3, r2
 80028fc:	3306      	adds	r3, #6
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	4413      	add	r3, r2
 8002906:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002910:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	699a      	ldr	r2, [r3, #24]
 8002918:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800291c:	429a      	cmp	r2, r3
 800291e:	d307      	bcc.n	8002930 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	699a      	ldr	r2, [r3, #24]
 8002924:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002928:	1ad2      	subs	r2, r2, r3
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	619a      	str	r2, [r3, #24]
 800292e:	e002      	b.n	8002936 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2200      	movs	r2, #0
 8002934:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d12e      	bne.n	800299c <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	4619      	mov	r1, r3
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f008 fc18 	bl	800b17a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002950:	2b00      	cmp	r3, #0
 8002952:	f040 8102 	bne.w	8002b5a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	b29b      	uxth	r3, r3
 8002968:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800296c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002970:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	461a      	mov	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	441a      	add	r2, r3
 8002982:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800298a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800298e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002996:	b29b      	uxth	r3, r3
 8002998:	8013      	strh	r3, [r2, #0]
 800299a:	e0de      	b.n	8002b5a <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800299c:	88fb      	ldrh	r3, [r7, #6]
 800299e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d11f      	bne.n	80029e6 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c0:	867b      	strh	r3, [r7, #50]	; 0x32
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	461a      	mov	r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	441a      	add	r2, r3
 80029d0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80029d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	f040 80b4 	bne.w	8002b5a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	695a      	ldr	r2, [r3, #20]
 80029f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80029fa:	441a      	add	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	69da      	ldr	r2, [r3, #28]
 8002a04:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002a08:	441a      	add	r2, r3
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	6a1a      	ldr	r2, [r3, #32]
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d309      	bcc.n	8002a2e <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	6a1a      	ldr	r2, [r3, #32]
 8002a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a26:	1ad2      	subs	r2, r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	621a      	str	r2, [r3, #32]
 8002a2c:	e015      	b.n	8002a5a <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d107      	bne.n	8002a46 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8002a36:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002a3a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a44:	e009      	b.n	8002a5a <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	643b      	str	r3, [r7, #64]	; 0x40
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	785b      	ldrb	r3, [r3, #1]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d155      	bne.n	8002b14 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	461a      	mov	r2, r3
 8002a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7c:	4413      	add	r3, r2
 8002a7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	011a      	lsls	r2, r3, #4
 8002a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a88:	4413      	add	r3, r2
 8002a8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d112      	bne.n	8002abc <HAL_PCD_EP_DB_Transmit+0x45e>
 8002a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa4:	801a      	strh	r2, [r3, #0]
 8002aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab8:	801a      	strh	r2, [r3, #0]
 8002aba:	e044      	b.n	8002b46 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002abe:	2b3e      	cmp	r3, #62	; 0x3e
 8002ac0:	d811      	bhi.n	8002ae6 <HAL_PCD_EP_DB_Transmit+0x488>
 8002ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ac4:	085b      	lsrs	r3, r3, #1
 8002ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	029b      	lsls	r3, r3, #10
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae2:	801a      	strh	r2, [r3, #0]
 8002ae4:	e02f      	b.n	8002b46 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002ae6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aee:	f003 031f 	and.w	r3, r3, #31
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d102      	bne.n	8002afc <HAL_PCD_EP_DB_Transmit+0x49e>
 8002af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002af8:	3b01      	subs	r3, #1
 8002afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	029b      	lsls	r3, r3, #10
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b10:	801a      	strh	r2, [r3, #0]
 8002b12:	e018      	b.n	8002b46 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	785b      	ldrb	r3, [r3, #1]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d114      	bne.n	8002b46 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	461a      	mov	r2, r3
 8002b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b2a:	4413      	add	r3, r2
 8002b2c:	643b      	str	r3, [r7, #64]	; 0x40
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	011a      	lsls	r2, r3, #4
 8002b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b36:	4413      	add	r3, r2
 8002b38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b44:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	6959      	ldr	r1, [r3, #20]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	895a      	ldrh	r2, [r3, #10]
 8002b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	f003 fb33 	bl	80061c0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b74:	82bb      	strh	r3, [r7, #20]
 8002b76:	8abb      	ldrh	r3, [r7, #20]
 8002b78:	f083 0310 	eor.w	r3, r3, #16
 8002b7c:	82bb      	strh	r3, [r7, #20]
 8002b7e:	8abb      	ldrh	r3, [r7, #20]
 8002b80:	f083 0320 	eor.w	r3, r3, #32
 8002b84:	82bb      	strh	r3, [r7, #20]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	441a      	add	r2, r3
 8002b94:	8abb      	ldrh	r3, [r7, #20]
 8002b96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3750      	adds	r7, #80	; 0x50
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	607b      	str	r3, [r7, #4]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	817b      	strh	r3, [r7, #10]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002bc6:	897b      	ldrh	r3, [r7, #10]
 8002bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00b      	beq.n	8002bea <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bd2:	897b      	ldrh	r3, [r7, #10]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4413      	add	r3, r2
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	e009      	b.n	8002bfe <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bea:	897a      	ldrh	r2, [r7, #10]
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002bfe:	893b      	ldrh	r3, [r7, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d107      	bne.n	8002c14 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	2200      	movs	r2, #0
 8002c08:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	80da      	strh	r2, [r3, #6]
 8002c12:	e00b      	b.n	8002c2c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2201      	movs	r2, #1
 8002c18:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	0c1b      	lsrs	r3, r3, #16
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	371c      	adds	r7, #28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e26c      	b.n	8003124 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 8087 	beq.w	8002d66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c58:	4b92      	ldr	r3, [pc, #584]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 030c 	and.w	r3, r3, #12
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d00c      	beq.n	8002c7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c64:	4b8f      	ldr	r3, [pc, #572]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 030c 	and.w	r3, r3, #12
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d112      	bne.n	8002c96 <HAL_RCC_OscConfig+0x5e>
 8002c70:	4b8c      	ldr	r3, [pc, #560]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7c:	d10b      	bne.n	8002c96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7e:	4b89      	ldr	r3, [pc, #548]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d06c      	beq.n	8002d64 <HAL_RCC_OscConfig+0x12c>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d168      	bne.n	8002d64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e246      	b.n	8003124 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c9e:	d106      	bne.n	8002cae <HAL_RCC_OscConfig+0x76>
 8002ca0:	4b80      	ldr	r3, [pc, #512]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a7f      	ldr	r2, [pc, #508]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	e02e      	b.n	8002d0c <HAL_RCC_OscConfig+0xd4>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10c      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x98>
 8002cb6:	4b7b      	ldr	r3, [pc, #492]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a7a      	ldr	r2, [pc, #488]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	4b78      	ldr	r3, [pc, #480]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a77      	ldr	r2, [pc, #476]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	e01d      	b.n	8002d0c <HAL_RCC_OscConfig+0xd4>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cd8:	d10c      	bne.n	8002cf4 <HAL_RCC_OscConfig+0xbc>
 8002cda:	4b72      	ldr	r3, [pc, #456]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a71      	ldr	r2, [pc, #452]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	4b6f      	ldr	r3, [pc, #444]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a6e      	ldr	r2, [pc, #440]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	e00b      	b.n	8002d0c <HAL_RCC_OscConfig+0xd4>
 8002cf4:	4b6b      	ldr	r3, [pc, #428]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a6a      	ldr	r2, [pc, #424]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	4b68      	ldr	r3, [pc, #416]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a67      	ldr	r2, [pc, #412]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d013      	beq.n	8002d3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d14:	f7fe f8ec 	bl	8000ef0 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d1c:	f7fe f8e8 	bl	8000ef0 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b64      	cmp	r3, #100	; 0x64
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e1fa      	b.n	8003124 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f0      	beq.n	8002d1c <HAL_RCC_OscConfig+0xe4>
 8002d3a:	e014      	b.n	8002d66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3c:	f7fe f8d8 	bl	8000ef0 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d44:	f7fe f8d4 	bl	8000ef0 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b64      	cmp	r3, #100	; 0x64
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e1e6      	b.n	8003124 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d56:	4b53      	ldr	r3, [pc, #332]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f0      	bne.n	8002d44 <HAL_RCC_OscConfig+0x10c>
 8002d62:	e000      	b.n	8002d66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d063      	beq.n	8002e3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d72:	4b4c      	ldr	r3, [pc, #304]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00b      	beq.n	8002d96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d7e:	4b49      	ldr	r3, [pc, #292]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f003 030c 	and.w	r3, r3, #12
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d11c      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x18c>
 8002d8a:	4b46      	ldr	r3, [pc, #280]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d116      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d96:	4b43      	ldr	r3, [pc, #268]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d005      	beq.n	8002dae <HAL_RCC_OscConfig+0x176>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d001      	beq.n	8002dae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e1ba      	b.n	8003124 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dae:	4b3d      	ldr	r3, [pc, #244]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4939      	ldr	r1, [pc, #228]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc2:	e03a      	b.n	8002e3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d020      	beq.n	8002e0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dcc:	4b36      	ldr	r3, [pc, #216]	; (8002ea8 <HAL_RCC_OscConfig+0x270>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd2:	f7fe f88d 	bl	8000ef0 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dda:	f7fe f889 	bl	8000ef0 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e19b      	b.n	8003124 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dec:	4b2d      	ldr	r3, [pc, #180]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0f0      	beq.n	8002dda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df8:	4b2a      	ldr	r3, [pc, #168]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	4927      	ldr	r1, [pc, #156]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	600b      	str	r3, [r1, #0]
 8002e0c:	e015      	b.n	8002e3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e0e:	4b26      	ldr	r3, [pc, #152]	; (8002ea8 <HAL_RCC_OscConfig+0x270>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e14:	f7fe f86c 	bl	8000ef0 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e1c:	f7fe f868 	bl	8000ef0 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e17a      	b.n	8003124 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d03a      	beq.n	8002ebc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d019      	beq.n	8002e82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e4e:	4b17      	ldr	r3, [pc, #92]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e54:	f7fe f84c 	bl	8000ef0 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e5c:	f7fe f848 	bl	8000ef0 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e15a      	b.n	8003124 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ea4 <HAL_RCC_OscConfig+0x26c>)
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e7a:	2001      	movs	r0, #1
 8002e7c:	f000 fb08 	bl	8003490 <RCC_Delay>
 8002e80:	e01c      	b.n	8002ebc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e82:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e88:	f7fe f832 	bl	8000ef0 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e8e:	e00f      	b.n	8002eb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e90:	f7fe f82e 	bl	8000ef0 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d908      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e140      	b.n	8003124 <HAL_RCC_OscConfig+0x4ec>
 8002ea2:	bf00      	nop
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	42420000 	.word	0x42420000
 8002eac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb0:	4b9e      	ldr	r3, [pc, #632]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1e9      	bne.n	8002e90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 80a6 	beq.w	8003016 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ece:	4b97      	ldr	r3, [pc, #604]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10d      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eda:	4b94      	ldr	r3, [pc, #592]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	4a93      	ldr	r2, [pc, #588]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 8002ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee4:	61d3      	str	r3, [r2, #28]
 8002ee6:	4b91      	ldr	r3, [pc, #580]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef6:	4b8e      	ldr	r3, [pc, #568]	; (8003130 <HAL_RCC_OscConfig+0x4f8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d118      	bne.n	8002f34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f02:	4b8b      	ldr	r3, [pc, #556]	; (8003130 <HAL_RCC_OscConfig+0x4f8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a8a      	ldr	r2, [pc, #552]	; (8003130 <HAL_RCC_OscConfig+0x4f8>)
 8002f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f0e:	f7fd ffef 	bl	8000ef0 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f16:	f7fd ffeb 	bl	8000ef0 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b64      	cmp	r3, #100	; 0x64
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e0fd      	b.n	8003124 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f28:	4b81      	ldr	r3, [pc, #516]	; (8003130 <HAL_RCC_OscConfig+0x4f8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0f0      	beq.n	8002f16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d106      	bne.n	8002f4a <HAL_RCC_OscConfig+0x312>
 8002f3c:	4b7b      	ldr	r3, [pc, #492]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	4a7a      	ldr	r2, [pc, #488]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	6213      	str	r3, [r2, #32]
 8002f48:	e02d      	b.n	8002fa6 <HAL_RCC_OscConfig+0x36e>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10c      	bne.n	8002f6c <HAL_RCC_OscConfig+0x334>
 8002f52:	4b76      	ldr	r3, [pc, #472]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	4a75      	ldr	r2, [pc, #468]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 8002f58:	f023 0301 	bic.w	r3, r3, #1
 8002f5c:	6213      	str	r3, [r2, #32]
 8002f5e:	4b73      	ldr	r3, [pc, #460]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	4a72      	ldr	r2, [pc, #456]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 8002f64:	f023 0304 	bic.w	r3, r3, #4
 8002f68:	6213      	str	r3, [r2, #32]
 8002f6a:	e01c      	b.n	8002fa6 <HAL_RCC_OscConfig+0x36e>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	2b05      	cmp	r3, #5
 8002f72:	d10c      	bne.n	8002f8e <HAL_RCC_OscConfig+0x356>
 8002f74:	4b6d      	ldr	r3, [pc, #436]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	4a6c      	ldr	r2, [pc, #432]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 8002f7a:	f043 0304 	orr.w	r3, r3, #4
 8002f7e:	6213      	str	r3, [r2, #32]
 8002f80:	4b6a      	ldr	r3, [pc, #424]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	4a69      	ldr	r2, [pc, #420]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	6213      	str	r3, [r2, #32]
 8002f8c:	e00b      	b.n	8002fa6 <HAL_RCC_OscConfig+0x36e>
 8002f8e:	4b67      	ldr	r3, [pc, #412]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	4a66      	ldr	r2, [pc, #408]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 8002f94:	f023 0301 	bic.w	r3, r3, #1
 8002f98:	6213      	str	r3, [r2, #32]
 8002f9a:	4b64      	ldr	r3, [pc, #400]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	4a63      	ldr	r2, [pc, #396]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 8002fa0:	f023 0304 	bic.w	r3, r3, #4
 8002fa4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d015      	beq.n	8002fda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fae:	f7fd ff9f 	bl	8000ef0 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb4:	e00a      	b.n	8002fcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb6:	f7fd ff9b 	bl	8000ef0 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e0ab      	b.n	8003124 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fcc:	4b57      	ldr	r3, [pc, #348]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0ee      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x37e>
 8002fd8:	e014      	b.n	8003004 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fda:	f7fd ff89 	bl	8000ef0 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe0:	e00a      	b.n	8002ff8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe2:	f7fd ff85 	bl	8000ef0 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e095      	b.n	8003124 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff8:	4b4c      	ldr	r3, [pc, #304]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1ee      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003004:	7dfb      	ldrb	r3, [r7, #23]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d105      	bne.n	8003016 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800300a:	4b48      	ldr	r3, [pc, #288]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	4a47      	ldr	r2, [pc, #284]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 8003010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003014:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 8081 	beq.w	8003122 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003020:	4b42      	ldr	r3, [pc, #264]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 030c 	and.w	r3, r3, #12
 8003028:	2b08      	cmp	r3, #8
 800302a:	d061      	beq.n	80030f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	2b02      	cmp	r3, #2
 8003032:	d146      	bne.n	80030c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003034:	4b3f      	ldr	r3, [pc, #252]	; (8003134 <HAL_RCC_OscConfig+0x4fc>)
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303a:	f7fd ff59 	bl	8000ef0 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003042:	f7fd ff55 	bl	8000ef0 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e067      	b.n	8003124 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003054:	4b35      	ldr	r3, [pc, #212]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1f0      	bne.n	8003042 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003068:	d108      	bne.n	800307c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800306a:	4b30      	ldr	r3, [pc, #192]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	492d      	ldr	r1, [pc, #180]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 8003078:	4313      	orrs	r3, r2
 800307a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800307c:	4b2b      	ldr	r3, [pc, #172]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a19      	ldr	r1, [r3, #32]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	430b      	orrs	r3, r1
 800308e:	4927      	ldr	r1, [pc, #156]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 8003090:	4313      	orrs	r3, r2
 8003092:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003094:	4b27      	ldr	r3, [pc, #156]	; (8003134 <HAL_RCC_OscConfig+0x4fc>)
 8003096:	2201      	movs	r2, #1
 8003098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309a:	f7fd ff29 	bl	8000ef0 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a2:	f7fd ff25 	bl	8000ef0 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e037      	b.n	8003124 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030b4:	4b1d      	ldr	r3, [pc, #116]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x46a>
 80030c0:	e02f      	b.n	8003122 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c2:	4b1c      	ldr	r3, [pc, #112]	; (8003134 <HAL_RCC_OscConfig+0x4fc>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c8:	f7fd ff12 	bl	8000ef0 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d0:	f7fd ff0e 	bl	8000ef0 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e020      	b.n	8003124 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e2:	4b12      	ldr	r3, [pc, #72]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x498>
 80030ee:	e018      	b.n	8003122 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e013      	b.n	8003124 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <HAL_RCC_OscConfig+0x4f4>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	429a      	cmp	r2, r3
 800310e:	d106      	bne.n	800311e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800311a:	429a      	cmp	r2, r3
 800311c:	d001      	beq.n	8003122 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40021000 	.word	0x40021000
 8003130:	40007000 	.word	0x40007000
 8003134:	42420060 	.word	0x42420060

08003138 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e0d0      	b.n	80032ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800314c:	4b6a      	ldr	r3, [pc, #424]	; (80032f8 <HAL_RCC_ClockConfig+0x1c0>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d910      	bls.n	800317c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315a:	4b67      	ldr	r3, [pc, #412]	; (80032f8 <HAL_RCC_ClockConfig+0x1c0>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 0207 	bic.w	r2, r3, #7
 8003162:	4965      	ldr	r1, [pc, #404]	; (80032f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	4313      	orrs	r3, r2
 8003168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800316a:	4b63      	ldr	r3, [pc, #396]	; (80032f8 <HAL_RCC_ClockConfig+0x1c0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d001      	beq.n	800317c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0b8      	b.n	80032ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d020      	beq.n	80031ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003194:	4b59      	ldr	r3, [pc, #356]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	4a58      	ldr	r2, [pc, #352]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 800319a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800319e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031ac:	4b53      	ldr	r3, [pc, #332]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	4a52      	ldr	r2, [pc, #328]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 80031b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b8:	4b50      	ldr	r3, [pc, #320]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	494d      	ldr	r1, [pc, #308]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d040      	beq.n	8003258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d107      	bne.n	80031ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031de:	4b47      	ldr	r3, [pc, #284]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d115      	bne.n	8003216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e07f      	b.n	80032ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d107      	bne.n	8003206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f6:	4b41      	ldr	r3, [pc, #260]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d109      	bne.n	8003216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e073      	b.n	80032ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003206:	4b3d      	ldr	r3, [pc, #244]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e06b      	b.n	80032ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003216:	4b39      	ldr	r3, [pc, #228]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f023 0203 	bic.w	r2, r3, #3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4936      	ldr	r1, [pc, #216]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	4313      	orrs	r3, r2
 8003226:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003228:	f7fd fe62 	bl	8000ef0 <HAL_GetTick>
 800322c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322e:	e00a      	b.n	8003246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003230:	f7fd fe5e 	bl	8000ef0 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	f241 3288 	movw	r2, #5000	; 0x1388
 800323e:	4293      	cmp	r3, r2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e053      	b.n	80032ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003246:	4b2d      	ldr	r3, [pc, #180]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f003 020c 	and.w	r2, r3, #12
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	429a      	cmp	r2, r3
 8003256:	d1eb      	bne.n	8003230 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003258:	4b27      	ldr	r3, [pc, #156]	; (80032f8 <HAL_RCC_ClockConfig+0x1c0>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d210      	bcs.n	8003288 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003266:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 0207 	bic.w	r2, r3, #7
 800326e:	4922      	ldr	r1, [pc, #136]	; (80032f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	4313      	orrs	r3, r2
 8003274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003276:	4b20      	ldr	r3, [pc, #128]	; (80032f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d001      	beq.n	8003288 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e032      	b.n	80032ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003294:	4b19      	ldr	r3, [pc, #100]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	4916      	ldr	r1, [pc, #88]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d009      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032b2:	4b12      	ldr	r3, [pc, #72]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	490e      	ldr	r1, [pc, #56]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032c6:	f000 f821 	bl	800330c <HAL_RCC_GetSysClockFreq>
 80032ca:	4602      	mov	r2, r0
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	091b      	lsrs	r3, r3, #4
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	490a      	ldr	r1, [pc, #40]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 80032d8:	5ccb      	ldrb	r3, [r1, r3]
 80032da:	fa22 f303 	lsr.w	r3, r2, r3
 80032de:	4a09      	ldr	r2, [pc, #36]	; (8003304 <HAL_RCC_ClockConfig+0x1cc>)
 80032e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032e2:	4b09      	ldr	r3, [pc, #36]	; (8003308 <HAL_RCC_ClockConfig+0x1d0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fd fd1a 	bl	8000d20 <HAL_InitTick>

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40022000 	.word	0x40022000
 80032fc:	40021000 	.word	0x40021000
 8003300:	0800c210 	.word	0x0800c210
 8003304:	20000000 	.word	0x20000000
 8003308:	20000004 	.word	0x20000004

0800330c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800330c:	b490      	push	{r4, r7}
 800330e:	b08a      	sub	sp, #40	; 0x28
 8003310:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003312:	4b2a      	ldr	r3, [pc, #168]	; (80033bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003314:	1d3c      	adds	r4, r7, #4
 8003316:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003318:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800331c:	f240 2301 	movw	r3, #513	; 0x201
 8003320:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	2300      	movs	r3, #0
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	2300      	movs	r3, #0
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003336:	4b22      	ldr	r3, [pc, #136]	; (80033c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	f003 030c 	and.w	r3, r3, #12
 8003342:	2b04      	cmp	r3, #4
 8003344:	d002      	beq.n	800334c <HAL_RCC_GetSysClockFreq+0x40>
 8003346:	2b08      	cmp	r3, #8
 8003348:	d003      	beq.n	8003352 <HAL_RCC_GetSysClockFreq+0x46>
 800334a:	e02d      	b.n	80033a8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800334c:	4b1d      	ldr	r3, [pc, #116]	; (80033c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800334e:	623b      	str	r3, [r7, #32]
      break;
 8003350:	e02d      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	0c9b      	lsrs	r3, r3, #18
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800335e:	4413      	add	r3, r2
 8003360:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003364:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d013      	beq.n	8003398 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003370:	4b13      	ldr	r3, [pc, #76]	; (80033c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	0c5b      	lsrs	r3, r3, #17
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800337e:	4413      	add	r3, r2
 8003380:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003384:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	4a0e      	ldr	r2, [pc, #56]	; (80033c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800338a:	fb02 f203 	mul.w	r2, r2, r3
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	fbb2 f3f3 	udiv	r3, r2, r3
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
 8003396:	e004      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	4a0b      	ldr	r2, [pc, #44]	; (80033c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800339c:	fb02 f303 	mul.w	r3, r2, r3
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	623b      	str	r3, [r7, #32]
      break;
 80033a6:	e002      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033a8:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033aa:	623b      	str	r3, [r7, #32]
      break;
 80033ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ae:	6a3b      	ldr	r3, [r7, #32]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3728      	adds	r7, #40	; 0x28
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc90      	pop	{r4, r7}
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	0800c11c 	.word	0x0800c11c
 80033c0:	40021000 	.word	0x40021000
 80033c4:	007a1200 	.word	0x007a1200
 80033c8:	003d0900 	.word	0x003d0900

080033cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033d0:	4b02      	ldr	r3, [pc, #8]	; (80033dc <HAL_RCC_GetHCLKFreq+0x10>)
 80033d2:	681b      	ldr	r3, [r3, #0]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr
 80033dc:	20000000 	.word	0x20000000

080033e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033e4:	f7ff fff2 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 80033e8:	4602      	mov	r2, r0
 80033ea:	4b05      	ldr	r3, [pc, #20]	; (8003400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	0a1b      	lsrs	r3, r3, #8
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	4903      	ldr	r1, [pc, #12]	; (8003404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033f6:	5ccb      	ldrb	r3, [r1, r3]
 80033f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40021000 	.word	0x40021000
 8003404:	0800c220 	.word	0x0800c220

08003408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800340c:	f7ff ffde 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 8003410:	4602      	mov	r2, r0
 8003412:	4b05      	ldr	r3, [pc, #20]	; (8003428 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	0adb      	lsrs	r3, r3, #11
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	4903      	ldr	r1, [pc, #12]	; (800342c <HAL_RCC_GetPCLK2Freq+0x24>)
 800341e:	5ccb      	ldrb	r3, [r1, r3]
 8003420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003424:	4618      	mov	r0, r3
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40021000 	.word	0x40021000
 800342c:	0800c220 	.word	0x0800c220

08003430 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	220f      	movs	r2, #15
 800343e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003440:	4b11      	ldr	r3, [pc, #68]	; (8003488 <HAL_RCC_GetClockConfig+0x58>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 0203 	and.w	r2, r3, #3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800344c:	4b0e      	ldr	r3, [pc, #56]	; (8003488 <HAL_RCC_GetClockConfig+0x58>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003458:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <HAL_RCC_GetClockConfig+0x58>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003464:	4b08      	ldr	r3, [pc, #32]	; (8003488 <HAL_RCC_GetClockConfig+0x58>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	08db      	lsrs	r3, r3, #3
 800346a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003472:	4b06      	ldr	r3, [pc, #24]	; (800348c <HAL_RCC_GetClockConfig+0x5c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0207 	and.w	r2, r3, #7
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr
 8003488:	40021000 	.word	0x40021000
 800348c:	40022000 	.word	0x40022000

08003490 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003498:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <RCC_Delay+0x34>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a0a      	ldr	r2, [pc, #40]	; (80034c8 <RCC_Delay+0x38>)
 800349e:	fba2 2303 	umull	r2, r3, r2, r3
 80034a2:	0a5b      	lsrs	r3, r3, #9
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	fb02 f303 	mul.w	r3, r2, r3
 80034aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034ac:	bf00      	nop
  }
  while (Delay --);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1e5a      	subs	r2, r3, #1
 80034b2:	60fa      	str	r2, [r7, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1f9      	bne.n	80034ac <RCC_Delay+0x1c>
}
 80034b8:	bf00      	nop
 80034ba:	bf00      	nop
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr
 80034c4:	20000000 	.word	0x20000000
 80034c8:	10624dd3 	.word	0x10624dd3

080034cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d07d      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80034e8:	2300      	movs	r3, #0
 80034ea:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ec:	4b4f      	ldr	r3, [pc, #316]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10d      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034f8:	4b4c      	ldr	r3, [pc, #304]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	4a4b      	ldr	r2, [pc, #300]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003502:	61d3      	str	r3, [r2, #28]
 8003504:	4b49      	ldr	r3, [pc, #292]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003510:	2301      	movs	r3, #1
 8003512:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003514:	4b46      	ldr	r3, [pc, #280]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d118      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003520:	4b43      	ldr	r3, [pc, #268]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a42      	ldr	r2, [pc, #264]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800352a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800352c:	f7fd fce0 	bl	8000ef0 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003532:	e008      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003534:	f7fd fcdc 	bl	8000ef0 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b64      	cmp	r3, #100	; 0x64
 8003540:	d901      	bls.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e06d      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003546:	4b3a      	ldr	r3, [pc, #232]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f0      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003552:	4b36      	ldr	r3, [pc, #216]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800355a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d02e      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	429a      	cmp	r2, r3
 800356e:	d027      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003570:	4b2e      	ldr	r3, [pc, #184]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003578:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800357a:	4b2e      	ldr	r3, [pc, #184]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800357c:	2201      	movs	r2, #1
 800357e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003580:	4b2c      	ldr	r3, [pc, #176]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003586:	4a29      	ldr	r2, [pc, #164]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d014      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003596:	f7fd fcab 	bl	8000ef0 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359c:	e00a      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359e:	f7fd fca7 	bl	8000ef0 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e036      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b4:	4b1d      	ldr	r3, [pc, #116]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0ee      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035c0:	4b1a      	ldr	r3, [pc, #104]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	4917      	ldr	r1, [pc, #92]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035d2:	7dfb      	ldrb	r3, [r7, #23]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d105      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d8:	4b14      	ldr	r3, [pc, #80]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	4a13      	ldr	r2, [pc, #76]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035f0:	4b0e      	ldr	r3, [pc, #56]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	490b      	ldr	r1, [pc, #44]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0310 	and.w	r3, r3, #16
 800360a:	2b00      	cmp	r3, #0
 800360c:	d008      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800360e:	4b07      	ldr	r3, [pc, #28]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	4904      	ldr	r1, [pc, #16]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361c:	4313      	orrs	r3, r2
 800361e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40021000 	.word	0x40021000
 8003630:	40007000 	.word	0x40007000
 8003634:	42420440 	.word	0x42420440

08003638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e041      	b.n	80036ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d106      	bne.n	8003664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f839 	bl	80036d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3304      	adds	r3, #4
 8003674:	4619      	mov	r1, r3
 8003676:	4610      	mov	r0, r2
 8003678:	f000 f9b4 	bl	80039e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr

080036e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d001      	beq.n	8003700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e03a      	b.n	8003776 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a18      	ldr	r2, [pc, #96]	; (8003780 <HAL_TIM_Base_Start_IT+0x98>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00e      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x58>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800372a:	d009      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x58>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a14      	ldr	r2, [pc, #80]	; (8003784 <HAL_TIM_Base_Start_IT+0x9c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d004      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x58>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a13      	ldr	r2, [pc, #76]	; (8003788 <HAL_TIM_Base_Start_IT+0xa0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d111      	bne.n	8003764 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b06      	cmp	r3, #6
 8003750:	d010      	beq.n	8003774 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0201 	orr.w	r2, r2, #1
 8003760:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003762:	e007      	b.n	8003774 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr
 8003780:	40012c00 	.word	0x40012c00
 8003784:	40000400 	.word	0x40000400
 8003788:	40000800 	.word	0x40000800

0800378c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d122      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d11b      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f06f 0202 	mvn.w	r2, #2
 80037b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f8ed 	bl	80039ae <HAL_TIM_IC_CaptureCallback>
 80037d4:	e005      	b.n	80037e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f8e0 	bl	800399c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f8ef 	bl	80039c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d122      	bne.n	800383c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b04      	cmp	r3, #4
 8003802:	d11b      	bne.n	800383c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0204 	mvn.w	r2, #4
 800380c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2202      	movs	r2, #2
 8003812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f8c3 	bl	80039ae <HAL_TIM_IC_CaptureCallback>
 8003828:	e005      	b.n	8003836 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f8b6 	bl	800399c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f8c5 	bl	80039c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b08      	cmp	r3, #8
 8003848:	d122      	bne.n	8003890 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	2b08      	cmp	r3, #8
 8003856:	d11b      	bne.n	8003890 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0208 	mvn.w	r2, #8
 8003860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2204      	movs	r2, #4
 8003866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f899 	bl	80039ae <HAL_TIM_IC_CaptureCallback>
 800387c:	e005      	b.n	800388a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f88c 	bl	800399c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f89b 	bl	80039c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f003 0310 	and.w	r3, r3, #16
 800389a:	2b10      	cmp	r3, #16
 800389c:	d122      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f003 0310 	and.w	r3, r3, #16
 80038a8:	2b10      	cmp	r3, #16
 80038aa:	d11b      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0210 	mvn.w	r2, #16
 80038b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2208      	movs	r2, #8
 80038ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f86f 	bl	80039ae <HAL_TIM_IC_CaptureCallback>
 80038d0:	e005      	b.n	80038de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f862 	bl	800399c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f871 	bl	80039c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d10e      	bne.n	8003910 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d107      	bne.n	8003910 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f06f 0201 	mvn.w	r2, #1
 8003908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7fd f922 	bl	8000b54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391a:	2b80      	cmp	r3, #128	; 0x80
 800391c:	d10e      	bne.n	800393c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003928:	2b80      	cmp	r3, #128	; 0x80
 800392a:	d107      	bne.n	800393c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f8bf 	bl	8003aba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003946:	2b40      	cmp	r3, #64	; 0x40
 8003948:	d10e      	bne.n	8003968 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003954:	2b40      	cmp	r3, #64	; 0x40
 8003956:	d107      	bne.n	8003968 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f835 	bl	80039d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f003 0320 	and.w	r3, r3, #32
 8003972:	2b20      	cmp	r3, #32
 8003974:	d10e      	bne.n	8003994 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b20      	cmp	r3, #32
 8003982:	d107      	bne.n	8003994 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0220 	mvn.w	r2, #32
 800398c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f88a 	bl	8003aa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003994:	bf00      	nop
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc80      	pop	{r7}
 80039ac:	4770      	bx	lr

080039ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr

080039c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr

080039d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr

080039e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a29      	ldr	r2, [pc, #164]	; (8003a9c <TIM_Base_SetConfig+0xb8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d00b      	beq.n	8003a14 <TIM_Base_SetConfig+0x30>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a02:	d007      	beq.n	8003a14 <TIM_Base_SetConfig+0x30>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a26      	ldr	r2, [pc, #152]	; (8003aa0 <TIM_Base_SetConfig+0xbc>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d003      	beq.n	8003a14 <TIM_Base_SetConfig+0x30>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a25      	ldr	r2, [pc, #148]	; (8003aa4 <TIM_Base_SetConfig+0xc0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d108      	bne.n	8003a26 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a1c      	ldr	r2, [pc, #112]	; (8003a9c <TIM_Base_SetConfig+0xb8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00b      	beq.n	8003a46 <TIM_Base_SetConfig+0x62>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a34:	d007      	beq.n	8003a46 <TIM_Base_SetConfig+0x62>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a19      	ldr	r2, [pc, #100]	; (8003aa0 <TIM_Base_SetConfig+0xbc>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d003      	beq.n	8003a46 <TIM_Base_SetConfig+0x62>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a18      	ldr	r2, [pc, #96]	; (8003aa4 <TIM_Base_SetConfig+0xc0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d108      	bne.n	8003a58 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a07      	ldr	r2, [pc, #28]	; (8003a9c <TIM_Base_SetConfig+0xb8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d103      	bne.n	8003a8c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	691a      	ldr	r2, [r3, #16]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	615a      	str	r2, [r3, #20]
}
 8003a92:	bf00      	nop
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr
 8003a9c:	40012c00 	.word	0x40012c00
 8003aa0:	40000400 	.word	0x40000400
 8003aa4:	40000800 	.word	0x40000800

08003aa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr

08003aba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr

08003acc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e03f      	b.n	8003b5e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fd f87e 	bl	8000bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2224      	movs	r2, #36	; 0x24
 8003afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 faa7 	bl	8004064 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695a      	ldr	r2, [r3, #20]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68da      	ldr	r2, [r3, #12]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b085      	sub	sp, #20
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	4613      	mov	r3, r2
 8003b72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d140      	bne.n	8003c02 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_UART_Receive_IT+0x26>
 8003b86:	88fb      	ldrh	r3, [r7, #6]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e039      	b.n	8003c04 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d101      	bne.n	8003b9e <HAL_UART_Receive_IT+0x38>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e032      	b.n	8003c04 <HAL_UART_Receive_IT+0x9e>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	88fa      	ldrh	r2, [r7, #6]
 8003bb0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	88fa      	ldrh	r2, [r7, #6]
 8003bb6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2222      	movs	r2, #34	; 0x22
 8003bc2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bdc:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695a      	ldr	r2, [r3, #20]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f042 0201 	orr.w	r2, r2, #1
 8003bec:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f042 0220 	orr.w	r2, r2, #32
 8003bfc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e000      	b.n	8003c04 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003c02:	2302      	movs	r3, #2
  }
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	4770      	bx	lr
	...

08003c10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10d      	bne.n	8003c62 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	f003 0320 	and.w	r3, r3, #32
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d008      	beq.n	8003c62 <HAL_UART_IRQHandler+0x52>
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	f003 0320 	and.w	r3, r3, #32
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f982 	bl	8003f64 <UART_Receive_IT>
      return;
 8003c60:	e0d0      	b.n	8003e04 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 80b0 	beq.w	8003dca <HAL_UART_IRQHandler+0x1ba>
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d105      	bne.n	8003c80 <HAL_UART_IRQHandler+0x70>
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 80a5 	beq.w	8003dca <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <HAL_UART_IRQHandler+0x90>
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c98:	f043 0201 	orr.w	r2, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f003 0304 	and.w	r3, r3, #4
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <HAL_UART_IRQHandler+0xb0>
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb8:	f043 0202 	orr.w	r2, r3, #2
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <HAL_UART_IRQHandler+0xd0>
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd8:	f043 0204 	orr.w	r2, r3, #4
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00f      	beq.n	8003d0a <HAL_UART_IRQHandler+0xfa>
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d104      	bne.n	8003cfe <HAL_UART_IRQHandler+0xee>
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d005      	beq.n	8003d0a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d02:	f043 0208 	orr.w	r2, r3, #8
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d077      	beq.n	8003e02 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	f003 0320 	and.w	r3, r3, #32
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d007      	beq.n	8003d2c <HAL_UART_IRQHandler+0x11c>
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f91c 	bl	8003f64 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	bf14      	ite	ne
 8003d3a:	2301      	movne	r3, #1
 8003d3c:	2300      	moveq	r3, #0
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d102      	bne.n	8003d54 <HAL_UART_IRQHandler+0x144>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d031      	beq.n	8003db8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f86d 	bl	8003e34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d023      	beq.n	8003db0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695a      	ldr	r2, [r3, #20]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d76:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d013      	beq.n	8003da8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d84:	4a21      	ldr	r2, [pc, #132]	; (8003e0c <HAL_UART_IRQHandler+0x1fc>)
 8003d86:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fd f999 	bl	80010c4 <HAL_DMA_Abort_IT>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d016      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003da2:	4610      	mov	r0, r2
 8003da4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da6:	e00e      	b.n	8003dc6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f83a 	bl	8003e22 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dae:	e00a      	b.n	8003dc6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f836 	bl	8003e22 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db6:	e006      	b.n	8003dc6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f832 	bl	8003e22 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003dc4:	e01d      	b.n	8003e02 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc6:	bf00      	nop
    return;
 8003dc8:	e01b      	b.n	8003e02 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d008      	beq.n	8003de6 <HAL_UART_IRQHandler+0x1d6>
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f859 	bl	8003e96 <UART_Transmit_IT>
    return;
 8003de4:	e00e      	b.n	8003e04 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d009      	beq.n	8003e04 <HAL_UART_IRQHandler+0x1f4>
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d004      	beq.n	8003e04 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f89a 	bl	8003f34 <UART_EndTransmit_IT>
    return;
 8003e00:	e000      	b.n	8003e04 <HAL_UART_IRQHandler+0x1f4>
    return;
 8003e02:	bf00      	nop
  }
}
 8003e04:	3720      	adds	r7, #32
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	08003e6f 	.word	0x08003e6f

08003e10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc80      	pop	{r7}
 8003e20:	4770      	bx	lr

08003e22 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bc80      	pop	{r7}
 8003e32:	4770      	bx	lr

08003e34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e4a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695a      	ldr	r2, [r3, #20]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0201 	bic.w	r2, r2, #1
 8003e5a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr

08003e6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b084      	sub	sp, #16
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f7ff ffca 	bl	8003e22 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e8e:	bf00      	nop
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b085      	sub	sp, #20
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b21      	cmp	r3, #33	; 0x21
 8003ea8:	d13e      	bne.n	8003f28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb2:	d114      	bne.n	8003ede <UART_Transmit_IT+0x48>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d110      	bne.n	8003ede <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ed0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	1c9a      	adds	r2, r3, #2
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	621a      	str	r2, [r3, #32]
 8003edc:	e008      	b.n	8003ef0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	1c59      	adds	r1, r3, #1
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6211      	str	r1, [r2, #32]
 8003ee8:	781a      	ldrb	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	4619      	mov	r1, r3
 8003efe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10f      	bne.n	8003f24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	e000      	b.n	8003f2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f28:	2302      	movs	r3, #2
  }
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr

08003f34 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f4a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7ff ff5b 	bl	8003e10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b22      	cmp	r3, #34	; 0x22
 8003f76:	d170      	bne.n	800405a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f80:	d117      	bne.n	8003fb2 <UART_Receive_IT+0x4e>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d113      	bne.n	8003fb2 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f92:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003faa:	1c9a      	adds	r2, r3, #2
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	629a      	str	r2, [r3, #40]	; 0x28
 8003fb0:	e026      	b.n	8004000 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc4:	d007      	beq.n	8003fd6 <UART_Receive_IT+0x72>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10a      	bne.n	8003fe4 <UART_Receive_IT+0x80>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d106      	bne.n	8003fe4 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	701a      	strb	r2, [r3, #0]
 8003fe2:	e008      	b.n	8003ff6 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffa:	1c5a      	adds	r2, r3, #1
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004004:	b29b      	uxth	r3, r3
 8004006:	3b01      	subs	r3, #1
 8004008:	b29b      	uxth	r3, r3
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	4619      	mov	r1, r3
 800400e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004010:	2b00      	cmp	r3, #0
 8004012:	d120      	bne.n	8004056 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0220 	bic.w	r2, r2, #32
 8004022:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004032:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695a      	ldr	r2, [r3, #20]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0201 	bic.w	r2, r2, #1
 8004042:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f007 fd55 	bl	800bafc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	e002      	b.n	800405c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8004056:	2300      	movs	r3, #0
 8004058:	e000      	b.n	800405c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800405a:	2302      	movs	r3, #2
  }
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689a      	ldr	r2, [r3, #8]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	4313      	orrs	r3, r2
 8004092:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800409e:	f023 030c 	bic.w	r3, r3, #12
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6812      	ldr	r2, [r2, #0]
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	430b      	orrs	r3, r1
 80040aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699a      	ldr	r2, [r3, #24]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a2c      	ldr	r2, [pc, #176]	; (8004178 <UART_SetConfig+0x114>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d103      	bne.n	80040d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040cc:	f7ff f99c 	bl	8003408 <HAL_RCC_GetPCLK2Freq>
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	e002      	b.n	80040da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040d4:	f7ff f984 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 80040d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	009a      	lsls	r2, r3, #2
 80040e4:	441a      	add	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f0:	4a22      	ldr	r2, [pc, #136]	; (800417c <UART_SetConfig+0x118>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	0119      	lsls	r1, r3, #4
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	009a      	lsls	r2, r3, #2
 8004104:	441a      	add	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004110:	4b1a      	ldr	r3, [pc, #104]	; (800417c <UART_SetConfig+0x118>)
 8004112:	fba3 0302 	umull	r0, r3, r3, r2
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	2064      	movs	r0, #100	; 0x64
 800411a:	fb00 f303 	mul.w	r3, r0, r3
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	3332      	adds	r3, #50	; 0x32
 8004124:	4a15      	ldr	r2, [pc, #84]	; (800417c <UART_SetConfig+0x118>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004130:	4419      	add	r1, r3
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	009a      	lsls	r2, r3, #2
 800413c:	441a      	add	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	fbb2 f2f3 	udiv	r2, r2, r3
 8004148:	4b0c      	ldr	r3, [pc, #48]	; (800417c <UART_SetConfig+0x118>)
 800414a:	fba3 0302 	umull	r0, r3, r3, r2
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	2064      	movs	r0, #100	; 0x64
 8004152:	fb00 f303 	mul.w	r3, r0, r3
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	3332      	adds	r3, #50	; 0x32
 800415c:	4a07      	ldr	r2, [pc, #28]	; (800417c <UART_SetConfig+0x118>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	f003 020f 	and.w	r2, r3, #15
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	440a      	add	r2, r1
 800416e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40013800 	.word	0x40013800
 800417c:	51eb851f 	.word	0x51eb851f

08004180 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004180:	b084      	sub	sp, #16
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	f107 0014 	add.w	r0, r7, #20
 800418e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	bc80      	pop	{r7}
 800419c:	b004      	add	sp, #16
 800419e:	4770      	bx	lr

080041a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80041b0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80041b4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bc80      	pop	{r7}
 80041ca:	4770      	bx	lr

080041cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80041d4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80041d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	43db      	mvns	r3, r3
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	4013      	ands	r3, r2
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bc80      	pop	{r7}
 80041fe:	4770      	bx	lr

08004200 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	460b      	mov	r3, r1
 800420a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	bc80      	pop	{r7}
 8004216:	4770      	bx	lr

08004218 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004218:	b084      	sub	sp, #16
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	f107 0014 	add.w	r0, r7, #20
 8004226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	bc80      	pop	{r7}
 8004254:	b004      	add	sp, #16
 8004256:	4770      	bx	lr

08004258 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004258:	b480      	push	{r7}
 800425a:	b09b      	sub	sp, #108	; 0x6c
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	b29b      	uxth	r3, r3
 8004276:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800427a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800427e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	78db      	ldrb	r3, [r3, #3]
 8004286:	2b03      	cmp	r3, #3
 8004288:	d81f      	bhi.n	80042ca <USB_ActivateEndpoint+0x72>
 800428a:	a201      	add	r2, pc, #4	; (adr r2, 8004290 <USB_ActivateEndpoint+0x38>)
 800428c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004290:	080042a1 	.word	0x080042a1
 8004294:	080042bd 	.word	0x080042bd
 8004298:	080042d3 	.word	0x080042d3
 800429c:	080042af 	.word	0x080042af
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80042a0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80042a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042a8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80042ac:	e012      	b.n	80042d4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80042ae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80042b2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80042b6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80042ba:	e00b      	b.n	80042d4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80042bc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80042c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042c4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80042c8:	e004      	b.n	80042d4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80042d0:	e000      	b.n	80042d4 <USB_ActivateEndpoint+0x7c>
      break;
 80042d2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	441a      	add	r2, r3
 80042de:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80042e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	b29b      	uxth	r3, r3
 8004304:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430c:	b29a      	uxth	r2, r3
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	b29b      	uxth	r3, r3
 8004314:	4313      	orrs	r3, r2
 8004316:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	441a      	add	r2, r3
 8004324:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800432c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004338:	b29b      	uxth	r3, r3
 800433a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	7b1b      	ldrb	r3, [r3, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	f040 8149 	bne.w	80045d8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	785b      	ldrb	r3, [r3, #1]
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 8084 	beq.w	8004458 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800435a:	b29b      	uxth	r3, r3
 800435c:	461a      	mov	r2, r3
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	4413      	add	r3, r2
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	011a      	lsls	r2, r3, #4
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004372:	613b      	str	r3, [r7, #16]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	88db      	ldrh	r3, [r3, #6]
 8004378:	085b      	lsrs	r3, r3, #1
 800437a:	b29b      	uxth	r3, r3
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	81fb      	strh	r3, [r7, #14]
 8004392:	89fb      	ldrh	r3, [r7, #14]
 8004394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01b      	beq.n	80043d4 <USB_ActivateEndpoint+0x17c>
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b2:	81bb      	strh	r3, [r7, #12]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	441a      	add	r2, r3
 80043be:	89bb      	ldrh	r3, [r7, #12]
 80043c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	78db      	ldrb	r3, [r3, #3]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d020      	beq.n	800441e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	881b      	ldrh	r3, [r3, #0]
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043f2:	813b      	strh	r3, [r7, #8]
 80043f4:	893b      	ldrh	r3, [r7, #8]
 80043f6:	f083 0320 	eor.w	r3, r3, #32
 80043fa:	813b      	strh	r3, [r7, #8]
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	441a      	add	r2, r3
 8004406:	893b      	ldrh	r3, [r7, #8]
 8004408:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800440c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004418:	b29b      	uxth	r3, r3
 800441a:	8013      	strh	r3, [r2, #0]
 800441c:	e27f      	b.n	800491e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	b29b      	uxth	r3, r3
 800442c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004430:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004434:	817b      	strh	r3, [r7, #10]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	441a      	add	r2, r3
 8004440:	897b      	ldrh	r3, [r7, #10]
 8004442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800444a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800444e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004452:	b29b      	uxth	r3, r3
 8004454:	8013      	strh	r3, [r2, #0]
 8004456:	e262      	b.n	800491e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004462:	b29b      	uxth	r3, r3
 8004464:	461a      	mov	r2, r3
 8004466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004468:	4413      	add	r3, r2
 800446a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	011a      	lsls	r2, r3, #4
 8004472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004474:	4413      	add	r3, r2
 8004476:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800447a:	62bb      	str	r3, [r7, #40]	; 0x28
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	88db      	ldrh	r3, [r3, #6]
 8004480:	085b      	lsrs	r3, r3, #1
 8004482:	b29b      	uxth	r3, r3
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004496:	b29b      	uxth	r3, r3
 8004498:	461a      	mov	r2, r3
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	4413      	add	r3, r2
 800449e:	627b      	str	r3, [r7, #36]	; 0x24
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	011a      	lsls	r2, r3, #4
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	4413      	add	r3, r2
 80044aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044ae:	623b      	str	r3, [r7, #32]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d112      	bne.n	80044de <USB_ActivateEndpoint+0x286>
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	b29b      	uxth	r3, r3
 80044be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	801a      	strh	r2, [r3, #0]
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	801a      	strh	r2, [r3, #0]
 80044dc:	e02f      	b.n	800453e <USB_ActivateEndpoint+0x2e6>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	2b3e      	cmp	r3, #62	; 0x3e
 80044e4:	d813      	bhi.n	800450e <USB_ActivateEndpoint+0x2b6>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	085b      	lsrs	r3, r3, #1
 80044ec:	663b      	str	r3, [r7, #96]	; 0x60
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <USB_ActivateEndpoint+0x2a8>
 80044fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044fc:	3301      	adds	r3, #1
 80044fe:	663b      	str	r3, [r7, #96]	; 0x60
 8004500:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004502:	b29b      	uxth	r3, r3
 8004504:	029b      	lsls	r3, r3, #10
 8004506:	b29a      	uxth	r2, r3
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	801a      	strh	r2, [r3, #0]
 800450c:	e017      	b.n	800453e <USB_ActivateEndpoint+0x2e6>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	663b      	str	r3, [r7, #96]	; 0x60
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	2b00      	cmp	r3, #0
 8004520:	d102      	bne.n	8004528 <USB_ActivateEndpoint+0x2d0>
 8004522:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004524:	3b01      	subs	r3, #1
 8004526:	663b      	str	r3, [r7, #96]	; 0x60
 8004528:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800452a:	b29b      	uxth	r3, r3
 800452c:	029b      	lsls	r3, r3, #10
 800452e:	b29b      	uxth	r3, r3
 8004530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004538:	b29a      	uxth	r2, r3
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	881b      	ldrh	r3, [r3, #0]
 800454a:	83fb      	strh	r3, [r7, #30]
 800454c:	8bfb      	ldrh	r3, [r7, #30]
 800454e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d01b      	beq.n	800458e <USB_ActivateEndpoint+0x336>
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	b29b      	uxth	r3, r3
 8004564:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456c:	83bb      	strh	r3, [r7, #28]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	441a      	add	r2, r3
 8004578:	8bbb      	ldrh	r3, [r7, #28]
 800457a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800457e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004582:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800458a:	b29b      	uxth	r3, r3
 800458c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	b29b      	uxth	r3, r3
 800459c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a4:	837b      	strh	r3, [r7, #26]
 80045a6:	8b7b      	ldrh	r3, [r7, #26]
 80045a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80045ac:	837b      	strh	r3, [r7, #26]
 80045ae:	8b7b      	ldrh	r3, [r7, #26]
 80045b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80045b4:	837b      	strh	r3, [r7, #26]
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	441a      	add	r2, r3
 80045c0:	8b7b      	ldrh	r3, [r7, #26]
 80045c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	8013      	strh	r3, [r2, #0]
 80045d6:	e1a2      	b.n	800491e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ee:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	441a      	add	r2, r3
 80045fc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004608:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800460c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004610:	b29b      	uxth	r3, r3
 8004612:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	65bb      	str	r3, [r7, #88]	; 0x58
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800461e:	b29b      	uxth	r3, r3
 8004620:	461a      	mov	r2, r3
 8004622:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004624:	4413      	add	r3, r2
 8004626:	65bb      	str	r3, [r7, #88]	; 0x58
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	011a      	lsls	r2, r3, #4
 800462e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004630:	4413      	add	r3, r2
 8004632:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004636:	657b      	str	r3, [r7, #84]	; 0x54
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	891b      	ldrh	r3, [r3, #8]
 800463c:	085b      	lsrs	r3, r3, #1
 800463e:	b29b      	uxth	r3, r3
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004646:	801a      	strh	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	653b      	str	r3, [r7, #80]	; 0x50
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004652:	b29b      	uxth	r3, r3
 8004654:	461a      	mov	r2, r3
 8004656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004658:	4413      	add	r3, r2
 800465a:	653b      	str	r3, [r7, #80]	; 0x50
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	011a      	lsls	r2, r3, #4
 8004662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004664:	4413      	add	r3, r2
 8004666:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800466a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	895b      	ldrh	r3, [r3, #10]
 8004670:	085b      	lsrs	r3, r3, #1
 8004672:	b29b      	uxth	r3, r3
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	785b      	ldrb	r3, [r3, #1]
 8004680:	2b00      	cmp	r3, #0
 8004682:	f040 8091 	bne.w	80047a8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004694:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d01b      	beq.n	80046d6 <USB_ActivateEndpoint+0x47e>
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	441a      	add	r2, r3
 80046c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80046c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	873b      	strh	r3, [r7, #56]	; 0x38
 80046e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80046e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d01b      	beq.n	8004726 <USB_ActivateEndpoint+0x4ce>
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004704:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	441a      	add	r2, r3
 8004710:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800471a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800471e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004722:	b29b      	uxth	r3, r3
 8004724:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4413      	add	r3, r2
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	b29b      	uxth	r3, r3
 8004734:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800473e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004740:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004744:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004746:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004748:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800474c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	441a      	add	r2, r3
 8004758:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800475a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800475e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800476a:	b29b      	uxth	r3, r3
 800476c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	b29b      	uxth	r3, r3
 800477c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004784:	867b      	strh	r3, [r7, #50]	; 0x32
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	441a      	add	r2, r3
 8004790:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800479a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800479e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	8013      	strh	r3, [r2, #0]
 80047a6:	e0ba      	b.n	800491e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80047b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80047bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d01d      	beq.n	8004800 <USB_ActivateEndpoint+0x5a8>
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	881b      	ldrh	r3, [r3, #0]
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047da:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	441a      	add	r2, r3
 80047e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80047ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004810:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01d      	beq.n	8004858 <USB_ActivateEndpoint+0x600>
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	b29b      	uxth	r3, r3
 800482a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800482e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004832:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	441a      	add	r2, r3
 8004840:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004844:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004848:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800484c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004850:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004854:	b29b      	uxth	r3, r3
 8004856:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	78db      	ldrb	r3, [r3, #3]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d024      	beq.n	80048aa <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	b29b      	uxth	r3, r3
 800486e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004876:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800487a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800487e:	f083 0320 	eor.w	r3, r3, #32
 8004882:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	441a      	add	r2, r3
 8004890:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004894:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004898:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800489c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	8013      	strh	r3, [r2, #0]
 80048a8:	e01d      	b.n	80048e6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4413      	add	r3, r2
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048c0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	441a      	add	r2, r3
 80048ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80048d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	441a      	add	r2, r3
 8004908:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800490a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800490e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800491a:	b29b      	uxth	r3, r3
 800491c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800491e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004922:	4618      	mov	r0, r3
 8004924:	376c      	adds	r7, #108	; 0x6c
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr

0800492c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800492c:	b480      	push	{r7}
 800492e:	b08d      	sub	sp, #52	; 0x34
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	7b1b      	ldrb	r3, [r3, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	f040 808e 	bne.w	8004a5c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	785b      	ldrb	r3, [r3, #1]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d044      	beq.n	80049d2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	81bb      	strh	r3, [r7, #12]
 8004956:	89bb      	ldrh	r3, [r7, #12]
 8004958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495c:	2b00      	cmp	r3, #0
 800495e:	d01b      	beq.n	8004998 <USB_DeactivateEndpoint+0x6c>
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	b29b      	uxth	r3, r3
 800496e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004976:	817b      	strh	r3, [r7, #10]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	441a      	add	r2, r3
 8004982:	897b      	ldrh	r3, [r7, #10]
 8004984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800498c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004990:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004994:	b29b      	uxth	r3, r3
 8004996:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ae:	813b      	strh	r3, [r7, #8]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	441a      	add	r2, r3
 80049ba:	893b      	ldrh	r3, [r7, #8]
 80049bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	8013      	strh	r3, [r2, #0]
 80049d0:	e192      	b.n	8004cf8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	827b      	strh	r3, [r7, #18]
 80049e0:	8a7b      	ldrh	r3, [r7, #18]
 80049e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d01b      	beq.n	8004a22 <USB_DeactivateEndpoint+0xf6>
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a00:	823b      	strh	r3, [r7, #16]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	441a      	add	r2, r3
 8004a0c:	8a3b      	ldrh	r3, [r7, #16]
 8004a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	881b      	ldrh	r3, [r3, #0]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a38:	81fb      	strh	r3, [r7, #14]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	441a      	add	r2, r3
 8004a44:	89fb      	ldrh	r3, [r7, #14]
 8004a46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	8013      	strh	r3, [r2, #0]
 8004a5a:	e14d      	b.n	8004cf8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	785b      	ldrb	r3, [r3, #1]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f040 80a5 	bne.w	8004bb0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	843b      	strh	r3, [r7, #32]
 8004a74:	8c3b      	ldrh	r3, [r7, #32]
 8004a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d01b      	beq.n	8004ab6 <USB_DeactivateEndpoint+0x18a>
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a94:	83fb      	strh	r3, [r7, #30]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	441a      	add	r2, r3
 8004aa0:	8bfb      	ldrh	r3, [r7, #30]
 8004aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aaa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	83bb      	strh	r3, [r7, #28]
 8004ac4:	8bbb      	ldrh	r3, [r7, #28]
 8004ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d01b      	beq.n	8004b06 <USB_DeactivateEndpoint+0x1da>
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae4:	837b      	strh	r3, [r7, #26]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	441a      	add	r2, r3
 8004af0:	8b7b      	ldrh	r3, [r7, #26]
 8004af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004afe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1c:	833b      	strh	r3, [r7, #24]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	441a      	add	r2, r3
 8004b28:	8b3b      	ldrh	r3, [r7, #24]
 8004b2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b54:	82fb      	strh	r3, [r7, #22]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	441a      	add	r2, r3
 8004b60:	8afb      	ldrh	r3, [r7, #22]
 8004b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b8c:	82bb      	strh	r3, [r7, #20]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	441a      	add	r2, r3
 8004b98:	8abb      	ldrh	r3, [r7, #20]
 8004b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	8013      	strh	r3, [r2, #0]
 8004bae:	e0a3      	b.n	8004cf8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004bbe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d01b      	beq.n	8004c00 <USB_DeactivateEndpoint+0x2d4>
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bde:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	441a      	add	r2, r3
 8004bea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004c0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d01b      	beq.n	8004c50 <USB_DeactivateEndpoint+0x324>
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	441a      	add	r2, r3
 8004c3a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	881b      	ldrh	r3, [r3, #0]
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c66:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	441a      	add	r2, r3
 8004c72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c9e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	441a      	add	r2, r3
 8004caa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	881b      	ldrh	r3, [r3, #0]
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd6:	847b      	strh	r3, [r7, #34]	; 0x22
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	441a      	add	r2, r3
 8004ce2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3734      	adds	r7, #52	; 0x34
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bc80      	pop	{r7}
 8004d02:	4770      	bx	lr

08004d04 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b0c4      	sub	sp, #272	; 0x110
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	1d3b      	adds	r3, r7, #4
 8004d0c:	6018      	str	r0, [r3, #0]
 8004d0e:	463b      	mov	r3, r7
 8004d10:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d12:	463b      	mov	r3, r7
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	785b      	ldrb	r3, [r3, #1]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	f040 8557 	bne.w	80057cc <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004d1e:	463b      	mov	r3, r7
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	699a      	ldr	r2, [r3, #24]
 8004d24:	463b      	mov	r3, r7
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d905      	bls.n	8004d3a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004d2e:	463b      	mov	r3, r7
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004d38:	e004      	b.n	8004d44 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004d3a:	463b      	mov	r3, r7
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004d44:	463b      	mov	r3, r7
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	7b1b      	ldrb	r3, [r3, #12]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d12c      	bne.n	8004da8 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004d4e:	463b      	mov	r3, r7
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6959      	ldr	r1, [r3, #20]
 8004d54:	463b      	mov	r3, r7
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	88da      	ldrh	r2, [r3, #6]
 8004d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	1d38      	adds	r0, r7, #4
 8004d62:	6800      	ldr	r0, [r0, #0]
 8004d64:	f001 fa2c 	bl	80061c0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d68:	1d3b      	adds	r3, r7, #4
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	617b      	str	r3, [r7, #20]
 8004d6e:	1d3b      	adds	r3, r7, #4
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	461a      	mov	r2, r3
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	463b      	mov	r3, r7
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	011a      	lsls	r2, r3, #4
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004d90:	f107 0310 	add.w	r3, r7, #16
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	f107 0310 	add.w	r3, r7, #16
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	801a      	strh	r2, [r3, #0]
 8004da4:	f000 bcdd 	b.w	8005762 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004da8:	463b      	mov	r3, r7
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	78db      	ldrb	r3, [r3, #3]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	f040 8347 	bne.w	8005442 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004db4:	463b      	mov	r3, r7
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6a1a      	ldr	r2, [r3, #32]
 8004dba:	463b      	mov	r3, r7
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	f240 82eb 	bls.w	800539c <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004dc6:	1d3b      	adds	r3, r7, #4
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	463b      	mov	r3, r7
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004de4:	1d3b      	adds	r3, r7, #4
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	463b      	mov	r3, r7
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	441a      	add	r2, r3
 8004df2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004df6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dfe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004e0a:	463b      	mov	r3, r7
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6a1a      	ldr	r2, [r3, #32]
 8004e10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e14:	1ad2      	subs	r2, r2, r3
 8004e16:	463b      	mov	r3, r7
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004e1c:	1d3b      	adds	r3, r7, #4
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	463b      	mov	r3, r7
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 8159 	beq.w	80050ea <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e38:	1d3b      	adds	r3, r7, #4
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e3e:	463b      	mov	r3, r7
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	785b      	ldrb	r3, [r3, #1]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d164      	bne.n	8004f12 <USB_EPStartXfer+0x20e>
 8004e48:	1d3b      	adds	r3, r7, #4
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e4e:	1d3b      	adds	r3, r7, #4
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	461a      	mov	r2, r3
 8004e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5c:	4413      	add	r3, r2
 8004e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e60:	463b      	mov	r3, r7
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	011a      	lsls	r2, r3, #4
 8004e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d112      	bne.n	8004ea0 <USB_EPStartXfer+0x19c>
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e88:	801a      	strh	r2, [r3, #0]
 8004e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9c:	801a      	strh	r2, [r3, #0]
 8004e9e:	e054      	b.n	8004f4a <USB_EPStartXfer+0x246>
 8004ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ea4:	2b3e      	cmp	r3, #62	; 0x3e
 8004ea6:	d817      	bhi.n	8004ed8 <USB_EPStartXfer+0x1d4>
 8004ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eac:	085b      	lsrs	r3, r3, #1
 8004eae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d004      	beq.n	8004ec8 <USB_EPStartXfer+0x1c4>
 8004ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	029b      	lsls	r3, r3, #10
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed4:	801a      	strh	r2, [r3, #0]
 8004ed6:	e038      	b.n	8004f4a <USB_EPStartXfer+0x246>
 8004ed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004edc:	095b      	lsrs	r3, r3, #5
 8004ede:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ee6:	f003 031f 	and.w	r3, r3, #31
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d104      	bne.n	8004ef8 <USB_EPStartXfer+0x1f4>
 8004eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	029b      	lsls	r3, r3, #10
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0e:	801a      	strh	r2, [r3, #0]
 8004f10:	e01b      	b.n	8004f4a <USB_EPStartXfer+0x246>
 8004f12:	463b      	mov	r3, r7
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	785b      	ldrb	r3, [r3, #1]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d116      	bne.n	8004f4a <USB_EPStartXfer+0x246>
 8004f1c:	1d3b      	adds	r3, r7, #4
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	461a      	mov	r2, r3
 8004f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2a:	4413      	add	r3, r2
 8004f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f2e:	463b      	mov	r3, r7
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	011a      	lsls	r2, r3, #4
 8004f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f38:	4413      	add	r3, r2
 8004f3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f3e:	633b      	str	r3, [r7, #48]	; 0x30
 8004f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004f4a:	463b      	mov	r3, r7
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	895b      	ldrh	r3, [r3, #10]
 8004f50:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f54:	463b      	mov	r3, r7
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6959      	ldr	r1, [r3, #20]
 8004f5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004f64:	1d38      	adds	r0, r7, #4
 8004f66:	6800      	ldr	r0, [r0, #0]
 8004f68:	f001 f92a 	bl	80061c0 <USB_WritePMA>
            ep->xfer_buff += len;
 8004f6c:	463b      	mov	r3, r7
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	695a      	ldr	r2, [r3, #20]
 8004f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f76:	441a      	add	r2, r3
 8004f78:	463b      	mov	r3, r7
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004f7e:	463b      	mov	r3, r7
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6a1a      	ldr	r2, [r3, #32]
 8004f84:	463b      	mov	r3, r7
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d909      	bls.n	8004fa2 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8004f8e:	463b      	mov	r3, r7
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6a1a      	ldr	r2, [r3, #32]
 8004f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f98:	1ad2      	subs	r2, r2, r3
 8004f9a:	463b      	mov	r3, r7
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	621a      	str	r2, [r3, #32]
 8004fa0:	e008      	b.n	8004fb4 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004fa2:	463b      	mov	r3, r7
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004fac:	463b      	mov	r3, r7
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fb4:	463b      	mov	r3, r7
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	785b      	ldrb	r3, [r3, #1]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d164      	bne.n	8005088 <USB_EPStartXfer+0x384>
 8004fbe:	1d3b      	adds	r3, r7, #4
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	61fb      	str	r3, [r7, #28]
 8004fc4:	1d3b      	adds	r3, r7, #4
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	461a      	mov	r2, r3
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	61fb      	str	r3, [r7, #28]
 8004fd6:	463b      	mov	r3, r7
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	011a      	lsls	r2, r3, #4
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fe6:	61bb      	str	r3, [r7, #24]
 8004fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d112      	bne.n	8005016 <USB_EPStartXfer+0x312>
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	881b      	ldrh	r3, [r3, #0]
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	801a      	strh	r2, [r3, #0]
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	b29b      	uxth	r3, r3
 8005006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800500a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800500e:	b29a      	uxth	r2, r3
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	801a      	strh	r2, [r3, #0]
 8005014:	e057      	b.n	80050c6 <USB_EPStartXfer+0x3c2>
 8005016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800501a:	2b3e      	cmp	r3, #62	; 0x3e
 800501c:	d817      	bhi.n	800504e <USB_EPStartXfer+0x34a>
 800501e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005022:	085b      	lsrs	r3, r3, #1
 8005024:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005028:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b00      	cmp	r3, #0
 8005032:	d004      	beq.n	800503e <USB_EPStartXfer+0x33a>
 8005034:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005038:	3301      	adds	r3, #1
 800503a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800503e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005042:	b29b      	uxth	r3, r3
 8005044:	029b      	lsls	r3, r3, #10
 8005046:	b29a      	uxth	r2, r3
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	801a      	strh	r2, [r3, #0]
 800504c:	e03b      	b.n	80050c6 <USB_EPStartXfer+0x3c2>
 800504e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005052:	095b      	lsrs	r3, r3, #5
 8005054:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005058:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800505c:	f003 031f 	and.w	r3, r3, #31
 8005060:	2b00      	cmp	r3, #0
 8005062:	d104      	bne.n	800506e <USB_EPStartXfer+0x36a>
 8005064:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005068:	3b01      	subs	r3, #1
 800506a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800506e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005072:	b29b      	uxth	r3, r3
 8005074:	029b      	lsls	r3, r3, #10
 8005076:	b29b      	uxth	r3, r3
 8005078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800507c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005080:	b29a      	uxth	r2, r3
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	801a      	strh	r2, [r3, #0]
 8005086:	e01e      	b.n	80050c6 <USB_EPStartXfer+0x3c2>
 8005088:	463b      	mov	r3, r7
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	785b      	ldrb	r3, [r3, #1]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d119      	bne.n	80050c6 <USB_EPStartXfer+0x3c2>
 8005092:	1d3b      	adds	r3, r7, #4
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	627b      	str	r3, [r7, #36]	; 0x24
 8005098:	1d3b      	adds	r3, r7, #4
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	461a      	mov	r2, r3
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	4413      	add	r3, r2
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
 80050aa:	463b      	mov	r3, r7
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	011a      	lsls	r2, r3, #4
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	4413      	add	r3, r2
 80050b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050ba:	623b      	str	r3, [r7, #32]
 80050bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80050c6:	463b      	mov	r3, r7
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	891b      	ldrh	r3, [r3, #8]
 80050cc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050d0:	463b      	mov	r3, r7
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6959      	ldr	r1, [r3, #20]
 80050d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050da:	b29b      	uxth	r3, r3
 80050dc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80050e0:	1d38      	adds	r0, r7, #4
 80050e2:	6800      	ldr	r0, [r0, #0]
 80050e4:	f001 f86c 	bl	80061c0 <USB_WritePMA>
 80050e8:	e33b      	b.n	8005762 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80050ea:	463b      	mov	r3, r7
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	785b      	ldrb	r3, [r3, #1]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d164      	bne.n	80051be <USB_EPStartXfer+0x4ba>
 80050f4:	1d3b      	adds	r3, r7, #4
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050fa:	1d3b      	adds	r3, r7, #4
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005102:	b29b      	uxth	r3, r3
 8005104:	461a      	mov	r2, r3
 8005106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005108:	4413      	add	r3, r2
 800510a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800510c:	463b      	mov	r3, r7
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	011a      	lsls	r2, r3, #4
 8005114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005116:	4413      	add	r3, r2
 8005118:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800511c:	64bb      	str	r3, [r7, #72]	; 0x48
 800511e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005122:	2b00      	cmp	r3, #0
 8005124:	d112      	bne.n	800514c <USB_EPStartXfer+0x448>
 8005126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	b29b      	uxth	r3, r3
 800512c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005130:	b29a      	uxth	r2, r3
 8005132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005134:	801a      	strh	r2, [r3, #0]
 8005136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	b29b      	uxth	r3, r3
 800513c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005144:	b29a      	uxth	r2, r3
 8005146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005148:	801a      	strh	r2, [r3, #0]
 800514a:	e057      	b.n	80051fc <USB_EPStartXfer+0x4f8>
 800514c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005150:	2b3e      	cmp	r3, #62	; 0x3e
 8005152:	d817      	bhi.n	8005184 <USB_EPStartXfer+0x480>
 8005154:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005158:	085b      	lsrs	r3, r3, #1
 800515a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800515e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d004      	beq.n	8005174 <USB_EPStartXfer+0x470>
 800516a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800516e:	3301      	adds	r3, #1
 8005170:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005178:	b29b      	uxth	r3, r3
 800517a:	029b      	lsls	r3, r3, #10
 800517c:	b29a      	uxth	r2, r3
 800517e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005180:	801a      	strh	r2, [r3, #0]
 8005182:	e03b      	b.n	80051fc <USB_EPStartXfer+0x4f8>
 8005184:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005188:	095b      	lsrs	r3, r3, #5
 800518a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800518e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005192:	f003 031f 	and.w	r3, r3, #31
 8005196:	2b00      	cmp	r3, #0
 8005198:	d104      	bne.n	80051a4 <USB_EPStartXfer+0x4a0>
 800519a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800519e:	3b01      	subs	r3, #1
 80051a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80051a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	029b      	lsls	r3, r3, #10
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ba:	801a      	strh	r2, [r3, #0]
 80051bc:	e01e      	b.n	80051fc <USB_EPStartXfer+0x4f8>
 80051be:	463b      	mov	r3, r7
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	785b      	ldrb	r3, [r3, #1]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d119      	bne.n	80051fc <USB_EPStartXfer+0x4f8>
 80051c8:	1d3b      	adds	r3, r7, #4
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	657b      	str	r3, [r7, #84]	; 0x54
 80051ce:	1d3b      	adds	r3, r7, #4
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	461a      	mov	r2, r3
 80051da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051dc:	4413      	add	r3, r2
 80051de:	657b      	str	r3, [r7, #84]	; 0x54
 80051e0:	463b      	mov	r3, r7
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	011a      	lsls	r2, r3, #4
 80051e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051ea:	4413      	add	r3, r2
 80051ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051f0:	653b      	str	r3, [r7, #80]	; 0x50
 80051f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80051fc:	463b      	mov	r3, r7
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	891b      	ldrh	r3, [r3, #8]
 8005202:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005206:	463b      	mov	r3, r7
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	6959      	ldr	r1, [r3, #20]
 800520c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005210:	b29b      	uxth	r3, r3
 8005212:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005216:	1d38      	adds	r0, r7, #4
 8005218:	6800      	ldr	r0, [r0, #0]
 800521a:	f000 ffd1 	bl	80061c0 <USB_WritePMA>
            ep->xfer_buff += len;
 800521e:	463b      	mov	r3, r7
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695a      	ldr	r2, [r3, #20]
 8005224:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005228:	441a      	add	r2, r3
 800522a:	463b      	mov	r3, r7
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005230:	463b      	mov	r3, r7
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6a1a      	ldr	r2, [r3, #32]
 8005236:	463b      	mov	r3, r7
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	429a      	cmp	r2, r3
 800523e:	d909      	bls.n	8005254 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8005240:	463b      	mov	r3, r7
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6a1a      	ldr	r2, [r3, #32]
 8005246:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800524a:	1ad2      	subs	r2, r2, r3
 800524c:	463b      	mov	r3, r7
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	621a      	str	r2, [r3, #32]
 8005252:	e008      	b.n	8005266 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005254:	463b      	mov	r3, r7
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800525e:	463b      	mov	r3, r7
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2200      	movs	r2, #0
 8005264:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005266:	1d3b      	adds	r3, r7, #4
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	647b      	str	r3, [r7, #68]	; 0x44
 800526c:	463b      	mov	r3, r7
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	785b      	ldrb	r3, [r3, #1]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d164      	bne.n	8005340 <USB_EPStartXfer+0x63c>
 8005276:	1d3b      	adds	r3, r7, #4
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800527c:	1d3b      	adds	r3, r7, #4
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005284:	b29b      	uxth	r3, r3
 8005286:	461a      	mov	r2, r3
 8005288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800528a:	4413      	add	r3, r2
 800528c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800528e:	463b      	mov	r3, r7
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	011a      	lsls	r2, r3, #4
 8005296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005298:	4413      	add	r3, r2
 800529a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800529e:	63bb      	str	r3, [r7, #56]	; 0x38
 80052a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d112      	bne.n	80052ce <USB_EPStartXfer+0x5ca>
 80052a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b6:	801a      	strh	r2, [r3, #0]
 80052b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ca:	801a      	strh	r2, [r3, #0]
 80052cc:	e054      	b.n	8005378 <USB_EPStartXfer+0x674>
 80052ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052d2:	2b3e      	cmp	r3, #62	; 0x3e
 80052d4:	d817      	bhi.n	8005306 <USB_EPStartXfer+0x602>
 80052d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052da:	085b      	lsrs	r3, r3, #1
 80052dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80052e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d004      	beq.n	80052f6 <USB_EPStartXfer+0x5f2>
 80052ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052f0:	3301      	adds	r3, #1
 80052f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80052f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	029b      	lsls	r3, r3, #10
 80052fe:	b29a      	uxth	r2, r3
 8005300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005302:	801a      	strh	r2, [r3, #0]
 8005304:	e038      	b.n	8005378 <USB_EPStartXfer+0x674>
 8005306:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800530a:	095b      	lsrs	r3, r3, #5
 800530c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005310:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005314:	f003 031f 	and.w	r3, r3, #31
 8005318:	2b00      	cmp	r3, #0
 800531a:	d104      	bne.n	8005326 <USB_EPStartXfer+0x622>
 800531c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005320:	3b01      	subs	r3, #1
 8005322:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005326:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800532a:	b29b      	uxth	r3, r3
 800532c:	029b      	lsls	r3, r3, #10
 800532e:	b29b      	uxth	r3, r3
 8005330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005338:	b29a      	uxth	r2, r3
 800533a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533c:	801a      	strh	r2, [r3, #0]
 800533e:	e01b      	b.n	8005378 <USB_EPStartXfer+0x674>
 8005340:	463b      	mov	r3, r7
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	785b      	ldrb	r3, [r3, #1]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d116      	bne.n	8005378 <USB_EPStartXfer+0x674>
 800534a:	1d3b      	adds	r3, r7, #4
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005352:	b29b      	uxth	r3, r3
 8005354:	461a      	mov	r2, r3
 8005356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005358:	4413      	add	r3, r2
 800535a:	647b      	str	r3, [r7, #68]	; 0x44
 800535c:	463b      	mov	r3, r7
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	011a      	lsls	r2, r3, #4
 8005364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005366:	4413      	add	r3, r2
 8005368:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800536c:	643b      	str	r3, [r7, #64]	; 0x40
 800536e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005372:	b29a      	uxth	r2, r3
 8005374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005376:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005378:	463b      	mov	r3, r7
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	895b      	ldrh	r3, [r3, #10]
 800537e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005382:	463b      	mov	r3, r7
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6959      	ldr	r1, [r3, #20]
 8005388:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800538c:	b29b      	uxth	r3, r3
 800538e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005392:	1d38      	adds	r0, r7, #4
 8005394:	6800      	ldr	r0, [r0, #0]
 8005396:	f000 ff13 	bl	80061c0 <USB_WritePMA>
 800539a:	e1e2      	b.n	8005762 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800539c:	463b      	mov	r3, r7
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80053a6:	1d3b      	adds	r3, r7, #4
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	463b      	mov	r3, r7
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80053bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80053c4:	1d3b      	adds	r3, r7, #4
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	463b      	mov	r3, r7
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	441a      	add	r2, r3
 80053d2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80053d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80053ea:	1d3b      	adds	r3, r7, #4
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	663b      	str	r3, [r7, #96]	; 0x60
 80053f0:	1d3b      	adds	r3, r7, #4
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	461a      	mov	r2, r3
 80053fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053fe:	4413      	add	r3, r2
 8005400:	663b      	str	r3, [r7, #96]	; 0x60
 8005402:	463b      	mov	r3, r7
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	011a      	lsls	r2, r3, #4
 800540a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800540c:	4413      	add	r3, r2
 800540e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005412:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005414:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005418:	b29a      	uxth	r2, r3
 800541a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800541c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800541e:	463b      	mov	r3, r7
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	891b      	ldrh	r3, [r3, #8]
 8005424:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005428:	463b      	mov	r3, r7
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6959      	ldr	r1, [r3, #20]
 800542e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005432:	b29b      	uxth	r3, r3
 8005434:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005438:	1d38      	adds	r0, r7, #4
 800543a:	6800      	ldr	r0, [r0, #0]
 800543c:	f000 fec0 	bl	80061c0 <USB_WritePMA>
 8005440:	e18f      	b.n	8005762 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005442:	1d3b      	adds	r3, r7, #4
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	463b      	mov	r3, r7
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	b29b      	uxth	r3, r3
 8005454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 808f 	beq.w	800557c <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800545e:	1d3b      	adds	r3, r7, #4
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	67bb      	str	r3, [r7, #120]	; 0x78
 8005464:	463b      	mov	r3, r7
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	785b      	ldrb	r3, [r3, #1]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d164      	bne.n	8005538 <USB_EPStartXfer+0x834>
 800546e:	1d3b      	adds	r3, r7, #4
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	673b      	str	r3, [r7, #112]	; 0x70
 8005474:	1d3b      	adds	r3, r7, #4
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800547c:	b29b      	uxth	r3, r3
 800547e:	461a      	mov	r2, r3
 8005480:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005482:	4413      	add	r3, r2
 8005484:	673b      	str	r3, [r7, #112]	; 0x70
 8005486:	463b      	mov	r3, r7
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	011a      	lsls	r2, r3, #4
 800548e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005490:	4413      	add	r3, r2
 8005492:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005496:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005498:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800549c:	2b00      	cmp	r3, #0
 800549e:	d112      	bne.n	80054c6 <USB_EPStartXfer+0x7c2>
 80054a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ae:	801a      	strh	r2, [r3, #0]
 80054b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054be:	b29a      	uxth	r2, r3
 80054c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c2:	801a      	strh	r2, [r3, #0]
 80054c4:	e054      	b.n	8005570 <USB_EPStartXfer+0x86c>
 80054c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054ca:	2b3e      	cmp	r3, #62	; 0x3e
 80054cc:	d817      	bhi.n	80054fe <USB_EPStartXfer+0x7fa>
 80054ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054d2:	085b      	lsrs	r3, r3, #1
 80054d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80054d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d004      	beq.n	80054ee <USB_EPStartXfer+0x7ea>
 80054e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e8:	3301      	adds	r3, #1
 80054ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80054ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	029b      	lsls	r3, r3, #10
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054fa:	801a      	strh	r2, [r3, #0]
 80054fc:	e038      	b.n	8005570 <USB_EPStartXfer+0x86c>
 80054fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005502:	095b      	lsrs	r3, r3, #5
 8005504:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005508:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800550c:	f003 031f 	and.w	r3, r3, #31
 8005510:	2b00      	cmp	r3, #0
 8005512:	d104      	bne.n	800551e <USB_EPStartXfer+0x81a>
 8005514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005518:	3b01      	subs	r3, #1
 800551a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800551e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005522:	b29b      	uxth	r3, r3
 8005524:	029b      	lsls	r3, r3, #10
 8005526:	b29b      	uxth	r3, r3
 8005528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800552c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005530:	b29a      	uxth	r2, r3
 8005532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005534:	801a      	strh	r2, [r3, #0]
 8005536:	e01b      	b.n	8005570 <USB_EPStartXfer+0x86c>
 8005538:	463b      	mov	r3, r7
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	785b      	ldrb	r3, [r3, #1]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d116      	bne.n	8005570 <USB_EPStartXfer+0x86c>
 8005542:	1d3b      	adds	r3, r7, #4
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800554a:	b29b      	uxth	r3, r3
 800554c:	461a      	mov	r2, r3
 800554e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005550:	4413      	add	r3, r2
 8005552:	67bb      	str	r3, [r7, #120]	; 0x78
 8005554:	463b      	mov	r3, r7
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	011a      	lsls	r2, r3, #4
 800555c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800555e:	4413      	add	r3, r2
 8005560:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005564:	677b      	str	r3, [r7, #116]	; 0x74
 8005566:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800556a:	b29a      	uxth	r2, r3
 800556c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800556e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005570:	463b      	mov	r3, r7
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	895b      	ldrh	r3, [r3, #10]
 8005576:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800557a:	e097      	b.n	80056ac <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800557c:	463b      	mov	r3, r7
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	785b      	ldrb	r3, [r3, #1]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d168      	bne.n	8005658 <USB_EPStartXfer+0x954>
 8005586:	1d3b      	adds	r3, r7, #4
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800558e:	1d3b      	adds	r3, r7, #4
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005596:	b29b      	uxth	r3, r3
 8005598:	461a      	mov	r2, r3
 800559a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800559e:	4413      	add	r3, r2
 80055a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055a4:	463b      	mov	r3, r7
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	011a      	lsls	r2, r3, #4
 80055ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80055b0:	4413      	add	r3, r2
 80055b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80055b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d112      	bne.n	80055e6 <USB_EPStartXfer+0x8e2>
 80055c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055ce:	801a      	strh	r2, [r3, #0]
 80055d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055de:	b29a      	uxth	r2, r3
 80055e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055e2:	801a      	strh	r2, [r3, #0]
 80055e4:	e05d      	b.n	80056a2 <USB_EPStartXfer+0x99e>
 80055e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ea:	2b3e      	cmp	r3, #62	; 0x3e
 80055ec:	d817      	bhi.n	800561e <USB_EPStartXfer+0x91a>
 80055ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055f2:	085b      	lsrs	r3, r3, #1
 80055f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80055f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b00      	cmp	r3, #0
 8005602:	d004      	beq.n	800560e <USB_EPStartXfer+0x90a>
 8005604:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005608:	3301      	adds	r3, #1
 800560a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800560e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005612:	b29b      	uxth	r3, r3
 8005614:	029b      	lsls	r3, r3, #10
 8005616:	b29a      	uxth	r2, r3
 8005618:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800561a:	801a      	strh	r2, [r3, #0]
 800561c:	e041      	b.n	80056a2 <USB_EPStartXfer+0x99e>
 800561e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005622:	095b      	lsrs	r3, r3, #5
 8005624:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005628:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800562c:	f003 031f 	and.w	r3, r3, #31
 8005630:	2b00      	cmp	r3, #0
 8005632:	d104      	bne.n	800563e <USB_EPStartXfer+0x93a>
 8005634:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005638:	3b01      	subs	r3, #1
 800563a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800563e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005642:	b29b      	uxth	r3, r3
 8005644:	029b      	lsls	r3, r3, #10
 8005646:	b29b      	uxth	r3, r3
 8005648:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800564c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005650:	b29a      	uxth	r2, r3
 8005652:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005654:	801a      	strh	r2, [r3, #0]
 8005656:	e024      	b.n	80056a2 <USB_EPStartXfer+0x99e>
 8005658:	463b      	mov	r3, r7
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	785b      	ldrb	r3, [r3, #1]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d11f      	bne.n	80056a2 <USB_EPStartXfer+0x99e>
 8005662:	1d3b      	adds	r3, r7, #4
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800566a:	1d3b      	adds	r3, r7, #4
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005672:	b29b      	uxth	r3, r3
 8005674:	461a      	mov	r2, r3
 8005676:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800567a:	4413      	add	r3, r2
 800567c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005680:	463b      	mov	r3, r7
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	011a      	lsls	r2, r3, #4
 8005688:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800568c:	4413      	add	r3, r2
 800568e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005692:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005696:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800569a:	b29a      	uxth	r2, r3
 800569c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056a0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80056a2:	463b      	mov	r3, r7
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	891b      	ldrh	r3, [r3, #8]
 80056a8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056ac:	463b      	mov	r3, r7
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6959      	ldr	r1, [r3, #20]
 80056b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80056bc:	1d38      	adds	r0, r7, #4
 80056be:	6800      	ldr	r0, [r0, #0]
 80056c0:	f000 fd7e 	bl	80061c0 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80056c4:	463b      	mov	r3, r7
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	785b      	ldrb	r3, [r3, #1]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d122      	bne.n	8005714 <USB_EPStartXfer+0xa10>
 80056ce:	1d3b      	adds	r3, r7, #4
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	463b      	mov	r3, r7
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	881b      	ldrh	r3, [r3, #0]
 80056de:	b29b      	uxth	r3, r3
 80056e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80056ec:	1d3b      	adds	r3, r7, #4
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	463b      	mov	r3, r7
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	441a      	add	r2, r3
 80056fa:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80056fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800570a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800570e:	b29b      	uxth	r3, r3
 8005710:	8013      	strh	r3, [r2, #0]
 8005712:	e026      	b.n	8005762 <USB_EPStartXfer+0xa5e>
 8005714:	463b      	mov	r3, r7
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	785b      	ldrb	r3, [r3, #1]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d121      	bne.n	8005762 <USB_EPStartXfer+0xa5e>
 800571e:	1d3b      	adds	r3, r7, #4
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	463b      	mov	r3, r7
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4413      	add	r3, r2
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	b29b      	uxth	r3, r3
 8005730:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005738:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800573c:	1d3b      	adds	r3, r7, #4
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	463b      	mov	r3, r7
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	441a      	add	r2, r3
 800574a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800574e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005752:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005756:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800575a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800575e:	b29b      	uxth	r3, r3
 8005760:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005762:	1d3b      	adds	r3, r7, #4
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	463b      	mov	r3, r7
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	b29b      	uxth	r3, r3
 8005774:	f107 020e 	add.w	r2, r7, #14
 8005778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800577c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005780:	8013      	strh	r3, [r2, #0]
 8005782:	f107 030e 	add.w	r3, r7, #14
 8005786:	f107 020e 	add.w	r2, r7, #14
 800578a:	8812      	ldrh	r2, [r2, #0]
 800578c:	f082 0210 	eor.w	r2, r2, #16
 8005790:	801a      	strh	r2, [r3, #0]
 8005792:	f107 030e 	add.w	r3, r7, #14
 8005796:	f107 020e 	add.w	r2, r7, #14
 800579a:	8812      	ldrh	r2, [r2, #0]
 800579c:	f082 0220 	eor.w	r2, r2, #32
 80057a0:	801a      	strh	r2, [r3, #0]
 80057a2:	1d3b      	adds	r3, r7, #4
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	463b      	mov	r3, r7
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	441a      	add	r2, r3
 80057b0:	f107 030e 	add.w	r3, r7, #14
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	8013      	strh	r3, [r2, #0]
 80057ca:	e3b5      	b.n	8005f38 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80057cc:	463b      	mov	r3, r7
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	7b1b      	ldrb	r3, [r3, #12]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f040 8090 	bne.w	80058f8 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80057d8:	463b      	mov	r3, r7
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	699a      	ldr	r2, [r3, #24]
 80057de:	463b      	mov	r3, r7
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d90e      	bls.n	8005806 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80057e8:	463b      	mov	r3, r7
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80057f2:	463b      	mov	r3, r7
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	699a      	ldr	r2, [r3, #24]
 80057f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057fc:	1ad2      	subs	r2, r2, r3
 80057fe:	463b      	mov	r3, r7
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	619a      	str	r2, [r3, #24]
 8005804:	e008      	b.n	8005818 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8005806:	463b      	mov	r3, r7
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8005810:	463b      	mov	r3, r7
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2200      	movs	r2, #0
 8005816:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005818:	1d3b      	adds	r3, r7, #4
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005820:	1d3b      	adds	r3, r7, #4
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005828:	b29b      	uxth	r3, r3
 800582a:	461a      	mov	r2, r3
 800582c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005830:	4413      	add	r3, r2
 8005832:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005836:	463b      	mov	r3, r7
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	011a      	lsls	r2, r3, #4
 800583e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005842:	4413      	add	r3, r2
 8005844:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005848:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800584c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005850:	2b00      	cmp	r3, #0
 8005852:	d116      	bne.n	8005882 <USB_EPStartXfer+0xb7e>
 8005854:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	b29b      	uxth	r3, r3
 800585c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005860:	b29a      	uxth	r2, r3
 8005862:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005866:	801a      	strh	r2, [r3, #0]
 8005868:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	b29b      	uxth	r3, r3
 8005870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005878:	b29a      	uxth	r2, r3
 800587a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800587e:	801a      	strh	r2, [r3, #0]
 8005880:	e32c      	b.n	8005edc <USB_EPStartXfer+0x11d8>
 8005882:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005886:	2b3e      	cmp	r3, #62	; 0x3e
 8005888:	d818      	bhi.n	80058bc <USB_EPStartXfer+0xbb8>
 800588a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800588e:	085b      	lsrs	r3, r3, #1
 8005890:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005894:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d004      	beq.n	80058aa <USB_EPStartXfer+0xba6>
 80058a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058a4:	3301      	adds	r3, #1
 80058a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80058aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	029b      	lsls	r3, r3, #10
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058b8:	801a      	strh	r2, [r3, #0]
 80058ba:	e30f      	b.n	8005edc <USB_EPStartXfer+0x11d8>
 80058bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058c0:	095b      	lsrs	r3, r3, #5
 80058c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80058c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058ca:	f003 031f 	and.w	r3, r3, #31
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d104      	bne.n	80058dc <USB_EPStartXfer+0xbd8>
 80058d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058d6:	3b01      	subs	r3, #1
 80058d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80058dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	029b      	lsls	r3, r3, #10
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058f4:	801a      	strh	r2, [r3, #0]
 80058f6:	e2f1      	b.n	8005edc <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80058f8:	463b      	mov	r3, r7
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	78db      	ldrb	r3, [r3, #3]
 80058fe:	2b02      	cmp	r3, #2
 8005900:	f040 818f 	bne.w	8005c22 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005904:	463b      	mov	r3, r7
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	785b      	ldrb	r3, [r3, #1]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d175      	bne.n	80059fa <USB_EPStartXfer+0xcf6>
 800590e:	1d3b      	adds	r3, r7, #4
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005916:	1d3b      	adds	r3, r7, #4
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800591e:	b29b      	uxth	r3, r3
 8005920:	461a      	mov	r2, r3
 8005922:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005926:	4413      	add	r3, r2
 8005928:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800592c:	463b      	mov	r3, r7
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	011a      	lsls	r2, r3, #4
 8005934:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005938:	4413      	add	r3, r2
 800593a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800593e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005942:	463b      	mov	r3, r7
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d116      	bne.n	800597a <USB_EPStartXfer+0xc76>
 800594c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	b29b      	uxth	r3, r3
 8005954:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005958:	b29a      	uxth	r2, r3
 800595a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800595e:	801a      	strh	r2, [r3, #0]
 8005960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	b29b      	uxth	r3, r3
 8005968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800596c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005970:	b29a      	uxth	r2, r3
 8005972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005976:	801a      	strh	r2, [r3, #0]
 8005978:	e065      	b.n	8005a46 <USB_EPStartXfer+0xd42>
 800597a:	463b      	mov	r3, r7
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	2b3e      	cmp	r3, #62	; 0x3e
 8005982:	d81a      	bhi.n	80059ba <USB_EPStartXfer+0xcb6>
 8005984:	463b      	mov	r3, r7
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	085b      	lsrs	r3, r3, #1
 800598c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005990:	463b      	mov	r3, r7
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d004      	beq.n	80059a8 <USB_EPStartXfer+0xca4>
 800599e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059a2:	3301      	adds	r3, #1
 80059a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80059a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	029b      	lsls	r3, r3, #10
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059b6:	801a      	strh	r2, [r3, #0]
 80059b8:	e045      	b.n	8005a46 <USB_EPStartXfer+0xd42>
 80059ba:	463b      	mov	r3, r7
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	095b      	lsrs	r3, r3, #5
 80059c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80059c6:	463b      	mov	r3, r7
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	f003 031f 	and.w	r3, r3, #31
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d104      	bne.n	80059de <USB_EPStartXfer+0xcda>
 80059d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059d8:	3b01      	subs	r3, #1
 80059da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80059de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	029b      	lsls	r3, r3, #10
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059f6:	801a      	strh	r2, [r3, #0]
 80059f8:	e025      	b.n	8005a46 <USB_EPStartXfer+0xd42>
 80059fa:	463b      	mov	r3, r7
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	785b      	ldrb	r3, [r3, #1]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d120      	bne.n	8005a46 <USB_EPStartXfer+0xd42>
 8005a04:	1d3b      	adds	r3, r7, #4
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a0c:	1d3b      	adds	r3, r7, #4
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	461a      	mov	r2, r3
 8005a18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a22:	463b      	mov	r3, r7
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	011a      	lsls	r2, r3, #4
 8005a2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a2e:	4413      	add	r3, r2
 8005a30:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a38:	463b      	mov	r3, r7
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005a44:	801a      	strh	r2, [r3, #0]
 8005a46:	1d3b      	adds	r3, r7, #4
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a4e:	463b      	mov	r3, r7
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	785b      	ldrb	r3, [r3, #1]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d175      	bne.n	8005b44 <USB_EPStartXfer+0xe40>
 8005a58:	1d3b      	adds	r3, r7, #4
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a60:	1d3b      	adds	r3, r7, #4
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a70:	4413      	add	r3, r2
 8005a72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a76:	463b      	mov	r3, r7
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	011a      	lsls	r2, r3, #4
 8005a7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a82:	4413      	add	r3, r2
 8005a84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a8c:	463b      	mov	r3, r7
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d116      	bne.n	8005ac4 <USB_EPStartXfer+0xdc0>
 8005a96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005aa8:	801a      	strh	r2, [r3, #0]
 8005aaa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005aae:	881b      	ldrh	r3, [r3, #0]
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ac0:	801a      	strh	r2, [r3, #0]
 8005ac2:	e061      	b.n	8005b88 <USB_EPStartXfer+0xe84>
 8005ac4:	463b      	mov	r3, r7
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	2b3e      	cmp	r3, #62	; 0x3e
 8005acc:	d81a      	bhi.n	8005b04 <USB_EPStartXfer+0xe00>
 8005ace:	463b      	mov	r3, r7
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	085b      	lsrs	r3, r3, #1
 8005ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ada:	463b      	mov	r3, r7
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d004      	beq.n	8005af2 <USB_EPStartXfer+0xdee>
 8005ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aec:	3301      	adds	r3, #1
 8005aee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	029b      	lsls	r3, r3, #10
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b00:	801a      	strh	r2, [r3, #0]
 8005b02:	e041      	b.n	8005b88 <USB_EPStartXfer+0xe84>
 8005b04:	463b      	mov	r3, r7
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	095b      	lsrs	r3, r3, #5
 8005b0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b10:	463b      	mov	r3, r7
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	f003 031f 	and.w	r3, r3, #31
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d104      	bne.n	8005b28 <USB_EPStartXfer+0xe24>
 8005b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b22:	3b01      	subs	r3, #1
 8005b24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	029b      	lsls	r3, r3, #10
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b40:	801a      	strh	r2, [r3, #0]
 8005b42:	e021      	b.n	8005b88 <USB_EPStartXfer+0xe84>
 8005b44:	463b      	mov	r3, r7
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	785b      	ldrb	r3, [r3, #1]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d11c      	bne.n	8005b88 <USB_EPStartXfer+0xe84>
 8005b4e:	1d3b      	adds	r3, r7, #4
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	461a      	mov	r2, r3
 8005b5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b5e:	4413      	add	r3, r2
 8005b60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b64:	463b      	mov	r3, r7
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	011a      	lsls	r2, r3, #4
 8005b6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b70:	4413      	add	r3, r2
 8005b72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005b7a:	463b      	mov	r3, r7
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b86:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005b88:	463b      	mov	r3, r7
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 81a4 	beq.w	8005edc <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005b94:	1d3b      	adds	r3, r7, #4
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	463b      	mov	r3, r7
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ba8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d005      	beq.n	8005bc0 <USB_EPStartXfer+0xebc>
 8005bb4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10d      	bne.n	8005bdc <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005bc0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005bc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f040 8187 	bne.w	8005edc <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005bce:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f040 8180 	bne.w	8005edc <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005bdc:	1d3b      	adds	r3, r7, #4
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	463b      	mov	r3, r7
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005bfa:	1d3b      	adds	r3, r7, #4
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	463b      	mov	r3, r7
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	441a      	add	r2, r3
 8005c08:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	8013      	strh	r3, [r2, #0]
 8005c20:	e15c      	b.n	8005edc <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005c22:	463b      	mov	r3, r7
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	78db      	ldrb	r3, [r3, #3]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	f040 8155 	bne.w	8005ed8 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005c2e:	463b      	mov	r3, r7
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	699a      	ldr	r2, [r3, #24]
 8005c34:	463b      	mov	r3, r7
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d90e      	bls.n	8005c5c <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005c3e:	463b      	mov	r3, r7
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005c48:	463b      	mov	r3, r7
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	699a      	ldr	r2, [r3, #24]
 8005c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c52:	1ad2      	subs	r2, r2, r3
 8005c54:	463b      	mov	r3, r7
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	619a      	str	r2, [r3, #24]
 8005c5a:	e008      	b.n	8005c6e <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005c5c:	463b      	mov	r3, r7
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005c66:	463b      	mov	r3, r7
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005c6e:	463b      	mov	r3, r7
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	785b      	ldrb	r3, [r3, #1]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d16f      	bne.n	8005d58 <USB_EPStartXfer+0x1054>
 8005c78:	1d3b      	adds	r3, r7, #4
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c80:	1d3b      	adds	r3, r7, #4
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c90:	4413      	add	r3, r2
 8005c92:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c96:	463b      	mov	r3, r7
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	011a      	lsls	r2, r3, #4
 8005c9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ca8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d116      	bne.n	8005ce2 <USB_EPStartXfer+0xfde>
 8005cb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cb8:	881b      	ldrh	r3, [r3, #0]
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cc6:	801a      	strh	r2, [r3, #0]
 8005cc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cde:	801a      	strh	r2, [r3, #0]
 8005ce0:	e05f      	b.n	8005da2 <USB_EPStartXfer+0x109e>
 8005ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ce6:	2b3e      	cmp	r3, #62	; 0x3e
 8005ce8:	d818      	bhi.n	8005d1c <USB_EPStartXfer+0x1018>
 8005cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cee:	085b      	lsrs	r3, r3, #1
 8005cf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d004      	beq.n	8005d0a <USB_EPStartXfer+0x1006>
 8005d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d04:	3301      	adds	r3, #1
 8005d06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	029b      	lsls	r3, r3, #10
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d18:	801a      	strh	r2, [r3, #0]
 8005d1a:	e042      	b.n	8005da2 <USB_EPStartXfer+0x109e>
 8005d1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d20:	095b      	lsrs	r3, r3, #5
 8005d22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d2a:	f003 031f 	and.w	r3, r3, #31
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d104      	bne.n	8005d3c <USB_EPStartXfer+0x1038>
 8005d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d36:	3b01      	subs	r3, #1
 8005d38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	029b      	lsls	r3, r3, #10
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d54:	801a      	strh	r2, [r3, #0]
 8005d56:	e024      	b.n	8005da2 <USB_EPStartXfer+0x109e>
 8005d58:	463b      	mov	r3, r7
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	785b      	ldrb	r3, [r3, #1]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d11f      	bne.n	8005da2 <USB_EPStartXfer+0x109e>
 8005d62:	1d3b      	adds	r3, r7, #4
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d6a:	1d3b      	adds	r3, r7, #4
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	461a      	mov	r2, r3
 8005d76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d80:	463b      	mov	r3, r7
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	011a      	lsls	r2, r3, #4
 8005d88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005d96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005da0:	801a      	strh	r2, [r3, #0]
 8005da2:	1d3b      	adds	r3, r7, #4
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005daa:	463b      	mov	r3, r7
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	785b      	ldrb	r3, [r3, #1]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d16f      	bne.n	8005e94 <USB_EPStartXfer+0x1190>
 8005db4:	1d3b      	adds	r3, r7, #4
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dbc:	1d3b      	adds	r3, r7, #4
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005dcc:	4413      	add	r3, r2
 8005dce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dd2:	463b      	mov	r3, r7
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	011a      	lsls	r2, r3, #4
 8005dda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005dde:	4413      	add	r3, r2
 8005de0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005de4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d116      	bne.n	8005e1e <USB_EPStartXfer+0x111a>
 8005df0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005df4:	881b      	ldrh	r3, [r3, #0]
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e02:	801a      	strh	r2, [r3, #0]
 8005e04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e1a:	801a      	strh	r2, [r3, #0]
 8005e1c:	e05e      	b.n	8005edc <USB_EPStartXfer+0x11d8>
 8005e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e22:	2b3e      	cmp	r3, #62	; 0x3e
 8005e24:	d818      	bhi.n	8005e58 <USB_EPStartXfer+0x1154>
 8005e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e2a:	085b      	lsrs	r3, r3, #1
 8005e2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d004      	beq.n	8005e46 <USB_EPStartXfer+0x1142>
 8005e3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e40:	3301      	adds	r3, #1
 8005e42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	029b      	lsls	r3, r3, #10
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e54:	801a      	strh	r2, [r3, #0]
 8005e56:	e041      	b.n	8005edc <USB_EPStartXfer+0x11d8>
 8005e58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e5c:	095b      	lsrs	r3, r3, #5
 8005e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e66:	f003 031f 	and.w	r3, r3, #31
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d104      	bne.n	8005e78 <USB_EPStartXfer+0x1174>
 8005e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e72:	3b01      	subs	r3, #1
 8005e74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	029b      	lsls	r3, r3, #10
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e90:	801a      	strh	r2, [r3, #0]
 8005e92:	e023      	b.n	8005edc <USB_EPStartXfer+0x11d8>
 8005e94:	463b      	mov	r3, r7
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	785b      	ldrb	r3, [r3, #1]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d11e      	bne.n	8005edc <USB_EPStartXfer+0x11d8>
 8005e9e:	1d3b      	adds	r3, r7, #4
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005eae:	4413      	add	r3, r2
 8005eb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005eb4:	463b      	mov	r3, r7
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	011a      	lsls	r2, r3, #4
 8005ebc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ec6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005eca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ed4:	801a      	strh	r2, [r3, #0]
 8005ed6:	e001      	b.n	8005edc <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e02e      	b.n	8005f3a <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005edc:	1d3b      	adds	r3, r7, #4
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	463b      	mov	r3, r7
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005efa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005efe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f02:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005f06:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005f0a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f0e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005f12:	1d3b      	adds	r3, r7, #4
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	463b      	mov	r3, r7
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	441a      	add	r2, r3
 8005f20:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	785b      	ldrb	r3, [r3, #1]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d020      	beq.n	8005f98 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f6c:	81bb      	strh	r3, [r7, #12]
 8005f6e:	89bb      	ldrh	r3, [r7, #12]
 8005f70:	f083 0310 	eor.w	r3, r3, #16
 8005f74:	81bb      	strh	r3, [r7, #12]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	441a      	add	r2, r3
 8005f80:	89bb      	ldrh	r3, [r7, #12]
 8005f82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	8013      	strh	r3, [r2, #0]
 8005f96:	e01f      	b.n	8005fd8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	881b      	ldrh	r3, [r3, #0]
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fae:	81fb      	strh	r3, [r7, #14]
 8005fb0:	89fb      	ldrh	r3, [r7, #14]
 8005fb2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005fb6:	81fb      	strh	r3, [r7, #14]
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	441a      	add	r2, r3
 8005fc2:	89fb      	ldrh	r3, [r7, #14]
 8005fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bc80      	pop	{r7}
 8005fe2:	4770      	bx	lr

08005fe4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	7b1b      	ldrb	r3, [r3, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f040 809d 	bne.w	8006132 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	785b      	ldrb	r3, [r3, #1]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d04c      	beq.n	800609a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	823b      	strh	r3, [r7, #16]
 800600e:	8a3b      	ldrh	r3, [r7, #16]
 8006010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006014:	2b00      	cmp	r3, #0
 8006016:	d01b      	beq.n	8006050 <USB_EPClearStall+0x6c>
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	b29b      	uxth	r3, r3
 8006026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800602a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800602e:	81fb      	strh	r3, [r7, #14]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	441a      	add	r2, r3
 800603a:	89fb      	ldrh	r3, [r7, #14]
 800603c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006040:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006048:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800604c:	b29b      	uxth	r3, r3
 800604e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	78db      	ldrb	r3, [r3, #3]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d06c      	beq.n	8006132 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	b29b      	uxth	r3, r3
 8006066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800606a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800606e:	81bb      	strh	r3, [r7, #12]
 8006070:	89bb      	ldrh	r3, [r7, #12]
 8006072:	f083 0320 	eor.w	r3, r3, #32
 8006076:	81bb      	strh	r3, [r7, #12]
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	441a      	add	r2, r3
 8006082:	89bb      	ldrh	r3, [r7, #12]
 8006084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800608c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006094:	b29b      	uxth	r3, r3
 8006096:	8013      	strh	r3, [r2, #0]
 8006098:	e04b      	b.n	8006132 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	82fb      	strh	r3, [r7, #22]
 80060a8:	8afb      	ldrh	r3, [r7, #22]
 80060aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d01b      	beq.n	80060ea <USB_EPClearStall+0x106>
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	881b      	ldrh	r3, [r3, #0]
 80060be:	b29b      	uxth	r3, r3
 80060c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c8:	82bb      	strh	r3, [r7, #20]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	441a      	add	r2, r3
 80060d4:	8abb      	ldrh	r3, [r7, #20]
 80060d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006100:	827b      	strh	r3, [r7, #18]
 8006102:	8a7b      	ldrh	r3, [r7, #18]
 8006104:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006108:	827b      	strh	r3, [r7, #18]
 800610a:	8a7b      	ldrh	r3, [r7, #18]
 800610c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006110:	827b      	strh	r3, [r7, #18]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	441a      	add	r2, r3
 800611c:	8a7b      	ldrh	r3, [r7, #18]
 800611e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800612a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800612e:	b29b      	uxth	r3, r3
 8006130:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	371c      	adds	r7, #28
 8006138:	46bd      	mov	sp, r7
 800613a:	bc80      	pop	{r7}
 800613c:	4770      	bx	lr

0800613e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800613e:	b480      	push	{r7}
 8006140:	b083      	sub	sp, #12
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	460b      	mov	r3, r1
 8006148:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800614a:	78fb      	ldrb	r3, [r7, #3]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d103      	bne.n	8006158 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2280      	movs	r2, #128	; 0x80
 8006154:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	bc80      	pop	{r7}
 8006162:	4770      	bx	lr

08006164 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	bc80      	pop	{r7}
 8006176:	4770      	bx	lr

08006178 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	bc80      	pop	{r7}
 800618a:	4770      	bx	lr

0800618c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800619a:	b29b      	uxth	r3, r3
 800619c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800619e:	68fb      	ldr	r3, [r7, #12]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bc80      	pop	{r7}
 80061a8:	4770      	bx	lr

080061aa <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bc80      	pop	{r7}
 80061be:	4770      	bx	lr

080061c0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b08d      	sub	sp, #52	; 0x34
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	4611      	mov	r1, r2
 80061cc:	461a      	mov	r2, r3
 80061ce:	460b      	mov	r3, r1
 80061d0:	80fb      	strh	r3, [r7, #6]
 80061d2:	4613      	mov	r3, r2
 80061d4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80061d6:	88bb      	ldrh	r3, [r7, #4]
 80061d8:	3301      	adds	r3, #1
 80061da:	085b      	lsrs	r3, r3, #1
 80061dc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80061e6:	88fb      	ldrh	r3, [r7, #6]
 80061e8:	005a      	lsls	r2, r3, #1
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061f2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061f8:	e01e      	b.n	8006238 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	3301      	adds	r3, #1
 8006204:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	b29b      	uxth	r3, r3
 800620c:	021b      	lsls	r3, r3, #8
 800620e:	b29b      	uxth	r3, r3
 8006210:	461a      	mov	r2, r3
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	4313      	orrs	r3, r2
 8006216:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	b29a      	uxth	r2, r3
 800621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006222:	3302      	adds	r3, #2
 8006224:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006228:	3302      	adds	r3, #2
 800622a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	3301      	adds	r3, #1
 8006230:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006234:	3b01      	subs	r3, #1
 8006236:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1dd      	bne.n	80061fa <USB_WritePMA+0x3a>
  }
}
 800623e:	bf00      	nop
 8006240:	bf00      	nop
 8006242:	3734      	adds	r7, #52	; 0x34
 8006244:	46bd      	mov	sp, r7
 8006246:	bc80      	pop	{r7}
 8006248:	4770      	bx	lr

0800624a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800624a:	b480      	push	{r7}
 800624c:	b08b      	sub	sp, #44	; 0x2c
 800624e:	af00      	add	r7, sp, #0
 8006250:	60f8      	str	r0, [r7, #12]
 8006252:	60b9      	str	r1, [r7, #8]
 8006254:	4611      	mov	r1, r2
 8006256:	461a      	mov	r2, r3
 8006258:	460b      	mov	r3, r1
 800625a:	80fb      	strh	r3, [r7, #6]
 800625c:	4613      	mov	r3, r2
 800625e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006260:	88bb      	ldrh	r3, [r7, #4]
 8006262:	085b      	lsrs	r3, r3, #1
 8006264:	b29b      	uxth	r3, r3
 8006266:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006270:	88fb      	ldrh	r3, [r7, #6]
 8006272:	005a      	lsls	r2, r3, #1
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800627c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	627b      	str	r3, [r7, #36]	; 0x24
 8006282:	e01b      	b.n	80062bc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	b29b      	uxth	r3, r3
 800628a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800628c:	6a3b      	ldr	r3, [r7, #32]
 800628e:	3302      	adds	r3, #2
 8006290:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	b2da      	uxtb	r2, r3
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	3301      	adds	r3, #1
 800629e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	0a1b      	lsrs	r3, r3, #8
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	3301      	adds	r3, #1
 80062ae:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	3302      	adds	r3, #2
 80062b4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	3b01      	subs	r3, #1
 80062ba:	627b      	str	r3, [r7, #36]	; 0x24
 80062bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1e0      	bne.n	8006284 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80062c2:	88bb      	ldrh	r3, [r7, #4]
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d007      	beq.n	80062de <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80062ce:	6a3b      	ldr	r3, [r7, #32]
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	701a      	strb	r2, [r3, #0]
  }
}
 80062de:	bf00      	nop
 80062e0:	372c      	adds	r7, #44	; 0x2c
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bc80      	pop	{r7}
 80062e6:	4770      	bx	lr

080062e8 <IO_init>:
 */
#include "InputOutputInterface.h"
IO_interface inputOutputs;


void IO_init(void){
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0
	inputOutputs.switch_1=false;
 80062ec:	4a29      	ldr	r2, [pc, #164]	; (8006394 <IO_init+0xac>)
 80062ee:	7813      	ldrb	r3, [r2, #0]
 80062f0:	f36f 0300 	bfc	r3, #0, #1
 80062f4:	7013      	strb	r3, [r2, #0]
	inputOutputs.switch_2=false;
 80062f6:	4a27      	ldr	r2, [pc, #156]	; (8006394 <IO_init+0xac>)
 80062f8:	7813      	ldrb	r3, [r2, #0]
 80062fa:	f36f 0341 	bfc	r3, #1, #1
 80062fe:	7013      	strb	r3, [r2, #0]
	inputOutputs.switch_3=false;
 8006300:	4a24      	ldr	r2, [pc, #144]	; (8006394 <IO_init+0xac>)
 8006302:	7813      	ldrb	r3, [r2, #0]
 8006304:	f36f 0382 	bfc	r3, #2, #1
 8006308:	7013      	strb	r3, [r2, #0]
	inputOutputs.switch_4=false;
 800630a:	4a22      	ldr	r2, [pc, #136]	; (8006394 <IO_init+0xac>)
 800630c:	7813      	ldrb	r3, [r2, #0]
 800630e:	f36f 03c3 	bfc	r3, #3, #1
 8006312:	7013      	strb	r3, [r2, #0]
	inputOutputs.switch_5=false;
 8006314:	4a1f      	ldr	r2, [pc, #124]	; (8006394 <IO_init+0xac>)
 8006316:	7813      	ldrb	r3, [r2, #0]
 8006318:	f36f 1304 	bfc	r3, #4, #1
 800631c:	7013      	strb	r3, [r2, #0]
	inputOutputs.switch_6=false;
 800631e:	4a1d      	ldr	r2, [pc, #116]	; (8006394 <IO_init+0xac>)
 8006320:	7813      	ldrb	r3, [r2, #0]
 8006322:	f36f 1345 	bfc	r3, #5, #1
 8006326:	7013      	strb	r3, [r2, #0]
	inputOutputs.switch_7=false;
 8006328:	4a1a      	ldr	r2, [pc, #104]	; (8006394 <IO_init+0xac>)
 800632a:	7813      	ldrb	r3, [r2, #0]
 800632c:	f36f 1386 	bfc	r3, #6, #1
 8006330:	7013      	strb	r3, [r2, #0]
	inputOutputs.switch_8=false;
 8006332:	4a18      	ldr	r2, [pc, #96]	; (8006394 <IO_init+0xac>)
 8006334:	7813      	ldrb	r3, [r2, #0]
 8006336:	f36f 13c7 	bfc	r3, #7, #1
 800633a:	7013      	strb	r3, [r2, #0]

	inputOutputs.relay_1=false;
 800633c:	4a15      	ldr	r2, [pc, #84]	; (8006394 <IO_init+0xac>)
 800633e:	7853      	ldrb	r3, [r2, #1]
 8006340:	f36f 0300 	bfc	r3, #0, #1
 8006344:	7053      	strb	r3, [r2, #1]
	inputOutputs.relay_2=false;
 8006346:	4a13      	ldr	r2, [pc, #76]	; (8006394 <IO_init+0xac>)
 8006348:	7853      	ldrb	r3, [r2, #1]
 800634a:	f36f 0341 	bfc	r3, #1, #1
 800634e:	7053      	strb	r3, [r2, #1]
	inputOutputs.relay_3=false;
 8006350:	4a10      	ldr	r2, [pc, #64]	; (8006394 <IO_init+0xac>)
 8006352:	7853      	ldrb	r3, [r2, #1]
 8006354:	f36f 0382 	bfc	r3, #2, #1
 8006358:	7053      	strb	r3, [r2, #1]
	inputOutputs.relay_4=false;
 800635a:	4a0e      	ldr	r2, [pc, #56]	; (8006394 <IO_init+0xac>)
 800635c:	7853      	ldrb	r3, [r2, #1]
 800635e:	f36f 03c3 	bfc	r3, #3, #1
 8006362:	7053      	strb	r3, [r2, #1]
	inputOutputs.relay_5=false;
 8006364:	4a0b      	ldr	r2, [pc, #44]	; (8006394 <IO_init+0xac>)
 8006366:	7853      	ldrb	r3, [r2, #1]
 8006368:	f36f 1304 	bfc	r3, #4, #1
 800636c:	7053      	strb	r3, [r2, #1]
	inputOutputs.relay_6=false;
 800636e:	4a09      	ldr	r2, [pc, #36]	; (8006394 <IO_init+0xac>)
 8006370:	7853      	ldrb	r3, [r2, #1]
 8006372:	f36f 1345 	bfc	r3, #5, #1
 8006376:	7053      	strb	r3, [r2, #1]
	inputOutputs.relay_7=false;
 8006378:	4a06      	ldr	r2, [pc, #24]	; (8006394 <IO_init+0xac>)
 800637a:	7853      	ldrb	r3, [r2, #1]
 800637c:	f36f 1386 	bfc	r3, #6, #1
 8006380:	7053      	strb	r3, [r2, #1]
	inputOutputs.relay_8=false;
 8006382:	4a04      	ldr	r2, [pc, #16]	; (8006394 <IO_init+0xac>)
 8006384:	7853      	ldrb	r3, [r2, #1]
 8006386:	f36f 13c7 	bfc	r3, #7, #1
 800638a:	7053      	strb	r3, [r2, #1]
}
 800638c:	bf00      	nop
 800638e:	46bd      	mov	sp, r7
 8006390:	bc80      	pop	{r7}
 8006392:	4770      	bx	lr
 8006394:	200039e4 	.word	0x200039e4

08006398 <IO_readInputSwitchs>:

void IO_readInputSwitchs(void){
 8006398:	b580      	push	{r7, lr}
 800639a:	af00      	add	r7, sp, #0
	inputOutputs.switch_1=!SW_I_1;
 800639c:	2102      	movs	r1, #2
 800639e:	483c      	ldr	r0, [pc, #240]	; (8006490 <IO_readInputSwitchs+0xf8>)
 80063a0:	f7fb f88a 	bl	80014b8 <HAL_GPIO_ReadPin>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	bf0c      	ite	eq
 80063aa:	2301      	moveq	r3, #1
 80063ac:	2300      	movne	r3, #0
 80063ae:	b2d9      	uxtb	r1, r3
 80063b0:	4a38      	ldr	r2, [pc, #224]	; (8006494 <IO_readInputSwitchs+0xfc>)
 80063b2:	7813      	ldrb	r3, [r2, #0]
 80063b4:	f361 0300 	bfi	r3, r1, #0, #1
 80063b8:	7013      	strb	r3, [r2, #0]
	inputOutputs.switch_2=!SW_I_2;
 80063ba:	2101      	movs	r1, #1
 80063bc:	4834      	ldr	r0, [pc, #208]	; (8006490 <IO_readInputSwitchs+0xf8>)
 80063be:	f7fb f87b 	bl	80014b8 <HAL_GPIO_ReadPin>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	bf0c      	ite	eq
 80063c8:	2301      	moveq	r3, #1
 80063ca:	2300      	movne	r3, #0
 80063cc:	b2d9      	uxtb	r1, r3
 80063ce:	4a31      	ldr	r2, [pc, #196]	; (8006494 <IO_readInputSwitchs+0xfc>)
 80063d0:	7813      	ldrb	r3, [r2, #0]
 80063d2:	f361 0341 	bfi	r3, r1, #1, #1
 80063d6:	7013      	strb	r3, [r2, #0]
	inputOutputs.switch_3=!SW_I_3;
 80063d8:	2180      	movs	r1, #128	; 0x80
 80063da:	482f      	ldr	r0, [pc, #188]	; (8006498 <IO_readInputSwitchs+0x100>)
 80063dc:	f7fb f86c 	bl	80014b8 <HAL_GPIO_ReadPin>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	bf0c      	ite	eq
 80063e6:	2301      	moveq	r3, #1
 80063e8:	2300      	movne	r3, #0
 80063ea:	b2d9      	uxtb	r1, r3
 80063ec:	4a29      	ldr	r2, [pc, #164]	; (8006494 <IO_readInputSwitchs+0xfc>)
 80063ee:	7813      	ldrb	r3, [r2, #0]
 80063f0:	f361 0382 	bfi	r3, r1, #2, #1
 80063f4:	7013      	strb	r3, [r2, #0]
	inputOutputs.switch_4=!SW_I_4;
 80063f6:	2110      	movs	r1, #16
 80063f8:	4825      	ldr	r0, [pc, #148]	; (8006490 <IO_readInputSwitchs+0xf8>)
 80063fa:	f7fb f85d 	bl	80014b8 <HAL_GPIO_ReadPin>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	bf0c      	ite	eq
 8006404:	2301      	moveq	r3, #1
 8006406:	2300      	movne	r3, #0
 8006408:	b2d9      	uxtb	r1, r3
 800640a:	4a22      	ldr	r2, [pc, #136]	; (8006494 <IO_readInputSwitchs+0xfc>)
 800640c:	7813      	ldrb	r3, [r2, #0]
 800640e:	f361 03c3 	bfi	r3, r1, #3, #1
 8006412:	7013      	strb	r3, [r2, #0]
	inputOutputs.switch_5=!SW_I_5;
 8006414:	2120      	movs	r1, #32
 8006416:	4820      	ldr	r0, [pc, #128]	; (8006498 <IO_readInputSwitchs+0x100>)
 8006418:	f7fb f84e 	bl	80014b8 <HAL_GPIO_ReadPin>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	bf0c      	ite	eq
 8006422:	2301      	moveq	r3, #1
 8006424:	2300      	movne	r3, #0
 8006426:	b2d9      	uxtb	r1, r3
 8006428:	4a1a      	ldr	r2, [pc, #104]	; (8006494 <IO_readInputSwitchs+0xfc>)
 800642a:	7813      	ldrb	r3, [r2, #0]
 800642c:	f361 1304 	bfi	r3, r1, #4, #1
 8006430:	7013      	strb	r3, [r2, #0]
	inputOutputs.switch_6=!SW_I_6;
 8006432:	2110      	movs	r1, #16
 8006434:	4818      	ldr	r0, [pc, #96]	; (8006498 <IO_readInputSwitchs+0x100>)
 8006436:	f7fb f83f 	bl	80014b8 <HAL_GPIO_ReadPin>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	bf0c      	ite	eq
 8006440:	2301      	moveq	r3, #1
 8006442:	2300      	movne	r3, #0
 8006444:	b2d9      	uxtb	r1, r3
 8006446:	4a13      	ldr	r2, [pc, #76]	; (8006494 <IO_readInputSwitchs+0xfc>)
 8006448:	7813      	ldrb	r3, [r2, #0]
 800644a:	f361 1345 	bfi	r3, r1, #5, #1
 800644e:	7013      	strb	r3, [r2, #0]
	inputOutputs.switch_7=!SW_I_7;
 8006450:	2102      	movs	r1, #2
 8006452:	4811      	ldr	r0, [pc, #68]	; (8006498 <IO_readInputSwitchs+0x100>)
 8006454:	f7fb f830 	bl	80014b8 <HAL_GPIO_ReadPin>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	bf0c      	ite	eq
 800645e:	2301      	moveq	r3, #1
 8006460:	2300      	movne	r3, #0
 8006462:	b2d9      	uxtb	r1, r3
 8006464:	4a0b      	ldr	r2, [pc, #44]	; (8006494 <IO_readInputSwitchs+0xfc>)
 8006466:	7813      	ldrb	r3, [r2, #0]
 8006468:	f361 1386 	bfi	r3, r1, #6, #1
 800646c:	7013      	strb	r3, [r2, #0]
	inputOutputs.switch_8=!SW_I_8;
 800646e:	2108      	movs	r1, #8
 8006470:	4807      	ldr	r0, [pc, #28]	; (8006490 <IO_readInputSwitchs+0xf8>)
 8006472:	f7fb f821 	bl	80014b8 <HAL_GPIO_ReadPin>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	bf0c      	ite	eq
 800647c:	2301      	moveq	r3, #1
 800647e:	2300      	movne	r3, #0
 8006480:	b2d9      	uxtb	r1, r3
 8006482:	4a04      	ldr	r2, [pc, #16]	; (8006494 <IO_readInputSwitchs+0xfc>)
 8006484:	7813      	ldrb	r3, [r2, #0]
 8006486:	f361 13c7 	bfi	r3, r1, #7, #1
 800648a:	7013      	strb	r3, [r2, #0]
}
 800648c:	bf00      	nop
 800648e:	bd80      	pop	{r7, pc}
 8006490:	40010c00 	.word	0x40010c00
 8006494:	200039e4 	.word	0x200039e4
 8006498:	40010800 	.word	0x40010800

0800649c <IO_writeOutputRelay>:
void IO_writeOutputRelay(void){
 800649c:	b580      	push	{r7, lr}
 800649e:	af00      	add	r7, sp, #0
	if(inputOutputs.relay_1)R_1_O_HIGH; else R_1_O_LOW;
 80064a0:	4b50      	ldr	r3, [pc, #320]	; (80065e4 <IO_writeOutputRelay+0x148>)
 80064a2:	785b      	ldrb	r3, [r3, #1]
 80064a4:	f003 0301 	and.w	r3, r3, #1
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d006      	beq.n	80064bc <IO_writeOutputRelay+0x20>
 80064ae:	2200      	movs	r2, #0
 80064b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80064b4:	484c      	ldr	r0, [pc, #304]	; (80065e8 <IO_writeOutputRelay+0x14c>)
 80064b6:	f7fb f816 	bl	80014e6 <HAL_GPIO_WritePin>
 80064ba:	e005      	b.n	80064c8 <IO_writeOutputRelay+0x2c>
 80064bc:	2201      	movs	r2, #1
 80064be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80064c2:	4849      	ldr	r0, [pc, #292]	; (80065e8 <IO_writeOutputRelay+0x14c>)
 80064c4:	f7fb f80f 	bl	80014e6 <HAL_GPIO_WritePin>
	if(inputOutputs.relay_2)R_2_O_HIGH; else R_2_O_LOW;
 80064c8:	4b46      	ldr	r3, [pc, #280]	; (80065e4 <IO_writeOutputRelay+0x148>)
 80064ca:	785b      	ldrb	r3, [r3, #1]
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d006      	beq.n	80064e4 <IO_writeOutputRelay+0x48>
 80064d6:	2200      	movs	r2, #0
 80064d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80064dc:	4842      	ldr	r0, [pc, #264]	; (80065e8 <IO_writeOutputRelay+0x14c>)
 80064de:	f7fb f802 	bl	80014e6 <HAL_GPIO_WritePin>
 80064e2:	e005      	b.n	80064f0 <IO_writeOutputRelay+0x54>
 80064e4:	2201      	movs	r2, #1
 80064e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80064ea:	483f      	ldr	r0, [pc, #252]	; (80065e8 <IO_writeOutputRelay+0x14c>)
 80064ec:	f7fa fffb 	bl	80014e6 <HAL_GPIO_WritePin>
	if(inputOutputs.relay_3)R_3_O_HIGH; else R_3_O_LOW;
 80064f0:	4b3c      	ldr	r3, [pc, #240]	; (80065e4 <IO_writeOutputRelay+0x148>)
 80064f2:	785b      	ldrb	r3, [r3, #1]
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d006      	beq.n	800650c <IO_writeOutputRelay+0x70>
 80064fe:	2200      	movs	r2, #0
 8006500:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006504:	4838      	ldr	r0, [pc, #224]	; (80065e8 <IO_writeOutputRelay+0x14c>)
 8006506:	f7fa ffee 	bl	80014e6 <HAL_GPIO_WritePin>
 800650a:	e005      	b.n	8006518 <IO_writeOutputRelay+0x7c>
 800650c:	2201      	movs	r2, #1
 800650e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006512:	4835      	ldr	r0, [pc, #212]	; (80065e8 <IO_writeOutputRelay+0x14c>)
 8006514:	f7fa ffe7 	bl	80014e6 <HAL_GPIO_WritePin>
	if(inputOutputs.relay_4)R_4_O_HIGH; else R_4_O_LOW;
 8006518:	4b32      	ldr	r3, [pc, #200]	; (80065e4 <IO_writeOutputRelay+0x148>)
 800651a:	785b      	ldrb	r3, [r3, #1]
 800651c:	f003 0308 	and.w	r3, r3, #8
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d006      	beq.n	8006534 <IO_writeOutputRelay+0x98>
 8006526:	2200      	movs	r2, #0
 8006528:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800652c:	482e      	ldr	r0, [pc, #184]	; (80065e8 <IO_writeOutputRelay+0x14c>)
 800652e:	f7fa ffda 	bl	80014e6 <HAL_GPIO_WritePin>
 8006532:	e005      	b.n	8006540 <IO_writeOutputRelay+0xa4>
 8006534:	2201      	movs	r2, #1
 8006536:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800653a:	482b      	ldr	r0, [pc, #172]	; (80065e8 <IO_writeOutputRelay+0x14c>)
 800653c:	f7fa ffd3 	bl	80014e6 <HAL_GPIO_WritePin>
	if(inputOutputs.relay_5)R_5_O_HIGH; else R_5_O_LOW;
 8006540:	4b28      	ldr	r3, [pc, #160]	; (80065e4 <IO_writeOutputRelay+0x148>)
 8006542:	785b      	ldrb	r3, [r3, #1]
 8006544:	f003 0310 	and.w	r3, r3, #16
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d006      	beq.n	800655c <IO_writeOutputRelay+0xc0>
 800654e:	2200      	movs	r2, #0
 8006550:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006554:	4825      	ldr	r0, [pc, #148]	; (80065ec <IO_writeOutputRelay+0x150>)
 8006556:	f7fa ffc6 	bl	80014e6 <HAL_GPIO_WritePin>
 800655a:	e005      	b.n	8006568 <IO_writeOutputRelay+0xcc>
 800655c:	2201      	movs	r2, #1
 800655e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006562:	4822      	ldr	r0, [pc, #136]	; (80065ec <IO_writeOutputRelay+0x150>)
 8006564:	f7fa ffbf 	bl	80014e6 <HAL_GPIO_WritePin>
	if(inputOutputs.relay_6)R_6_O_HIGH; else R_6_O_LOW;
 8006568:	4b1e      	ldr	r3, [pc, #120]	; (80065e4 <IO_writeOutputRelay+0x148>)
 800656a:	785b      	ldrb	r3, [r3, #1]
 800656c:	f003 0320 	and.w	r3, r3, #32
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d006      	beq.n	8006584 <IO_writeOutputRelay+0xe8>
 8006576:	2200      	movs	r2, #0
 8006578:	f44f 7100 	mov.w	r1, #512	; 0x200
 800657c:	481b      	ldr	r0, [pc, #108]	; (80065ec <IO_writeOutputRelay+0x150>)
 800657e:	f7fa ffb2 	bl	80014e6 <HAL_GPIO_WritePin>
 8006582:	e005      	b.n	8006590 <IO_writeOutputRelay+0xf4>
 8006584:	2201      	movs	r2, #1
 8006586:	f44f 7100 	mov.w	r1, #512	; 0x200
 800658a:	4818      	ldr	r0, [pc, #96]	; (80065ec <IO_writeOutputRelay+0x150>)
 800658c:	f7fa ffab 	bl	80014e6 <HAL_GPIO_WritePin>
	if(inputOutputs.relay_7)R_7_O_HIGH; else R_7_O_LOW;
 8006590:	4b14      	ldr	r3, [pc, #80]	; (80065e4 <IO_writeOutputRelay+0x148>)
 8006592:	785b      	ldrb	r3, [r3, #1]
 8006594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d006      	beq.n	80065ac <IO_writeOutputRelay+0x110>
 800659e:	2200      	movs	r2, #0
 80065a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065a4:	4811      	ldr	r0, [pc, #68]	; (80065ec <IO_writeOutputRelay+0x150>)
 80065a6:	f7fa ff9e 	bl	80014e6 <HAL_GPIO_WritePin>
 80065aa:	e005      	b.n	80065b8 <IO_writeOutputRelay+0x11c>
 80065ac:	2201      	movs	r2, #1
 80065ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065b2:	480e      	ldr	r0, [pc, #56]	; (80065ec <IO_writeOutputRelay+0x150>)
 80065b4:	f7fa ff97 	bl	80014e6 <HAL_GPIO_WritePin>
	if(inputOutputs.relay_8)R_8_O_HIGH; else R_8_O_LOW;
 80065b8:	4b0a      	ldr	r3, [pc, #40]	; (80065e4 <IO_writeOutputRelay+0x148>)
 80065ba:	785b      	ldrb	r3, [r3, #1]
 80065bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d006      	beq.n	80065d4 <IO_writeOutputRelay+0x138>
 80065c6:	2200      	movs	r2, #0
 80065c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065cc:	4807      	ldr	r0, [pc, #28]	; (80065ec <IO_writeOutputRelay+0x150>)
 80065ce:	f7fa ff8a 	bl	80014e6 <HAL_GPIO_WritePin>
}
 80065d2:	e005      	b.n	80065e0 <IO_writeOutputRelay+0x144>
	if(inputOutputs.relay_8)R_8_O_HIGH; else R_8_O_LOW;
 80065d4:	2201      	movs	r2, #1
 80065d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065da:	4804      	ldr	r0, [pc, #16]	; (80065ec <IO_writeOutputRelay+0x150>)
 80065dc:	f7fa ff83 	bl	80014e6 <HAL_GPIO_WritePin>
}
 80065e0:	bf00      	nop
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	200039e4 	.word	0x200039e4
 80065e8:	40010c00 	.word	0x40010c00
 80065ec:	40010800 	.word	0x40010800

080065f0 <IO_inputsBitsPackageToByte>:
	testBtye[0]=IO_inputsBitsPackageToByte(inputOutputs);
	IO_outputByteToBitsPackage(testBtye[0]);

}

uint8_t IO_inputsBitsPackageToByte(IO_interface inputBits){
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	80b8      	strh	r0, [r7, #4]
	uint8_t bitPackage;
	bitPackage = (inputBits.switch_8 << 7) | (inputBits.switch_7 << 6) |
 80065f8:	793b      	ldrb	r3, [r7, #4]
 80065fa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	01db      	lsls	r3, r3, #7
 8006602:	b25a      	sxtb	r2, r3
 8006604:	793b      	ldrb	r3, [r7, #4]
 8006606:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800660a:	b2db      	uxtb	r3, r3
 800660c:	019b      	lsls	r3, r3, #6
 800660e:	b25b      	sxtb	r3, r3
 8006610:	4313      	orrs	r3, r2
 8006612:	b25a      	sxtb	r2, r3
	(inputBits.switch_6 << 5) | (inputBits.switch_5 << 4) |
 8006614:	793b      	ldrb	r3, [r7, #4]
 8006616:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800661a:	b2db      	uxtb	r3, r3
 800661c:	015b      	lsls	r3, r3, #5
	bitPackage = (inputBits.switch_8 << 7) | (inputBits.switch_7 << 6) |
 800661e:	b25b      	sxtb	r3, r3
 8006620:	4313      	orrs	r3, r2
 8006622:	b25a      	sxtb	r2, r3
	(inputBits.switch_6 << 5) | (inputBits.switch_5 << 4) |
 8006624:	793b      	ldrb	r3, [r7, #4]
 8006626:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800662a:	b2db      	uxtb	r3, r3
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	b25b      	sxtb	r3, r3
 8006630:	4313      	orrs	r3, r2
 8006632:	b25a      	sxtb	r2, r3
	(inputBits.switch_4 << 3) | (inputBits.switch_3 << 2) |
 8006634:	793b      	ldrb	r3, [r7, #4]
 8006636:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800663a:	b2db      	uxtb	r3, r3
 800663c:	00db      	lsls	r3, r3, #3
	(inputBits.switch_6 << 5) | (inputBits.switch_5 << 4) |
 800663e:	b25b      	sxtb	r3, r3
 8006640:	4313      	orrs	r3, r2
 8006642:	b25a      	sxtb	r2, r3
	(inputBits.switch_4 << 3) | (inputBits.switch_3 << 2) |
 8006644:	793b      	ldrb	r3, [r7, #4]
 8006646:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800664a:	b2db      	uxtb	r3, r3
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	b25b      	sxtb	r3, r3
 8006650:	4313      	orrs	r3, r2
 8006652:	b25a      	sxtb	r2, r3
    (inputBits.switch_2 << 1) | (inputBits.switch_1);
 8006654:	793b      	ldrb	r3, [r7, #4]
 8006656:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800665a:	b2db      	uxtb	r3, r3
 800665c:	005b      	lsls	r3, r3, #1
	(inputBits.switch_4 << 3) | (inputBits.switch_3 << 2) |
 800665e:	b25b      	sxtb	r3, r3
 8006660:	4313      	orrs	r3, r2
 8006662:	b25a      	sxtb	r2, r3
    (inputBits.switch_2 << 1) | (inputBits.switch_1);
 8006664:	793b      	ldrb	r3, [r7, #4]
 8006666:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800666a:	b2db      	uxtb	r3, r3
 800666c:	b25b      	sxtb	r3, r3
 800666e:	4313      	orrs	r3, r2
 8006670:	b25b      	sxtb	r3, r3
	bitPackage = (inputBits.switch_8 << 7) | (inputBits.switch_7 << 6) |
 8006672:	73fb      	strb	r3, [r7, #15]
	return bitPackage;
 8006674:	7bfb      	ldrb	r3, [r7, #15]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	bc80      	pop	{r7}
 800667e:	4770      	bx	lr

08006680 <IO_outputByteToBitsPackage>:

void IO_outputByteToBitsPackage(uint8_t byte){
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	4603      	mov	r3, r0
 8006688:	71fb      	strb	r3, [r7, #7]
	inputOutputs.relay_1=(bool)(byte & IO_BIT_0);
 800668a:	79fb      	ldrb	r3, [r7, #7]
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	2b00      	cmp	r3, #0
 8006692:	bf14      	ite	ne
 8006694:	2301      	movne	r3, #1
 8006696:	2300      	moveq	r3, #0
 8006698:	b2d9      	uxtb	r1, r3
 800669a:	4a31      	ldr	r2, [pc, #196]	; (8006760 <IO_outputByteToBitsPackage+0xe0>)
 800669c:	7853      	ldrb	r3, [r2, #1]
 800669e:	f361 0300 	bfi	r3, r1, #0, #1
 80066a2:	7053      	strb	r3, [r2, #1]
	inputOutputs.relay_2=(bool)(byte & IO_BIT_1);
 80066a4:	79fb      	ldrb	r3, [r7, #7]
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	bf14      	ite	ne
 80066ae:	2301      	movne	r3, #1
 80066b0:	2300      	moveq	r3, #0
 80066b2:	b2d9      	uxtb	r1, r3
 80066b4:	4a2a      	ldr	r2, [pc, #168]	; (8006760 <IO_outputByteToBitsPackage+0xe0>)
 80066b6:	7853      	ldrb	r3, [r2, #1]
 80066b8:	f361 0341 	bfi	r3, r1, #1, #1
 80066bc:	7053      	strb	r3, [r2, #1]
	inputOutputs.relay_3=(bool)(byte & IO_BIT_2);
 80066be:	79fb      	ldrb	r3, [r7, #7]
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	bf14      	ite	ne
 80066c8:	2301      	movne	r3, #1
 80066ca:	2300      	moveq	r3, #0
 80066cc:	b2d9      	uxtb	r1, r3
 80066ce:	4a24      	ldr	r2, [pc, #144]	; (8006760 <IO_outputByteToBitsPackage+0xe0>)
 80066d0:	7853      	ldrb	r3, [r2, #1]
 80066d2:	f361 0382 	bfi	r3, r1, #2, #1
 80066d6:	7053      	strb	r3, [r2, #1]
	inputOutputs.relay_4=(bool)(byte & IO_BIT_3);
 80066d8:	79fb      	ldrb	r3, [r7, #7]
 80066da:	f003 0308 	and.w	r3, r3, #8
 80066de:	2b00      	cmp	r3, #0
 80066e0:	bf14      	ite	ne
 80066e2:	2301      	movne	r3, #1
 80066e4:	2300      	moveq	r3, #0
 80066e6:	b2d9      	uxtb	r1, r3
 80066e8:	4a1d      	ldr	r2, [pc, #116]	; (8006760 <IO_outputByteToBitsPackage+0xe0>)
 80066ea:	7853      	ldrb	r3, [r2, #1]
 80066ec:	f361 03c3 	bfi	r3, r1, #3, #1
 80066f0:	7053      	strb	r3, [r2, #1]
	inputOutputs.relay_5=(bool)(byte & IO_BIT_4);
 80066f2:	79fb      	ldrb	r3, [r7, #7]
 80066f4:	f003 0310 	and.w	r3, r3, #16
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	bf14      	ite	ne
 80066fc:	2301      	movne	r3, #1
 80066fe:	2300      	moveq	r3, #0
 8006700:	b2d9      	uxtb	r1, r3
 8006702:	4a17      	ldr	r2, [pc, #92]	; (8006760 <IO_outputByteToBitsPackage+0xe0>)
 8006704:	7853      	ldrb	r3, [r2, #1]
 8006706:	f361 1304 	bfi	r3, r1, #4, #1
 800670a:	7053      	strb	r3, [r2, #1]
	inputOutputs.relay_6=(bool)(byte & IO_BIT_5);
 800670c:	79fb      	ldrb	r3, [r7, #7]
 800670e:	f003 0320 	and.w	r3, r3, #32
 8006712:	2b00      	cmp	r3, #0
 8006714:	bf14      	ite	ne
 8006716:	2301      	movne	r3, #1
 8006718:	2300      	moveq	r3, #0
 800671a:	b2d9      	uxtb	r1, r3
 800671c:	4a10      	ldr	r2, [pc, #64]	; (8006760 <IO_outputByteToBitsPackage+0xe0>)
 800671e:	7853      	ldrb	r3, [r2, #1]
 8006720:	f361 1345 	bfi	r3, r1, #5, #1
 8006724:	7053      	strb	r3, [r2, #1]
	inputOutputs.relay_7=(bool)(byte & IO_BIT_6);
 8006726:	79fb      	ldrb	r3, [r7, #7]
 8006728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672c:	2b00      	cmp	r3, #0
 800672e:	bf14      	ite	ne
 8006730:	2301      	movne	r3, #1
 8006732:	2300      	moveq	r3, #0
 8006734:	b2d9      	uxtb	r1, r3
 8006736:	4a0a      	ldr	r2, [pc, #40]	; (8006760 <IO_outputByteToBitsPackage+0xe0>)
 8006738:	7853      	ldrb	r3, [r2, #1]
 800673a:	f361 1386 	bfi	r3, r1, #6, #1
 800673e:	7053      	strb	r3, [r2, #1]
	inputOutputs.relay_8=(bool)(byte & IO_BIT_7);
 8006740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006744:	b2db      	uxtb	r3, r3
 8006746:	09db      	lsrs	r3, r3, #7
 8006748:	b2d9      	uxtb	r1, r3
 800674a:	4a05      	ldr	r2, [pc, #20]	; (8006760 <IO_outputByteToBitsPackage+0xe0>)
 800674c:	7853      	ldrb	r3, [r2, #1]
 800674e:	f361 13c7 	bfi	r3, r1, #7, #1
 8006752:	7053      	strb	r3, [r2, #1]
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	bc80      	pop	{r7}
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	200039e4 	.word	0x200039e4

08006764 <IO_getInputOutputsVal>:

IO_interface IO_getInputOutputsVal(void){return inputOutputs;}
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	4a08      	ldr	r2, [pc, #32]	; (800678c <IO_getInputOutputsVal+0x28>)
 800676c:	1d3b      	adds	r3, r7, #4
 800676e:	8812      	ldrh	r2, [r2, #0]
 8006770:	801a      	strh	r2, [r3, #0]
 8006772:	2300      	movs	r3, #0
 8006774:	793a      	ldrb	r2, [r7, #4]
 8006776:	f362 0307 	bfi	r3, r2, #0, #8
 800677a:	797a      	ldrb	r2, [r7, #5]
 800677c:	f362 230f 	bfi	r3, r2, #8, #8
 8006780:	4618      	mov	r0, r3
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	bc80      	pop	{r7}
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	200039e4 	.word	0x200039e4

08006790 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800679c:	2300      	movs	r3, #0
 800679e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	7c1b      	ldrb	r3, [r3, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d115      	bne.n	80067d4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80067a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067ac:	2202      	movs	r2, #2
 80067ae:	2181      	movs	r1, #129	; 0x81
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f004 fdc6 	bl	800b342 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80067bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067c0:	2202      	movs	r2, #2
 80067c2:	2101      	movs	r1, #1
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f004 fdbc 	bl	800b342 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80067d2:	e012      	b.n	80067fa <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80067d4:	2340      	movs	r3, #64	; 0x40
 80067d6:	2202      	movs	r2, #2
 80067d8:	2181      	movs	r1, #129	; 0x81
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f004 fdb1 	bl	800b342 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80067e6:	2340      	movs	r3, #64	; 0x40
 80067e8:	2202      	movs	r2, #2
 80067ea:	2101      	movs	r1, #1
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f004 fda8 	bl	800b342 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80067fa:	2308      	movs	r3, #8
 80067fc:	2203      	movs	r2, #3
 80067fe:	2182      	movs	r1, #130	; 0x82
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f004 fd9e 	bl	800b342 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800680c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006810:	f004 febe 	bl	800b590 <USBD_static_malloc>
 8006814:	4602      	mov	r2, r0
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006822:	2b00      	cmp	r3, #0
 8006824:	d102      	bne.n	800682c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006826:	2301      	movs	r3, #1
 8006828:	73fb      	strb	r3, [r7, #15]
 800682a:	e026      	b.n	800687a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006832:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	2200      	movs	r2, #0
 8006842:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	2200      	movs	r2, #0
 800684a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	7c1b      	ldrb	r3, [r3, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d109      	bne.n	800686a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800685c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006860:	2101      	movs	r1, #1
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f004 fe5e 	bl	800b524 <USBD_LL_PrepareReceive>
 8006868:	e007      	b.n	800687a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006870:	2340      	movs	r3, #64	; 0x40
 8006872:	2101      	movs	r1, #1
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f004 fe55 	bl	800b524 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800687a:	7bfb      	ldrb	r3, [r7, #15]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	460b      	mov	r3, r1
 800688e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006894:	2181      	movs	r1, #129	; 0x81
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f004 fd79 	bl	800b38e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80068a2:	2101      	movs	r1, #1
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f004 fd72 	bl	800b38e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80068b2:	2182      	movs	r1, #130	; 0x82
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f004 fd6a 	bl	800b38e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00e      	beq.n	80068e8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068da:	4618      	mov	r0, r3
 80068dc:	f004 fe64 	bl	800b5a8 <USBD_static_free>
    pdev->pClassData = NULL;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b086      	sub	sp, #24
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
 80068fa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006902:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006904:	2300      	movs	r3, #0
 8006906:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006908:	2300      	movs	r3, #0
 800690a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800690c:	2300      	movs	r3, #0
 800690e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006918:	2b00      	cmp	r3, #0
 800691a:	d039      	beq.n	8006990 <USBD_CDC_Setup+0x9e>
 800691c:	2b20      	cmp	r3, #32
 800691e:	d17f      	bne.n	8006a20 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	88db      	ldrh	r3, [r3, #6]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d029      	beq.n	800697c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	b25b      	sxtb	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	da11      	bge.n	8006956 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800693e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006940:	683a      	ldr	r2, [r7, #0]
 8006942:	88d2      	ldrh	r2, [r2, #6]
 8006944:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006946:	6939      	ldr	r1, [r7, #16]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	88db      	ldrh	r3, [r3, #6]
 800694c:	461a      	mov	r2, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f001 fa09 	bl	8007d66 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006954:	e06b      	b.n	8006a2e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	785a      	ldrb	r2, [r3, #1]
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	88db      	ldrh	r3, [r3, #6]
 8006964:	b2da      	uxtb	r2, r3
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800696c:	6939      	ldr	r1, [r7, #16]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	88db      	ldrh	r3, [r3, #6]
 8006972:	461a      	mov	r2, r3
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f001 fa24 	bl	8007dc2 <USBD_CtlPrepareRx>
      break;
 800697a:	e058      	b.n	8006a2e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	7850      	ldrb	r0, [r2, #1]
 8006988:	2200      	movs	r2, #0
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	4798      	blx	r3
      break;
 800698e:	e04e      	b.n	8006a2e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	785b      	ldrb	r3, [r3, #1]
 8006994:	2b0b      	cmp	r3, #11
 8006996:	d02e      	beq.n	80069f6 <USBD_CDC_Setup+0x104>
 8006998:	2b0b      	cmp	r3, #11
 800699a:	dc38      	bgt.n	8006a0e <USBD_CDC_Setup+0x11c>
 800699c:	2b00      	cmp	r3, #0
 800699e:	d002      	beq.n	80069a6 <USBD_CDC_Setup+0xb4>
 80069a0:	2b0a      	cmp	r3, #10
 80069a2:	d014      	beq.n	80069ce <USBD_CDC_Setup+0xdc>
 80069a4:	e033      	b.n	8006a0e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ac:	2b03      	cmp	r3, #3
 80069ae:	d107      	bne.n	80069c0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80069b0:	f107 030c 	add.w	r3, r7, #12
 80069b4:	2202      	movs	r2, #2
 80069b6:	4619      	mov	r1, r3
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f001 f9d4 	bl	8007d66 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069be:	e02e      	b.n	8006a1e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f001 f965 	bl	8007c92 <USBD_CtlError>
            ret = USBD_FAIL;
 80069c8:	2302      	movs	r3, #2
 80069ca:	75fb      	strb	r3, [r7, #23]
          break;
 80069cc:	e027      	b.n	8006a1e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d4:	2b03      	cmp	r3, #3
 80069d6:	d107      	bne.n	80069e8 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80069d8:	f107 030f 	add.w	r3, r7, #15
 80069dc:	2201      	movs	r2, #1
 80069de:	4619      	mov	r1, r3
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f001 f9c0 	bl	8007d66 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069e6:	e01a      	b.n	8006a1e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80069e8:	6839      	ldr	r1, [r7, #0]
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f001 f951 	bl	8007c92 <USBD_CtlError>
            ret = USBD_FAIL;
 80069f0:	2302      	movs	r3, #2
 80069f2:	75fb      	strb	r3, [r7, #23]
          break;
 80069f4:	e013      	b.n	8006a1e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069fc:	2b03      	cmp	r3, #3
 80069fe:	d00d      	beq.n	8006a1c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006a00:	6839      	ldr	r1, [r7, #0]
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f001 f945 	bl	8007c92 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a08:	2302      	movs	r3, #2
 8006a0a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a0c:	e006      	b.n	8006a1c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006a0e:	6839      	ldr	r1, [r7, #0]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f001 f93e 	bl	8007c92 <USBD_CtlError>
          ret = USBD_FAIL;
 8006a16:	2302      	movs	r3, #2
 8006a18:	75fb      	strb	r3, [r7, #23]
          break;
 8006a1a:	e000      	b.n	8006a1e <USBD_CDC_Setup+0x12c>
          break;
 8006a1c:	bf00      	nop
      }
      break;
 8006a1e:	e006      	b.n	8006a2e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006a20:	6839      	ldr	r1, [r7, #0]
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f001 f935 	bl	8007c92 <USBD_CtlError>
      ret = USBD_FAIL;
 8006a28:	2302      	movs	r3, #2
 8006a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a2c:	bf00      	nop
  }

  return ret;
 8006a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3718      	adds	r7, #24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	460b      	mov	r3, r1
 8006a42:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a4a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a52:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d03a      	beq.n	8006ad4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006a5e:	78fa      	ldrb	r2, [r7, #3]
 8006a60:	6879      	ldr	r1, [r7, #4]
 8006a62:	4613      	mov	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4413      	add	r3, r2
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	440b      	add	r3, r1
 8006a6c:	331c      	adds	r3, #28
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d029      	beq.n	8006ac8 <USBD_CDC_DataIn+0x90>
 8006a74:	78fa      	ldrb	r2, [r7, #3]
 8006a76:	6879      	ldr	r1, [r7, #4]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	440b      	add	r3, r1
 8006a82:	331c      	adds	r3, #28
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	78f9      	ldrb	r1, [r7, #3]
 8006a88:	68b8      	ldr	r0, [r7, #8]
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	440b      	add	r3, r1
 8006a90:	00db      	lsls	r3, r3, #3
 8006a92:	4403      	add	r3, r0
 8006a94:	3338      	adds	r3, #56	; 0x38
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a9c:	fb03 f301 	mul.w	r3, r3, r1
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d110      	bne.n	8006ac8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006aa6:	78fa      	ldrb	r2, [r7, #3]
 8006aa8:	6879      	ldr	r1, [r7, #4]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	440b      	add	r3, r1
 8006ab4:	331c      	adds	r3, #28
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006aba:	78f9      	ldrb	r1, [r7, #3]
 8006abc:	2300      	movs	r3, #0
 8006abe:	2200      	movs	r2, #0
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f004 fd0c 	bl	800b4de <USBD_LL_Transmit>
 8006ac6:	e003      	b.n	8006ad0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	e000      	b.n	8006ad6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006ad4:	2302      	movs	r3, #2
  }
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b084      	sub	sp, #16
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006af0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006af2:	78fb      	ldrb	r3, [r7, #3]
 8006af4:	4619      	mov	r1, r3
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f004 fd37 	bl	800b56a <USBD_LL_GetRxDataSize>
 8006afc:	4602      	mov	r2, r0
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00d      	beq.n	8006b2a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b22:	4611      	mov	r1, r2
 8006b24:	4798      	blx	r3

    return USBD_OK;
 8006b26:	2300      	movs	r3, #0
 8006b28:	e000      	b.n	8006b2c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006b2a:	2302      	movs	r3, #2
  }
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b42:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d015      	beq.n	8006b7a <USBD_CDC_EP0_RxReady+0x46>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006b54:	2bff      	cmp	r3, #255	; 0xff
 8006b56:	d010      	beq.n	8006b7a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006b66:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b6e:	b292      	uxth	r2, r2
 8006b70:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	22ff      	movs	r2, #255	; 0xff
 8006b76:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2243      	movs	r2, #67	; 0x43
 8006b90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006b92:	4b03      	ldr	r3, [pc, #12]	; (8006ba0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bc80      	pop	{r7}
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	20000094 	.word	0x20000094

08006ba4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2243      	movs	r2, #67	; 0x43
 8006bb0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006bb2:	4b03      	ldr	r3, [pc, #12]	; (8006bc0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bc80      	pop	{r7}
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	20000050 	.word	0x20000050

08006bc4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2243      	movs	r2, #67	; 0x43
 8006bd0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006bd2:	4b03      	ldr	r3, [pc, #12]	; (8006be0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bc80      	pop	{r7}
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	200000d8 	.word	0x200000d8

08006be4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	220a      	movs	r2, #10
 8006bf0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006bf2:	4b03      	ldr	r3, [pc, #12]	; (8006c00 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bc80      	pop	{r7}
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	2000000c 	.word	0x2000000c

08006c04 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006c0e:	2302      	movs	r3, #2
 8006c10:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006c20:	2300      	movs	r3, #0
 8006c22:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bc80      	pop	{r7}
 8006c2e:	4770      	bx	lr

08006c30 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b087      	sub	sp, #28
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c44:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006c4e:	88fa      	ldrh	r2, [r7, #6]
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	371c      	adds	r7, #28
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bc80      	pop	{r7}
 8006c60:	4770      	bx	lr

08006c62 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b085      	sub	sp, #20
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c72:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bc80      	pop	{r7}
 8006c86:	4770      	bx	lr

08006c88 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d01c      	beq.n	8006cdc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d115      	bne.n	8006cd8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	2181      	movs	r1, #129	; 0x81
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f004 fc05 	bl	800b4de <USBD_LL_Transmit>

      return USBD_OK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	e002      	b.n	8006cde <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e000      	b.n	8006cde <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006cdc:	2302      	movs	r3, #2
  }
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b084      	sub	sp, #16
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d017      	beq.n	8006d30 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	7c1b      	ldrb	r3, [r3, #16]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d109      	bne.n	8006d1c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d12:	2101      	movs	r1, #1
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f004 fc05 	bl	800b524 <USBD_LL_PrepareReceive>
 8006d1a:	e007      	b.n	8006d2c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d22:	2340      	movs	r3, #64	; 0x40
 8006d24:	2101      	movs	r1, #1
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f004 fbfc 	bl	800b524 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	e000      	b.n	8006d32 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006d30:	2302      	movs	r3, #2
  }
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b084      	sub	sp, #16
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	60f8      	str	r0, [r7, #12]
 8006d42:	60b9      	str	r1, [r7, #8]
 8006d44:	4613      	mov	r3, r2
 8006d46:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006d4e:	2302      	movs	r3, #2
 8006d50:	e01a      	b.n	8006d88 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d003      	beq.n	8006d64 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d003      	beq.n	8006d72 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	79fa      	ldrb	r2, [r7, #7]
 8006d7e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f004 fa69 	bl	800b258 <USBD_LL_Init>

  return USBD_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d006      	beq.n	8006db2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	683a      	ldr	r2, [r7, #0]
 8006da8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	73fb      	strb	r3, [r7, #15]
 8006db0:	e001      	b.n	8006db6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006db2:	2302      	movs	r3, #2
 8006db4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bc80      	pop	{r7}
 8006dc0:	4770      	bx	lr

08006dc2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b082      	sub	sp, #8
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f004 fa9e 	bl	800b30c <USBD_LL_Start>

  return USBD_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3708      	adds	r7, #8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b083      	sub	sp, #12
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bc80      	pop	{r7}
 8006dec:	4770      	bx	lr

08006dee <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b084      	sub	sp, #16
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	460b      	mov	r3, r1
 8006df8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00c      	beq.n	8006e22 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	78fa      	ldrb	r2, [r7, #3]
 8006e12:	4611      	mov	r1, r2
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	4798      	blx	r3
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	460b      	mov	r3, r1
 8006e36:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	78fa      	ldrb	r2, [r7, #3]
 8006e42:	4611      	mov	r1, r2
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	4798      	blx	r3

  return USBD_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b082      	sub	sp, #8
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f000 fed8 	bl	8007c1a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006e78:	461a      	mov	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006e86:	f003 031f 	and.w	r3, r3, #31
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d016      	beq.n	8006ebc <USBD_LL_SetupStage+0x6a>
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d81c      	bhi.n	8006ecc <USBD_LL_SetupStage+0x7a>
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d002      	beq.n	8006e9c <USBD_LL_SetupStage+0x4a>
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d008      	beq.n	8006eac <USBD_LL_SetupStage+0x5a>
 8006e9a:	e017      	b.n	8006ecc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f9cb 	bl	8007240 <USBD_StdDevReq>
      break;
 8006eaa:	e01a      	b.n	8006ee2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fa2d 	bl	8007314 <USBD_StdItfReq>
      break;
 8006eba:	e012      	b.n	8006ee2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fa6d 	bl	80073a4 <USBD_StdEPReq>
      break;
 8006eca:	e00a      	b.n	8006ee2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006ed2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	4619      	mov	r1, r3
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f004 fa76 	bl	800b3cc <USBD_LL_StallEP>
      break;
 8006ee0:	bf00      	nop
  }

  return USBD_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	607a      	str	r2, [r7, #4]
 8006ef8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006efa:	7afb      	ldrb	r3, [r7, #11]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d14b      	bne.n	8006f98 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006f06:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f0e:	2b03      	cmp	r3, #3
 8006f10:	d134      	bne.n	8006f7c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	68da      	ldr	r2, [r3, #12]
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d919      	bls.n	8006f52 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	68da      	ldr	r2, [r3, #12]
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	1ad2      	subs	r2, r2, r3
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	68da      	ldr	r2, [r3, #12]
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d203      	bcs.n	8006f40 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	e002      	b.n	8006f46 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	461a      	mov	r2, r3
 8006f48:	6879      	ldr	r1, [r7, #4]
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f000 ff57 	bl	8007dfe <USBD_CtlContinueRx>
 8006f50:	e038      	b.n	8006fc4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00a      	beq.n	8006f74 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006f64:	2b03      	cmp	r3, #3
 8006f66:	d105      	bne.n	8006f74 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f000 ff54 	bl	8007e22 <USBD_CtlSendStatus>
 8006f7a:	e023      	b.n	8006fc4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f82:	2b05      	cmp	r3, #5
 8006f84:	d11e      	bne.n	8006fc4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006f8e:	2100      	movs	r1, #0
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f004 fa1b 	bl	800b3cc <USBD_LL_StallEP>
 8006f96:	e015      	b.n	8006fc4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00d      	beq.n	8006fc0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d108      	bne.n	8006fc0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	7afa      	ldrb	r2, [r7, #11]
 8006fb8:	4611      	mov	r1, r2
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	4798      	blx	r3
 8006fbe:	e001      	b.n	8006fc4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	e000      	b.n	8006fc6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3718      	adds	r7, #24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b086      	sub	sp, #24
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	60f8      	str	r0, [r7, #12]
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	607a      	str	r2, [r7, #4]
 8006fda:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006fdc:	7afb      	ldrb	r3, [r7, #11]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d17f      	bne.n	80070e2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	3314      	adds	r3, #20
 8006fe6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d15c      	bne.n	80070ac <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	68da      	ldr	r2, [r3, #12]
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d915      	bls.n	800702a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	68da      	ldr	r2, [r3, #12]
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	1ad2      	subs	r2, r2, r3
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	b29b      	uxth	r3, r3
 8007012:	461a      	mov	r2, r3
 8007014:	6879      	ldr	r1, [r7, #4]
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f000 fec1 	bl	8007d9e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800701c:	2300      	movs	r3, #0
 800701e:	2200      	movs	r2, #0
 8007020:	2100      	movs	r1, #0
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f004 fa7e 	bl	800b524 <USBD_LL_PrepareReceive>
 8007028:	e04e      	b.n	80070c8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	6912      	ldr	r2, [r2, #16]
 8007032:	fbb3 f1f2 	udiv	r1, r3, r2
 8007036:	fb02 f201 	mul.w	r2, r2, r1
 800703a:	1a9b      	subs	r3, r3, r2
 800703c:	2b00      	cmp	r3, #0
 800703e:	d11c      	bne.n	800707a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	689a      	ldr	r2, [r3, #8]
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007048:	429a      	cmp	r2, r3
 800704a:	d316      	bcc.n	800707a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007056:	429a      	cmp	r2, r3
 8007058:	d20f      	bcs.n	800707a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800705a:	2200      	movs	r2, #0
 800705c:	2100      	movs	r1, #0
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 fe9d 	bl	8007d9e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800706c:	2300      	movs	r3, #0
 800706e:	2200      	movs	r2, #0
 8007070:	2100      	movs	r1, #0
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f004 fa56 	bl	800b524 <USBD_LL_PrepareReceive>
 8007078:	e026      	b.n	80070c8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00a      	beq.n	800709c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800708c:	2b03      	cmp	r3, #3
 800708e:	d105      	bne.n	800709c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800709c:	2180      	movs	r1, #128	; 0x80
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f004 f994 	bl	800b3cc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f000 fecf 	bl	8007e48 <USBD_CtlReceiveStatus>
 80070aa:	e00d      	b.n	80070c8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070b2:	2b04      	cmp	r3, #4
 80070b4:	d004      	beq.n	80070c0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d103      	bne.n	80070c8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80070c0:	2180      	movs	r1, #128	; 0x80
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f004 f982 	bl	800b3cc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d11d      	bne.n	800710e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f7ff fe81 	bl	8006dda <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80070e0:	e015      	b.n	800710e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00d      	beq.n	800710a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80070f4:	2b03      	cmp	r3, #3
 80070f6:	d108      	bne.n	800710a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070fe:	695b      	ldr	r3, [r3, #20]
 8007100:	7afa      	ldrb	r2, [r7, #11]
 8007102:	4611      	mov	r1, r2
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	4798      	blx	r3
 8007108:	e001      	b.n	800710e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800710a:	2302      	movs	r3, #2
 800710c:	e000      	b.n	8007110 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3718      	adds	r7, #24
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007120:	2340      	movs	r3, #64	; 0x40
 8007122:	2200      	movs	r2, #0
 8007124:	2100      	movs	r1, #0
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f004 f90b 	bl	800b342 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2240      	movs	r2, #64	; 0x40
 8007138:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800713c:	2340      	movs	r3, #64	; 0x40
 800713e:	2200      	movs	r2, #0
 8007140:	2180      	movs	r1, #128	; 0x80
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f004 f8fd 	bl	800b342 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2240      	movs	r2, #64	; 0x40
 8007152:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007178:	2b00      	cmp	r3, #0
 800717a:	d009      	beq.n	8007190 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	6852      	ldr	r2, [r2, #4]
 8007188:	b2d2      	uxtb	r2, r2
 800718a:	4611      	mov	r1, r2
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	4798      	blx	r3
  }

  return USBD_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800719a:	b480      	push	{r7}
 800719c:	b083      	sub	sp, #12
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	460b      	mov	r3, r1
 80071a4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	78fa      	ldrb	r2, [r7, #3]
 80071aa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	370c      	adds	r7, #12
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bc80      	pop	{r7}
 80071b6:	4770      	bx	lr

080071b8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2204      	movs	r2, #4
 80071d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	bc80      	pop	{r7}
 80071de:	4770      	bx	lr

080071e0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ee:	2b04      	cmp	r3, #4
 80071f0:	d105      	bne.n	80071fe <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	bc80      	pop	{r7}
 8007208:	4770      	bx	lr

0800720a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b082      	sub	sp, #8
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007218:	2b03      	cmp	r3, #3
 800721a:	d10b      	bne.n	8007234 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007222:	69db      	ldr	r3, [r3, #28]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d005      	beq.n	8007234 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
	...

08007240 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007256:	2b40      	cmp	r3, #64	; 0x40
 8007258:	d005      	beq.n	8007266 <USBD_StdDevReq+0x26>
 800725a:	2b40      	cmp	r3, #64	; 0x40
 800725c:	d84f      	bhi.n	80072fe <USBD_StdDevReq+0xbe>
 800725e:	2b00      	cmp	r3, #0
 8007260:	d009      	beq.n	8007276 <USBD_StdDevReq+0x36>
 8007262:	2b20      	cmp	r3, #32
 8007264:	d14b      	bne.n	80072fe <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	4798      	blx	r3
      break;
 8007274:	e048      	b.n	8007308 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	785b      	ldrb	r3, [r3, #1]
 800727a:	2b09      	cmp	r3, #9
 800727c:	d839      	bhi.n	80072f2 <USBD_StdDevReq+0xb2>
 800727e:	a201      	add	r2, pc, #4	; (adr r2, 8007284 <USBD_StdDevReq+0x44>)
 8007280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007284:	080072d5 	.word	0x080072d5
 8007288:	080072e9 	.word	0x080072e9
 800728c:	080072f3 	.word	0x080072f3
 8007290:	080072df 	.word	0x080072df
 8007294:	080072f3 	.word	0x080072f3
 8007298:	080072b7 	.word	0x080072b7
 800729c:	080072ad 	.word	0x080072ad
 80072a0:	080072f3 	.word	0x080072f3
 80072a4:	080072cb 	.word	0x080072cb
 80072a8:	080072c1 	.word	0x080072c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80072ac:	6839      	ldr	r1, [r7, #0]
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 f9dc 	bl	800766c <USBD_GetDescriptor>
          break;
 80072b4:	e022      	b.n	80072fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80072b6:	6839      	ldr	r1, [r7, #0]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fb3f 	bl	800793c <USBD_SetAddress>
          break;
 80072be:	e01d      	b.n	80072fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fb7e 	bl	80079c4 <USBD_SetConfig>
          break;
 80072c8:	e018      	b.n	80072fc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fc07 	bl	8007ae0 <USBD_GetConfig>
          break;
 80072d2:	e013      	b.n	80072fc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80072d4:	6839      	ldr	r1, [r7, #0]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fc37 	bl	8007b4a <USBD_GetStatus>
          break;
 80072dc:	e00e      	b.n	80072fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80072de:	6839      	ldr	r1, [r7, #0]
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fc65 	bl	8007bb0 <USBD_SetFeature>
          break;
 80072e6:	e009      	b.n	80072fc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80072e8:	6839      	ldr	r1, [r7, #0]
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fc74 	bl	8007bd8 <USBD_ClrFeature>
          break;
 80072f0:	e004      	b.n	80072fc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80072f2:	6839      	ldr	r1, [r7, #0]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fccc 	bl	8007c92 <USBD_CtlError>
          break;
 80072fa:	bf00      	nop
      }
      break;
 80072fc:	e004      	b.n	8007308 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fcc6 	bl	8007c92 <USBD_CtlError>
      break;
 8007306:	bf00      	nop
  }

  return ret;
 8007308:	7bfb      	ldrb	r3, [r7, #15]
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop

08007314 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800731e:	2300      	movs	r3, #0
 8007320:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800732a:	2b40      	cmp	r3, #64	; 0x40
 800732c:	d005      	beq.n	800733a <USBD_StdItfReq+0x26>
 800732e:	2b40      	cmp	r3, #64	; 0x40
 8007330:	d82e      	bhi.n	8007390 <USBD_StdItfReq+0x7c>
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <USBD_StdItfReq+0x26>
 8007336:	2b20      	cmp	r3, #32
 8007338:	d12a      	bne.n	8007390 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007340:	3b01      	subs	r3, #1
 8007342:	2b02      	cmp	r3, #2
 8007344:	d81d      	bhi.n	8007382 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	889b      	ldrh	r3, [r3, #4]
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b01      	cmp	r3, #1
 800734e:	d813      	bhi.n	8007378 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	6839      	ldr	r1, [r7, #0]
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	4798      	blx	r3
 800735e:	4603      	mov	r3, r0
 8007360:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	88db      	ldrh	r3, [r3, #6]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d110      	bne.n	800738c <USBD_StdItfReq+0x78>
 800736a:	7bfb      	ldrb	r3, [r7, #15]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10d      	bne.n	800738c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fd56 	bl	8007e22 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007376:	e009      	b.n	800738c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fc89 	bl	8007c92 <USBD_CtlError>
          break;
 8007380:	e004      	b.n	800738c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fc84 	bl	8007c92 <USBD_CtlError>
          break;
 800738a:	e000      	b.n	800738e <USBD_StdItfReq+0x7a>
          break;
 800738c:	bf00      	nop
      }
      break;
 800738e:	e004      	b.n	800739a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007390:	6839      	ldr	r1, [r7, #0]
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 fc7d 	bl	8007c92 <USBD_CtlError>
      break;
 8007398:	bf00      	nop
  }

  return USBD_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80073ae:	2300      	movs	r3, #0
 80073b0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	889b      	ldrh	r3, [r3, #4]
 80073b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073c0:	2b40      	cmp	r3, #64	; 0x40
 80073c2:	d007      	beq.n	80073d4 <USBD_StdEPReq+0x30>
 80073c4:	2b40      	cmp	r3, #64	; 0x40
 80073c6:	f200 8146 	bhi.w	8007656 <USBD_StdEPReq+0x2b2>
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00a      	beq.n	80073e4 <USBD_StdEPReq+0x40>
 80073ce:	2b20      	cmp	r3, #32
 80073d0:	f040 8141 	bne.w	8007656 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	6839      	ldr	r1, [r7, #0]
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	4798      	blx	r3
      break;
 80073e2:	e13d      	b.n	8007660 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073ec:	2b20      	cmp	r3, #32
 80073ee:	d10a      	bne.n	8007406 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	6839      	ldr	r1, [r7, #0]
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	4798      	blx	r3
 80073fe:	4603      	mov	r3, r0
 8007400:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007402:	7bfb      	ldrb	r3, [r7, #15]
 8007404:	e12d      	b.n	8007662 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	785b      	ldrb	r3, [r3, #1]
 800740a:	2b03      	cmp	r3, #3
 800740c:	d007      	beq.n	800741e <USBD_StdEPReq+0x7a>
 800740e:	2b03      	cmp	r3, #3
 8007410:	f300 811b 	bgt.w	800764a <USBD_StdEPReq+0x2a6>
 8007414:	2b00      	cmp	r3, #0
 8007416:	d072      	beq.n	80074fe <USBD_StdEPReq+0x15a>
 8007418:	2b01      	cmp	r3, #1
 800741a:	d03a      	beq.n	8007492 <USBD_StdEPReq+0xee>
 800741c:	e115      	b.n	800764a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007424:	2b02      	cmp	r3, #2
 8007426:	d002      	beq.n	800742e <USBD_StdEPReq+0x8a>
 8007428:	2b03      	cmp	r3, #3
 800742a:	d015      	beq.n	8007458 <USBD_StdEPReq+0xb4>
 800742c:	e02b      	b.n	8007486 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800742e:	7bbb      	ldrb	r3, [r7, #14]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00c      	beq.n	800744e <USBD_StdEPReq+0xaa>
 8007434:	7bbb      	ldrb	r3, [r7, #14]
 8007436:	2b80      	cmp	r3, #128	; 0x80
 8007438:	d009      	beq.n	800744e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800743a:	7bbb      	ldrb	r3, [r7, #14]
 800743c:	4619      	mov	r1, r3
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f003 ffc4 	bl	800b3cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007444:	2180      	movs	r1, #128	; 0x80
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f003 ffc0 	bl	800b3cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800744c:	e020      	b.n	8007490 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800744e:	6839      	ldr	r1, [r7, #0]
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fc1e 	bl	8007c92 <USBD_CtlError>
              break;
 8007456:	e01b      	b.n	8007490 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	885b      	ldrh	r3, [r3, #2]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10e      	bne.n	800747e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007460:	7bbb      	ldrb	r3, [r7, #14]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00b      	beq.n	800747e <USBD_StdEPReq+0xda>
 8007466:	7bbb      	ldrb	r3, [r7, #14]
 8007468:	2b80      	cmp	r3, #128	; 0x80
 800746a:	d008      	beq.n	800747e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	88db      	ldrh	r3, [r3, #6]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d104      	bne.n	800747e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007474:	7bbb      	ldrb	r3, [r7, #14]
 8007476:	4619      	mov	r1, r3
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f003 ffa7 	bl	800b3cc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fccf 	bl	8007e22 <USBD_CtlSendStatus>

              break;
 8007484:	e004      	b.n	8007490 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fc02 	bl	8007c92 <USBD_CtlError>
              break;
 800748e:	bf00      	nop
          }
          break;
 8007490:	e0e0      	b.n	8007654 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007498:	2b02      	cmp	r3, #2
 800749a:	d002      	beq.n	80074a2 <USBD_StdEPReq+0xfe>
 800749c:	2b03      	cmp	r3, #3
 800749e:	d015      	beq.n	80074cc <USBD_StdEPReq+0x128>
 80074a0:	e026      	b.n	80074f0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074a2:	7bbb      	ldrb	r3, [r7, #14]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00c      	beq.n	80074c2 <USBD_StdEPReq+0x11e>
 80074a8:	7bbb      	ldrb	r3, [r7, #14]
 80074aa:	2b80      	cmp	r3, #128	; 0x80
 80074ac:	d009      	beq.n	80074c2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80074ae:	7bbb      	ldrb	r3, [r7, #14]
 80074b0:	4619      	mov	r1, r3
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f003 ff8a 	bl	800b3cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80074b8:	2180      	movs	r1, #128	; 0x80
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f003 ff86 	bl	800b3cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074c0:	e01c      	b.n	80074fc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80074c2:	6839      	ldr	r1, [r7, #0]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fbe4 	bl	8007c92 <USBD_CtlError>
              break;
 80074ca:	e017      	b.n	80074fc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	885b      	ldrh	r3, [r3, #2]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d112      	bne.n	80074fa <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80074d4:	7bbb      	ldrb	r3, [r7, #14]
 80074d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d004      	beq.n	80074e8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80074de:	7bbb      	ldrb	r3, [r7, #14]
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f003 ff91 	bl	800b40a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fc9a 	bl	8007e22 <USBD_CtlSendStatus>
              }
              break;
 80074ee:	e004      	b.n	80074fa <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80074f0:	6839      	ldr	r1, [r7, #0]
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fbcd 	bl	8007c92 <USBD_CtlError>
              break;
 80074f8:	e000      	b.n	80074fc <USBD_StdEPReq+0x158>
              break;
 80074fa:	bf00      	nop
          }
          break;
 80074fc:	e0aa      	b.n	8007654 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007504:	2b02      	cmp	r3, #2
 8007506:	d002      	beq.n	800750e <USBD_StdEPReq+0x16a>
 8007508:	2b03      	cmp	r3, #3
 800750a:	d032      	beq.n	8007572 <USBD_StdEPReq+0x1ce>
 800750c:	e097      	b.n	800763e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800750e:	7bbb      	ldrb	r3, [r7, #14]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d007      	beq.n	8007524 <USBD_StdEPReq+0x180>
 8007514:	7bbb      	ldrb	r3, [r7, #14]
 8007516:	2b80      	cmp	r3, #128	; 0x80
 8007518:	d004      	beq.n	8007524 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fbb8 	bl	8007c92 <USBD_CtlError>
                break;
 8007522:	e091      	b.n	8007648 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007524:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007528:	2b00      	cmp	r3, #0
 800752a:	da0b      	bge.n	8007544 <USBD_StdEPReq+0x1a0>
 800752c:	7bbb      	ldrb	r3, [r7, #14]
 800752e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007532:	4613      	mov	r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	4413      	add	r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	3310      	adds	r3, #16
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	4413      	add	r3, r2
 8007540:	3304      	adds	r3, #4
 8007542:	e00b      	b.n	800755c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007544:	7bbb      	ldrb	r3, [r7, #14]
 8007546:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800754a:	4613      	mov	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	4413      	add	r3, r2
 800755a:	3304      	adds	r3, #4
 800755c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2200      	movs	r2, #0
 8007562:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	2202      	movs	r2, #2
 8007568:	4619      	mov	r1, r3
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fbfb 	bl	8007d66 <USBD_CtlSendData>
              break;
 8007570:	e06a      	b.n	8007648 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007572:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007576:	2b00      	cmp	r3, #0
 8007578:	da11      	bge.n	800759e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800757a:	7bbb      	ldrb	r3, [r7, #14]
 800757c:	f003 020f 	and.w	r2, r3, #15
 8007580:	6879      	ldr	r1, [r7, #4]
 8007582:	4613      	mov	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	440b      	add	r3, r1
 800758c:	3318      	adds	r3, #24
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d117      	bne.n	80075c4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007594:	6839      	ldr	r1, [r7, #0]
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fb7b 	bl	8007c92 <USBD_CtlError>
                  break;
 800759c:	e054      	b.n	8007648 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800759e:	7bbb      	ldrb	r3, [r7, #14]
 80075a0:	f003 020f 	and.w	r2, r3, #15
 80075a4:	6879      	ldr	r1, [r7, #4]
 80075a6:	4613      	mov	r3, r2
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4413      	add	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	440b      	add	r3, r1
 80075b0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d104      	bne.n	80075c4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fb68 	bl	8007c92 <USBD_CtlError>
                  break;
 80075c2:	e041      	b.n	8007648 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	da0b      	bge.n	80075e4 <USBD_StdEPReq+0x240>
 80075cc:	7bbb      	ldrb	r3, [r7, #14]
 80075ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075d2:	4613      	mov	r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4413      	add	r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	3310      	adds	r3, #16
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	4413      	add	r3, r2
 80075e0:	3304      	adds	r3, #4
 80075e2:	e00b      	b.n	80075fc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
 80075e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075ea:	4613      	mov	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4413      	add	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	4413      	add	r3, r2
 80075fa:	3304      	adds	r3, #4
 80075fc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80075fe:	7bbb      	ldrb	r3, [r7, #14]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d002      	beq.n	800760a <USBD_StdEPReq+0x266>
 8007604:	7bbb      	ldrb	r3, [r7, #14]
 8007606:	2b80      	cmp	r3, #128	; 0x80
 8007608:	d103      	bne.n	8007612 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	2200      	movs	r2, #0
 800760e:	601a      	str	r2, [r3, #0]
 8007610:	e00e      	b.n	8007630 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007612:	7bbb      	ldrb	r3, [r7, #14]
 8007614:	4619      	mov	r1, r3
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f003 ff16 	bl	800b448 <USBD_LL_IsStallEP>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d003      	beq.n	800762a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	2201      	movs	r2, #1
 8007626:	601a      	str	r2, [r3, #0]
 8007628:	e002      	b.n	8007630 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	2200      	movs	r2, #0
 800762e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	2202      	movs	r2, #2
 8007634:	4619      	mov	r1, r3
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fb95 	bl	8007d66 <USBD_CtlSendData>
              break;
 800763c:	e004      	b.n	8007648 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800763e:	6839      	ldr	r1, [r7, #0]
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 fb26 	bl	8007c92 <USBD_CtlError>
              break;
 8007646:	bf00      	nop
          }
          break;
 8007648:	e004      	b.n	8007654 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fb20 	bl	8007c92 <USBD_CtlError>
          break;
 8007652:	bf00      	nop
      }
      break;
 8007654:	e004      	b.n	8007660 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007656:	6839      	ldr	r1, [r7, #0]
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 fb1a 	bl	8007c92 <USBD_CtlError>
      break;
 800765e:	bf00      	nop
  }

  return ret;
 8007660:	7bfb      	ldrb	r3, [r7, #15]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
	...

0800766c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007676:	2300      	movs	r3, #0
 8007678:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800767a:	2300      	movs	r3, #0
 800767c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800767e:	2300      	movs	r3, #0
 8007680:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	885b      	ldrh	r3, [r3, #2]
 8007686:	0a1b      	lsrs	r3, r3, #8
 8007688:	b29b      	uxth	r3, r3
 800768a:	3b01      	subs	r3, #1
 800768c:	2b06      	cmp	r3, #6
 800768e:	f200 8128 	bhi.w	80078e2 <USBD_GetDescriptor+0x276>
 8007692:	a201      	add	r2, pc, #4	; (adr r2, 8007698 <USBD_GetDescriptor+0x2c>)
 8007694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007698:	080076b5 	.word	0x080076b5
 800769c:	080076cd 	.word	0x080076cd
 80076a0:	0800770d 	.word	0x0800770d
 80076a4:	080078e3 	.word	0x080078e3
 80076a8:	080078e3 	.word	0x080078e3
 80076ac:	08007883 	.word	0x08007883
 80076b0:	080078af 	.word	0x080078af
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	7c12      	ldrb	r2, [r2, #16]
 80076c0:	f107 0108 	add.w	r1, r7, #8
 80076c4:	4610      	mov	r0, r2
 80076c6:	4798      	blx	r3
 80076c8:	60f8      	str	r0, [r7, #12]
      break;
 80076ca:	e112      	b.n	80078f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	7c1b      	ldrb	r3, [r3, #16]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10d      	bne.n	80076f0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076dc:	f107 0208 	add.w	r2, r7, #8
 80076e0:	4610      	mov	r0, r2
 80076e2:	4798      	blx	r3
 80076e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	3301      	adds	r3, #1
 80076ea:	2202      	movs	r2, #2
 80076ec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80076ee:	e100      	b.n	80078f2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f8:	f107 0208 	add.w	r2, r7, #8
 80076fc:	4610      	mov	r0, r2
 80076fe:	4798      	blx	r3
 8007700:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	3301      	adds	r3, #1
 8007706:	2202      	movs	r2, #2
 8007708:	701a      	strb	r2, [r3, #0]
      break;
 800770a:	e0f2      	b.n	80078f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	885b      	ldrh	r3, [r3, #2]
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b05      	cmp	r3, #5
 8007714:	f200 80ac 	bhi.w	8007870 <USBD_GetDescriptor+0x204>
 8007718:	a201      	add	r2, pc, #4	; (adr r2, 8007720 <USBD_GetDescriptor+0xb4>)
 800771a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771e:	bf00      	nop
 8007720:	08007739 	.word	0x08007739
 8007724:	0800776d 	.word	0x0800776d
 8007728:	080077a1 	.word	0x080077a1
 800772c:	080077d5 	.word	0x080077d5
 8007730:	08007809 	.word	0x08007809
 8007734:	0800783d 	.word	0x0800783d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00b      	beq.n	800775c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	7c12      	ldrb	r2, [r2, #16]
 8007750:	f107 0108 	add.w	r1, r7, #8
 8007754:	4610      	mov	r0, r2
 8007756:	4798      	blx	r3
 8007758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800775a:	e091      	b.n	8007880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fa97 	bl	8007c92 <USBD_CtlError>
            err++;
 8007764:	7afb      	ldrb	r3, [r7, #11]
 8007766:	3301      	adds	r3, #1
 8007768:	72fb      	strb	r3, [r7, #11]
          break;
 800776a:	e089      	b.n	8007880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00b      	beq.n	8007790 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	7c12      	ldrb	r2, [r2, #16]
 8007784:	f107 0108 	add.w	r1, r7, #8
 8007788:	4610      	mov	r0, r2
 800778a:	4798      	blx	r3
 800778c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800778e:	e077      	b.n	8007880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fa7d 	bl	8007c92 <USBD_CtlError>
            err++;
 8007798:	7afb      	ldrb	r3, [r7, #11]
 800779a:	3301      	adds	r3, #1
 800779c:	72fb      	strb	r3, [r7, #11]
          break;
 800779e:	e06f      	b.n	8007880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00b      	beq.n	80077c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	7c12      	ldrb	r2, [r2, #16]
 80077b8:	f107 0108 	add.w	r1, r7, #8
 80077bc:	4610      	mov	r0, r2
 80077be:	4798      	blx	r3
 80077c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077c2:	e05d      	b.n	8007880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077c4:	6839      	ldr	r1, [r7, #0]
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fa63 	bl	8007c92 <USBD_CtlError>
            err++;
 80077cc:	7afb      	ldrb	r3, [r7, #11]
 80077ce:	3301      	adds	r3, #1
 80077d0:	72fb      	strb	r3, [r7, #11]
          break;
 80077d2:	e055      	b.n	8007880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00b      	beq.n	80077f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	7c12      	ldrb	r2, [r2, #16]
 80077ec:	f107 0108 	add.w	r1, r7, #8
 80077f0:	4610      	mov	r0, r2
 80077f2:	4798      	blx	r3
 80077f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077f6:	e043      	b.n	8007880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077f8:	6839      	ldr	r1, [r7, #0]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fa49 	bl	8007c92 <USBD_CtlError>
            err++;
 8007800:	7afb      	ldrb	r3, [r7, #11]
 8007802:	3301      	adds	r3, #1
 8007804:	72fb      	strb	r3, [r7, #11]
          break;
 8007806:	e03b      	b.n	8007880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00b      	beq.n	800782c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	7c12      	ldrb	r2, [r2, #16]
 8007820:	f107 0108 	add.w	r1, r7, #8
 8007824:	4610      	mov	r0, r2
 8007826:	4798      	blx	r3
 8007828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800782a:	e029      	b.n	8007880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fa2f 	bl	8007c92 <USBD_CtlError>
            err++;
 8007834:	7afb      	ldrb	r3, [r7, #11]
 8007836:	3301      	adds	r3, #1
 8007838:	72fb      	strb	r3, [r7, #11]
          break;
 800783a:	e021      	b.n	8007880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00b      	beq.n	8007860 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	7c12      	ldrb	r2, [r2, #16]
 8007854:	f107 0108 	add.w	r1, r7, #8
 8007858:	4610      	mov	r0, r2
 800785a:	4798      	blx	r3
 800785c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800785e:	e00f      	b.n	8007880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fa15 	bl	8007c92 <USBD_CtlError>
            err++;
 8007868:	7afb      	ldrb	r3, [r7, #11]
 800786a:	3301      	adds	r3, #1
 800786c:	72fb      	strb	r3, [r7, #11]
          break;
 800786e:	e007      	b.n	8007880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fa0d 	bl	8007c92 <USBD_CtlError>
          err++;
 8007878:	7afb      	ldrb	r3, [r7, #11]
 800787a:	3301      	adds	r3, #1
 800787c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800787e:	e038      	b.n	80078f2 <USBD_GetDescriptor+0x286>
 8007880:	e037      	b.n	80078f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	7c1b      	ldrb	r3, [r3, #16]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d109      	bne.n	800789e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007892:	f107 0208 	add.w	r2, r7, #8
 8007896:	4610      	mov	r0, r2
 8007898:	4798      	blx	r3
 800789a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800789c:	e029      	b.n	80078f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f9f6 	bl	8007c92 <USBD_CtlError>
        err++;
 80078a6:	7afb      	ldrb	r3, [r7, #11]
 80078a8:	3301      	adds	r3, #1
 80078aa:	72fb      	strb	r3, [r7, #11]
      break;
 80078ac:	e021      	b.n	80078f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	7c1b      	ldrb	r3, [r3, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10d      	bne.n	80078d2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078be:	f107 0208 	add.w	r2, r7, #8
 80078c2:	4610      	mov	r0, r2
 80078c4:	4798      	blx	r3
 80078c6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	3301      	adds	r3, #1
 80078cc:	2207      	movs	r2, #7
 80078ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078d0:	e00f      	b.n	80078f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f9dc 	bl	8007c92 <USBD_CtlError>
        err++;
 80078da:	7afb      	ldrb	r3, [r7, #11]
 80078dc:	3301      	adds	r3, #1
 80078de:	72fb      	strb	r3, [r7, #11]
      break;
 80078e0:	e007      	b.n	80078f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80078e2:	6839      	ldr	r1, [r7, #0]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f9d4 	bl	8007c92 <USBD_CtlError>
      err++;
 80078ea:	7afb      	ldrb	r3, [r7, #11]
 80078ec:	3301      	adds	r3, #1
 80078ee:	72fb      	strb	r3, [r7, #11]
      break;
 80078f0:	bf00      	nop
  }

  if (err != 0U)
 80078f2:	7afb      	ldrb	r3, [r7, #11]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d11c      	bne.n	8007932 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80078f8:	893b      	ldrh	r3, [r7, #8]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d011      	beq.n	8007922 <USBD_GetDescriptor+0x2b6>
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	88db      	ldrh	r3, [r3, #6]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00d      	beq.n	8007922 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	88da      	ldrh	r2, [r3, #6]
 800790a:	893b      	ldrh	r3, [r7, #8]
 800790c:	4293      	cmp	r3, r2
 800790e:	bf28      	it	cs
 8007910:	4613      	movcs	r3, r2
 8007912:	b29b      	uxth	r3, r3
 8007914:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007916:	893b      	ldrh	r3, [r7, #8]
 8007918:	461a      	mov	r2, r3
 800791a:	68f9      	ldr	r1, [r7, #12]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fa22 	bl	8007d66 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	88db      	ldrh	r3, [r3, #6]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d104      	bne.n	8007934 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fa79 	bl	8007e22 <USBD_CtlSendStatus>
 8007930:	e000      	b.n	8007934 <USBD_GetDescriptor+0x2c8>
    return;
 8007932:	bf00      	nop
    }
  }
}
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop

0800793c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	889b      	ldrh	r3, [r3, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d130      	bne.n	80079b0 <USBD_SetAddress+0x74>
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	88db      	ldrh	r3, [r3, #6]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d12c      	bne.n	80079b0 <USBD_SetAddress+0x74>
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	885b      	ldrh	r3, [r3, #2]
 800795a:	2b7f      	cmp	r3, #127	; 0x7f
 800795c:	d828      	bhi.n	80079b0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	885b      	ldrh	r3, [r3, #2]
 8007962:	b2db      	uxtb	r3, r3
 8007964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007968:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007970:	2b03      	cmp	r3, #3
 8007972:	d104      	bne.n	800797e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f98b 	bl	8007c92 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800797c:	e01d      	b.n	80079ba <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	7bfa      	ldrb	r2, [r7, #15]
 8007982:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007986:	7bfb      	ldrb	r3, [r7, #15]
 8007988:	4619      	mov	r1, r3
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f003 fd88 	bl	800b4a0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fa46 	bl	8007e22 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007996:	7bfb      	ldrb	r3, [r7, #15]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d004      	beq.n	80079a6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2202      	movs	r2, #2
 80079a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079a4:	e009      	b.n	80079ba <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ae:	e004      	b.n	80079ba <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f96d 	bl	8007c92 <USBD_CtlError>
  }
}
 80079b8:	bf00      	nop
 80079ba:	bf00      	nop
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
	...

080079c4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	885b      	ldrh	r3, [r3, #2]
 80079d2:	b2da      	uxtb	r2, r3
 80079d4:	4b41      	ldr	r3, [pc, #260]	; (8007adc <USBD_SetConfig+0x118>)
 80079d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80079d8:	4b40      	ldr	r3, [pc, #256]	; (8007adc <USBD_SetConfig+0x118>)
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d904      	bls.n	80079ea <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80079e0:	6839      	ldr	r1, [r7, #0]
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f955 	bl	8007c92 <USBD_CtlError>
 80079e8:	e075      	b.n	8007ad6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d002      	beq.n	80079fa <USBD_SetConfig+0x36>
 80079f4:	2b03      	cmp	r3, #3
 80079f6:	d023      	beq.n	8007a40 <USBD_SetConfig+0x7c>
 80079f8:	e062      	b.n	8007ac0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80079fa:	4b38      	ldr	r3, [pc, #224]	; (8007adc <USBD_SetConfig+0x118>)
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d01a      	beq.n	8007a38 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007a02:	4b36      	ldr	r3, [pc, #216]	; (8007adc <USBD_SetConfig+0x118>)
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	461a      	mov	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2203      	movs	r2, #3
 8007a10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007a14:	4b31      	ldr	r3, [pc, #196]	; (8007adc <USBD_SetConfig+0x118>)
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	4619      	mov	r1, r3
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f7ff f9e7 	bl	8006dee <USBD_SetClassConfig>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d104      	bne.n	8007a30 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f932 	bl	8007c92 <USBD_CtlError>
            return;
 8007a2e:	e052      	b.n	8007ad6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 f9f6 	bl	8007e22 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007a36:	e04e      	b.n	8007ad6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f9f2 	bl	8007e22 <USBD_CtlSendStatus>
        break;
 8007a3e:	e04a      	b.n	8007ad6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007a40:	4b26      	ldr	r3, [pc, #152]	; (8007adc <USBD_SetConfig+0x118>)
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d112      	bne.n	8007a6e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007a50:	4b22      	ldr	r3, [pc, #136]	; (8007adc <USBD_SetConfig+0x118>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	461a      	mov	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007a5a:	4b20      	ldr	r3, [pc, #128]	; (8007adc <USBD_SetConfig+0x118>)
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7ff f9e3 	bl	8006e2c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f9db 	bl	8007e22 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007a6c:	e033      	b.n	8007ad6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007a6e:	4b1b      	ldr	r3, [pc, #108]	; (8007adc <USBD_SetConfig+0x118>)
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	461a      	mov	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d01d      	beq.n	8007ab8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	4619      	mov	r1, r3
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f7ff f9d1 	bl	8006e2c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007a8a:	4b14      	ldr	r3, [pc, #80]	; (8007adc <USBD_SetConfig+0x118>)
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007a94:	4b11      	ldr	r3, [pc, #68]	; (8007adc <USBD_SetConfig+0x118>)
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7ff f9a7 	bl	8006dee <USBD_SetClassConfig>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d104      	bne.n	8007ab0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007aa6:	6839      	ldr	r1, [r7, #0]
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f8f2 	bl	8007c92 <USBD_CtlError>
            return;
 8007aae:	e012      	b.n	8007ad6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 f9b6 	bl	8007e22 <USBD_CtlSendStatus>
        break;
 8007ab6:	e00e      	b.n	8007ad6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 f9b2 	bl	8007e22 <USBD_CtlSendStatus>
        break;
 8007abe:	e00a      	b.n	8007ad6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f8e5 	bl	8007c92 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007ac8:	4b04      	ldr	r3, [pc, #16]	; (8007adc <USBD_SetConfig+0x118>)
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	4619      	mov	r1, r3
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7ff f9ac 	bl	8006e2c <USBD_ClrClassConfig>
        break;
 8007ad4:	bf00      	nop
    }
  }
}
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	2000019c 	.word	0x2000019c

08007ae0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	88db      	ldrh	r3, [r3, #6]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d004      	beq.n	8007afc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007af2:	6839      	ldr	r1, [r7, #0]
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f8cc 	bl	8007c92 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007afa:	e022      	b.n	8007b42 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	dc02      	bgt.n	8007b0c <USBD_GetConfig+0x2c>
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	dc03      	bgt.n	8007b12 <USBD_GetConfig+0x32>
 8007b0a:	e015      	b.n	8007b38 <USBD_GetConfig+0x58>
 8007b0c:	2b03      	cmp	r3, #3
 8007b0e:	d00b      	beq.n	8007b28 <USBD_GetConfig+0x48>
 8007b10:	e012      	b.n	8007b38 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	3308      	adds	r3, #8
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	4619      	mov	r1, r3
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 f920 	bl	8007d66 <USBD_CtlSendData>
        break;
 8007b26:	e00c      	b.n	8007b42 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f918 	bl	8007d66 <USBD_CtlSendData>
        break;
 8007b36:	e004      	b.n	8007b42 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f8a9 	bl	8007c92 <USBD_CtlError>
        break;
 8007b40:	bf00      	nop
}
 8007b42:	bf00      	nop
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b082      	sub	sp, #8
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
 8007b52:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d81e      	bhi.n	8007b9e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	88db      	ldrh	r3, [r3, #6]
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d004      	beq.n	8007b72 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007b68:	6839      	ldr	r1, [r7, #0]
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f891 	bl	8007c92 <USBD_CtlError>
        break;
 8007b70:	e01a      	b.n	8007ba8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d005      	beq.n	8007b8e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	f043 0202 	orr.w	r2, r3, #2
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	330c      	adds	r3, #12
 8007b92:	2202      	movs	r2, #2
 8007b94:	4619      	mov	r1, r3
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f8e5 	bl	8007d66 <USBD_CtlSendData>
      break;
 8007b9c:	e004      	b.n	8007ba8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007b9e:	6839      	ldr	r1, [r7, #0]
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 f876 	bl	8007c92 <USBD_CtlError>
      break;
 8007ba6:	bf00      	nop
  }
}
 8007ba8:	bf00      	nop
 8007baa:	3708      	adds	r7, #8
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	885b      	ldrh	r3, [r3, #2]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d106      	bne.n	8007bd0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f929 	bl	8007e22 <USBD_CtlSendStatus>
  }
}
 8007bd0:	bf00      	nop
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007be8:	3b01      	subs	r3, #1
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d80b      	bhi.n	8007c06 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	885b      	ldrh	r3, [r3, #2]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d10c      	bne.n	8007c10 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f90f 	bl	8007e22 <USBD_CtlSendStatus>
      }
      break;
 8007c04:	e004      	b.n	8007c10 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f842 	bl	8007c92 <USBD_CtlError>
      break;
 8007c0e:	e000      	b.n	8007c12 <USBD_ClrFeature+0x3a>
      break;
 8007c10:	bf00      	nop
  }
}
 8007c12:	bf00      	nop
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b083      	sub	sp, #12
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	781a      	ldrb	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	785a      	ldrb	r2, [r3, #1]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	3302      	adds	r3, #2
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	3303      	adds	r3, #3
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	021b      	lsls	r3, r3, #8
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	4413      	add	r3, r2
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	3304      	adds	r3, #4
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	3305      	adds	r3, #5
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	021b      	lsls	r3, r3, #8
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	4413      	add	r3, r2
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	3306      	adds	r3, #6
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	3307      	adds	r3, #7
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	021b      	lsls	r3, r3, #8
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	4413      	add	r3, r2
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	80da      	strh	r2, [r3, #6]

}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bc80      	pop	{r7}
 8007c90:	4770      	bx	lr

08007c92 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b082      	sub	sp, #8
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
 8007c9a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007c9c:	2180      	movs	r1, #128	; 0x80
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f003 fb94 	bl	800b3cc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f003 fb90 	bl	800b3cc <USBD_LL_StallEP>
}
 8007cac:	bf00      	nop
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b086      	sub	sp, #24
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d032      	beq.n	8007d30 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f000 f834 	bl	8007d38 <USBD_GetLen>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	005b      	lsls	r3, r3, #1
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007cde:	7dfb      	ldrb	r3, [r7, #23]
 8007ce0:	1c5a      	adds	r2, r3, #1
 8007ce2:	75fa      	strb	r2, [r7, #23]
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	4413      	add	r3, r2
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	7812      	ldrb	r2, [r2, #0]
 8007cee:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007cf0:	7dfb      	ldrb	r3, [r7, #23]
 8007cf2:	1c5a      	adds	r2, r3, #1
 8007cf4:	75fa      	strb	r2, [r7, #23]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	2203      	movs	r2, #3
 8007cfe:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007d00:	e012      	b.n	8007d28 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	1c5a      	adds	r2, r3, #1
 8007d06:	60fa      	str	r2, [r7, #12]
 8007d08:	7dfa      	ldrb	r2, [r7, #23]
 8007d0a:	1c51      	adds	r1, r2, #1
 8007d0c:	75f9      	strb	r1, [r7, #23]
 8007d0e:	4611      	mov	r1, r2
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	440a      	add	r2, r1
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007d18:	7dfb      	ldrb	r3, [r7, #23]
 8007d1a:	1c5a      	adds	r2, r3, #1
 8007d1c:	75fa      	strb	r2, [r7, #23]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	4413      	add	r3, r2
 8007d24:	2200      	movs	r2, #0
 8007d26:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1e8      	bne.n	8007d02 <USBD_GetString+0x4e>
    }
  }
}
 8007d30:	bf00      	nop
 8007d32:	3718      	adds	r7, #24
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d40:	2300      	movs	r3, #0
 8007d42:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007d44:	e005      	b.n	8007d52 <USBD_GetLen+0x1a>
  {
    len++;
 8007d46:	7bfb      	ldrb	r3, [r7, #15]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1f5      	bne.n	8007d46 <USBD_GetLen+0xe>
  }

  return len;
 8007d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bc80      	pop	{r7}
 8007d64:	4770      	bx	lr

08007d66 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	60f8      	str	r0, [r7, #12]
 8007d6e:	60b9      	str	r1, [r7, #8]
 8007d70:	4613      	mov	r3, r2
 8007d72:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2202      	movs	r2, #2
 8007d78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007d7c:	88fa      	ldrh	r2, [r7, #6]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007d82:	88fa      	ldrh	r2, [r7, #6]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d88:	88fb      	ldrh	r3, [r7, #6]
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f003 fba5 	bl	800b4de <USBD_LL_Transmit>

  return USBD_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	60f8      	str	r0, [r7, #12]
 8007da6:	60b9      	str	r1, [r7, #8]
 8007da8:	4613      	mov	r3, r2
 8007daa:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007dac:	88fb      	ldrh	r3, [r7, #6]
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	2100      	movs	r1, #0
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f003 fb93 	bl	800b4de <USBD_LL_Transmit>

  return USBD_OK;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b084      	sub	sp, #16
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	60f8      	str	r0, [r7, #12]
 8007dca:	60b9      	str	r1, [r7, #8]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2203      	movs	r2, #3
 8007dd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007dd8:	88fa      	ldrh	r2, [r7, #6]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007de0:	88fa      	ldrh	r2, [r7, #6]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007de8:	88fb      	ldrh	r3, [r7, #6]
 8007dea:	68ba      	ldr	r2, [r7, #8]
 8007dec:	2100      	movs	r1, #0
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f003 fb98 	bl	800b524 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b084      	sub	sp, #16
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	60f8      	str	r0, [r7, #12]
 8007e06:	60b9      	str	r1, [r7, #8]
 8007e08:	4613      	mov	r3, r2
 8007e0a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e0c:	88fb      	ldrh	r3, [r7, #6]
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	2100      	movs	r1, #0
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f003 fb86 	bl	800b524 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b082      	sub	sp, #8
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2204      	movs	r2, #4
 8007e2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e32:	2300      	movs	r3, #0
 8007e34:	2200      	movs	r2, #0
 8007e36:	2100      	movs	r1, #0
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f003 fb50 	bl	800b4de <USBD_LL_Transmit>

  return USBD_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2205      	movs	r2, #5
 8007e54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e58:	2300      	movs	r3, #0
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f003 fb60 	bl	800b524 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
	...

08007e70 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e76:	f3ef 8305 	mrs	r3, IPSR
 8007e7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e7c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10f      	bne.n	8007ea2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e82:	f3ef 8310 	mrs	r3, PRIMASK
 8007e86:	607b      	str	r3, [r7, #4]
  return(result);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d109      	bne.n	8007ea2 <osKernelInitialize+0x32>
 8007e8e:	4b10      	ldr	r3, [pc, #64]	; (8007ed0 <osKernelInitialize+0x60>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d109      	bne.n	8007eaa <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e96:	f3ef 8311 	mrs	r3, BASEPRI
 8007e9a:	603b      	str	r3, [r7, #0]
  return(result);
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007ea2:	f06f 0305 	mvn.w	r3, #5
 8007ea6:	60fb      	str	r3, [r7, #12]
 8007ea8:	e00c      	b.n	8007ec4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007eaa:	4b09      	ldr	r3, [pc, #36]	; (8007ed0 <osKernelInitialize+0x60>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d105      	bne.n	8007ebe <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8007eb2:	4b07      	ldr	r3, [pc, #28]	; (8007ed0 <osKernelInitialize+0x60>)
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	60fb      	str	r3, [r7, #12]
 8007ebc:	e002      	b.n	8007ec4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8007ec2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bc80      	pop	{r7}
 8007ece:	4770      	bx	lr
 8007ed0:	200001a0 	.word	0x200001a0

08007ed4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007eda:	f3ef 8305 	mrs	r3, IPSR
 8007ede:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ee0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10f      	bne.n	8007f06 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8007eea:	607b      	str	r3, [r7, #4]
  return(result);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d109      	bne.n	8007f06 <osKernelStart+0x32>
 8007ef2:	4b11      	ldr	r3, [pc, #68]	; (8007f38 <osKernelStart+0x64>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d109      	bne.n	8007f0e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007efa:	f3ef 8311 	mrs	r3, BASEPRI
 8007efe:	603b      	str	r3, [r7, #0]
  return(result);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d003      	beq.n	8007f0e <osKernelStart+0x3a>
    stat = osErrorISR;
 8007f06:	f06f 0305 	mvn.w	r3, #5
 8007f0a:	60fb      	str	r3, [r7, #12]
 8007f0c:	e00e      	b.n	8007f2c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8007f0e:	4b0a      	ldr	r3, [pc, #40]	; (8007f38 <osKernelStart+0x64>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d107      	bne.n	8007f26 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8007f16:	4b08      	ldr	r3, [pc, #32]	; (8007f38 <osKernelStart+0x64>)
 8007f18:	2202      	movs	r2, #2
 8007f1a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007f1c:	f001 f9da 	bl	80092d4 <vTaskStartScheduler>
      stat = osOK;
 8007f20:	2300      	movs	r3, #0
 8007f22:	60fb      	str	r3, [r7, #12]
 8007f24:	e002      	b.n	8007f2c <osKernelStart+0x58>
    } else {
      stat = osError;
 8007f26:	f04f 33ff 	mov.w	r3, #4294967295
 8007f2a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	200001a0 	.word	0x200001a0

08007f3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b092      	sub	sp, #72	; 0x48
 8007f40:	af04      	add	r7, sp, #16
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f4c:	f3ef 8305 	mrs	r3, IPSR
 8007f50:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f040 8094 	bne.w	8008082 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8007f5e:	623b      	str	r3, [r7, #32]
  return(result);
 8007f60:	6a3b      	ldr	r3, [r7, #32]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f040 808d 	bne.w	8008082 <osThreadNew+0x146>
 8007f68:	4b48      	ldr	r3, [pc, #288]	; (800808c <osThreadNew+0x150>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d106      	bne.n	8007f7e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f70:	f3ef 8311 	mrs	r3, BASEPRI
 8007f74:	61fb      	str	r3, [r7, #28]
  return(result);
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f040 8082 	bne.w	8008082 <osThreadNew+0x146>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d07e      	beq.n	8008082 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8007f84:	2380      	movs	r3, #128	; 0x80
 8007f86:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007f88:	2318      	movs	r3, #24
 8007f8a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007f90:	f107 031b 	add.w	r3, r7, #27
 8007f94:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8007f96:	f04f 33ff 	mov.w	r3, #4294967295
 8007f9a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d045      	beq.n	800802e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d002      	beq.n	8007fb0 <osThreadNew+0x74>
        name = attr->name;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d008      	beq.n	8007fd6 <osThreadNew+0x9a>
 8007fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc6:	2b38      	cmp	r3, #56	; 0x38
 8007fc8:	d805      	bhi.n	8007fd6 <osThreadNew+0x9a>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	f003 0301 	and.w	r3, r3, #1
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <osThreadNew+0x9e>
        return (NULL);
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	e054      	b.n	8008084 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	695b      	ldr	r3, [r3, #20]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d003      	beq.n	8007fea <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	089b      	lsrs	r3, r3, #2
 8007fe8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00e      	beq.n	8008010 <osThreadNew+0xd4>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	2b5b      	cmp	r3, #91	; 0x5b
 8007ff8:	d90a      	bls.n	8008010 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d006      	beq.n	8008010 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d002      	beq.n	8008010 <osThreadNew+0xd4>
        mem = 1;
 800800a:	2301      	movs	r3, #1
 800800c:	62bb      	str	r3, [r7, #40]	; 0x28
 800800e:	e010      	b.n	8008032 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d10c      	bne.n	8008032 <osThreadNew+0xf6>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d108      	bne.n	8008032 <osThreadNew+0xf6>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d104      	bne.n	8008032 <osThreadNew+0xf6>
          mem = 0;
 8008028:	2300      	movs	r3, #0
 800802a:	62bb      	str	r3, [r7, #40]	; 0x28
 800802c:	e001      	b.n	8008032 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800802e:	2300      	movs	r3, #0
 8008030:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8008032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008034:	2b01      	cmp	r3, #1
 8008036:	d110      	bne.n	800805a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008040:	9202      	str	r2, [sp, #8]
 8008042:	9301      	str	r3, [sp, #4]
 8008044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008046:	9300      	str	r3, [sp, #0]
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800804c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f000 ff74 	bl	8008f3c <xTaskCreateStatic>
 8008054:	4603      	mov	r3, r0
 8008056:	617b      	str	r3, [r7, #20]
 8008058:	e013      	b.n	8008082 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800805a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805c:	2b00      	cmp	r3, #0
 800805e:	d110      	bne.n	8008082 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008062:	b29a      	uxth	r2, r3
 8008064:	f107 0314 	add.w	r3, r7, #20
 8008068:	9301      	str	r3, [sp, #4]
 800806a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f000 ffbe 	bl	8008ff4 <xTaskCreate>
 8008078:	4603      	mov	r3, r0
 800807a:	2b01      	cmp	r3, #1
 800807c:	d001      	beq.n	8008082 <osThreadNew+0x146>
          hTask = NULL;
 800807e:	2300      	movs	r3, #0
 8008080:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008082:	697b      	ldr	r3, [r7, #20]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3738      	adds	r7, #56	; 0x38
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	200001a0 	.word	0x200001a0

08008090 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008098:	f3ef 8305 	mrs	r3, IPSR
 800809c:	613b      	str	r3, [r7, #16]
  return(result);
 800809e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10f      	bne.n	80080c4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080a4:	f3ef 8310 	mrs	r3, PRIMASK
 80080a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d109      	bne.n	80080c4 <osDelay+0x34>
 80080b0:	4b0d      	ldr	r3, [pc, #52]	; (80080e8 <osDelay+0x58>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d109      	bne.n	80080cc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80080b8:	f3ef 8311 	mrs	r3, BASEPRI
 80080bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d003      	beq.n	80080cc <osDelay+0x3c>
    stat = osErrorISR;
 80080c4:	f06f 0305 	mvn.w	r3, #5
 80080c8:	617b      	str	r3, [r7, #20]
 80080ca:	e007      	b.n	80080dc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80080cc:	2300      	movs	r3, #0
 80080ce:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d002      	beq.n	80080dc <osDelay+0x4c>
      vTaskDelay(ticks);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f001 f8c8 	bl	800926c <vTaskDelay>
    }
  }

  return (stat);
 80080dc:	697b      	ldr	r3, [r7, #20]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3718      	adds	r7, #24
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	200001a0 	.word	0x200001a0

080080ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	4a06      	ldr	r2, [pc, #24]	; (8008114 <vApplicationGetIdleTaskMemory+0x28>)
 80080fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	4a05      	ldr	r2, [pc, #20]	; (8008118 <vApplicationGetIdleTaskMemory+0x2c>)
 8008102:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2280      	movs	r2, #128	; 0x80
 8008108:	601a      	str	r2, [r3, #0]
}
 800810a:	bf00      	nop
 800810c:	3714      	adds	r7, #20
 800810e:	46bd      	mov	sp, r7
 8008110:	bc80      	pop	{r7}
 8008112:	4770      	bx	lr
 8008114:	200001a4 	.word	0x200001a4
 8008118:	20000200 	.word	0x20000200

0800811c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	4a07      	ldr	r2, [pc, #28]	; (8008148 <vApplicationGetTimerTaskMemory+0x2c>)
 800812c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	4a06      	ldr	r2, [pc, #24]	; (800814c <vApplicationGetTimerTaskMemory+0x30>)
 8008132:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f44f 7280 	mov.w	r2, #256	; 0x100
 800813a:	601a      	str	r2, [r3, #0]
}
 800813c:	bf00      	nop
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	bc80      	pop	{r7}
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	20000400 	.word	0x20000400
 800814c:	2000045c 	.word	0x2000045c

08008150 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f103 0208 	add.w	r2, r3, #8
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f04f 32ff 	mov.w	r2, #4294967295
 8008168:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f103 0208 	add.w	r2, r3, #8
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f103 0208 	add.w	r2, r3, #8
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	bc80      	pop	{r7}
 800818c:	4770      	bx	lr

0800818e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800818e:	b480      	push	{r7}
 8008190:	b083      	sub	sp, #12
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bc80      	pop	{r7}
 80081a4:	4770      	bx	lr

080081a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081a6:	b480      	push	{r7}
 80081a8:	b085      	sub	sp, #20
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
 80081ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	689a      	ldr	r2, [r3, #8]
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	683a      	ldr	r2, [r7, #0]
 80081ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	1c5a      	adds	r2, r3, #1
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	601a      	str	r2, [r3, #0]
}
 80081e2:	bf00      	nop
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bc80      	pop	{r7}
 80081ea:	4770      	bx	lr

080081ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008202:	d103      	bne.n	800820c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	60fb      	str	r3, [r7, #12]
 800820a:	e00c      	b.n	8008226 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	3308      	adds	r3, #8
 8008210:	60fb      	str	r3, [r7, #12]
 8008212:	e002      	b.n	800821a <vListInsert+0x2e>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	60fb      	str	r3, [r7, #12]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	429a      	cmp	r2, r3
 8008224:	d2f6      	bcs.n	8008214 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	685a      	ldr	r2, [r3, #4]
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	683a      	ldr	r2, [r7, #0]
 8008240:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	1c5a      	adds	r2, r3, #1
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	601a      	str	r2, [r3, #0]
}
 8008252:	bf00      	nop
 8008254:	3714      	adds	r7, #20
 8008256:	46bd      	mov	sp, r7
 8008258:	bc80      	pop	{r7}
 800825a:	4770      	bx	lr

0800825c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	6892      	ldr	r2, [r2, #8]
 8008272:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	6852      	ldr	r2, [r2, #4]
 800827c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	429a      	cmp	r2, r3
 8008286:	d103      	bne.n	8008290 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	689a      	ldr	r2, [r3, #8]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	1e5a      	subs	r2, r3, #1
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bc80      	pop	{r7}
 80082ac:	4770      	bx	lr
	...

080082b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10a      	bne.n	80082da <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80082c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c8:	f383 8811 	msr	BASEPRI, r3
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80082d6:	bf00      	nop
 80082d8:	e7fe      	b.n	80082d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80082da:	f002 fa2f 	bl	800a73c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082e6:	68f9      	ldr	r1, [r7, #12]
 80082e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80082ea:	fb01 f303 	mul.w	r3, r1, r3
 80082ee:	441a      	add	r2, r3
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2200      	movs	r2, #0
 80082f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800830a:	3b01      	subs	r3, #1
 800830c:	68f9      	ldr	r1, [r7, #12]
 800830e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008310:	fb01 f303 	mul.w	r3, r1, r3
 8008314:	441a      	add	r2, r3
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	22ff      	movs	r2, #255	; 0xff
 800831e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	22ff      	movs	r2, #255	; 0xff
 8008326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d114      	bne.n	800835a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d01a      	beq.n	800836e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	3310      	adds	r3, #16
 800833c:	4618      	mov	r0, r3
 800833e:	f001 fa53 	bl	80097e8 <xTaskRemoveFromEventList>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d012      	beq.n	800836e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008348:	4b0c      	ldr	r3, [pc, #48]	; (800837c <xQueueGenericReset+0xcc>)
 800834a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800834e:	601a      	str	r2, [r3, #0]
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	e009      	b.n	800836e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	3310      	adds	r3, #16
 800835e:	4618      	mov	r0, r3
 8008360:	f7ff fef6 	bl	8008150 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	3324      	adds	r3, #36	; 0x24
 8008368:	4618      	mov	r0, r3
 800836a:	f7ff fef1 	bl	8008150 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800836e:	f002 fa15 	bl	800a79c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008372:	2301      	movs	r3, #1
}
 8008374:	4618      	mov	r0, r3
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	e000ed04 	.word	0xe000ed04

08008380 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008380:	b580      	push	{r7, lr}
 8008382:	b08e      	sub	sp, #56	; 0x38
 8008384:	af02      	add	r7, sp, #8
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
 800838c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10a      	bne.n	80083aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008398:	f383 8811 	msr	BASEPRI, r3
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80083a6:	bf00      	nop
 80083a8:	e7fe      	b.n	80083a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d10a      	bne.n	80083c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80083b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b4:	f383 8811 	msr	BASEPRI, r3
 80083b8:	f3bf 8f6f 	isb	sy
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80083c2:	bf00      	nop
 80083c4:	e7fe      	b.n	80083c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d002      	beq.n	80083d2 <xQueueGenericCreateStatic+0x52>
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <xQueueGenericCreateStatic+0x56>
 80083d2:	2301      	movs	r3, #1
 80083d4:	e000      	b.n	80083d8 <xQueueGenericCreateStatic+0x58>
 80083d6:	2300      	movs	r3, #0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10a      	bne.n	80083f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80083dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e0:	f383 8811 	msr	BASEPRI, r3
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	623b      	str	r3, [r7, #32]
}
 80083ee:	bf00      	nop
 80083f0:	e7fe      	b.n	80083f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d102      	bne.n	80083fe <xQueueGenericCreateStatic+0x7e>
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <xQueueGenericCreateStatic+0x82>
 80083fe:	2301      	movs	r3, #1
 8008400:	e000      	b.n	8008404 <xQueueGenericCreateStatic+0x84>
 8008402:	2300      	movs	r3, #0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d10a      	bne.n	800841e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840c:	f383 8811 	msr	BASEPRI, r3
 8008410:	f3bf 8f6f 	isb	sy
 8008414:	f3bf 8f4f 	dsb	sy
 8008418:	61fb      	str	r3, [r7, #28]
}
 800841a:	bf00      	nop
 800841c:	e7fe      	b.n	800841c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800841e:	2350      	movs	r3, #80	; 0x50
 8008420:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	2b50      	cmp	r3, #80	; 0x50
 8008426:	d00a      	beq.n	800843e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842c:	f383 8811 	msr	BASEPRI, r3
 8008430:	f3bf 8f6f 	isb	sy
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	61bb      	str	r3, [r7, #24]
}
 800843a:	bf00      	nop
 800843c:	e7fe      	b.n	800843c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00d      	beq.n	8008464 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008450:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	4613      	mov	r3, r2
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	68b9      	ldr	r1, [r7, #8]
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f000 f843 	bl	80084ea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008466:	4618      	mov	r0, r3
 8008468:	3730      	adds	r7, #48	; 0x30
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800846e:	b580      	push	{r7, lr}
 8008470:	b08a      	sub	sp, #40	; 0x28
 8008472:	af02      	add	r7, sp, #8
 8008474:	60f8      	str	r0, [r7, #12]
 8008476:	60b9      	str	r1, [r7, #8]
 8008478:	4613      	mov	r3, r2
 800847a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10a      	bne.n	8008498 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008486:	f383 8811 	msr	BASEPRI, r3
 800848a:	f3bf 8f6f 	isb	sy
 800848e:	f3bf 8f4f 	dsb	sy
 8008492:	613b      	str	r3, [r7, #16]
}
 8008494:	bf00      	nop
 8008496:	e7fe      	b.n	8008496 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d102      	bne.n	80084a4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800849e:	2300      	movs	r3, #0
 80084a0:	61fb      	str	r3, [r7, #28]
 80084a2:	e004      	b.n	80084ae <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	68ba      	ldr	r2, [r7, #8]
 80084a8:	fb02 f303 	mul.w	r3, r2, r3
 80084ac:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	3350      	adds	r3, #80	; 0x50
 80084b2:	4618      	mov	r0, r3
 80084b4:	f002 fa42 	bl	800a93c <pvPortMalloc>
 80084b8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00f      	beq.n	80084e0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	3350      	adds	r3, #80	; 0x50
 80084c4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80084ce:	79fa      	ldrb	r2, [r7, #7]
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	4613      	mov	r3, r2
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	68b9      	ldr	r1, [r7, #8]
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f000 f805 	bl	80084ea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80084e0:	69bb      	ldr	r3, [r7, #24]
	}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3720      	adds	r7, #32
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b084      	sub	sp, #16
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	60f8      	str	r0, [r7, #12]
 80084f2:	60b9      	str	r1, [r7, #8]
 80084f4:	607a      	str	r2, [r7, #4]
 80084f6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d103      	bne.n	8008506 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	69ba      	ldr	r2, [r7, #24]
 8008502:	601a      	str	r2, [r3, #0]
 8008504:	e002      	b.n	800850c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	68ba      	ldr	r2, [r7, #8]
 8008516:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008518:	2101      	movs	r1, #1
 800851a:	69b8      	ldr	r0, [r7, #24]
 800851c:	f7ff fec8 	bl	80082b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	78fa      	ldrb	r2, [r7, #3]
 8008524:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008528:	bf00      	nop
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b08e      	sub	sp, #56	; 0x38
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
 800853c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800853e:	2300      	movs	r3, #0
 8008540:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10a      	bne.n	8008562 <xQueueGenericSend+0x32>
	__asm volatile
 800854c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008550:	f383 8811 	msr	BASEPRI, r3
 8008554:	f3bf 8f6f 	isb	sy
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800855e:	bf00      	nop
 8008560:	e7fe      	b.n	8008560 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d103      	bne.n	8008570 <xQueueGenericSend+0x40>
 8008568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856c:	2b00      	cmp	r3, #0
 800856e:	d101      	bne.n	8008574 <xQueueGenericSend+0x44>
 8008570:	2301      	movs	r3, #1
 8008572:	e000      	b.n	8008576 <xQueueGenericSend+0x46>
 8008574:	2300      	movs	r3, #0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10a      	bne.n	8008590 <xQueueGenericSend+0x60>
	__asm volatile
 800857a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857e:	f383 8811 	msr	BASEPRI, r3
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800858c:	bf00      	nop
 800858e:	e7fe      	b.n	800858e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	2b02      	cmp	r3, #2
 8008594:	d103      	bne.n	800859e <xQueueGenericSend+0x6e>
 8008596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800859a:	2b01      	cmp	r3, #1
 800859c:	d101      	bne.n	80085a2 <xQueueGenericSend+0x72>
 800859e:	2301      	movs	r3, #1
 80085a0:	e000      	b.n	80085a4 <xQueueGenericSend+0x74>
 80085a2:	2300      	movs	r3, #0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d10a      	bne.n	80085be <xQueueGenericSend+0x8e>
	__asm volatile
 80085a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ac:	f383 8811 	msr	BASEPRI, r3
 80085b0:	f3bf 8f6f 	isb	sy
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	623b      	str	r3, [r7, #32]
}
 80085ba:	bf00      	nop
 80085bc:	e7fe      	b.n	80085bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085be:	f001 fad5 	bl	8009b6c <xTaskGetSchedulerState>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d102      	bne.n	80085ce <xQueueGenericSend+0x9e>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d101      	bne.n	80085d2 <xQueueGenericSend+0xa2>
 80085ce:	2301      	movs	r3, #1
 80085d0:	e000      	b.n	80085d4 <xQueueGenericSend+0xa4>
 80085d2:	2300      	movs	r3, #0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d10a      	bne.n	80085ee <xQueueGenericSend+0xbe>
	__asm volatile
 80085d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085dc:	f383 8811 	msr	BASEPRI, r3
 80085e0:	f3bf 8f6f 	isb	sy
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	61fb      	str	r3, [r7, #28]
}
 80085ea:	bf00      	nop
 80085ec:	e7fe      	b.n	80085ec <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085ee:	f002 f8a5 	bl	800a73c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d302      	bcc.n	8008604 <xQueueGenericSend+0xd4>
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	2b02      	cmp	r3, #2
 8008602:	d129      	bne.n	8008658 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008604:	683a      	ldr	r2, [r7, #0]
 8008606:	68b9      	ldr	r1, [r7, #8]
 8008608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800860a:	f000 fb2a 	bl	8008c62 <prvCopyDataToQueue>
 800860e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008614:	2b00      	cmp	r3, #0
 8008616:	d010      	beq.n	800863a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861a:	3324      	adds	r3, #36	; 0x24
 800861c:	4618      	mov	r0, r3
 800861e:	f001 f8e3 	bl	80097e8 <xTaskRemoveFromEventList>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d013      	beq.n	8008650 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008628:	4b3f      	ldr	r3, [pc, #252]	; (8008728 <xQueueGenericSend+0x1f8>)
 800862a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800862e:	601a      	str	r2, [r3, #0]
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	e00a      	b.n	8008650 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800863a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863c:	2b00      	cmp	r3, #0
 800863e:	d007      	beq.n	8008650 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008640:	4b39      	ldr	r3, [pc, #228]	; (8008728 <xQueueGenericSend+0x1f8>)
 8008642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008646:	601a      	str	r2, [r3, #0]
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008650:	f002 f8a4 	bl	800a79c <vPortExitCritical>
				return pdPASS;
 8008654:	2301      	movs	r3, #1
 8008656:	e063      	b.n	8008720 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d103      	bne.n	8008666 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800865e:	f002 f89d 	bl	800a79c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008662:	2300      	movs	r3, #0
 8008664:	e05c      	b.n	8008720 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008668:	2b00      	cmp	r3, #0
 800866a:	d106      	bne.n	800867a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800866c:	f107 0314 	add.w	r3, r7, #20
 8008670:	4618      	mov	r0, r3
 8008672:	f001 f91d 	bl	80098b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008676:	2301      	movs	r3, #1
 8008678:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800867a:	f002 f88f 	bl	800a79c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800867e:	f000 fe8f 	bl	80093a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008682:	f002 f85b 	bl	800a73c <vPortEnterCritical>
 8008686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008688:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800868c:	b25b      	sxtb	r3, r3
 800868e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008692:	d103      	bne.n	800869c <xQueueGenericSend+0x16c>
 8008694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008696:	2200      	movs	r2, #0
 8008698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800869c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086a2:	b25b      	sxtb	r3, r3
 80086a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a8:	d103      	bne.n	80086b2 <xQueueGenericSend+0x182>
 80086aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086b2:	f002 f873 	bl	800a79c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086b6:	1d3a      	adds	r2, r7, #4
 80086b8:	f107 0314 	add.w	r3, r7, #20
 80086bc:	4611      	mov	r1, r2
 80086be:	4618      	mov	r0, r3
 80086c0:	f001 f90c 	bl	80098dc <xTaskCheckForTimeOut>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d124      	bne.n	8008714 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80086ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086cc:	f000 fbc1 	bl	8008e52 <prvIsQueueFull>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d018      	beq.n	8008708 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80086d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d8:	3310      	adds	r3, #16
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	4611      	mov	r1, r2
 80086de:	4618      	mov	r0, r3
 80086e0:	f001 f832 	bl	8009748 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80086e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086e6:	f000 fb4c 	bl	8008d82 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80086ea:	f000 fe67 	bl	80093bc <xTaskResumeAll>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f47f af7c 	bne.w	80085ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80086f6:	4b0c      	ldr	r3, [pc, #48]	; (8008728 <xQueueGenericSend+0x1f8>)
 80086f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086fc:	601a      	str	r2, [r3, #0]
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	f3bf 8f6f 	isb	sy
 8008706:	e772      	b.n	80085ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800870a:	f000 fb3a 	bl	8008d82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800870e:	f000 fe55 	bl	80093bc <xTaskResumeAll>
 8008712:	e76c      	b.n	80085ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008716:	f000 fb34 	bl	8008d82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800871a:	f000 fe4f 	bl	80093bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800871e:	2300      	movs	r3, #0
		}
	}
}
 8008720:	4618      	mov	r0, r3
 8008722:	3738      	adds	r7, #56	; 0x38
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	e000ed04 	.word	0xe000ed04

0800872c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b08e      	sub	sp, #56	; 0x38
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	607a      	str	r2, [r7, #4]
 8008738:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800873e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10a      	bne.n	800875a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008748:	f383 8811 	msr	BASEPRI, r3
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008756:	bf00      	nop
 8008758:	e7fe      	b.n	8008758 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d103      	bne.n	8008768 <xQueueGenericSendFromISR+0x3c>
 8008760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008764:	2b00      	cmp	r3, #0
 8008766:	d101      	bne.n	800876c <xQueueGenericSendFromISR+0x40>
 8008768:	2301      	movs	r3, #1
 800876a:	e000      	b.n	800876e <xQueueGenericSendFromISR+0x42>
 800876c:	2300      	movs	r3, #0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10a      	bne.n	8008788 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	623b      	str	r3, [r7, #32]
}
 8008784:	bf00      	nop
 8008786:	e7fe      	b.n	8008786 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	2b02      	cmp	r3, #2
 800878c:	d103      	bne.n	8008796 <xQueueGenericSendFromISR+0x6a>
 800878e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008792:	2b01      	cmp	r3, #1
 8008794:	d101      	bne.n	800879a <xQueueGenericSendFromISR+0x6e>
 8008796:	2301      	movs	r3, #1
 8008798:	e000      	b.n	800879c <xQueueGenericSendFromISR+0x70>
 800879a:	2300      	movs	r3, #0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10a      	bne.n	80087b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	61fb      	str	r3, [r7, #28]
}
 80087b2:	bf00      	nop
 80087b4:	e7fe      	b.n	80087b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087b6:	f002 f883 	bl	800a8c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80087ba:	f3ef 8211 	mrs	r2, BASEPRI
 80087be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	61ba      	str	r2, [r7, #24]
 80087d0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80087d2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80087d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087de:	429a      	cmp	r2, r3
 80087e0:	d302      	bcc.n	80087e8 <xQueueGenericSendFromISR+0xbc>
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d12c      	bne.n	8008842 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80087e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087f2:	683a      	ldr	r2, [r7, #0]
 80087f4:	68b9      	ldr	r1, [r7, #8]
 80087f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087f8:	f000 fa33 	bl	8008c62 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80087fc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008804:	d112      	bne.n	800882c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880a:	2b00      	cmp	r3, #0
 800880c:	d016      	beq.n	800883c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800880e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008810:	3324      	adds	r3, #36	; 0x24
 8008812:	4618      	mov	r0, r3
 8008814:	f000 ffe8 	bl	80097e8 <xTaskRemoveFromEventList>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00e      	beq.n	800883c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00b      	beq.n	800883c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	601a      	str	r2, [r3, #0]
 800882a:	e007      	b.n	800883c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800882c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008830:	3301      	adds	r3, #1
 8008832:	b2db      	uxtb	r3, r3
 8008834:	b25a      	sxtb	r2, r3
 8008836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800883c:	2301      	movs	r3, #1
 800883e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008840:	e001      	b.n	8008846 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008842:	2300      	movs	r3, #0
 8008844:	637b      	str	r3, [r7, #52]	; 0x34
 8008846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008848:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008850:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008854:	4618      	mov	r0, r3
 8008856:	3738      	adds	r7, #56	; 0x38
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b08c      	sub	sp, #48	; 0x30
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008868:	2300      	movs	r3, #0
 800886a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008872:	2b00      	cmp	r3, #0
 8008874:	d10a      	bne.n	800888c <xQueueReceive+0x30>
	__asm volatile
 8008876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887a:	f383 8811 	msr	BASEPRI, r3
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	f3bf 8f4f 	dsb	sy
 8008886:	623b      	str	r3, [r7, #32]
}
 8008888:	bf00      	nop
 800888a:	e7fe      	b.n	800888a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d103      	bne.n	800889a <xQueueReceive+0x3e>
 8008892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008896:	2b00      	cmp	r3, #0
 8008898:	d101      	bne.n	800889e <xQueueReceive+0x42>
 800889a:	2301      	movs	r3, #1
 800889c:	e000      	b.n	80088a0 <xQueueReceive+0x44>
 800889e:	2300      	movs	r3, #0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10a      	bne.n	80088ba <xQueueReceive+0x5e>
	__asm volatile
 80088a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	61fb      	str	r3, [r7, #28]
}
 80088b6:	bf00      	nop
 80088b8:	e7fe      	b.n	80088b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088ba:	f001 f957 	bl	8009b6c <xTaskGetSchedulerState>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d102      	bne.n	80088ca <xQueueReceive+0x6e>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d101      	bne.n	80088ce <xQueueReceive+0x72>
 80088ca:	2301      	movs	r3, #1
 80088cc:	e000      	b.n	80088d0 <xQueueReceive+0x74>
 80088ce:	2300      	movs	r3, #0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10a      	bne.n	80088ea <xQueueReceive+0x8e>
	__asm volatile
 80088d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d8:	f383 8811 	msr	BASEPRI, r3
 80088dc:	f3bf 8f6f 	isb	sy
 80088e0:	f3bf 8f4f 	dsb	sy
 80088e4:	61bb      	str	r3, [r7, #24]
}
 80088e6:	bf00      	nop
 80088e8:	e7fe      	b.n	80088e8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80088ea:	f001 ff27 	bl	800a73c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d01f      	beq.n	800893a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80088fa:	68b9      	ldr	r1, [r7, #8]
 80088fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088fe:	f000 fa1a 	bl	8008d36 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008904:	1e5a      	subs	r2, r3, #1
 8008906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008908:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800890a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00f      	beq.n	8008932 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008914:	3310      	adds	r3, #16
 8008916:	4618      	mov	r0, r3
 8008918:	f000 ff66 	bl	80097e8 <xTaskRemoveFromEventList>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d007      	beq.n	8008932 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008922:	4b3d      	ldr	r3, [pc, #244]	; (8008a18 <xQueueReceive+0x1bc>)
 8008924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008932:	f001 ff33 	bl	800a79c <vPortExitCritical>
				return pdPASS;
 8008936:	2301      	movs	r3, #1
 8008938:	e069      	b.n	8008a0e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d103      	bne.n	8008948 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008940:	f001 ff2c 	bl	800a79c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008944:	2300      	movs	r3, #0
 8008946:	e062      	b.n	8008a0e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894a:	2b00      	cmp	r3, #0
 800894c:	d106      	bne.n	800895c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800894e:	f107 0310 	add.w	r3, r7, #16
 8008952:	4618      	mov	r0, r3
 8008954:	f000 ffac 	bl	80098b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008958:	2301      	movs	r3, #1
 800895a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800895c:	f001 ff1e 	bl	800a79c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008960:	f000 fd1e 	bl	80093a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008964:	f001 feea 	bl	800a73c <vPortEnterCritical>
 8008968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800896e:	b25b      	sxtb	r3, r3
 8008970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008974:	d103      	bne.n	800897e <xQueueReceive+0x122>
 8008976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008978:	2200      	movs	r2, #0
 800897a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800897e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008980:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008984:	b25b      	sxtb	r3, r3
 8008986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800898a:	d103      	bne.n	8008994 <xQueueReceive+0x138>
 800898c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898e:	2200      	movs	r2, #0
 8008990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008994:	f001 ff02 	bl	800a79c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008998:	1d3a      	adds	r2, r7, #4
 800899a:	f107 0310 	add.w	r3, r7, #16
 800899e:	4611      	mov	r1, r2
 80089a0:	4618      	mov	r0, r3
 80089a2:	f000 ff9b 	bl	80098dc <xTaskCheckForTimeOut>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d123      	bne.n	80089f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089ae:	f000 fa3a 	bl	8008e26 <prvIsQueueEmpty>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d017      	beq.n	80089e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80089b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ba:	3324      	adds	r3, #36	; 0x24
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	4611      	mov	r1, r2
 80089c0:	4618      	mov	r0, r3
 80089c2:	f000 fec1 	bl	8009748 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80089c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089c8:	f000 f9db 	bl	8008d82 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80089cc:	f000 fcf6 	bl	80093bc <xTaskResumeAll>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d189      	bne.n	80088ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80089d6:	4b10      	ldr	r3, [pc, #64]	; (8008a18 <xQueueReceive+0x1bc>)
 80089d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089dc:	601a      	str	r2, [r3, #0]
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	f3bf 8f6f 	isb	sy
 80089e6:	e780      	b.n	80088ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80089e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089ea:	f000 f9ca 	bl	8008d82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089ee:	f000 fce5 	bl	80093bc <xTaskResumeAll>
 80089f2:	e77a      	b.n	80088ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80089f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089f6:	f000 f9c4 	bl	8008d82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089fa:	f000 fcdf 	bl	80093bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a00:	f000 fa11 	bl	8008e26 <prvIsQueueEmpty>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f43f af6f 	beq.w	80088ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008a0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3730      	adds	r7, #48	; 0x30
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	e000ed04 	.word	0xe000ed04

08008a1c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b08e      	sub	sp, #56	; 0x38
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a26:	2300      	movs	r3, #0
 8008a28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d10a      	bne.n	8008a4e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3c:	f383 8811 	msr	BASEPRI, r3
 8008a40:	f3bf 8f6f 	isb	sy
 8008a44:	f3bf 8f4f 	dsb	sy
 8008a48:	623b      	str	r3, [r7, #32]
}
 8008a4a:	bf00      	nop
 8008a4c:	e7fe      	b.n	8008a4c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00a      	beq.n	8008a6c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5a:	f383 8811 	msr	BASEPRI, r3
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	61fb      	str	r3, [r7, #28]
}
 8008a68:	bf00      	nop
 8008a6a:	e7fe      	b.n	8008a6a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a6c:	f001 f87e 	bl	8009b6c <xTaskGetSchedulerState>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d102      	bne.n	8008a7c <xQueueSemaphoreTake+0x60>
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d101      	bne.n	8008a80 <xQueueSemaphoreTake+0x64>
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e000      	b.n	8008a82 <xQueueSemaphoreTake+0x66>
 8008a80:	2300      	movs	r3, #0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d10a      	bne.n	8008a9c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8a:	f383 8811 	msr	BASEPRI, r3
 8008a8e:	f3bf 8f6f 	isb	sy
 8008a92:	f3bf 8f4f 	dsb	sy
 8008a96:	61bb      	str	r3, [r7, #24]
}
 8008a98:	bf00      	nop
 8008a9a:	e7fe      	b.n	8008a9a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a9c:	f001 fe4e 	bl	800a73c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d024      	beq.n	8008af6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aae:	1e5a      	subs	r2, r3, #1
 8008ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d104      	bne.n	8008ac6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008abc:	f001 f9d6 	bl	8009e6c <pvTaskIncrementMutexHeldCount>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00f      	beq.n	8008aee <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad0:	3310      	adds	r3, #16
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f000 fe88 	bl	80097e8 <xTaskRemoveFromEventList>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d007      	beq.n	8008aee <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ade:	4b54      	ldr	r3, [pc, #336]	; (8008c30 <xQueueSemaphoreTake+0x214>)
 8008ae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ae4:	601a      	str	r2, [r3, #0]
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008aee:	f001 fe55 	bl	800a79c <vPortExitCritical>
				return pdPASS;
 8008af2:	2301      	movs	r3, #1
 8008af4:	e097      	b.n	8008c26 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d111      	bne.n	8008b20 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00a      	beq.n	8008b18 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	617b      	str	r3, [r7, #20]
}
 8008b14:	bf00      	nop
 8008b16:	e7fe      	b.n	8008b16 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008b18:	f001 fe40 	bl	800a79c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	e082      	b.n	8008c26 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d106      	bne.n	8008b34 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b26:	f107 030c 	add.w	r3, r7, #12
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f000 fec0 	bl	80098b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b30:	2301      	movs	r3, #1
 8008b32:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b34:	f001 fe32 	bl	800a79c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b38:	f000 fc32 	bl	80093a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b3c:	f001 fdfe 	bl	800a73c <vPortEnterCritical>
 8008b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b46:	b25b      	sxtb	r3, r3
 8008b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b4c:	d103      	bne.n	8008b56 <xQueueSemaphoreTake+0x13a>
 8008b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b5c:	b25b      	sxtb	r3, r3
 8008b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b62:	d103      	bne.n	8008b6c <xQueueSemaphoreTake+0x150>
 8008b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b6c:	f001 fe16 	bl	800a79c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b70:	463a      	mov	r2, r7
 8008b72:	f107 030c 	add.w	r3, r7, #12
 8008b76:	4611      	mov	r1, r2
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 feaf 	bl	80098dc <xTaskCheckForTimeOut>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d132      	bne.n	8008bea <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b86:	f000 f94e 	bl	8008e26 <prvIsQueueEmpty>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d026      	beq.n	8008bde <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d109      	bne.n	8008bac <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008b98:	f001 fdd0 	bl	800a73c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f001 f801 	bl	8009ba8 <xTaskPriorityInherit>
 8008ba6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008ba8:	f001 fdf8 	bl	800a79c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bae:	3324      	adds	r3, #36	; 0x24
 8008bb0:	683a      	ldr	r2, [r7, #0]
 8008bb2:	4611      	mov	r1, r2
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f000 fdc7 	bl	8009748 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008bba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bbc:	f000 f8e1 	bl	8008d82 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bc0:	f000 fbfc 	bl	80093bc <xTaskResumeAll>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f47f af68 	bne.w	8008a9c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008bcc:	4b18      	ldr	r3, [pc, #96]	; (8008c30 <xQueueSemaphoreTake+0x214>)
 8008bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bd2:	601a      	str	r2, [r3, #0]
 8008bd4:	f3bf 8f4f 	dsb	sy
 8008bd8:	f3bf 8f6f 	isb	sy
 8008bdc:	e75e      	b.n	8008a9c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008bde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008be0:	f000 f8cf 	bl	8008d82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008be4:	f000 fbea 	bl	80093bc <xTaskResumeAll>
 8008be8:	e758      	b.n	8008a9c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008bea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bec:	f000 f8c9 	bl	8008d82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008bf0:	f000 fbe4 	bl	80093bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bf6:	f000 f916 	bl	8008e26 <prvIsQueueEmpty>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f43f af4d 	beq.w	8008a9c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00d      	beq.n	8008c24 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008c08:	f001 fd98 	bl	800a73c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008c0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c0e:	f000 f811 	bl	8008c34 <prvGetDisinheritPriorityAfterTimeout>
 8008c12:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f001 f8a0 	bl	8009d60 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008c20:	f001 fdbc 	bl	800a79c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3738      	adds	r7, #56	; 0x38
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	e000ed04 	.word	0xe000ed04

08008c34 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008c34:	b480      	push	{r7}
 8008c36:	b085      	sub	sp, #20
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d006      	beq.n	8008c52 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008c4e:	60fb      	str	r3, [r7, #12]
 8008c50:	e001      	b.n	8008c56 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008c52:	2300      	movs	r3, #0
 8008c54:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008c56:	68fb      	ldr	r3, [r7, #12]
	}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3714      	adds	r7, #20
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bc80      	pop	{r7}
 8008c60:	4770      	bx	lr

08008c62 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b086      	sub	sp, #24
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	60f8      	str	r0, [r7, #12]
 8008c6a:	60b9      	str	r1, [r7, #8]
 8008c6c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c76:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d10d      	bne.n	8008c9c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d14d      	bne.n	8008d24 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f000 fff9 	bl	8009c84 <xTaskPriorityDisinherit>
 8008c92:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	605a      	str	r2, [r3, #4]
 8008c9a:	e043      	b.n	8008d24 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d119      	bne.n	8008cd6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6898      	ldr	r0, [r3, #8]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008caa:	461a      	mov	r2, r3
 8008cac:	68b9      	ldr	r1, [r7, #8]
 8008cae:	f003 fa0d 	bl	800c0cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	689a      	ldr	r2, [r3, #8]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cba:	441a      	add	r2, r3
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	689a      	ldr	r2, [r3, #8]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d32b      	bcc.n	8008d24 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	609a      	str	r2, [r3, #8]
 8008cd4:	e026      	b.n	8008d24 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	68d8      	ldr	r0, [r3, #12]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cde:	461a      	mov	r2, r3
 8008ce0:	68b9      	ldr	r1, [r7, #8]
 8008ce2:	f003 f9f3 	bl	800c0cc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	68da      	ldr	r2, [r3, #12]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cee:	425b      	negs	r3, r3
 8008cf0:	441a      	add	r2, r3
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	68da      	ldr	r2, [r3, #12]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d207      	bcs.n	8008d12 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	685a      	ldr	r2, [r3, #4]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0a:	425b      	negs	r3, r3
 8008d0c:	441a      	add	r2, r3
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d105      	bne.n	8008d24 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d002      	beq.n	8008d24 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	3b01      	subs	r3, #1
 8008d22:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	1c5a      	adds	r2, r3, #1
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008d2c:	697b      	ldr	r3, [r7, #20]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3718      	adds	r7, #24
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b082      	sub	sp, #8
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
 8008d3e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d018      	beq.n	8008d7a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	68da      	ldr	r2, [r3, #12]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d50:	441a      	add	r2, r3
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	68da      	ldr	r2, [r3, #12]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d303      	bcc.n	8008d6a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	68d9      	ldr	r1, [r3, #12]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d72:	461a      	mov	r2, r3
 8008d74:	6838      	ldr	r0, [r7, #0]
 8008d76:	f003 f9a9 	bl	800c0cc <memcpy>
	}
}
 8008d7a:	bf00      	nop
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b084      	sub	sp, #16
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008d8a:	f001 fcd7 	bl	800a73c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d94:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d96:	e011      	b.n	8008dbc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d012      	beq.n	8008dc6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	3324      	adds	r3, #36	; 0x24
 8008da4:	4618      	mov	r0, r3
 8008da6:	f000 fd1f 	bl	80097e8 <xTaskRemoveFromEventList>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d001      	beq.n	8008db4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008db0:	f000 fdf6 	bl	80099a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008db4:	7bfb      	ldrb	r3, [r7, #15]
 8008db6:	3b01      	subs	r3, #1
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	dce9      	bgt.n	8008d98 <prvUnlockQueue+0x16>
 8008dc4:	e000      	b.n	8008dc8 <prvUnlockQueue+0x46>
					break;
 8008dc6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	22ff      	movs	r2, #255	; 0xff
 8008dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008dd0:	f001 fce4 	bl	800a79c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008dd4:	f001 fcb2 	bl	800a73c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dde:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008de0:	e011      	b.n	8008e06 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d012      	beq.n	8008e10 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	3310      	adds	r3, #16
 8008dee:	4618      	mov	r0, r3
 8008df0:	f000 fcfa 	bl	80097e8 <xTaskRemoveFromEventList>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d001      	beq.n	8008dfe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008dfa:	f000 fdd1 	bl	80099a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008dfe:	7bbb      	ldrb	r3, [r7, #14]
 8008e00:	3b01      	subs	r3, #1
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	dce9      	bgt.n	8008de2 <prvUnlockQueue+0x60>
 8008e0e:	e000      	b.n	8008e12 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008e10:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	22ff      	movs	r2, #255	; 0xff
 8008e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008e1a:	f001 fcbf 	bl	800a79c <vPortExitCritical>
}
 8008e1e:	bf00      	nop
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b084      	sub	sp, #16
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e2e:	f001 fc85 	bl	800a73c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d102      	bne.n	8008e40 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	60fb      	str	r3, [r7, #12]
 8008e3e:	e001      	b.n	8008e44 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e40:	2300      	movs	r3, #0
 8008e42:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e44:	f001 fcaa 	bl	800a79c <vPortExitCritical>

	return xReturn;
 8008e48:	68fb      	ldr	r3, [r7, #12]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b084      	sub	sp, #16
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e5a:	f001 fc6f 	bl	800a73c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d102      	bne.n	8008e70 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	60fb      	str	r3, [r7, #12]
 8008e6e:	e001      	b.n	8008e74 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008e70:	2300      	movs	r3, #0
 8008e72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e74:	f001 fc92 	bl	800a79c <vPortExitCritical>

	return xReturn;
 8008e78:	68fb      	ldr	r3, [r7, #12]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
	...

08008e84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e8e:	2300      	movs	r3, #0
 8008e90:	60fb      	str	r3, [r7, #12]
 8008e92:	e014      	b.n	8008ebe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008e94:	4a0e      	ldr	r2, [pc, #56]	; (8008ed0 <vQueueAddToRegistry+0x4c>)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d10b      	bne.n	8008eb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ea0:	490b      	ldr	r1, [pc, #44]	; (8008ed0 <vQueueAddToRegistry+0x4c>)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	683a      	ldr	r2, [r7, #0]
 8008ea6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008eaa:	4a09      	ldr	r2, [pc, #36]	; (8008ed0 <vQueueAddToRegistry+0x4c>)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	00db      	lsls	r3, r3, #3
 8008eb0:	4413      	add	r3, r2
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008eb6:	e006      	b.n	8008ec6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	60fb      	str	r3, [r7, #12]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2b07      	cmp	r3, #7
 8008ec2:	d9e7      	bls.n	8008e94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop
 8008ec8:	3714      	adds	r7, #20
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bc80      	pop	{r7}
 8008ece:	4770      	bx	lr
 8008ed0:	200039e8 	.word	0x200039e8

08008ed4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b086      	sub	sp, #24
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008ee4:	f001 fc2a 	bl	800a73c <vPortEnterCritical>
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008eee:	b25b      	sxtb	r3, r3
 8008ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef4:	d103      	bne.n	8008efe <vQueueWaitForMessageRestricted+0x2a>
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f04:	b25b      	sxtb	r3, r3
 8008f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f0a:	d103      	bne.n	8008f14 <vQueueWaitForMessageRestricted+0x40>
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f14:	f001 fc42 	bl	800a79c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d106      	bne.n	8008f2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	3324      	adds	r3, #36	; 0x24
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	68b9      	ldr	r1, [r7, #8]
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f000 fc31 	bl	8009790 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008f2e:	6978      	ldr	r0, [r7, #20]
 8008f30:	f7ff ff27 	bl	8008d82 <prvUnlockQueue>
	}
 8008f34:	bf00      	nop
 8008f36:	3718      	adds	r7, #24
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b08e      	sub	sp, #56	; 0x38
 8008f40:	af04      	add	r7, sp, #16
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	607a      	str	r2, [r7, #4]
 8008f48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10a      	bne.n	8008f66 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	623b      	str	r3, [r7, #32]
}
 8008f62:	bf00      	nop
 8008f64:	e7fe      	b.n	8008f64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d10a      	bne.n	8008f82 <xTaskCreateStatic+0x46>
	__asm volatile
 8008f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f70:	f383 8811 	msr	BASEPRI, r3
 8008f74:	f3bf 8f6f 	isb	sy
 8008f78:	f3bf 8f4f 	dsb	sy
 8008f7c:	61fb      	str	r3, [r7, #28]
}
 8008f7e:	bf00      	nop
 8008f80:	e7fe      	b.n	8008f80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008f82:	235c      	movs	r3, #92	; 0x5c
 8008f84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	2b5c      	cmp	r3, #92	; 0x5c
 8008f8a:	d00a      	beq.n	8008fa2 <xTaskCreateStatic+0x66>
	__asm volatile
 8008f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f90:	f383 8811 	msr	BASEPRI, r3
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	61bb      	str	r3, [r7, #24]
}
 8008f9e:	bf00      	nop
 8008fa0:	e7fe      	b.n	8008fa0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d01e      	beq.n	8008fe6 <xTaskCreateStatic+0xaa>
 8008fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d01b      	beq.n	8008fe6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fb6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fba:	2202      	movs	r2, #2
 8008fbc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	9303      	str	r3, [sp, #12]
 8008fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc6:	9302      	str	r3, [sp, #8]
 8008fc8:	f107 0314 	add.w	r3, r7, #20
 8008fcc:	9301      	str	r3, [sp, #4]
 8008fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd0:	9300      	str	r3, [sp, #0]
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	68b9      	ldr	r1, [r7, #8]
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	f000 f850 	bl	800907e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008fe0:	f000 f8d4 	bl	800918c <prvAddNewTaskToReadyList>
 8008fe4:	e001      	b.n	8008fea <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008fea:	697b      	ldr	r3, [r7, #20]
	}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3728      	adds	r7, #40	; 0x28
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b08c      	sub	sp, #48	; 0x30
 8008ff8:	af04      	add	r7, sp, #16
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	603b      	str	r3, [r7, #0]
 8009000:	4613      	mov	r3, r2
 8009002:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009004:	88fb      	ldrh	r3, [r7, #6]
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	4618      	mov	r0, r3
 800900a:	f001 fc97 	bl	800a93c <pvPortMalloc>
 800900e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00e      	beq.n	8009034 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009016:	205c      	movs	r0, #92	; 0x5c
 8009018:	f001 fc90 	bl	800a93c <pvPortMalloc>
 800901c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d003      	beq.n	800902c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	697a      	ldr	r2, [r7, #20]
 8009028:	631a      	str	r2, [r3, #48]	; 0x30
 800902a:	e005      	b.n	8009038 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800902c:	6978      	ldr	r0, [r7, #20]
 800902e:	f001 fd49 	bl	800aac4 <vPortFree>
 8009032:	e001      	b.n	8009038 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009034:	2300      	movs	r3, #0
 8009036:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d017      	beq.n	800906e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009046:	88fa      	ldrh	r2, [r7, #6]
 8009048:	2300      	movs	r3, #0
 800904a:	9303      	str	r3, [sp, #12]
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	9302      	str	r3, [sp, #8]
 8009050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009052:	9301      	str	r3, [sp, #4]
 8009054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	68b9      	ldr	r1, [r7, #8]
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f000 f80e 	bl	800907e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009062:	69f8      	ldr	r0, [r7, #28]
 8009064:	f000 f892 	bl	800918c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009068:	2301      	movs	r3, #1
 800906a:	61bb      	str	r3, [r7, #24]
 800906c:	e002      	b.n	8009074 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800906e:	f04f 33ff 	mov.w	r3, #4294967295
 8009072:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009074:	69bb      	ldr	r3, [r7, #24]
	}
 8009076:	4618      	mov	r0, r3
 8009078:	3720      	adds	r7, #32
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b088      	sub	sp, #32
 8009082:	af00      	add	r7, sp, #0
 8009084:	60f8      	str	r0, [r7, #12]
 8009086:	60b9      	str	r1, [r7, #8]
 8009088:	607a      	str	r2, [r7, #4]
 800908a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800908c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	461a      	mov	r2, r3
 8009096:	21a5      	movs	r1, #165	; 0xa5
 8009098:	f003 f826 	bl	800c0e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800909c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80090a6:	3b01      	subs	r3, #1
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	4413      	add	r3, r2
 80090ac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	f023 0307 	bic.w	r3, r3, #7
 80090b4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	f003 0307 	and.w	r3, r3, #7
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00a      	beq.n	80090d6 <prvInitialiseNewTask+0x58>
	__asm volatile
 80090c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	617b      	str	r3, [r7, #20]
}
 80090d2:	bf00      	nop
 80090d4:	e7fe      	b.n	80090d4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090d6:	2300      	movs	r3, #0
 80090d8:	61fb      	str	r3, [r7, #28]
 80090da:	e012      	b.n	8009102 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80090dc:	68ba      	ldr	r2, [r7, #8]
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	4413      	add	r3, r2
 80090e2:	7819      	ldrb	r1, [r3, #0]
 80090e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	4413      	add	r3, r2
 80090ea:	3334      	adds	r3, #52	; 0x34
 80090ec:	460a      	mov	r2, r1
 80090ee:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80090f0:	68ba      	ldr	r2, [r7, #8]
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	4413      	add	r3, r2
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d006      	beq.n	800910a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	3301      	adds	r3, #1
 8009100:	61fb      	str	r3, [r7, #28]
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	2b0f      	cmp	r3, #15
 8009106:	d9e9      	bls.n	80090dc <prvInitialiseNewTask+0x5e>
 8009108:	e000      	b.n	800910c <prvInitialiseNewTask+0x8e>
		{
			break;
 800910a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800910c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910e:	2200      	movs	r2, #0
 8009110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009116:	2b37      	cmp	r3, #55	; 0x37
 8009118:	d901      	bls.n	800911e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800911a:	2337      	movs	r3, #55	; 0x37
 800911c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800911e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009122:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009128:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	2200      	movs	r2, #0
 800912e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009132:	3304      	adds	r3, #4
 8009134:	4618      	mov	r0, r3
 8009136:	f7ff f82a 	bl	800818e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800913a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913c:	3318      	adds	r3, #24
 800913e:	4618      	mov	r0, r3
 8009140:	f7ff f825 	bl	800818e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009146:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009148:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800914a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009152:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009158:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800915a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915c:	2200      	movs	r2, #0
 800915e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009162:	2200      	movs	r2, #0
 8009164:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009168:	683a      	ldr	r2, [r7, #0]
 800916a:	68f9      	ldr	r1, [r7, #12]
 800916c:	69b8      	ldr	r0, [r7, #24]
 800916e:	f001 f9f7 	bl	800a560 <pxPortInitialiseStack>
 8009172:	4602      	mov	r2, r0
 8009174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009176:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800917a:	2b00      	cmp	r3, #0
 800917c:	d002      	beq.n	8009184 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800917e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009182:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009184:	bf00      	nop
 8009186:	3720      	adds	r7, #32
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009194:	f001 fad2 	bl	800a73c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009198:	4b2d      	ldr	r3, [pc, #180]	; (8009250 <prvAddNewTaskToReadyList+0xc4>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	3301      	adds	r3, #1
 800919e:	4a2c      	ldr	r2, [pc, #176]	; (8009250 <prvAddNewTaskToReadyList+0xc4>)
 80091a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80091a2:	4b2c      	ldr	r3, [pc, #176]	; (8009254 <prvAddNewTaskToReadyList+0xc8>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d109      	bne.n	80091be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80091aa:	4a2a      	ldr	r2, [pc, #168]	; (8009254 <prvAddNewTaskToReadyList+0xc8>)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80091b0:	4b27      	ldr	r3, [pc, #156]	; (8009250 <prvAddNewTaskToReadyList+0xc4>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d110      	bne.n	80091da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80091b8:	f000 fc16 	bl	80099e8 <prvInitialiseTaskLists>
 80091bc:	e00d      	b.n	80091da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80091be:	4b26      	ldr	r3, [pc, #152]	; (8009258 <prvAddNewTaskToReadyList+0xcc>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d109      	bne.n	80091da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80091c6:	4b23      	ldr	r3, [pc, #140]	; (8009254 <prvAddNewTaskToReadyList+0xc8>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d802      	bhi.n	80091da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80091d4:	4a1f      	ldr	r2, [pc, #124]	; (8009254 <prvAddNewTaskToReadyList+0xc8>)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80091da:	4b20      	ldr	r3, [pc, #128]	; (800925c <prvAddNewTaskToReadyList+0xd0>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	3301      	adds	r3, #1
 80091e0:	4a1e      	ldr	r2, [pc, #120]	; (800925c <prvAddNewTaskToReadyList+0xd0>)
 80091e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80091e4:	4b1d      	ldr	r3, [pc, #116]	; (800925c <prvAddNewTaskToReadyList+0xd0>)
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091f0:	4b1b      	ldr	r3, [pc, #108]	; (8009260 <prvAddNewTaskToReadyList+0xd4>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d903      	bls.n	8009200 <prvAddNewTaskToReadyList+0x74>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fc:	4a18      	ldr	r2, [pc, #96]	; (8009260 <prvAddNewTaskToReadyList+0xd4>)
 80091fe:	6013      	str	r3, [r2, #0]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009204:	4613      	mov	r3, r2
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	4413      	add	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4a15      	ldr	r2, [pc, #84]	; (8009264 <prvAddNewTaskToReadyList+0xd8>)
 800920e:	441a      	add	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	3304      	adds	r3, #4
 8009214:	4619      	mov	r1, r3
 8009216:	4610      	mov	r0, r2
 8009218:	f7fe ffc5 	bl	80081a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800921c:	f001 fabe 	bl	800a79c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009220:	4b0d      	ldr	r3, [pc, #52]	; (8009258 <prvAddNewTaskToReadyList+0xcc>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00e      	beq.n	8009246 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009228:	4b0a      	ldr	r3, [pc, #40]	; (8009254 <prvAddNewTaskToReadyList+0xc8>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009232:	429a      	cmp	r2, r3
 8009234:	d207      	bcs.n	8009246 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009236:	4b0c      	ldr	r3, [pc, #48]	; (8009268 <prvAddNewTaskToReadyList+0xdc>)
 8009238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800923c:	601a      	str	r2, [r3, #0]
 800923e:	f3bf 8f4f 	dsb	sy
 8009242:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009246:	bf00      	nop
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	20000d30 	.word	0x20000d30
 8009254:	2000085c 	.word	0x2000085c
 8009258:	20000d3c 	.word	0x20000d3c
 800925c:	20000d4c 	.word	0x20000d4c
 8009260:	20000d38 	.word	0x20000d38
 8009264:	20000860 	.word	0x20000860
 8009268:	e000ed04 	.word	0xe000ed04

0800926c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009274:	2300      	movs	r3, #0
 8009276:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d017      	beq.n	80092ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800927e:	4b13      	ldr	r3, [pc, #76]	; (80092cc <vTaskDelay+0x60>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00a      	beq.n	800929c <vTaskDelay+0x30>
	__asm volatile
 8009286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928a:	f383 8811 	msr	BASEPRI, r3
 800928e:	f3bf 8f6f 	isb	sy
 8009292:	f3bf 8f4f 	dsb	sy
 8009296:	60bb      	str	r3, [r7, #8]
}
 8009298:	bf00      	nop
 800929a:	e7fe      	b.n	800929a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800929c:	f000 f880 	bl	80093a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80092a0:	2100      	movs	r1, #0
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 fdf6 	bl	8009e94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80092a8:	f000 f888 	bl	80093bc <xTaskResumeAll>
 80092ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d107      	bne.n	80092c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80092b4:	4b06      	ldr	r3, [pc, #24]	; (80092d0 <vTaskDelay+0x64>)
 80092b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092ba:	601a      	str	r2, [r3, #0]
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80092c4:	bf00      	nop
 80092c6:	3710      	adds	r7, #16
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	20000d58 	.word	0x20000d58
 80092d0:	e000ed04 	.word	0xe000ed04

080092d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b08a      	sub	sp, #40	; 0x28
 80092d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80092da:	2300      	movs	r3, #0
 80092dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80092de:	2300      	movs	r3, #0
 80092e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80092e2:	463a      	mov	r2, r7
 80092e4:	1d39      	adds	r1, r7, #4
 80092e6:	f107 0308 	add.w	r3, r7, #8
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7fe fefe 	bl	80080ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80092f0:	6839      	ldr	r1, [r7, #0]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	68ba      	ldr	r2, [r7, #8]
 80092f6:	9202      	str	r2, [sp, #8]
 80092f8:	9301      	str	r3, [sp, #4]
 80092fa:	2300      	movs	r3, #0
 80092fc:	9300      	str	r3, [sp, #0]
 80092fe:	2300      	movs	r3, #0
 8009300:	460a      	mov	r2, r1
 8009302:	4921      	ldr	r1, [pc, #132]	; (8009388 <vTaskStartScheduler+0xb4>)
 8009304:	4821      	ldr	r0, [pc, #132]	; (800938c <vTaskStartScheduler+0xb8>)
 8009306:	f7ff fe19 	bl	8008f3c <xTaskCreateStatic>
 800930a:	4603      	mov	r3, r0
 800930c:	4a20      	ldr	r2, [pc, #128]	; (8009390 <vTaskStartScheduler+0xbc>)
 800930e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009310:	4b1f      	ldr	r3, [pc, #124]	; (8009390 <vTaskStartScheduler+0xbc>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d002      	beq.n	800931e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009318:	2301      	movs	r3, #1
 800931a:	617b      	str	r3, [r7, #20]
 800931c:	e001      	b.n	8009322 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800931e:	2300      	movs	r3, #0
 8009320:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d102      	bne.n	800932e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009328:	f000 fe08 	bl	8009f3c <xTimerCreateTimerTask>
 800932c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	2b01      	cmp	r3, #1
 8009332:	d116      	bne.n	8009362 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009338:	f383 8811 	msr	BASEPRI, r3
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	f3bf 8f4f 	dsb	sy
 8009344:	613b      	str	r3, [r7, #16]
}
 8009346:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009348:	4b12      	ldr	r3, [pc, #72]	; (8009394 <vTaskStartScheduler+0xc0>)
 800934a:	f04f 32ff 	mov.w	r2, #4294967295
 800934e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009350:	4b11      	ldr	r3, [pc, #68]	; (8009398 <vTaskStartScheduler+0xc4>)
 8009352:	2201      	movs	r2, #1
 8009354:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009356:	4b11      	ldr	r3, [pc, #68]	; (800939c <vTaskStartScheduler+0xc8>)
 8009358:	2200      	movs	r2, #0
 800935a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800935c:	f001 f97c 	bl	800a658 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009360:	e00e      	b.n	8009380 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009368:	d10a      	bne.n	8009380 <vTaskStartScheduler+0xac>
	__asm volatile
 800936a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936e:	f383 8811 	msr	BASEPRI, r3
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	f3bf 8f4f 	dsb	sy
 800937a:	60fb      	str	r3, [r7, #12]
}
 800937c:	bf00      	nop
 800937e:	e7fe      	b.n	800937e <vTaskStartScheduler+0xaa>
}
 8009380:	bf00      	nop
 8009382:	3718      	adds	r7, #24
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	0800c12c 	.word	0x0800c12c
 800938c:	080099b9 	.word	0x080099b9
 8009390:	20000d54 	.word	0x20000d54
 8009394:	20000d50 	.word	0x20000d50
 8009398:	20000d3c 	.word	0x20000d3c
 800939c:	20000d34 	.word	0x20000d34

080093a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80093a0:	b480      	push	{r7}
 80093a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80093a4:	4b04      	ldr	r3, [pc, #16]	; (80093b8 <vTaskSuspendAll+0x18>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	3301      	adds	r3, #1
 80093aa:	4a03      	ldr	r2, [pc, #12]	; (80093b8 <vTaskSuspendAll+0x18>)
 80093ac:	6013      	str	r3, [r2, #0]
}
 80093ae:	bf00      	nop
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bc80      	pop	{r7}
 80093b4:	4770      	bx	lr
 80093b6:	bf00      	nop
 80093b8:	20000d58 	.word	0x20000d58

080093bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80093c2:	2300      	movs	r3, #0
 80093c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80093c6:	2300      	movs	r3, #0
 80093c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80093ca:	4b42      	ldr	r3, [pc, #264]	; (80094d4 <xTaskResumeAll+0x118>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d10a      	bne.n	80093e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80093d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d6:	f383 8811 	msr	BASEPRI, r3
 80093da:	f3bf 8f6f 	isb	sy
 80093de:	f3bf 8f4f 	dsb	sy
 80093e2:	603b      	str	r3, [r7, #0]
}
 80093e4:	bf00      	nop
 80093e6:	e7fe      	b.n	80093e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80093e8:	f001 f9a8 	bl	800a73c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80093ec:	4b39      	ldr	r3, [pc, #228]	; (80094d4 <xTaskResumeAll+0x118>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	3b01      	subs	r3, #1
 80093f2:	4a38      	ldr	r2, [pc, #224]	; (80094d4 <xTaskResumeAll+0x118>)
 80093f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093f6:	4b37      	ldr	r3, [pc, #220]	; (80094d4 <xTaskResumeAll+0x118>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d162      	bne.n	80094c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80093fe:	4b36      	ldr	r3, [pc, #216]	; (80094d8 <xTaskResumeAll+0x11c>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d05e      	beq.n	80094c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009406:	e02f      	b.n	8009468 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009408:	4b34      	ldr	r3, [pc, #208]	; (80094dc <xTaskResumeAll+0x120>)
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	3318      	adds	r3, #24
 8009414:	4618      	mov	r0, r3
 8009416:	f7fe ff21 	bl	800825c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	3304      	adds	r3, #4
 800941e:	4618      	mov	r0, r3
 8009420:	f7fe ff1c 	bl	800825c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009428:	4b2d      	ldr	r3, [pc, #180]	; (80094e0 <xTaskResumeAll+0x124>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	429a      	cmp	r2, r3
 800942e:	d903      	bls.n	8009438 <xTaskResumeAll+0x7c>
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009434:	4a2a      	ldr	r2, [pc, #168]	; (80094e0 <xTaskResumeAll+0x124>)
 8009436:	6013      	str	r3, [r2, #0]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800943c:	4613      	mov	r3, r2
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	4413      	add	r3, r2
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	4a27      	ldr	r2, [pc, #156]	; (80094e4 <xTaskResumeAll+0x128>)
 8009446:	441a      	add	r2, r3
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	3304      	adds	r3, #4
 800944c:	4619      	mov	r1, r3
 800944e:	4610      	mov	r0, r2
 8009450:	f7fe fea9 	bl	80081a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009458:	4b23      	ldr	r3, [pc, #140]	; (80094e8 <xTaskResumeAll+0x12c>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800945e:	429a      	cmp	r2, r3
 8009460:	d302      	bcc.n	8009468 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009462:	4b22      	ldr	r3, [pc, #136]	; (80094ec <xTaskResumeAll+0x130>)
 8009464:	2201      	movs	r2, #1
 8009466:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009468:	4b1c      	ldr	r3, [pc, #112]	; (80094dc <xTaskResumeAll+0x120>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1cb      	bne.n	8009408 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d001      	beq.n	800947a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009476:	f000 fb55 	bl	8009b24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800947a:	4b1d      	ldr	r3, [pc, #116]	; (80094f0 <xTaskResumeAll+0x134>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d010      	beq.n	80094a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009486:	f000 f845 	bl	8009514 <xTaskIncrementTick>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d002      	beq.n	8009496 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009490:	4b16      	ldr	r3, [pc, #88]	; (80094ec <xTaskResumeAll+0x130>)
 8009492:	2201      	movs	r2, #1
 8009494:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	3b01      	subs	r3, #1
 800949a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1f1      	bne.n	8009486 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80094a2:	4b13      	ldr	r3, [pc, #76]	; (80094f0 <xTaskResumeAll+0x134>)
 80094a4:	2200      	movs	r2, #0
 80094a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80094a8:	4b10      	ldr	r3, [pc, #64]	; (80094ec <xTaskResumeAll+0x130>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d009      	beq.n	80094c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80094b0:	2301      	movs	r3, #1
 80094b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80094b4:	4b0f      	ldr	r3, [pc, #60]	; (80094f4 <xTaskResumeAll+0x138>)
 80094b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094ba:	601a      	str	r2, [r3, #0]
 80094bc:	f3bf 8f4f 	dsb	sy
 80094c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80094c4:	f001 f96a 	bl	800a79c <vPortExitCritical>

	return xAlreadyYielded;
 80094c8:	68bb      	ldr	r3, [r7, #8]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	20000d58 	.word	0x20000d58
 80094d8:	20000d30 	.word	0x20000d30
 80094dc:	20000cf0 	.word	0x20000cf0
 80094e0:	20000d38 	.word	0x20000d38
 80094e4:	20000860 	.word	0x20000860
 80094e8:	2000085c 	.word	0x2000085c
 80094ec:	20000d44 	.word	0x20000d44
 80094f0:	20000d40 	.word	0x20000d40
 80094f4:	e000ed04 	.word	0xe000ed04

080094f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80094fe:	4b04      	ldr	r3, [pc, #16]	; (8009510 <xTaskGetTickCount+0x18>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009504:	687b      	ldr	r3, [r7, #4]
}
 8009506:	4618      	mov	r0, r3
 8009508:	370c      	adds	r7, #12
 800950a:	46bd      	mov	sp, r7
 800950c:	bc80      	pop	{r7}
 800950e:	4770      	bx	lr
 8009510:	20000d34 	.word	0x20000d34

08009514 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b086      	sub	sp, #24
 8009518:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800951a:	2300      	movs	r3, #0
 800951c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800951e:	4b51      	ldr	r3, [pc, #324]	; (8009664 <xTaskIncrementTick+0x150>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	f040 808e 	bne.w	8009644 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009528:	4b4f      	ldr	r3, [pc, #316]	; (8009668 <xTaskIncrementTick+0x154>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	3301      	adds	r3, #1
 800952e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009530:	4a4d      	ldr	r2, [pc, #308]	; (8009668 <xTaskIncrementTick+0x154>)
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d120      	bne.n	800957e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800953c:	4b4b      	ldr	r3, [pc, #300]	; (800966c <xTaskIncrementTick+0x158>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00a      	beq.n	800955c <xTaskIncrementTick+0x48>
	__asm volatile
 8009546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954a:	f383 8811 	msr	BASEPRI, r3
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f3bf 8f4f 	dsb	sy
 8009556:	603b      	str	r3, [r7, #0]
}
 8009558:	bf00      	nop
 800955a:	e7fe      	b.n	800955a <xTaskIncrementTick+0x46>
 800955c:	4b43      	ldr	r3, [pc, #268]	; (800966c <xTaskIncrementTick+0x158>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	60fb      	str	r3, [r7, #12]
 8009562:	4b43      	ldr	r3, [pc, #268]	; (8009670 <xTaskIncrementTick+0x15c>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a41      	ldr	r2, [pc, #260]	; (800966c <xTaskIncrementTick+0x158>)
 8009568:	6013      	str	r3, [r2, #0]
 800956a:	4a41      	ldr	r2, [pc, #260]	; (8009670 <xTaskIncrementTick+0x15c>)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6013      	str	r3, [r2, #0]
 8009570:	4b40      	ldr	r3, [pc, #256]	; (8009674 <xTaskIncrementTick+0x160>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	3301      	adds	r3, #1
 8009576:	4a3f      	ldr	r2, [pc, #252]	; (8009674 <xTaskIncrementTick+0x160>)
 8009578:	6013      	str	r3, [r2, #0]
 800957a:	f000 fad3 	bl	8009b24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800957e:	4b3e      	ldr	r3, [pc, #248]	; (8009678 <xTaskIncrementTick+0x164>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	693a      	ldr	r2, [r7, #16]
 8009584:	429a      	cmp	r2, r3
 8009586:	d34e      	bcc.n	8009626 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009588:	4b38      	ldr	r3, [pc, #224]	; (800966c <xTaskIncrementTick+0x158>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d101      	bne.n	8009596 <xTaskIncrementTick+0x82>
 8009592:	2301      	movs	r3, #1
 8009594:	e000      	b.n	8009598 <xTaskIncrementTick+0x84>
 8009596:	2300      	movs	r3, #0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d004      	beq.n	80095a6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800959c:	4b36      	ldr	r3, [pc, #216]	; (8009678 <xTaskIncrementTick+0x164>)
 800959e:	f04f 32ff 	mov.w	r2, #4294967295
 80095a2:	601a      	str	r2, [r3, #0]
					break;
 80095a4:	e03f      	b.n	8009626 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80095a6:	4b31      	ldr	r3, [pc, #196]	; (800966c <xTaskIncrementTick+0x158>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80095b6:	693a      	ldr	r2, [r7, #16]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d203      	bcs.n	80095c6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80095be:	4a2e      	ldr	r2, [pc, #184]	; (8009678 <xTaskIncrementTick+0x164>)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6013      	str	r3, [r2, #0]
						break;
 80095c4:	e02f      	b.n	8009626 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	3304      	adds	r3, #4
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7fe fe46 	bl	800825c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d004      	beq.n	80095e2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	3318      	adds	r3, #24
 80095dc:	4618      	mov	r0, r3
 80095de:	f7fe fe3d 	bl	800825c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095e6:	4b25      	ldr	r3, [pc, #148]	; (800967c <xTaskIncrementTick+0x168>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d903      	bls.n	80095f6 <xTaskIncrementTick+0xe2>
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f2:	4a22      	ldr	r2, [pc, #136]	; (800967c <xTaskIncrementTick+0x168>)
 80095f4:	6013      	str	r3, [r2, #0]
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095fa:	4613      	mov	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4413      	add	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4a1f      	ldr	r2, [pc, #124]	; (8009680 <xTaskIncrementTick+0x16c>)
 8009604:	441a      	add	r2, r3
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	3304      	adds	r3, #4
 800960a:	4619      	mov	r1, r3
 800960c:	4610      	mov	r0, r2
 800960e:	f7fe fdca 	bl	80081a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009616:	4b1b      	ldr	r3, [pc, #108]	; (8009684 <xTaskIncrementTick+0x170>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961c:	429a      	cmp	r2, r3
 800961e:	d3b3      	bcc.n	8009588 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009620:	2301      	movs	r3, #1
 8009622:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009624:	e7b0      	b.n	8009588 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009626:	4b17      	ldr	r3, [pc, #92]	; (8009684 <xTaskIncrementTick+0x170>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800962c:	4914      	ldr	r1, [pc, #80]	; (8009680 <xTaskIncrementTick+0x16c>)
 800962e:	4613      	mov	r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	4413      	add	r3, r2
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	440b      	add	r3, r1
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2b01      	cmp	r3, #1
 800963c:	d907      	bls.n	800964e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800963e:	2301      	movs	r3, #1
 8009640:	617b      	str	r3, [r7, #20]
 8009642:	e004      	b.n	800964e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009644:	4b10      	ldr	r3, [pc, #64]	; (8009688 <xTaskIncrementTick+0x174>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	3301      	adds	r3, #1
 800964a:	4a0f      	ldr	r2, [pc, #60]	; (8009688 <xTaskIncrementTick+0x174>)
 800964c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800964e:	4b0f      	ldr	r3, [pc, #60]	; (800968c <xTaskIncrementTick+0x178>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d001      	beq.n	800965a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8009656:	2301      	movs	r3, #1
 8009658:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800965a:	697b      	ldr	r3, [r7, #20]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3718      	adds	r7, #24
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	20000d58 	.word	0x20000d58
 8009668:	20000d34 	.word	0x20000d34
 800966c:	20000ce8 	.word	0x20000ce8
 8009670:	20000cec 	.word	0x20000cec
 8009674:	20000d48 	.word	0x20000d48
 8009678:	20000d50 	.word	0x20000d50
 800967c:	20000d38 	.word	0x20000d38
 8009680:	20000860 	.word	0x20000860
 8009684:	2000085c 	.word	0x2000085c
 8009688:	20000d40 	.word	0x20000d40
 800968c:	20000d44 	.word	0x20000d44

08009690 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009690:	b480      	push	{r7}
 8009692:	b085      	sub	sp, #20
 8009694:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009696:	4b27      	ldr	r3, [pc, #156]	; (8009734 <vTaskSwitchContext+0xa4>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d003      	beq.n	80096a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800969e:	4b26      	ldr	r3, [pc, #152]	; (8009738 <vTaskSwitchContext+0xa8>)
 80096a0:	2201      	movs	r2, #1
 80096a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80096a4:	e041      	b.n	800972a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80096a6:	4b24      	ldr	r3, [pc, #144]	; (8009738 <vTaskSwitchContext+0xa8>)
 80096a8:	2200      	movs	r2, #0
 80096aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80096ac:	4b23      	ldr	r3, [pc, #140]	; (800973c <vTaskSwitchContext+0xac>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	60fb      	str	r3, [r7, #12]
 80096b2:	e010      	b.n	80096d6 <vTaskSwitchContext+0x46>
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d10a      	bne.n	80096d0 <vTaskSwitchContext+0x40>
	__asm volatile
 80096ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096be:	f383 8811 	msr	BASEPRI, r3
 80096c2:	f3bf 8f6f 	isb	sy
 80096c6:	f3bf 8f4f 	dsb	sy
 80096ca:	607b      	str	r3, [r7, #4]
}
 80096cc:	bf00      	nop
 80096ce:	e7fe      	b.n	80096ce <vTaskSwitchContext+0x3e>
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	3b01      	subs	r3, #1
 80096d4:	60fb      	str	r3, [r7, #12]
 80096d6:	491a      	ldr	r1, [pc, #104]	; (8009740 <vTaskSwitchContext+0xb0>)
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	4613      	mov	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4413      	add	r3, r2
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	440b      	add	r3, r1
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d0e4      	beq.n	80096b4 <vTaskSwitchContext+0x24>
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	4613      	mov	r3, r2
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	4413      	add	r3, r2
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	4a12      	ldr	r2, [pc, #72]	; (8009740 <vTaskSwitchContext+0xb0>)
 80096f6:	4413      	add	r3, r2
 80096f8:	60bb      	str	r3, [r7, #8]
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	685a      	ldr	r2, [r3, #4]
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	605a      	str	r2, [r3, #4]
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	685a      	ldr	r2, [r3, #4]
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	3308      	adds	r3, #8
 800970c:	429a      	cmp	r2, r3
 800970e:	d104      	bne.n	800971a <vTaskSwitchContext+0x8a>
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	685a      	ldr	r2, [r3, #4]
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	605a      	str	r2, [r3, #4]
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	4a08      	ldr	r2, [pc, #32]	; (8009744 <vTaskSwitchContext+0xb4>)
 8009722:	6013      	str	r3, [r2, #0]
 8009724:	4a05      	ldr	r2, [pc, #20]	; (800973c <vTaskSwitchContext+0xac>)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	6013      	str	r3, [r2, #0]
}
 800972a:	bf00      	nop
 800972c:	3714      	adds	r7, #20
 800972e:	46bd      	mov	sp, r7
 8009730:	bc80      	pop	{r7}
 8009732:	4770      	bx	lr
 8009734:	20000d58 	.word	0x20000d58
 8009738:	20000d44 	.word	0x20000d44
 800973c:	20000d38 	.word	0x20000d38
 8009740:	20000860 	.word	0x20000860
 8009744:	2000085c 	.word	0x2000085c

08009748 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d10a      	bne.n	800976e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975c:	f383 8811 	msr	BASEPRI, r3
 8009760:	f3bf 8f6f 	isb	sy
 8009764:	f3bf 8f4f 	dsb	sy
 8009768:	60fb      	str	r3, [r7, #12]
}
 800976a:	bf00      	nop
 800976c:	e7fe      	b.n	800976c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800976e:	4b07      	ldr	r3, [pc, #28]	; (800978c <vTaskPlaceOnEventList+0x44>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	3318      	adds	r3, #24
 8009774:	4619      	mov	r1, r3
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f7fe fd38 	bl	80081ec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800977c:	2101      	movs	r1, #1
 800977e:	6838      	ldr	r0, [r7, #0]
 8009780:	f000 fb88 	bl	8009e94 <prvAddCurrentTaskToDelayedList>
}
 8009784:	bf00      	nop
 8009786:	3710      	adds	r7, #16
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	2000085c 	.word	0x2000085c

08009790 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009790:	b580      	push	{r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d10a      	bne.n	80097b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80097a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a6:	f383 8811 	msr	BASEPRI, r3
 80097aa:	f3bf 8f6f 	isb	sy
 80097ae:	f3bf 8f4f 	dsb	sy
 80097b2:	617b      	str	r3, [r7, #20]
}
 80097b4:	bf00      	nop
 80097b6:	e7fe      	b.n	80097b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097b8:	4b0a      	ldr	r3, [pc, #40]	; (80097e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	3318      	adds	r3, #24
 80097be:	4619      	mov	r1, r3
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	f7fe fcf0 	bl	80081a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d002      	beq.n	80097d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80097cc:	f04f 33ff 	mov.w	r3, #4294967295
 80097d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80097d2:	6879      	ldr	r1, [r7, #4]
 80097d4:	68b8      	ldr	r0, [r7, #8]
 80097d6:	f000 fb5d 	bl	8009e94 <prvAddCurrentTaskToDelayedList>
	}
 80097da:	bf00      	nop
 80097dc:	3718      	adds	r7, #24
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	2000085c 	.word	0x2000085c

080097e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b086      	sub	sp, #24
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d10a      	bne.n	8009814 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80097fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009802:	f383 8811 	msr	BASEPRI, r3
 8009806:	f3bf 8f6f 	isb	sy
 800980a:	f3bf 8f4f 	dsb	sy
 800980e:	60fb      	str	r3, [r7, #12]
}
 8009810:	bf00      	nop
 8009812:	e7fe      	b.n	8009812 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	3318      	adds	r3, #24
 8009818:	4618      	mov	r0, r3
 800981a:	f7fe fd1f 	bl	800825c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800981e:	4b1e      	ldr	r3, [pc, #120]	; (8009898 <xTaskRemoveFromEventList+0xb0>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d11d      	bne.n	8009862 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	3304      	adds	r3, #4
 800982a:	4618      	mov	r0, r3
 800982c:	f7fe fd16 	bl	800825c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009834:	4b19      	ldr	r3, [pc, #100]	; (800989c <xTaskRemoveFromEventList+0xb4>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	429a      	cmp	r2, r3
 800983a:	d903      	bls.n	8009844 <xTaskRemoveFromEventList+0x5c>
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009840:	4a16      	ldr	r2, [pc, #88]	; (800989c <xTaskRemoveFromEventList+0xb4>)
 8009842:	6013      	str	r3, [r2, #0]
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009848:	4613      	mov	r3, r2
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	4413      	add	r3, r2
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4a13      	ldr	r2, [pc, #76]	; (80098a0 <xTaskRemoveFromEventList+0xb8>)
 8009852:	441a      	add	r2, r3
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	3304      	adds	r3, #4
 8009858:	4619      	mov	r1, r3
 800985a:	4610      	mov	r0, r2
 800985c:	f7fe fca3 	bl	80081a6 <vListInsertEnd>
 8009860:	e005      	b.n	800986e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	3318      	adds	r3, #24
 8009866:	4619      	mov	r1, r3
 8009868:	480e      	ldr	r0, [pc, #56]	; (80098a4 <xTaskRemoveFromEventList+0xbc>)
 800986a:	f7fe fc9c 	bl	80081a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009872:	4b0d      	ldr	r3, [pc, #52]	; (80098a8 <xTaskRemoveFromEventList+0xc0>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009878:	429a      	cmp	r2, r3
 800987a:	d905      	bls.n	8009888 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800987c:	2301      	movs	r3, #1
 800987e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009880:	4b0a      	ldr	r3, [pc, #40]	; (80098ac <xTaskRemoveFromEventList+0xc4>)
 8009882:	2201      	movs	r2, #1
 8009884:	601a      	str	r2, [r3, #0]
 8009886:	e001      	b.n	800988c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009888:	2300      	movs	r3, #0
 800988a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800988c:	697b      	ldr	r3, [r7, #20]
}
 800988e:	4618      	mov	r0, r3
 8009890:	3718      	adds	r7, #24
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	20000d58 	.word	0x20000d58
 800989c:	20000d38 	.word	0x20000d38
 80098a0:	20000860 	.word	0x20000860
 80098a4:	20000cf0 	.word	0x20000cf0
 80098a8:	2000085c 	.word	0x2000085c
 80098ac:	20000d44 	.word	0x20000d44

080098b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80098b8:	4b06      	ldr	r3, [pc, #24]	; (80098d4 <vTaskInternalSetTimeOutState+0x24>)
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80098c0:	4b05      	ldr	r3, [pc, #20]	; (80098d8 <vTaskInternalSetTimeOutState+0x28>)
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	605a      	str	r2, [r3, #4]
}
 80098c8:	bf00      	nop
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bc80      	pop	{r7}
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	20000d48 	.word	0x20000d48
 80098d8:	20000d34 	.word	0x20000d34

080098dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b088      	sub	sp, #32
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d10a      	bne.n	8009902 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80098ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f0:	f383 8811 	msr	BASEPRI, r3
 80098f4:	f3bf 8f6f 	isb	sy
 80098f8:	f3bf 8f4f 	dsb	sy
 80098fc:	613b      	str	r3, [r7, #16]
}
 80098fe:	bf00      	nop
 8009900:	e7fe      	b.n	8009900 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d10a      	bne.n	800991e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990c:	f383 8811 	msr	BASEPRI, r3
 8009910:	f3bf 8f6f 	isb	sy
 8009914:	f3bf 8f4f 	dsb	sy
 8009918:	60fb      	str	r3, [r7, #12]
}
 800991a:	bf00      	nop
 800991c:	e7fe      	b.n	800991c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800991e:	f000 ff0d 	bl	800a73c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009922:	4b1d      	ldr	r3, [pc, #116]	; (8009998 <xTaskCheckForTimeOut+0xbc>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	69ba      	ldr	r2, [r7, #24]
 800992e:	1ad3      	subs	r3, r2, r3
 8009930:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800993a:	d102      	bne.n	8009942 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800993c:	2300      	movs	r3, #0
 800993e:	61fb      	str	r3, [r7, #28]
 8009940:	e023      	b.n	800998a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	4b15      	ldr	r3, [pc, #84]	; (800999c <xTaskCheckForTimeOut+0xc0>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	429a      	cmp	r2, r3
 800994c:	d007      	beq.n	800995e <xTaskCheckForTimeOut+0x82>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	69ba      	ldr	r2, [r7, #24]
 8009954:	429a      	cmp	r2, r3
 8009956:	d302      	bcc.n	800995e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009958:	2301      	movs	r3, #1
 800995a:	61fb      	str	r3, [r7, #28]
 800995c:	e015      	b.n	800998a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	697a      	ldr	r2, [r7, #20]
 8009964:	429a      	cmp	r2, r3
 8009966:	d20b      	bcs.n	8009980 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	1ad2      	subs	r2, r2, r3
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f7ff ff9b 	bl	80098b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800997a:	2300      	movs	r3, #0
 800997c:	61fb      	str	r3, [r7, #28]
 800997e:	e004      	b.n	800998a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	2200      	movs	r2, #0
 8009984:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009986:	2301      	movs	r3, #1
 8009988:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800998a:	f000 ff07 	bl	800a79c <vPortExitCritical>

	return xReturn;
 800998e:	69fb      	ldr	r3, [r7, #28]
}
 8009990:	4618      	mov	r0, r3
 8009992:	3720      	adds	r7, #32
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	20000d34 	.word	0x20000d34
 800999c:	20000d48 	.word	0x20000d48

080099a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80099a0:	b480      	push	{r7}
 80099a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80099a4:	4b03      	ldr	r3, [pc, #12]	; (80099b4 <vTaskMissedYield+0x14>)
 80099a6:	2201      	movs	r2, #1
 80099a8:	601a      	str	r2, [r3, #0]
}
 80099aa:	bf00      	nop
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bc80      	pop	{r7}
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	20000d44 	.word	0x20000d44

080099b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80099c0:	f000 f852 	bl	8009a68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80099c4:	4b06      	ldr	r3, [pc, #24]	; (80099e0 <prvIdleTask+0x28>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d9f9      	bls.n	80099c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80099cc:	4b05      	ldr	r3, [pc, #20]	; (80099e4 <prvIdleTask+0x2c>)
 80099ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099d2:	601a      	str	r2, [r3, #0]
 80099d4:	f3bf 8f4f 	dsb	sy
 80099d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80099dc:	e7f0      	b.n	80099c0 <prvIdleTask+0x8>
 80099de:	bf00      	nop
 80099e0:	20000860 	.word	0x20000860
 80099e4:	e000ed04 	.word	0xe000ed04

080099e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099ee:	2300      	movs	r3, #0
 80099f0:	607b      	str	r3, [r7, #4]
 80099f2:	e00c      	b.n	8009a0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	4613      	mov	r3, r2
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	4413      	add	r3, r2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4a12      	ldr	r2, [pc, #72]	; (8009a48 <prvInitialiseTaskLists+0x60>)
 8009a00:	4413      	add	r3, r2
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7fe fba4 	bl	8008150 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	607b      	str	r3, [r7, #4]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2b37      	cmp	r3, #55	; 0x37
 8009a12:	d9ef      	bls.n	80099f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a14:	480d      	ldr	r0, [pc, #52]	; (8009a4c <prvInitialiseTaskLists+0x64>)
 8009a16:	f7fe fb9b 	bl	8008150 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009a1a:	480d      	ldr	r0, [pc, #52]	; (8009a50 <prvInitialiseTaskLists+0x68>)
 8009a1c:	f7fe fb98 	bl	8008150 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009a20:	480c      	ldr	r0, [pc, #48]	; (8009a54 <prvInitialiseTaskLists+0x6c>)
 8009a22:	f7fe fb95 	bl	8008150 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a26:	480c      	ldr	r0, [pc, #48]	; (8009a58 <prvInitialiseTaskLists+0x70>)
 8009a28:	f7fe fb92 	bl	8008150 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a2c:	480b      	ldr	r0, [pc, #44]	; (8009a5c <prvInitialiseTaskLists+0x74>)
 8009a2e:	f7fe fb8f 	bl	8008150 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a32:	4b0b      	ldr	r3, [pc, #44]	; (8009a60 <prvInitialiseTaskLists+0x78>)
 8009a34:	4a05      	ldr	r2, [pc, #20]	; (8009a4c <prvInitialiseTaskLists+0x64>)
 8009a36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a38:	4b0a      	ldr	r3, [pc, #40]	; (8009a64 <prvInitialiseTaskLists+0x7c>)
 8009a3a:	4a05      	ldr	r2, [pc, #20]	; (8009a50 <prvInitialiseTaskLists+0x68>)
 8009a3c:	601a      	str	r2, [r3, #0]
}
 8009a3e:	bf00      	nop
 8009a40:	3708      	adds	r7, #8
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	20000860 	.word	0x20000860
 8009a4c:	20000cc0 	.word	0x20000cc0
 8009a50:	20000cd4 	.word	0x20000cd4
 8009a54:	20000cf0 	.word	0x20000cf0
 8009a58:	20000d04 	.word	0x20000d04
 8009a5c:	20000d1c 	.word	0x20000d1c
 8009a60:	20000ce8 	.word	0x20000ce8
 8009a64:	20000cec 	.word	0x20000cec

08009a68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a6e:	e019      	b.n	8009aa4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009a70:	f000 fe64 	bl	800a73c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009a74:	4b10      	ldr	r3, [pc, #64]	; (8009ab8 <prvCheckTasksWaitingTermination+0x50>)
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	68db      	ldr	r3, [r3, #12]
 8009a7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	3304      	adds	r3, #4
 8009a80:	4618      	mov	r0, r3
 8009a82:	f7fe fbeb 	bl	800825c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a86:	4b0d      	ldr	r3, [pc, #52]	; (8009abc <prvCheckTasksWaitingTermination+0x54>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	4a0b      	ldr	r2, [pc, #44]	; (8009abc <prvCheckTasksWaitingTermination+0x54>)
 8009a8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a90:	4b0b      	ldr	r3, [pc, #44]	; (8009ac0 <prvCheckTasksWaitingTermination+0x58>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	3b01      	subs	r3, #1
 8009a96:	4a0a      	ldr	r2, [pc, #40]	; (8009ac0 <prvCheckTasksWaitingTermination+0x58>)
 8009a98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a9a:	f000 fe7f 	bl	800a79c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 f810 	bl	8009ac4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009aa4:	4b06      	ldr	r3, [pc, #24]	; (8009ac0 <prvCheckTasksWaitingTermination+0x58>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1e1      	bne.n	8009a70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009aac:	bf00      	nop
 8009aae:	bf00      	nop
 8009ab0:	3708      	adds	r7, #8
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	20000d04 	.word	0x20000d04
 8009abc:	20000d30 	.word	0x20000d30
 8009ac0:	20000d18 	.word	0x20000d18

08009ac4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d108      	bne.n	8009ae8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ada:	4618      	mov	r0, r3
 8009adc:	f000 fff2 	bl	800aac4 <vPortFree>
				vPortFree( pxTCB );
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 ffef 	bl	800aac4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009ae6:	e018      	b.n	8009b1a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d103      	bne.n	8009afa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 ffe6 	bl	800aac4 <vPortFree>
	}
 8009af8:	e00f      	b.n	8009b1a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009b00:	2b02      	cmp	r3, #2
 8009b02:	d00a      	beq.n	8009b1a <prvDeleteTCB+0x56>
	__asm volatile
 8009b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b08:	f383 8811 	msr	BASEPRI, r3
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	f3bf 8f4f 	dsb	sy
 8009b14:	60fb      	str	r3, [r7, #12]
}
 8009b16:	bf00      	nop
 8009b18:	e7fe      	b.n	8009b18 <prvDeleteTCB+0x54>
	}
 8009b1a:	bf00      	nop
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
	...

08009b24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b2a:	4b0e      	ldr	r3, [pc, #56]	; (8009b64 <prvResetNextTaskUnblockTime+0x40>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d101      	bne.n	8009b38 <prvResetNextTaskUnblockTime+0x14>
 8009b34:	2301      	movs	r3, #1
 8009b36:	e000      	b.n	8009b3a <prvResetNextTaskUnblockTime+0x16>
 8009b38:	2300      	movs	r3, #0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d004      	beq.n	8009b48 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b3e:	4b0a      	ldr	r3, [pc, #40]	; (8009b68 <prvResetNextTaskUnblockTime+0x44>)
 8009b40:	f04f 32ff 	mov.w	r2, #4294967295
 8009b44:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009b46:	e008      	b.n	8009b5a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009b48:	4b06      	ldr	r3, [pc, #24]	; (8009b64 <prvResetNextTaskUnblockTime+0x40>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	68db      	ldr	r3, [r3, #12]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	4a04      	ldr	r2, [pc, #16]	; (8009b68 <prvResetNextTaskUnblockTime+0x44>)
 8009b58:	6013      	str	r3, [r2, #0]
}
 8009b5a:	bf00      	nop
 8009b5c:	370c      	adds	r7, #12
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bc80      	pop	{r7}
 8009b62:	4770      	bx	lr
 8009b64:	20000ce8 	.word	0x20000ce8
 8009b68:	20000d50 	.word	0x20000d50

08009b6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009b72:	4b0b      	ldr	r3, [pc, #44]	; (8009ba0 <xTaskGetSchedulerState+0x34>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d102      	bne.n	8009b80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	607b      	str	r3, [r7, #4]
 8009b7e:	e008      	b.n	8009b92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b80:	4b08      	ldr	r3, [pc, #32]	; (8009ba4 <xTaskGetSchedulerState+0x38>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d102      	bne.n	8009b8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009b88:	2302      	movs	r3, #2
 8009b8a:	607b      	str	r3, [r7, #4]
 8009b8c:	e001      	b.n	8009b92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009b92:	687b      	ldr	r3, [r7, #4]
	}
 8009b94:	4618      	mov	r0, r3
 8009b96:	370c      	adds	r7, #12
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bc80      	pop	{r7}
 8009b9c:	4770      	bx	lr
 8009b9e:	bf00      	nop
 8009ba0:	20000d3c 	.word	0x20000d3c
 8009ba4:	20000d58 	.word	0x20000d58

08009ba8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d056      	beq.n	8009c6c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bc2:	4b2d      	ldr	r3, [pc, #180]	; (8009c78 <xTaskPriorityInherit+0xd0>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d246      	bcs.n	8009c5a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	699b      	ldr	r3, [r3, #24]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	db06      	blt.n	8009be2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bd4:	4b28      	ldr	r3, [pc, #160]	; (8009c78 <xTaskPriorityInherit+0xd0>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	6959      	ldr	r1, [r3, #20]
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bea:	4613      	mov	r3, r2
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	4413      	add	r3, r2
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	4a22      	ldr	r2, [pc, #136]	; (8009c7c <xTaskPriorityInherit+0xd4>)
 8009bf4:	4413      	add	r3, r2
 8009bf6:	4299      	cmp	r1, r3
 8009bf8:	d101      	bne.n	8009bfe <xTaskPriorityInherit+0x56>
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e000      	b.n	8009c00 <xTaskPriorityInherit+0x58>
 8009bfe:	2300      	movs	r3, #0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d022      	beq.n	8009c4a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	3304      	adds	r3, #4
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7fe fb27 	bl	800825c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009c0e:	4b1a      	ldr	r3, [pc, #104]	; (8009c78 <xTaskPriorityInherit+0xd0>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c1c:	4b18      	ldr	r3, [pc, #96]	; (8009c80 <xTaskPriorityInherit+0xd8>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d903      	bls.n	8009c2c <xTaskPriorityInherit+0x84>
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c28:	4a15      	ldr	r2, [pc, #84]	; (8009c80 <xTaskPriorityInherit+0xd8>)
 8009c2a:	6013      	str	r3, [r2, #0]
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c30:	4613      	mov	r3, r2
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	4413      	add	r3, r2
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	4a10      	ldr	r2, [pc, #64]	; (8009c7c <xTaskPriorityInherit+0xd4>)
 8009c3a:	441a      	add	r2, r3
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	3304      	adds	r3, #4
 8009c40:	4619      	mov	r1, r3
 8009c42:	4610      	mov	r0, r2
 8009c44:	f7fe faaf 	bl	80081a6 <vListInsertEnd>
 8009c48:	e004      	b.n	8009c54 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009c4a:	4b0b      	ldr	r3, [pc, #44]	; (8009c78 <xTaskPriorityInherit+0xd0>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009c54:	2301      	movs	r3, #1
 8009c56:	60fb      	str	r3, [r7, #12]
 8009c58:	e008      	b.n	8009c6c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c5e:	4b06      	ldr	r3, [pc, #24]	; (8009c78 <xTaskPriorityInherit+0xd0>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d201      	bcs.n	8009c6c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
	}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	2000085c 	.word	0x2000085c
 8009c7c:	20000860 	.word	0x20000860
 8009c80:	20000d38 	.word	0x20000d38

08009c84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b086      	sub	sp, #24
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009c90:	2300      	movs	r3, #0
 8009c92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d056      	beq.n	8009d48 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009c9a:	4b2e      	ldr	r3, [pc, #184]	; (8009d54 <xTaskPriorityDisinherit+0xd0>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	693a      	ldr	r2, [r7, #16]
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d00a      	beq.n	8009cba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca8:	f383 8811 	msr	BASEPRI, r3
 8009cac:	f3bf 8f6f 	isb	sy
 8009cb0:	f3bf 8f4f 	dsb	sy
 8009cb4:	60fb      	str	r3, [r7, #12]
}
 8009cb6:	bf00      	nop
 8009cb8:	e7fe      	b.n	8009cb8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10a      	bne.n	8009cd8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc6:	f383 8811 	msr	BASEPRI, r3
 8009cca:	f3bf 8f6f 	isb	sy
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	60bb      	str	r3, [r7, #8]
}
 8009cd4:	bf00      	nop
 8009cd6:	e7fe      	b.n	8009cd6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cdc:	1e5a      	subs	r2, r3, #1
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d02c      	beq.n	8009d48 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d128      	bne.n	8009d48 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	3304      	adds	r3, #4
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7fe faae 	bl	800825c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d0c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d18:	4b0f      	ldr	r3, [pc, #60]	; (8009d58 <xTaskPriorityDisinherit+0xd4>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d903      	bls.n	8009d28 <xTaskPriorityDisinherit+0xa4>
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d24:	4a0c      	ldr	r2, [pc, #48]	; (8009d58 <xTaskPriorityDisinherit+0xd4>)
 8009d26:	6013      	str	r3, [r2, #0]
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d2c:	4613      	mov	r3, r2
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	4413      	add	r3, r2
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	4a09      	ldr	r2, [pc, #36]	; (8009d5c <xTaskPriorityDisinherit+0xd8>)
 8009d36:	441a      	add	r2, r3
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	3304      	adds	r3, #4
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	4610      	mov	r0, r2
 8009d40:	f7fe fa31 	bl	80081a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009d44:	2301      	movs	r3, #1
 8009d46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d48:	697b      	ldr	r3, [r7, #20]
	}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3718      	adds	r7, #24
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	2000085c 	.word	0x2000085c
 8009d58:	20000d38 	.word	0x20000d38
 8009d5c:	20000860 	.word	0x20000860

08009d60 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b088      	sub	sp, #32
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d06f      	beq.n	8009e58 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d10a      	bne.n	8009d96 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d84:	f383 8811 	msr	BASEPRI, r3
 8009d88:	f3bf 8f6f 	isb	sy
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	60fb      	str	r3, [r7, #12]
}
 8009d92:	bf00      	nop
 8009d94:	e7fe      	b.n	8009d94 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d9a:	683a      	ldr	r2, [r7, #0]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d902      	bls.n	8009da6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	61fb      	str	r3, [r7, #28]
 8009da4:	e002      	b.n	8009dac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009daa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009dac:	69bb      	ldr	r3, [r7, #24]
 8009dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db0:	69fa      	ldr	r2, [r7, #28]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d050      	beq.n	8009e58 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dba:	697a      	ldr	r2, [r7, #20]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d14b      	bne.n	8009e58 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009dc0:	4b27      	ldr	r3, [pc, #156]	; (8009e60 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	69ba      	ldr	r2, [r7, #24]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d10a      	bne.n	8009de0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dce:	f383 8811 	msr	BASEPRI, r3
 8009dd2:	f3bf 8f6f 	isb	sy
 8009dd6:	f3bf 8f4f 	dsb	sy
 8009dda:	60bb      	str	r3, [r7, #8]
}
 8009ddc:	bf00      	nop
 8009dde:	e7fe      	b.n	8009dde <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	69fa      	ldr	r2, [r7, #28]
 8009dea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009dec:	69bb      	ldr	r3, [r7, #24]
 8009dee:	699b      	ldr	r3, [r3, #24]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	db04      	blt.n	8009dfe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009df4:	69fb      	ldr	r3, [r7, #28]
 8009df6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	6959      	ldr	r1, [r3, #20]
 8009e02:	693a      	ldr	r2, [r7, #16]
 8009e04:	4613      	mov	r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	4413      	add	r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	4a15      	ldr	r2, [pc, #84]	; (8009e64 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009e0e:	4413      	add	r3, r2
 8009e10:	4299      	cmp	r1, r3
 8009e12:	d101      	bne.n	8009e18 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8009e14:	2301      	movs	r3, #1
 8009e16:	e000      	b.n	8009e1a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8009e18:	2300      	movs	r3, #0
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d01c      	beq.n	8009e58 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e1e:	69bb      	ldr	r3, [r7, #24]
 8009e20:	3304      	adds	r3, #4
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7fe fa1a 	bl	800825c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e2c:	4b0e      	ldr	r3, [pc, #56]	; (8009e68 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d903      	bls.n	8009e3c <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e38:	4a0b      	ldr	r2, [pc, #44]	; (8009e68 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009e3a:	6013      	str	r3, [r2, #0]
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e40:	4613      	mov	r3, r2
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	4413      	add	r3, r2
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	4a06      	ldr	r2, [pc, #24]	; (8009e64 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009e4a:	441a      	add	r2, r3
 8009e4c:	69bb      	ldr	r3, [r7, #24]
 8009e4e:	3304      	adds	r3, #4
 8009e50:	4619      	mov	r1, r3
 8009e52:	4610      	mov	r0, r2
 8009e54:	f7fe f9a7 	bl	80081a6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009e58:	bf00      	nop
 8009e5a:	3720      	adds	r7, #32
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	2000085c 	.word	0x2000085c
 8009e64:	20000860 	.word	0x20000860
 8009e68:	20000d38 	.word	0x20000d38

08009e6c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009e6c:	b480      	push	{r7}
 8009e6e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009e70:	4b07      	ldr	r3, [pc, #28]	; (8009e90 <pvTaskIncrementMutexHeldCount+0x24>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d004      	beq.n	8009e82 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009e78:	4b05      	ldr	r3, [pc, #20]	; (8009e90 <pvTaskIncrementMutexHeldCount+0x24>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e7e:	3201      	adds	r2, #1
 8009e80:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009e82:	4b03      	ldr	r3, [pc, #12]	; (8009e90 <pvTaskIncrementMutexHeldCount+0x24>)
 8009e84:	681b      	ldr	r3, [r3, #0]
	}
 8009e86:	4618      	mov	r0, r3
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bc80      	pop	{r7}
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	2000085c 	.word	0x2000085c

08009e94 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009e9e:	4b21      	ldr	r3, [pc, #132]	; (8009f24 <prvAddCurrentTaskToDelayedList+0x90>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ea4:	4b20      	ldr	r3, [pc, #128]	; (8009f28 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	3304      	adds	r3, #4
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7fe f9d6 	bl	800825c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb6:	d10a      	bne.n	8009ece <prvAddCurrentTaskToDelayedList+0x3a>
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d007      	beq.n	8009ece <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ebe:	4b1a      	ldr	r3, [pc, #104]	; (8009f28 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	3304      	adds	r3, #4
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	4819      	ldr	r0, [pc, #100]	; (8009f2c <prvAddCurrentTaskToDelayedList+0x98>)
 8009ec8:	f7fe f96d 	bl	80081a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ecc:	e026      	b.n	8009f1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ece:	68fa      	ldr	r2, [r7, #12]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009ed6:	4b14      	ldr	r3, [pc, #80]	; (8009f28 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	68ba      	ldr	r2, [r7, #8]
 8009edc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009ede:	68ba      	ldr	r2, [r7, #8]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d209      	bcs.n	8009efa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ee6:	4b12      	ldr	r3, [pc, #72]	; (8009f30 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	4b0f      	ldr	r3, [pc, #60]	; (8009f28 <prvAddCurrentTaskToDelayedList+0x94>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	3304      	adds	r3, #4
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	4610      	mov	r0, r2
 8009ef4:	f7fe f97a 	bl	80081ec <vListInsert>
}
 8009ef8:	e010      	b.n	8009f1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009efa:	4b0e      	ldr	r3, [pc, #56]	; (8009f34 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	4b0a      	ldr	r3, [pc, #40]	; (8009f28 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	3304      	adds	r3, #4
 8009f04:	4619      	mov	r1, r3
 8009f06:	4610      	mov	r0, r2
 8009f08:	f7fe f970 	bl	80081ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f0c:	4b0a      	ldr	r3, [pc, #40]	; (8009f38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d202      	bcs.n	8009f1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009f16:	4a08      	ldr	r2, [pc, #32]	; (8009f38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	6013      	str	r3, [r2, #0]
}
 8009f1c:	bf00      	nop
 8009f1e:	3710      	adds	r7, #16
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	20000d34 	.word	0x20000d34
 8009f28:	2000085c 	.word	0x2000085c
 8009f2c:	20000d1c 	.word	0x20000d1c
 8009f30:	20000cec 	.word	0x20000cec
 8009f34:	20000ce8 	.word	0x20000ce8
 8009f38:	20000d50 	.word	0x20000d50

08009f3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b08a      	sub	sp, #40	; 0x28
 8009f40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009f42:	2300      	movs	r3, #0
 8009f44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009f46:	f000 facb 	bl	800a4e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009f4a:	4b1c      	ldr	r3, [pc, #112]	; (8009fbc <xTimerCreateTimerTask+0x80>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d021      	beq.n	8009f96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009f52:	2300      	movs	r3, #0
 8009f54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009f56:	2300      	movs	r3, #0
 8009f58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009f5a:	1d3a      	adds	r2, r7, #4
 8009f5c:	f107 0108 	add.w	r1, r7, #8
 8009f60:	f107 030c 	add.w	r3, r7, #12
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7fe f8d9 	bl	800811c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009f6a:	6879      	ldr	r1, [r7, #4]
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	9202      	str	r2, [sp, #8]
 8009f72:	9301      	str	r3, [sp, #4]
 8009f74:	2302      	movs	r3, #2
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	2300      	movs	r3, #0
 8009f7a:	460a      	mov	r2, r1
 8009f7c:	4910      	ldr	r1, [pc, #64]	; (8009fc0 <xTimerCreateTimerTask+0x84>)
 8009f7e:	4811      	ldr	r0, [pc, #68]	; (8009fc4 <xTimerCreateTimerTask+0x88>)
 8009f80:	f7fe ffdc 	bl	8008f3c <xTaskCreateStatic>
 8009f84:	4603      	mov	r3, r0
 8009f86:	4a10      	ldr	r2, [pc, #64]	; (8009fc8 <xTimerCreateTimerTask+0x8c>)
 8009f88:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009f8a:	4b0f      	ldr	r3, [pc, #60]	; (8009fc8 <xTimerCreateTimerTask+0x8c>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d001      	beq.n	8009f96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009f92:	2301      	movs	r3, #1
 8009f94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10a      	bne.n	8009fb2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa0:	f383 8811 	msr	BASEPRI, r3
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	613b      	str	r3, [r7, #16]
}
 8009fae:	bf00      	nop
 8009fb0:	e7fe      	b.n	8009fb0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009fb2:	697b      	ldr	r3, [r7, #20]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3718      	adds	r7, #24
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	20000d8c 	.word	0x20000d8c
 8009fc0:	0800c134 	.word	0x0800c134
 8009fc4:	0800a0e9 	.word	0x0800a0e9
 8009fc8:	20000d90 	.word	0x20000d90

08009fcc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b08a      	sub	sp, #40	; 0x28
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
 8009fd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d10a      	bne.n	8009ffa <xTimerGenericCommand+0x2e>
	__asm volatile
 8009fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe8:	f383 8811 	msr	BASEPRI, r3
 8009fec:	f3bf 8f6f 	isb	sy
 8009ff0:	f3bf 8f4f 	dsb	sy
 8009ff4:	623b      	str	r3, [r7, #32]
}
 8009ff6:	bf00      	nop
 8009ff8:	e7fe      	b.n	8009ff8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009ffa:	4b1a      	ldr	r3, [pc, #104]	; (800a064 <xTimerGenericCommand+0x98>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d02a      	beq.n	800a058 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	2b05      	cmp	r3, #5
 800a012:	dc18      	bgt.n	800a046 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a014:	f7ff fdaa 	bl	8009b6c <xTaskGetSchedulerState>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	d109      	bne.n	800a032 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a01e:	4b11      	ldr	r3, [pc, #68]	; (800a064 <xTimerGenericCommand+0x98>)
 800a020:	6818      	ldr	r0, [r3, #0]
 800a022:	f107 0110 	add.w	r1, r7, #16
 800a026:	2300      	movs	r3, #0
 800a028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a02a:	f7fe fa81 	bl	8008530 <xQueueGenericSend>
 800a02e:	6278      	str	r0, [r7, #36]	; 0x24
 800a030:	e012      	b.n	800a058 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a032:	4b0c      	ldr	r3, [pc, #48]	; (800a064 <xTimerGenericCommand+0x98>)
 800a034:	6818      	ldr	r0, [r3, #0]
 800a036:	f107 0110 	add.w	r1, r7, #16
 800a03a:	2300      	movs	r3, #0
 800a03c:	2200      	movs	r2, #0
 800a03e:	f7fe fa77 	bl	8008530 <xQueueGenericSend>
 800a042:	6278      	str	r0, [r7, #36]	; 0x24
 800a044:	e008      	b.n	800a058 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a046:	4b07      	ldr	r3, [pc, #28]	; (800a064 <xTimerGenericCommand+0x98>)
 800a048:	6818      	ldr	r0, [r3, #0]
 800a04a:	f107 0110 	add.w	r1, r7, #16
 800a04e:	2300      	movs	r3, #0
 800a050:	683a      	ldr	r2, [r7, #0]
 800a052:	f7fe fb6b 	bl	800872c <xQueueGenericSendFromISR>
 800a056:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3728      	adds	r7, #40	; 0x28
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	20000d8c 	.word	0x20000d8c

0800a068 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b088      	sub	sp, #32
 800a06c:	af02      	add	r7, sp, #8
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a072:	4b1c      	ldr	r3, [pc, #112]	; (800a0e4 <prvProcessExpiredTimer+0x7c>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	3304      	adds	r3, #4
 800a080:	4618      	mov	r0, r3
 800a082:	f7fe f8eb 	bl	800825c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	69db      	ldr	r3, [r3, #28]
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d122      	bne.n	800a0d4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	699a      	ldr	r2, [r3, #24]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	18d1      	adds	r1, r2, r3
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	683a      	ldr	r2, [r7, #0]
 800a09a:	6978      	ldr	r0, [r7, #20]
 800a09c:	f000 f8c8 	bl	800a230 <prvInsertTimerInActiveList>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d016      	beq.n	800a0d4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	9300      	str	r3, [sp, #0]
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	2100      	movs	r1, #0
 800a0b0:	6978      	ldr	r0, [r7, #20]
 800a0b2:	f7ff ff8b 	bl	8009fcc <xTimerGenericCommand>
 800a0b6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d10a      	bne.n	800a0d4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800a0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c2:	f383 8811 	msr	BASEPRI, r3
 800a0c6:	f3bf 8f6f 	isb	sy
 800a0ca:	f3bf 8f4f 	dsb	sy
 800a0ce:	60fb      	str	r3, [r7, #12]
}
 800a0d0:	bf00      	nop
 800a0d2:	e7fe      	b.n	800a0d2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d8:	6978      	ldr	r0, [r7, #20]
 800a0da:	4798      	blx	r3
}
 800a0dc:	bf00      	nop
 800a0de:	3718      	adds	r7, #24
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	20000d84 	.word	0x20000d84

0800a0e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a0f0:	f107 0308 	add.w	r3, r7, #8
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f000 f857 	bl	800a1a8 <prvGetNextExpireTime>
 800a0fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	4619      	mov	r1, r3
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f000 f803 	bl	800a10c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a106:	f000 f8d5 	bl	800a2b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a10a:	e7f1      	b.n	800a0f0 <prvTimerTask+0x8>

0800a10c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a116:	f7ff f943 	bl	80093a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a11a:	f107 0308 	add.w	r3, r7, #8
 800a11e:	4618      	mov	r0, r3
 800a120:	f000 f866 	bl	800a1f0 <prvSampleTimeNow>
 800a124:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d130      	bne.n	800a18e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10a      	bne.n	800a148 <prvProcessTimerOrBlockTask+0x3c>
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	429a      	cmp	r2, r3
 800a138:	d806      	bhi.n	800a148 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a13a:	f7ff f93f 	bl	80093bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a13e:	68f9      	ldr	r1, [r7, #12]
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f7ff ff91 	bl	800a068 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a146:	e024      	b.n	800a192 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d008      	beq.n	800a160 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a14e:	4b13      	ldr	r3, [pc, #76]	; (800a19c <prvProcessTimerOrBlockTask+0x90>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	bf0c      	ite	eq
 800a158:	2301      	moveq	r3, #1
 800a15a:	2300      	movne	r3, #0
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a160:	4b0f      	ldr	r3, [pc, #60]	; (800a1a0 <prvProcessTimerOrBlockTask+0x94>)
 800a162:	6818      	ldr	r0, [r3, #0]
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	1ad3      	subs	r3, r2, r3
 800a16a:	683a      	ldr	r2, [r7, #0]
 800a16c:	4619      	mov	r1, r3
 800a16e:	f7fe feb1 	bl	8008ed4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a172:	f7ff f923 	bl	80093bc <xTaskResumeAll>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d10a      	bne.n	800a192 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a17c:	4b09      	ldr	r3, [pc, #36]	; (800a1a4 <prvProcessTimerOrBlockTask+0x98>)
 800a17e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a182:	601a      	str	r2, [r3, #0]
 800a184:	f3bf 8f4f 	dsb	sy
 800a188:	f3bf 8f6f 	isb	sy
}
 800a18c:	e001      	b.n	800a192 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a18e:	f7ff f915 	bl	80093bc <xTaskResumeAll>
}
 800a192:	bf00      	nop
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	20000d88 	.word	0x20000d88
 800a1a0:	20000d8c 	.word	0x20000d8c
 800a1a4:	e000ed04 	.word	0xe000ed04

0800a1a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b085      	sub	sp, #20
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a1b0:	4b0e      	ldr	r3, [pc, #56]	; (800a1ec <prvGetNextExpireTime+0x44>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	bf0c      	ite	eq
 800a1ba:	2301      	moveq	r3, #1
 800a1bc:	2300      	movne	r3, #0
 800a1be:	b2db      	uxtb	r3, r3
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d105      	bne.n	800a1da <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a1ce:	4b07      	ldr	r3, [pc, #28]	; (800a1ec <prvGetNextExpireTime+0x44>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	68db      	ldr	r3, [r3, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	60fb      	str	r3, [r7, #12]
 800a1d8:	e001      	b.n	800a1de <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a1de:	68fb      	ldr	r3, [r7, #12]
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3714      	adds	r7, #20
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bc80      	pop	{r7}
 800a1e8:	4770      	bx	lr
 800a1ea:	bf00      	nop
 800a1ec:	20000d84 	.word	0x20000d84

0800a1f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a1f8:	f7ff f97e 	bl	80094f8 <xTaskGetTickCount>
 800a1fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a1fe:	4b0b      	ldr	r3, [pc, #44]	; (800a22c <prvSampleTimeNow+0x3c>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	68fa      	ldr	r2, [r7, #12]
 800a204:	429a      	cmp	r2, r3
 800a206:	d205      	bcs.n	800a214 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a208:	f000 f908 	bl	800a41c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2201      	movs	r2, #1
 800a210:	601a      	str	r2, [r3, #0]
 800a212:	e002      	b.n	800a21a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a21a:	4a04      	ldr	r2, [pc, #16]	; (800a22c <prvSampleTimeNow+0x3c>)
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a220:	68fb      	ldr	r3, [r7, #12]
}
 800a222:	4618      	mov	r0, r3
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	20000d94 	.word	0x20000d94

0800a230 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b086      	sub	sp, #24
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]
 800a23c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a23e:	2300      	movs	r3, #0
 800a240:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	68ba      	ldr	r2, [r7, #8]
 800a246:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	68fa      	ldr	r2, [r7, #12]
 800a24c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a24e:	68ba      	ldr	r2, [r7, #8]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	429a      	cmp	r2, r3
 800a254:	d812      	bhi.n	800a27c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	1ad2      	subs	r2, r2, r3
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	699b      	ldr	r3, [r3, #24]
 800a260:	429a      	cmp	r2, r3
 800a262:	d302      	bcc.n	800a26a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a264:	2301      	movs	r3, #1
 800a266:	617b      	str	r3, [r7, #20]
 800a268:	e01b      	b.n	800a2a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a26a:	4b10      	ldr	r3, [pc, #64]	; (800a2ac <prvInsertTimerInActiveList+0x7c>)
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	3304      	adds	r3, #4
 800a272:	4619      	mov	r1, r3
 800a274:	4610      	mov	r0, r2
 800a276:	f7fd ffb9 	bl	80081ec <vListInsert>
 800a27a:	e012      	b.n	800a2a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	429a      	cmp	r2, r3
 800a282:	d206      	bcs.n	800a292 <prvInsertTimerInActiveList+0x62>
 800a284:	68ba      	ldr	r2, [r7, #8]
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d302      	bcc.n	800a292 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a28c:	2301      	movs	r3, #1
 800a28e:	617b      	str	r3, [r7, #20]
 800a290:	e007      	b.n	800a2a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a292:	4b07      	ldr	r3, [pc, #28]	; (800a2b0 <prvInsertTimerInActiveList+0x80>)
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	3304      	adds	r3, #4
 800a29a:	4619      	mov	r1, r3
 800a29c:	4610      	mov	r0, r2
 800a29e:	f7fd ffa5 	bl	80081ec <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a2a2:	697b      	ldr	r3, [r7, #20]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3718      	adds	r7, #24
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	20000d88 	.word	0x20000d88
 800a2b0:	20000d84 	.word	0x20000d84

0800a2b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b08e      	sub	sp, #56	; 0x38
 800a2b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a2ba:	e09d      	b.n	800a3f8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	da18      	bge.n	800a2f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a2c2:	1d3b      	adds	r3, r7, #4
 800a2c4:	3304      	adds	r3, #4
 800a2c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d10a      	bne.n	800a2e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	61fb      	str	r3, [r7, #28]
}
 800a2e0:	bf00      	nop
 800a2e2:	e7fe      	b.n	800a2e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2ea:	6850      	ldr	r0, [r2, #4]
 800a2ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2ee:	6892      	ldr	r2, [r2, #8]
 800a2f0:	4611      	mov	r1, r2
 800a2f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	db7d      	blt.n	800a3f6 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a300:	695b      	ldr	r3, [r3, #20]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d004      	beq.n	800a310 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a308:	3304      	adds	r3, #4
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7fd ffa6 	bl	800825c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a310:	463b      	mov	r3, r7
 800a312:	4618      	mov	r0, r3
 800a314:	f7ff ff6c 	bl	800a1f0 <prvSampleTimeNow>
 800a318:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2b09      	cmp	r3, #9
 800a31e:	d86b      	bhi.n	800a3f8 <prvProcessReceivedCommands+0x144>
 800a320:	a201      	add	r2, pc, #4	; (adr r2, 800a328 <prvProcessReceivedCommands+0x74>)
 800a322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a326:	bf00      	nop
 800a328:	0800a351 	.word	0x0800a351
 800a32c:	0800a351 	.word	0x0800a351
 800a330:	0800a351 	.word	0x0800a351
 800a334:	0800a3f9 	.word	0x0800a3f9
 800a338:	0800a3ad 	.word	0x0800a3ad
 800a33c:	0800a3e5 	.word	0x0800a3e5
 800a340:	0800a351 	.word	0x0800a351
 800a344:	0800a351 	.word	0x0800a351
 800a348:	0800a3f9 	.word	0x0800a3f9
 800a34c:	0800a3ad 	.word	0x0800a3ad
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a350:	68ba      	ldr	r2, [r7, #8]
 800a352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a354:	699b      	ldr	r3, [r3, #24]
 800a356:	18d1      	adds	r1, r2, r3
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a35c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a35e:	f7ff ff67 	bl	800a230 <prvInsertTimerInActiveList>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d047      	beq.n	800a3f8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a36c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a36e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a372:	69db      	ldr	r3, [r3, #28]
 800a374:	2b01      	cmp	r3, #1
 800a376:	d13f      	bne.n	800a3f8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a378:	68ba      	ldr	r2, [r7, #8]
 800a37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37c:	699b      	ldr	r3, [r3, #24]
 800a37e:	441a      	add	r2, r3
 800a380:	2300      	movs	r3, #0
 800a382:	9300      	str	r3, [sp, #0]
 800a384:	2300      	movs	r3, #0
 800a386:	2100      	movs	r1, #0
 800a388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a38a:	f7ff fe1f 	bl	8009fcc <xTimerGenericCommand>
 800a38e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a390:	6a3b      	ldr	r3, [r7, #32]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d130      	bne.n	800a3f8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800a396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39a:	f383 8811 	msr	BASEPRI, r3
 800a39e:	f3bf 8f6f 	isb	sy
 800a3a2:	f3bf 8f4f 	dsb	sy
 800a3a6:	61bb      	str	r3, [r7, #24]
}
 800a3a8:	bf00      	nop
 800a3aa:	e7fe      	b.n	800a3aa <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a3ac:	68ba      	ldr	r2, [r7, #8]
 800a3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b4:	699b      	ldr	r3, [r3, #24]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d10a      	bne.n	800a3d0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800a3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3be:	f383 8811 	msr	BASEPRI, r3
 800a3c2:	f3bf 8f6f 	isb	sy
 800a3c6:	f3bf 8f4f 	dsb	sy
 800a3ca:	617b      	str	r3, [r7, #20]
}
 800a3cc:	bf00      	nop
 800a3ce:	e7fe      	b.n	800a3ce <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d2:	699a      	ldr	r2, [r3, #24]
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d6:	18d1      	adds	r1, r2, r3
 800a3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3de:	f7ff ff27 	bl	800a230 <prvInsertTimerInActiveList>
					break;
 800a3e2:	e009      	b.n	800a3f8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d104      	bne.n	800a3f8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800a3ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3f0:	f000 fb68 	bl	800aac4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a3f4:	e000      	b.n	800a3f8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a3f6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a3f8:	4b07      	ldr	r3, [pc, #28]	; (800a418 <prvProcessReceivedCommands+0x164>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	1d39      	adds	r1, r7, #4
 800a3fe:	2200      	movs	r2, #0
 800a400:	4618      	mov	r0, r3
 800a402:	f7fe fa2b 	bl	800885c <xQueueReceive>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f47f af57 	bne.w	800a2bc <prvProcessReceivedCommands+0x8>
	}
}
 800a40e:	bf00      	nop
 800a410:	bf00      	nop
 800a412:	3730      	adds	r7, #48	; 0x30
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}
 800a418:	20000d8c 	.word	0x20000d8c

0800a41c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b088      	sub	sp, #32
 800a420:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a422:	e045      	b.n	800a4b0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a424:	4b2c      	ldr	r3, [pc, #176]	; (800a4d8 <prvSwitchTimerLists+0xbc>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a42e:	4b2a      	ldr	r3, [pc, #168]	; (800a4d8 <prvSwitchTimerLists+0xbc>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	3304      	adds	r3, #4
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7fd ff0d 	bl	800825c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	69db      	ldr	r3, [r3, #28]
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d12e      	bne.n	800a4b0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	699b      	ldr	r3, [r3, #24]
 800a456:	693a      	ldr	r2, [r7, #16]
 800a458:	4413      	add	r3, r2
 800a45a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a45c:	68ba      	ldr	r2, [r7, #8]
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	429a      	cmp	r2, r3
 800a462:	d90e      	bls.n	800a482 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	68ba      	ldr	r2, [r7, #8]
 800a468:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a470:	4b19      	ldr	r3, [pc, #100]	; (800a4d8 <prvSwitchTimerLists+0xbc>)
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	3304      	adds	r3, #4
 800a478:	4619      	mov	r1, r3
 800a47a:	4610      	mov	r0, r2
 800a47c:	f7fd feb6 	bl	80081ec <vListInsert>
 800a480:	e016      	b.n	800a4b0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a482:	2300      	movs	r3, #0
 800a484:	9300      	str	r3, [sp, #0]
 800a486:	2300      	movs	r3, #0
 800a488:	693a      	ldr	r2, [r7, #16]
 800a48a:	2100      	movs	r1, #0
 800a48c:	68f8      	ldr	r0, [r7, #12]
 800a48e:	f7ff fd9d 	bl	8009fcc <xTimerGenericCommand>
 800a492:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d10a      	bne.n	800a4b0 <prvSwitchTimerLists+0x94>
	__asm volatile
 800a49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49e:	f383 8811 	msr	BASEPRI, r3
 800a4a2:	f3bf 8f6f 	isb	sy
 800a4a6:	f3bf 8f4f 	dsb	sy
 800a4aa:	603b      	str	r3, [r7, #0]
}
 800a4ac:	bf00      	nop
 800a4ae:	e7fe      	b.n	800a4ae <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a4b0:	4b09      	ldr	r3, [pc, #36]	; (800a4d8 <prvSwitchTimerLists+0xbc>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d1b4      	bne.n	800a424 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a4ba:	4b07      	ldr	r3, [pc, #28]	; (800a4d8 <prvSwitchTimerLists+0xbc>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a4c0:	4b06      	ldr	r3, [pc, #24]	; (800a4dc <prvSwitchTimerLists+0xc0>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a04      	ldr	r2, [pc, #16]	; (800a4d8 <prvSwitchTimerLists+0xbc>)
 800a4c6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a4c8:	4a04      	ldr	r2, [pc, #16]	; (800a4dc <prvSwitchTimerLists+0xc0>)
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	6013      	str	r3, [r2, #0]
}
 800a4ce:	bf00      	nop
 800a4d0:	3718      	adds	r7, #24
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	20000d84 	.word	0x20000d84
 800a4dc:	20000d88 	.word	0x20000d88

0800a4e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a4e6:	f000 f929 	bl	800a73c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a4ea:	4b15      	ldr	r3, [pc, #84]	; (800a540 <prvCheckForValidListAndQueue+0x60>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d120      	bne.n	800a534 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a4f2:	4814      	ldr	r0, [pc, #80]	; (800a544 <prvCheckForValidListAndQueue+0x64>)
 800a4f4:	f7fd fe2c 	bl	8008150 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a4f8:	4813      	ldr	r0, [pc, #76]	; (800a548 <prvCheckForValidListAndQueue+0x68>)
 800a4fa:	f7fd fe29 	bl	8008150 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a4fe:	4b13      	ldr	r3, [pc, #76]	; (800a54c <prvCheckForValidListAndQueue+0x6c>)
 800a500:	4a10      	ldr	r2, [pc, #64]	; (800a544 <prvCheckForValidListAndQueue+0x64>)
 800a502:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a504:	4b12      	ldr	r3, [pc, #72]	; (800a550 <prvCheckForValidListAndQueue+0x70>)
 800a506:	4a10      	ldr	r2, [pc, #64]	; (800a548 <prvCheckForValidListAndQueue+0x68>)
 800a508:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a50a:	2300      	movs	r3, #0
 800a50c:	9300      	str	r3, [sp, #0]
 800a50e:	4b11      	ldr	r3, [pc, #68]	; (800a554 <prvCheckForValidListAndQueue+0x74>)
 800a510:	4a11      	ldr	r2, [pc, #68]	; (800a558 <prvCheckForValidListAndQueue+0x78>)
 800a512:	2110      	movs	r1, #16
 800a514:	200a      	movs	r0, #10
 800a516:	f7fd ff33 	bl	8008380 <xQueueGenericCreateStatic>
 800a51a:	4603      	mov	r3, r0
 800a51c:	4a08      	ldr	r2, [pc, #32]	; (800a540 <prvCheckForValidListAndQueue+0x60>)
 800a51e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a520:	4b07      	ldr	r3, [pc, #28]	; (800a540 <prvCheckForValidListAndQueue+0x60>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d005      	beq.n	800a534 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a528:	4b05      	ldr	r3, [pc, #20]	; (800a540 <prvCheckForValidListAndQueue+0x60>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	490b      	ldr	r1, [pc, #44]	; (800a55c <prvCheckForValidListAndQueue+0x7c>)
 800a52e:	4618      	mov	r0, r3
 800a530:	f7fe fca8 	bl	8008e84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a534:	f000 f932 	bl	800a79c <vPortExitCritical>
}
 800a538:	bf00      	nop
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	20000d8c 	.word	0x20000d8c
 800a544:	20000d5c 	.word	0x20000d5c
 800a548:	20000d70 	.word	0x20000d70
 800a54c:	20000d84 	.word	0x20000d84
 800a550:	20000d88 	.word	0x20000d88
 800a554:	20000e38 	.word	0x20000e38
 800a558:	20000d98 	.word	0x20000d98
 800a55c:	0800c13c 	.word	0x0800c13c

0800a560 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a560:	b480      	push	{r7}
 800a562:	b085      	sub	sp, #20
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	3b04      	subs	r3, #4
 800a570:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a578:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	3b04      	subs	r3, #4
 800a57e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	f023 0201 	bic.w	r2, r3, #1
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	3b04      	subs	r3, #4
 800a58e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a590:	4a08      	ldr	r2, [pc, #32]	; (800a5b4 <pxPortInitialiseStack+0x54>)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	3b14      	subs	r3, #20
 800a59a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	3b20      	subs	r3, #32
 800a5a6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3714      	adds	r7, #20
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bc80      	pop	{r7}
 800a5b2:	4770      	bx	lr
 800a5b4:	0800a5b9 	.word	0x0800a5b9

0800a5b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a5c2:	4b12      	ldr	r3, [pc, #72]	; (800a60c <prvTaskExitError+0x54>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ca:	d00a      	beq.n	800a5e2 <prvTaskExitError+0x2a>
	__asm volatile
 800a5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d0:	f383 8811 	msr	BASEPRI, r3
 800a5d4:	f3bf 8f6f 	isb	sy
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	60fb      	str	r3, [r7, #12]
}
 800a5de:	bf00      	nop
 800a5e0:	e7fe      	b.n	800a5e0 <prvTaskExitError+0x28>
	__asm volatile
 800a5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e6:	f383 8811 	msr	BASEPRI, r3
 800a5ea:	f3bf 8f6f 	isb	sy
 800a5ee:	f3bf 8f4f 	dsb	sy
 800a5f2:	60bb      	str	r3, [r7, #8]
}
 800a5f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a5f6:	bf00      	nop
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d0fc      	beq.n	800a5f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a5fe:	bf00      	nop
 800a600:	bf00      	nop
 800a602:	3714      	adds	r7, #20
 800a604:	46bd      	mov	sp, r7
 800a606:	bc80      	pop	{r7}
 800a608:	4770      	bx	lr
 800a60a:	bf00      	nop
 800a60c:	2000011c 	.word	0x2000011c

0800a610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a610:	4b07      	ldr	r3, [pc, #28]	; (800a630 <pxCurrentTCBConst2>)
 800a612:	6819      	ldr	r1, [r3, #0]
 800a614:	6808      	ldr	r0, [r1, #0]
 800a616:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a61a:	f380 8809 	msr	PSP, r0
 800a61e:	f3bf 8f6f 	isb	sy
 800a622:	f04f 0000 	mov.w	r0, #0
 800a626:	f380 8811 	msr	BASEPRI, r0
 800a62a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a62e:	4770      	bx	lr

0800a630 <pxCurrentTCBConst2>:
 800a630:	2000085c 	.word	0x2000085c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a634:	bf00      	nop
 800a636:	bf00      	nop

0800a638 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a638:	4806      	ldr	r0, [pc, #24]	; (800a654 <prvPortStartFirstTask+0x1c>)
 800a63a:	6800      	ldr	r0, [r0, #0]
 800a63c:	6800      	ldr	r0, [r0, #0]
 800a63e:	f380 8808 	msr	MSP, r0
 800a642:	b662      	cpsie	i
 800a644:	b661      	cpsie	f
 800a646:	f3bf 8f4f 	dsb	sy
 800a64a:	f3bf 8f6f 	isb	sy
 800a64e:	df00      	svc	0
 800a650:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a652:	bf00      	nop
 800a654:	e000ed08 	.word	0xe000ed08

0800a658 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a65e:	4b32      	ldr	r3, [pc, #200]	; (800a728 <xPortStartScheduler+0xd0>)
 800a660:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	b2db      	uxtb	r3, r3
 800a668:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	22ff      	movs	r2, #255	; 0xff
 800a66e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	b2db      	uxtb	r3, r3
 800a676:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a678:	78fb      	ldrb	r3, [r7, #3]
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a680:	b2da      	uxtb	r2, r3
 800a682:	4b2a      	ldr	r3, [pc, #168]	; (800a72c <xPortStartScheduler+0xd4>)
 800a684:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a686:	4b2a      	ldr	r3, [pc, #168]	; (800a730 <xPortStartScheduler+0xd8>)
 800a688:	2207      	movs	r2, #7
 800a68a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a68c:	e009      	b.n	800a6a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a68e:	4b28      	ldr	r3, [pc, #160]	; (800a730 <xPortStartScheduler+0xd8>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	3b01      	subs	r3, #1
 800a694:	4a26      	ldr	r2, [pc, #152]	; (800a730 <xPortStartScheduler+0xd8>)
 800a696:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a698:	78fb      	ldrb	r3, [r7, #3]
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	005b      	lsls	r3, r3, #1
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6a2:	78fb      	ldrb	r3, [r7, #3]
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6aa:	2b80      	cmp	r3, #128	; 0x80
 800a6ac:	d0ef      	beq.n	800a68e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a6ae:	4b20      	ldr	r3, [pc, #128]	; (800a730 <xPortStartScheduler+0xd8>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f1c3 0307 	rsb	r3, r3, #7
 800a6b6:	2b04      	cmp	r3, #4
 800a6b8:	d00a      	beq.n	800a6d0 <xPortStartScheduler+0x78>
	__asm volatile
 800a6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6be:	f383 8811 	msr	BASEPRI, r3
 800a6c2:	f3bf 8f6f 	isb	sy
 800a6c6:	f3bf 8f4f 	dsb	sy
 800a6ca:	60bb      	str	r3, [r7, #8]
}
 800a6cc:	bf00      	nop
 800a6ce:	e7fe      	b.n	800a6ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a6d0:	4b17      	ldr	r3, [pc, #92]	; (800a730 <xPortStartScheduler+0xd8>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	021b      	lsls	r3, r3, #8
 800a6d6:	4a16      	ldr	r2, [pc, #88]	; (800a730 <xPortStartScheduler+0xd8>)
 800a6d8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a6da:	4b15      	ldr	r3, [pc, #84]	; (800a730 <xPortStartScheduler+0xd8>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a6e2:	4a13      	ldr	r2, [pc, #76]	; (800a730 <xPortStartScheduler+0xd8>)
 800a6e4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	b2da      	uxtb	r2, r3
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a6ee:	4b11      	ldr	r3, [pc, #68]	; (800a734 <xPortStartScheduler+0xdc>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a10      	ldr	r2, [pc, #64]	; (800a734 <xPortStartScheduler+0xdc>)
 800a6f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a6f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a6fa:	4b0e      	ldr	r3, [pc, #56]	; (800a734 <xPortStartScheduler+0xdc>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a0d      	ldr	r2, [pc, #52]	; (800a734 <xPortStartScheduler+0xdc>)
 800a700:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a704:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a706:	f000 f8b9 	bl	800a87c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a70a:	4b0b      	ldr	r3, [pc, #44]	; (800a738 <xPortStartScheduler+0xe0>)
 800a70c:	2200      	movs	r2, #0
 800a70e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a710:	f7ff ff92 	bl	800a638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a714:	f7fe ffbc 	bl	8009690 <vTaskSwitchContext>
	prvTaskExitError();
 800a718:	f7ff ff4e 	bl	800a5b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a71c:	2300      	movs	r3, #0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	e000e400 	.word	0xe000e400
 800a72c:	20000e88 	.word	0x20000e88
 800a730:	20000e8c 	.word	0x20000e8c
 800a734:	e000ed20 	.word	0xe000ed20
 800a738:	2000011c 	.word	0x2000011c

0800a73c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
	__asm volatile
 800a742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a746:	f383 8811 	msr	BASEPRI, r3
 800a74a:	f3bf 8f6f 	isb	sy
 800a74e:	f3bf 8f4f 	dsb	sy
 800a752:	607b      	str	r3, [r7, #4]
}
 800a754:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a756:	4b0f      	ldr	r3, [pc, #60]	; (800a794 <vPortEnterCritical+0x58>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	3301      	adds	r3, #1
 800a75c:	4a0d      	ldr	r2, [pc, #52]	; (800a794 <vPortEnterCritical+0x58>)
 800a75e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a760:	4b0c      	ldr	r3, [pc, #48]	; (800a794 <vPortEnterCritical+0x58>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	2b01      	cmp	r3, #1
 800a766:	d10f      	bne.n	800a788 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a768:	4b0b      	ldr	r3, [pc, #44]	; (800a798 <vPortEnterCritical+0x5c>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00a      	beq.n	800a788 <vPortEnterCritical+0x4c>
	__asm volatile
 800a772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a776:	f383 8811 	msr	BASEPRI, r3
 800a77a:	f3bf 8f6f 	isb	sy
 800a77e:	f3bf 8f4f 	dsb	sy
 800a782:	603b      	str	r3, [r7, #0]
}
 800a784:	bf00      	nop
 800a786:	e7fe      	b.n	800a786 <vPortEnterCritical+0x4a>
	}
}
 800a788:	bf00      	nop
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bc80      	pop	{r7}
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	2000011c 	.word	0x2000011c
 800a798:	e000ed04 	.word	0xe000ed04

0800a79c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a79c:	b480      	push	{r7}
 800a79e:	b083      	sub	sp, #12
 800a7a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a7a2:	4b11      	ldr	r3, [pc, #68]	; (800a7e8 <vPortExitCritical+0x4c>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d10a      	bne.n	800a7c0 <vPortExitCritical+0x24>
	__asm volatile
 800a7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ae:	f383 8811 	msr	BASEPRI, r3
 800a7b2:	f3bf 8f6f 	isb	sy
 800a7b6:	f3bf 8f4f 	dsb	sy
 800a7ba:	607b      	str	r3, [r7, #4]
}
 800a7bc:	bf00      	nop
 800a7be:	e7fe      	b.n	800a7be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a7c0:	4b09      	ldr	r3, [pc, #36]	; (800a7e8 <vPortExitCritical+0x4c>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	4a08      	ldr	r2, [pc, #32]	; (800a7e8 <vPortExitCritical+0x4c>)
 800a7c8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a7ca:	4b07      	ldr	r3, [pc, #28]	; (800a7e8 <vPortExitCritical+0x4c>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d105      	bne.n	800a7de <vPortExitCritical+0x42>
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	f383 8811 	msr	BASEPRI, r3
}
 800a7dc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a7de:	bf00      	nop
 800a7e0:	370c      	adds	r7, #12
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bc80      	pop	{r7}
 800a7e6:	4770      	bx	lr
 800a7e8:	2000011c 	.word	0x2000011c
 800a7ec:	00000000 	.word	0x00000000

0800a7f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a7f0:	f3ef 8009 	mrs	r0, PSP
 800a7f4:	f3bf 8f6f 	isb	sy
 800a7f8:	4b0d      	ldr	r3, [pc, #52]	; (800a830 <pxCurrentTCBConst>)
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a800:	6010      	str	r0, [r2, #0]
 800a802:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a806:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a80a:	f380 8811 	msr	BASEPRI, r0
 800a80e:	f7fe ff3f 	bl	8009690 <vTaskSwitchContext>
 800a812:	f04f 0000 	mov.w	r0, #0
 800a816:	f380 8811 	msr	BASEPRI, r0
 800a81a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a81e:	6819      	ldr	r1, [r3, #0]
 800a820:	6808      	ldr	r0, [r1, #0]
 800a822:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a826:	f380 8809 	msr	PSP, r0
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	4770      	bx	lr

0800a830 <pxCurrentTCBConst>:
 800a830:	2000085c 	.word	0x2000085c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a834:	bf00      	nop
 800a836:	bf00      	nop

0800a838 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
	__asm volatile
 800a83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a842:	f383 8811 	msr	BASEPRI, r3
 800a846:	f3bf 8f6f 	isb	sy
 800a84a:	f3bf 8f4f 	dsb	sy
 800a84e:	607b      	str	r3, [r7, #4]
}
 800a850:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a852:	f7fe fe5f 	bl	8009514 <xTaskIncrementTick>
 800a856:	4603      	mov	r3, r0
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d003      	beq.n	800a864 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a85c:	4b06      	ldr	r3, [pc, #24]	; (800a878 <SysTick_Handler+0x40>)
 800a85e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a862:	601a      	str	r2, [r3, #0]
 800a864:	2300      	movs	r3, #0
 800a866:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	f383 8811 	msr	BASEPRI, r3
}
 800a86e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a870:	bf00      	nop
 800a872:	3708      	adds	r7, #8
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}
 800a878:	e000ed04 	.word	0xe000ed04

0800a87c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a87c:	b480      	push	{r7}
 800a87e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a880:	4b0a      	ldr	r3, [pc, #40]	; (800a8ac <vPortSetupTimerInterrupt+0x30>)
 800a882:	2200      	movs	r2, #0
 800a884:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a886:	4b0a      	ldr	r3, [pc, #40]	; (800a8b0 <vPortSetupTimerInterrupt+0x34>)
 800a888:	2200      	movs	r2, #0
 800a88a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a88c:	4b09      	ldr	r3, [pc, #36]	; (800a8b4 <vPortSetupTimerInterrupt+0x38>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a09      	ldr	r2, [pc, #36]	; (800a8b8 <vPortSetupTimerInterrupt+0x3c>)
 800a892:	fba2 2303 	umull	r2, r3, r2, r3
 800a896:	099b      	lsrs	r3, r3, #6
 800a898:	4a08      	ldr	r2, [pc, #32]	; (800a8bc <vPortSetupTimerInterrupt+0x40>)
 800a89a:	3b01      	subs	r3, #1
 800a89c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a89e:	4b03      	ldr	r3, [pc, #12]	; (800a8ac <vPortSetupTimerInterrupt+0x30>)
 800a8a0:	2207      	movs	r2, #7
 800a8a2:	601a      	str	r2, [r3, #0]
}
 800a8a4:	bf00      	nop
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bc80      	pop	{r7}
 800a8aa:	4770      	bx	lr
 800a8ac:	e000e010 	.word	0xe000e010
 800a8b0:	e000e018 	.word	0xe000e018
 800a8b4:	20000000 	.word	0x20000000
 800a8b8:	10624dd3 	.word	0x10624dd3
 800a8bc:	e000e014 	.word	0xe000e014

0800a8c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b085      	sub	sp, #20
 800a8c4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a8c6:	f3ef 8305 	mrs	r3, IPSR
 800a8ca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2b0f      	cmp	r3, #15
 800a8d0:	d914      	bls.n	800a8fc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a8d2:	4a16      	ldr	r2, [pc, #88]	; (800a92c <vPortValidateInterruptPriority+0x6c>)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	4413      	add	r3, r2
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a8dc:	4b14      	ldr	r3, [pc, #80]	; (800a930 <vPortValidateInterruptPriority+0x70>)
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	7afa      	ldrb	r2, [r7, #11]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d20a      	bcs.n	800a8fc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ea:	f383 8811 	msr	BASEPRI, r3
 800a8ee:	f3bf 8f6f 	isb	sy
 800a8f2:	f3bf 8f4f 	dsb	sy
 800a8f6:	607b      	str	r3, [r7, #4]
}
 800a8f8:	bf00      	nop
 800a8fa:	e7fe      	b.n	800a8fa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a8fc:	4b0d      	ldr	r3, [pc, #52]	; (800a934 <vPortValidateInterruptPriority+0x74>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a904:	4b0c      	ldr	r3, [pc, #48]	; (800a938 <vPortValidateInterruptPriority+0x78>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	429a      	cmp	r2, r3
 800a90a:	d90a      	bls.n	800a922 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a910:	f383 8811 	msr	BASEPRI, r3
 800a914:	f3bf 8f6f 	isb	sy
 800a918:	f3bf 8f4f 	dsb	sy
 800a91c:	603b      	str	r3, [r7, #0]
}
 800a91e:	bf00      	nop
 800a920:	e7fe      	b.n	800a920 <vPortValidateInterruptPriority+0x60>
	}
 800a922:	bf00      	nop
 800a924:	3714      	adds	r7, #20
 800a926:	46bd      	mov	sp, r7
 800a928:	bc80      	pop	{r7}
 800a92a:	4770      	bx	lr
 800a92c:	e000e3f0 	.word	0xe000e3f0
 800a930:	20000e88 	.word	0x20000e88
 800a934:	e000ed0c 	.word	0xe000ed0c
 800a938:	20000e8c 	.word	0x20000e8c

0800a93c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b08a      	sub	sp, #40	; 0x28
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a944:	2300      	movs	r3, #0
 800a946:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a948:	f7fe fd2a 	bl	80093a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a94c:	4b58      	ldr	r3, [pc, #352]	; (800aab0 <pvPortMalloc+0x174>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d101      	bne.n	800a958 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a954:	f000 f910 	bl	800ab78 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a958:	4b56      	ldr	r3, [pc, #344]	; (800aab4 <pvPortMalloc+0x178>)
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	4013      	ands	r3, r2
 800a960:	2b00      	cmp	r3, #0
 800a962:	f040 808e 	bne.w	800aa82 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d01d      	beq.n	800a9a8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a96c:	2208      	movs	r2, #8
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4413      	add	r3, r2
 800a972:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f003 0307 	and.w	r3, r3, #7
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d014      	beq.n	800a9a8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f023 0307 	bic.w	r3, r3, #7
 800a984:	3308      	adds	r3, #8
 800a986:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f003 0307 	and.w	r3, r3, #7
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d00a      	beq.n	800a9a8 <pvPortMalloc+0x6c>
	__asm volatile
 800a992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a996:	f383 8811 	msr	BASEPRI, r3
 800a99a:	f3bf 8f6f 	isb	sy
 800a99e:	f3bf 8f4f 	dsb	sy
 800a9a2:	617b      	str	r3, [r7, #20]
}
 800a9a4:	bf00      	nop
 800a9a6:	e7fe      	b.n	800a9a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d069      	beq.n	800aa82 <pvPortMalloc+0x146>
 800a9ae:	4b42      	ldr	r3, [pc, #264]	; (800aab8 <pvPortMalloc+0x17c>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d864      	bhi.n	800aa82 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a9b8:	4b40      	ldr	r3, [pc, #256]	; (800aabc <pvPortMalloc+0x180>)
 800a9ba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a9bc:	4b3f      	ldr	r3, [pc, #252]	; (800aabc <pvPortMalloc+0x180>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a9c2:	e004      	b.n	800a9ce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d903      	bls.n	800a9e0 <pvPortMalloc+0xa4>
 800a9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d1f1      	bne.n	800a9c4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a9e0:	4b33      	ldr	r3, [pc, #204]	; (800aab0 <pvPortMalloc+0x174>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d04b      	beq.n	800aa82 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a9ea:	6a3b      	ldr	r3, [r7, #32]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	2208      	movs	r2, #8
 800a9f0:	4413      	add	r3, r2
 800a9f2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	6a3b      	ldr	r3, [r7, #32]
 800a9fa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fe:	685a      	ldr	r2, [r3, #4]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	1ad2      	subs	r2, r2, r3
 800aa04:	2308      	movs	r3, #8
 800aa06:	005b      	lsls	r3, r3, #1
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d91f      	bls.n	800aa4c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aa0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4413      	add	r3, r2
 800aa12:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	f003 0307 	and.w	r3, r3, #7
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d00a      	beq.n	800aa34 <pvPortMalloc+0xf8>
	__asm volatile
 800aa1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa22:	f383 8811 	msr	BASEPRI, r3
 800aa26:	f3bf 8f6f 	isb	sy
 800aa2a:	f3bf 8f4f 	dsb	sy
 800aa2e:	613b      	str	r3, [r7, #16]
}
 800aa30:	bf00      	nop
 800aa32:	e7fe      	b.n	800aa32 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa36:	685a      	ldr	r2, [r3, #4]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	1ad2      	subs	r2, r2, r3
 800aa3c:	69bb      	ldr	r3, [r7, #24]
 800aa3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aa46:	69b8      	ldr	r0, [r7, #24]
 800aa48:	f000 f8f8 	bl	800ac3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aa4c:	4b1a      	ldr	r3, [pc, #104]	; (800aab8 <pvPortMalloc+0x17c>)
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	1ad3      	subs	r3, r2, r3
 800aa56:	4a18      	ldr	r2, [pc, #96]	; (800aab8 <pvPortMalloc+0x17c>)
 800aa58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa5a:	4b17      	ldr	r3, [pc, #92]	; (800aab8 <pvPortMalloc+0x17c>)
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	4b18      	ldr	r3, [pc, #96]	; (800aac0 <pvPortMalloc+0x184>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d203      	bcs.n	800aa6e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aa66:	4b14      	ldr	r3, [pc, #80]	; (800aab8 <pvPortMalloc+0x17c>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a15      	ldr	r2, [pc, #84]	; (800aac0 <pvPortMalloc+0x184>)
 800aa6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aa6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa70:	685a      	ldr	r2, [r3, #4]
 800aa72:	4b10      	ldr	r3, [pc, #64]	; (800aab4 <pvPortMalloc+0x178>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	431a      	orrs	r2, r3
 800aa78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7e:	2200      	movs	r2, #0
 800aa80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aa82:	f7fe fc9b 	bl	80093bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa86:	69fb      	ldr	r3, [r7, #28]
 800aa88:	f003 0307 	and.w	r3, r3, #7
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d00a      	beq.n	800aaa6 <pvPortMalloc+0x16a>
	__asm volatile
 800aa90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa94:	f383 8811 	msr	BASEPRI, r3
 800aa98:	f3bf 8f6f 	isb	sy
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	60fb      	str	r3, [r7, #12]
}
 800aaa2:	bf00      	nop
 800aaa4:	e7fe      	b.n	800aaa4 <pvPortMalloc+0x168>
	return pvReturn;
 800aaa6:	69fb      	ldr	r3, [r7, #28]
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3728      	adds	r7, #40	; 0x28
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	20003698 	.word	0x20003698
 800aab4:	200036a4 	.word	0x200036a4
 800aab8:	2000369c 	.word	0x2000369c
 800aabc:	20003690 	.word	0x20003690
 800aac0:	200036a0 	.word	0x200036a0

0800aac4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b086      	sub	sp, #24
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d048      	beq.n	800ab68 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aad6:	2308      	movs	r3, #8
 800aad8:	425b      	negs	r3, r3
 800aada:	697a      	ldr	r2, [r7, #20]
 800aadc:	4413      	add	r3, r2
 800aade:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	685a      	ldr	r2, [r3, #4]
 800aae8:	4b21      	ldr	r3, [pc, #132]	; (800ab70 <vPortFree+0xac>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4013      	ands	r3, r2
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d10a      	bne.n	800ab08 <vPortFree+0x44>
	__asm volatile
 800aaf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf6:	f383 8811 	msr	BASEPRI, r3
 800aafa:	f3bf 8f6f 	isb	sy
 800aafe:	f3bf 8f4f 	dsb	sy
 800ab02:	60fb      	str	r3, [r7, #12]
}
 800ab04:	bf00      	nop
 800ab06:	e7fe      	b.n	800ab06 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00a      	beq.n	800ab26 <vPortFree+0x62>
	__asm volatile
 800ab10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab14:	f383 8811 	msr	BASEPRI, r3
 800ab18:	f3bf 8f6f 	isb	sy
 800ab1c:	f3bf 8f4f 	dsb	sy
 800ab20:	60bb      	str	r3, [r7, #8]
}
 800ab22:	bf00      	nop
 800ab24:	e7fe      	b.n	800ab24 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	685a      	ldr	r2, [r3, #4]
 800ab2a:	4b11      	ldr	r3, [pc, #68]	; (800ab70 <vPortFree+0xac>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4013      	ands	r3, r2
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d019      	beq.n	800ab68 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d115      	bne.n	800ab68 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	685a      	ldr	r2, [r3, #4]
 800ab40:	4b0b      	ldr	r3, [pc, #44]	; (800ab70 <vPortFree+0xac>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	43db      	mvns	r3, r3
 800ab46:	401a      	ands	r2, r3
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ab4c:	f7fe fc28 	bl	80093a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	685a      	ldr	r2, [r3, #4]
 800ab54:	4b07      	ldr	r3, [pc, #28]	; (800ab74 <vPortFree+0xb0>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4413      	add	r3, r2
 800ab5a:	4a06      	ldr	r2, [pc, #24]	; (800ab74 <vPortFree+0xb0>)
 800ab5c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ab5e:	6938      	ldr	r0, [r7, #16]
 800ab60:	f000 f86c 	bl	800ac3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ab64:	f7fe fc2a 	bl	80093bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ab68:	bf00      	nop
 800ab6a:	3718      	adds	r7, #24
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}
 800ab70:	200036a4 	.word	0x200036a4
 800ab74:	2000369c 	.word	0x2000369c

0800ab78 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b085      	sub	sp, #20
 800ab7c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab7e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ab82:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab84:	4b27      	ldr	r3, [pc, #156]	; (800ac24 <prvHeapInit+0xac>)
 800ab86:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f003 0307 	and.w	r3, r3, #7
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00c      	beq.n	800abac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	3307      	adds	r3, #7
 800ab96:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f023 0307 	bic.w	r3, r3, #7
 800ab9e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aba0:	68ba      	ldr	r2, [r7, #8]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	1ad3      	subs	r3, r2, r3
 800aba6:	4a1f      	ldr	r2, [pc, #124]	; (800ac24 <prvHeapInit+0xac>)
 800aba8:	4413      	add	r3, r2
 800abaa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800abb0:	4a1d      	ldr	r2, [pc, #116]	; (800ac28 <prvHeapInit+0xb0>)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800abb6:	4b1c      	ldr	r3, [pc, #112]	; (800ac28 <prvHeapInit+0xb0>)
 800abb8:	2200      	movs	r2, #0
 800abba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	68ba      	ldr	r2, [r7, #8]
 800abc0:	4413      	add	r3, r2
 800abc2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800abc4:	2208      	movs	r2, #8
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	1a9b      	subs	r3, r3, r2
 800abca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f023 0307 	bic.w	r3, r3, #7
 800abd2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	4a15      	ldr	r2, [pc, #84]	; (800ac2c <prvHeapInit+0xb4>)
 800abd8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800abda:	4b14      	ldr	r3, [pc, #80]	; (800ac2c <prvHeapInit+0xb4>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	2200      	movs	r2, #0
 800abe0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800abe2:	4b12      	ldr	r3, [pc, #72]	; (800ac2c <prvHeapInit+0xb4>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	2200      	movs	r2, #0
 800abe8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	1ad2      	subs	r2, r2, r3
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800abf8:	4b0c      	ldr	r3, [pc, #48]	; (800ac2c <prvHeapInit+0xb4>)
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	4a0a      	ldr	r2, [pc, #40]	; (800ac30 <prvHeapInit+0xb8>)
 800ac06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	4a09      	ldr	r2, [pc, #36]	; (800ac34 <prvHeapInit+0xbc>)
 800ac0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ac10:	4b09      	ldr	r3, [pc, #36]	; (800ac38 <prvHeapInit+0xc0>)
 800ac12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ac16:	601a      	str	r2, [r3, #0]
}
 800ac18:	bf00      	nop
 800ac1a:	3714      	adds	r7, #20
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bc80      	pop	{r7}
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	20000e90 	.word	0x20000e90
 800ac28:	20003690 	.word	0x20003690
 800ac2c:	20003698 	.word	0x20003698
 800ac30:	200036a0 	.word	0x200036a0
 800ac34:	2000369c 	.word	0x2000369c
 800ac38:	200036a4 	.word	0x200036a4

0800ac3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b085      	sub	sp, #20
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ac44:	4b27      	ldr	r3, [pc, #156]	; (800ace4 <prvInsertBlockIntoFreeList+0xa8>)
 800ac46:	60fb      	str	r3, [r7, #12]
 800ac48:	e002      	b.n	800ac50 <prvInsertBlockIntoFreeList+0x14>
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	60fb      	str	r3, [r7, #12]
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d8f7      	bhi.n	800ac4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	68ba      	ldr	r2, [r7, #8]
 800ac64:	4413      	add	r3, r2
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d108      	bne.n	800ac7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	685a      	ldr	r2, [r3, #4]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	441a      	add	r2, r3
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	68ba      	ldr	r2, [r7, #8]
 800ac88:	441a      	add	r2, r3
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d118      	bne.n	800acc4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681a      	ldr	r2, [r3, #0]
 800ac96:	4b14      	ldr	r3, [pc, #80]	; (800ace8 <prvInsertBlockIntoFreeList+0xac>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d00d      	beq.n	800acba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	685a      	ldr	r2, [r3, #4]
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	441a      	add	r2, r3
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	601a      	str	r2, [r3, #0]
 800acb8:	e008      	b.n	800accc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800acba:	4b0b      	ldr	r3, [pc, #44]	; (800ace8 <prvInsertBlockIntoFreeList+0xac>)
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	601a      	str	r2, [r3, #0]
 800acc2:	e003      	b.n	800accc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681a      	ldr	r2, [r3, #0]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800accc:	68fa      	ldr	r2, [r7, #12]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d002      	beq.n	800acda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acda:	bf00      	nop
 800acdc:	3714      	adds	r7, #20
 800acde:	46bd      	mov	sp, r7
 800ace0:	bc80      	pop	{r7}
 800ace2:	4770      	bx	lr
 800ace4:	20003690 	.word	0x20003690
 800ace8:	20003698 	.word	0x20003698

0800acec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800acf0:	2200      	movs	r2, #0
 800acf2:	4912      	ldr	r1, [pc, #72]	; (800ad3c <MX_USB_DEVICE_Init+0x50>)
 800acf4:	4812      	ldr	r0, [pc, #72]	; (800ad40 <MX_USB_DEVICE_Init+0x54>)
 800acf6:	f7fc f820 	bl	8006d3a <USBD_Init>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d001      	beq.n	800ad04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ad00:	f7f5 ff3a 	bl	8000b78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ad04:	490f      	ldr	r1, [pc, #60]	; (800ad44 <MX_USB_DEVICE_Init+0x58>)
 800ad06:	480e      	ldr	r0, [pc, #56]	; (800ad40 <MX_USB_DEVICE_Init+0x54>)
 800ad08:	f7fc f842 	bl	8006d90 <USBD_RegisterClass>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d001      	beq.n	800ad16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ad12:	f7f5 ff31 	bl	8000b78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ad16:	490c      	ldr	r1, [pc, #48]	; (800ad48 <MX_USB_DEVICE_Init+0x5c>)
 800ad18:	4809      	ldr	r0, [pc, #36]	; (800ad40 <MX_USB_DEVICE_Init+0x54>)
 800ad1a:	f7fb ff73 	bl	8006c04 <USBD_CDC_RegisterInterface>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d001      	beq.n	800ad28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ad24:	f7f5 ff28 	bl	8000b78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ad28:	4805      	ldr	r0, [pc, #20]	; (800ad40 <MX_USB_DEVICE_Init+0x54>)
 800ad2a:	f7fc f84a 	bl	8006dc2 <USBD_Start>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d001      	beq.n	800ad38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ad34:	f7f5 ff20 	bl	8000b78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ad38:	bf00      	nop
 800ad3a:	bd80      	pop	{r7, pc}
 800ad3c:	20000130 	.word	0x20000130
 800ad40:	20003a28 	.word	0x20003a28
 800ad44:	20000018 	.word	0x20000018
 800ad48:	20000120 	.word	0x20000120

0800ad4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ad50:	2200      	movs	r2, #0
 800ad52:	4905      	ldr	r1, [pc, #20]	; (800ad68 <CDC_Init_FS+0x1c>)
 800ad54:	4805      	ldr	r0, [pc, #20]	; (800ad6c <CDC_Init_FS+0x20>)
 800ad56:	f7fb ff6b 	bl	8006c30 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ad5a:	4905      	ldr	r1, [pc, #20]	; (800ad70 <CDC_Init_FS+0x24>)
 800ad5c:	4803      	ldr	r0, [pc, #12]	; (800ad6c <CDC_Init_FS+0x20>)
 800ad5e:	f7fb ff80 	bl	8006c62 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ad62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	20003cfc 	.word	0x20003cfc
 800ad6c:	20003a28 	.word	0x20003a28
 800ad70:	20003cec 	.word	0x20003cec

0800ad74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ad74:	b480      	push	{r7}
 800ad76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ad78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bc80      	pop	{r7}
 800ad80:	4770      	bx	lr
	...

0800ad84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	6039      	str	r1, [r7, #0]
 800ad8e:	71fb      	strb	r3, [r7, #7]
 800ad90:	4613      	mov	r3, r2
 800ad92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ad94:	79fb      	ldrb	r3, [r7, #7]
 800ad96:	2b23      	cmp	r3, #35	; 0x23
 800ad98:	d84a      	bhi.n	800ae30 <CDC_Control_FS+0xac>
 800ad9a:	a201      	add	r2, pc, #4	; (adr r2, 800ada0 <CDC_Control_FS+0x1c>)
 800ad9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada0:	0800ae31 	.word	0x0800ae31
 800ada4:	0800ae31 	.word	0x0800ae31
 800ada8:	0800ae31 	.word	0x0800ae31
 800adac:	0800ae31 	.word	0x0800ae31
 800adb0:	0800ae31 	.word	0x0800ae31
 800adb4:	0800ae31 	.word	0x0800ae31
 800adb8:	0800ae31 	.word	0x0800ae31
 800adbc:	0800ae31 	.word	0x0800ae31
 800adc0:	0800ae31 	.word	0x0800ae31
 800adc4:	0800ae31 	.word	0x0800ae31
 800adc8:	0800ae31 	.word	0x0800ae31
 800adcc:	0800ae31 	.word	0x0800ae31
 800add0:	0800ae31 	.word	0x0800ae31
 800add4:	0800ae31 	.word	0x0800ae31
 800add8:	0800ae31 	.word	0x0800ae31
 800addc:	0800ae31 	.word	0x0800ae31
 800ade0:	0800ae31 	.word	0x0800ae31
 800ade4:	0800ae31 	.word	0x0800ae31
 800ade8:	0800ae31 	.word	0x0800ae31
 800adec:	0800ae31 	.word	0x0800ae31
 800adf0:	0800ae31 	.word	0x0800ae31
 800adf4:	0800ae31 	.word	0x0800ae31
 800adf8:	0800ae31 	.word	0x0800ae31
 800adfc:	0800ae31 	.word	0x0800ae31
 800ae00:	0800ae31 	.word	0x0800ae31
 800ae04:	0800ae31 	.word	0x0800ae31
 800ae08:	0800ae31 	.word	0x0800ae31
 800ae0c:	0800ae31 	.word	0x0800ae31
 800ae10:	0800ae31 	.word	0x0800ae31
 800ae14:	0800ae31 	.word	0x0800ae31
 800ae18:	0800ae31 	.word	0x0800ae31
 800ae1c:	0800ae31 	.word	0x0800ae31
 800ae20:	0800ae31 	.word	0x0800ae31
 800ae24:	0800ae31 	.word	0x0800ae31
 800ae28:	0800ae31 	.word	0x0800ae31
 800ae2c:	0800ae31 	.word	0x0800ae31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ae30:	bf00      	nop
  }

  return (USBD_OK);
 800ae32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	370c      	adds	r7, #12
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bc80      	pop	{r7}
 800ae3c:	4770      	bx	lr
 800ae3e:	bf00      	nop

0800ae40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ae4a:	6879      	ldr	r1, [r7, #4]
 800ae4c:	4806      	ldr	r0, [pc, #24]	; (800ae68 <CDC_Receive_FS+0x28>)
 800ae4e:	f7fb ff08 	bl	8006c62 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ae52:	4805      	ldr	r0, [pc, #20]	; (800ae68 <CDC_Receive_FS+0x28>)
 800ae54:	f7fb ff47 	bl	8006ce6 <USBD_CDC_ReceivePacket>
  CI_getDataChannel_USB(Buf);
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f7f5 fc7f 	bl	800075c <CI_getDataChannel_USB>
  return (USBD_OK);
 800ae5e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3708      	adds	r7, #8
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	20003a28 	.word	0x20003a28

0800ae6c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	460b      	mov	r3, r1
 800ae76:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ae7c:	4b0d      	ldr	r3, [pc, #52]	; (800aeb4 <CDC_Transmit_FS+0x48>)
 800ae7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae82:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d001      	beq.n	800ae92 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	e00b      	b.n	800aeaa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ae92:	887b      	ldrh	r3, [r7, #2]
 800ae94:	461a      	mov	r2, r3
 800ae96:	6879      	ldr	r1, [r7, #4]
 800ae98:	4806      	ldr	r0, [pc, #24]	; (800aeb4 <CDC_Transmit_FS+0x48>)
 800ae9a:	f7fb fec9 	bl	8006c30 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ae9e:	4805      	ldr	r0, [pc, #20]	; (800aeb4 <CDC_Transmit_FS+0x48>)
 800aea0:	f7fb fef2 	bl	8006c88 <USBD_CDC_TransmitPacket>
 800aea4:	4603      	mov	r3, r0
 800aea6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800aea8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	20003a28 	.word	0x20003a28

0800aeb8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b083      	sub	sp, #12
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	4603      	mov	r3, r0
 800aec0:	6039      	str	r1, [r7, #0]
 800aec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	2212      	movs	r2, #18
 800aec8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aeca:	4b03      	ldr	r3, [pc, #12]	; (800aed8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aecc:	4618      	mov	r0, r3
 800aece:	370c      	adds	r7, #12
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bc80      	pop	{r7}
 800aed4:	4770      	bx	lr
 800aed6:	bf00      	nop
 800aed8:	2000014c 	.word	0x2000014c

0800aedc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	4603      	mov	r3, r0
 800aee4:	6039      	str	r1, [r7, #0]
 800aee6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	2204      	movs	r2, #4
 800aeec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aeee:	4b03      	ldr	r3, [pc, #12]	; (800aefc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	370c      	adds	r7, #12
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bc80      	pop	{r7}
 800aef8:	4770      	bx	lr
 800aefa:	bf00      	nop
 800aefc:	20000160 	.word	0x20000160

0800af00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	4603      	mov	r3, r0
 800af08:	6039      	str	r1, [r7, #0]
 800af0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800af0c:	79fb      	ldrb	r3, [r7, #7]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d105      	bne.n	800af1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800af12:	683a      	ldr	r2, [r7, #0]
 800af14:	4907      	ldr	r1, [pc, #28]	; (800af34 <USBD_FS_ProductStrDescriptor+0x34>)
 800af16:	4808      	ldr	r0, [pc, #32]	; (800af38 <USBD_FS_ProductStrDescriptor+0x38>)
 800af18:	f7fc fecc 	bl	8007cb4 <USBD_GetString>
 800af1c:	e004      	b.n	800af28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800af1e:	683a      	ldr	r2, [r7, #0]
 800af20:	4904      	ldr	r1, [pc, #16]	; (800af34 <USBD_FS_ProductStrDescriptor+0x34>)
 800af22:	4805      	ldr	r0, [pc, #20]	; (800af38 <USBD_FS_ProductStrDescriptor+0x38>)
 800af24:	f7fc fec6 	bl	8007cb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800af28:	4b02      	ldr	r3, [pc, #8]	; (800af34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3708      	adds	r7, #8
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	20003d10 	.word	0x20003d10
 800af38:	0800c144 	.word	0x0800c144

0800af3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	4603      	mov	r3, r0
 800af44:	6039      	str	r1, [r7, #0]
 800af46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800af48:	683a      	ldr	r2, [r7, #0]
 800af4a:	4904      	ldr	r1, [pc, #16]	; (800af5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800af4c:	4804      	ldr	r0, [pc, #16]	; (800af60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800af4e:	f7fc feb1 	bl	8007cb4 <USBD_GetString>
  return USBD_StrDesc;
 800af52:	4b02      	ldr	r3, [pc, #8]	; (800af5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800af54:	4618      	mov	r0, r3
 800af56:	3708      	adds	r7, #8
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	20003d10 	.word	0x20003d10
 800af60:	0800c158 	.word	0x0800c158

0800af64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	4603      	mov	r3, r0
 800af6c:	6039      	str	r1, [r7, #0]
 800af6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	221a      	movs	r2, #26
 800af74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800af76:	f000 f843 	bl	800b000 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800af7a:	4b02      	ldr	r3, [pc, #8]	; (800af84 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}
 800af84:	20000164 	.word	0x20000164

0800af88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	4603      	mov	r3, r0
 800af90:	6039      	str	r1, [r7, #0]
 800af92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800af94:	79fb      	ldrb	r3, [r7, #7]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d105      	bne.n	800afa6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800af9a:	683a      	ldr	r2, [r7, #0]
 800af9c:	4907      	ldr	r1, [pc, #28]	; (800afbc <USBD_FS_ConfigStrDescriptor+0x34>)
 800af9e:	4808      	ldr	r0, [pc, #32]	; (800afc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800afa0:	f7fc fe88 	bl	8007cb4 <USBD_GetString>
 800afa4:	e004      	b.n	800afb0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800afa6:	683a      	ldr	r2, [r7, #0]
 800afa8:	4904      	ldr	r1, [pc, #16]	; (800afbc <USBD_FS_ConfigStrDescriptor+0x34>)
 800afaa:	4805      	ldr	r0, [pc, #20]	; (800afc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800afac:	f7fc fe82 	bl	8007cb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800afb0:	4b02      	ldr	r3, [pc, #8]	; (800afbc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3708      	adds	r7, #8
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	20003d10 	.word	0x20003d10
 800afc0:	0800c164 	.word	0x0800c164

0800afc4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	4603      	mov	r3, r0
 800afcc:	6039      	str	r1, [r7, #0]
 800afce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800afd0:	79fb      	ldrb	r3, [r7, #7]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d105      	bne.n	800afe2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800afd6:	683a      	ldr	r2, [r7, #0]
 800afd8:	4907      	ldr	r1, [pc, #28]	; (800aff8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800afda:	4808      	ldr	r0, [pc, #32]	; (800affc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800afdc:	f7fc fe6a 	bl	8007cb4 <USBD_GetString>
 800afe0:	e004      	b.n	800afec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800afe2:	683a      	ldr	r2, [r7, #0]
 800afe4:	4904      	ldr	r1, [pc, #16]	; (800aff8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800afe6:	4805      	ldr	r0, [pc, #20]	; (800affc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800afe8:	f7fc fe64 	bl	8007cb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800afec:	4b02      	ldr	r3, [pc, #8]	; (800aff8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3708      	adds	r7, #8
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	20003d10 	.word	0x20003d10
 800affc:	0800c170 	.word	0x0800c170

0800b000 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b006:	4b0f      	ldr	r3, [pc, #60]	; (800b044 <Get_SerialNum+0x44>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b00c:	4b0e      	ldr	r3, [pc, #56]	; (800b048 <Get_SerialNum+0x48>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b012:	4b0e      	ldr	r3, [pc, #56]	; (800b04c <Get_SerialNum+0x4c>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b018:	68fa      	ldr	r2, [r7, #12]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	4413      	add	r3, r2
 800b01e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d009      	beq.n	800b03a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b026:	2208      	movs	r2, #8
 800b028:	4909      	ldr	r1, [pc, #36]	; (800b050 <Get_SerialNum+0x50>)
 800b02a:	68f8      	ldr	r0, [r7, #12]
 800b02c:	f000 f814 	bl	800b058 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b030:	2204      	movs	r2, #4
 800b032:	4908      	ldr	r1, [pc, #32]	; (800b054 <Get_SerialNum+0x54>)
 800b034:	68b8      	ldr	r0, [r7, #8]
 800b036:	f000 f80f 	bl	800b058 <IntToUnicode>
  }
}
 800b03a:	bf00      	nop
 800b03c:	3710      	adds	r7, #16
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	1ffff7e8 	.word	0x1ffff7e8
 800b048:	1ffff7ec 	.word	0x1ffff7ec
 800b04c:	1ffff7f0 	.word	0x1ffff7f0
 800b050:	20000166 	.word	0x20000166
 800b054:	20000176 	.word	0x20000176

0800b058 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b058:	b480      	push	{r7}
 800b05a:	b087      	sub	sp, #28
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	60b9      	str	r1, [r7, #8]
 800b062:	4613      	mov	r3, r2
 800b064:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b066:	2300      	movs	r3, #0
 800b068:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b06a:	2300      	movs	r3, #0
 800b06c:	75fb      	strb	r3, [r7, #23]
 800b06e:	e027      	b.n	800b0c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	0f1b      	lsrs	r3, r3, #28
 800b074:	2b09      	cmp	r3, #9
 800b076:	d80b      	bhi.n	800b090 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	0f1b      	lsrs	r3, r3, #28
 800b07c:	b2da      	uxtb	r2, r3
 800b07e:	7dfb      	ldrb	r3, [r7, #23]
 800b080:	005b      	lsls	r3, r3, #1
 800b082:	4619      	mov	r1, r3
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	440b      	add	r3, r1
 800b088:	3230      	adds	r2, #48	; 0x30
 800b08a:	b2d2      	uxtb	r2, r2
 800b08c:	701a      	strb	r2, [r3, #0]
 800b08e:	e00a      	b.n	800b0a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	0f1b      	lsrs	r3, r3, #28
 800b094:	b2da      	uxtb	r2, r3
 800b096:	7dfb      	ldrb	r3, [r7, #23]
 800b098:	005b      	lsls	r3, r3, #1
 800b09a:	4619      	mov	r1, r3
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	440b      	add	r3, r1
 800b0a0:	3237      	adds	r2, #55	; 0x37
 800b0a2:	b2d2      	uxtb	r2, r2
 800b0a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	011b      	lsls	r3, r3, #4
 800b0aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b0ac:	7dfb      	ldrb	r3, [r7, #23]
 800b0ae:	005b      	lsls	r3, r3, #1
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	68ba      	ldr	r2, [r7, #8]
 800b0b4:	4413      	add	r3, r2
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b0ba:	7dfb      	ldrb	r3, [r7, #23]
 800b0bc:	3301      	adds	r3, #1
 800b0be:	75fb      	strb	r3, [r7, #23]
 800b0c0:	7dfa      	ldrb	r2, [r7, #23]
 800b0c2:	79fb      	ldrb	r3, [r7, #7]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d3d3      	bcc.n	800b070 <IntToUnicode+0x18>
  }
}
 800b0c8:	bf00      	nop
 800b0ca:	bf00      	nop
 800b0cc:	371c      	adds	r7, #28
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bc80      	pop	{r7}
 800b0d2:	4770      	bx	lr

0800b0d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a0d      	ldr	r2, [pc, #52]	; (800b118 <HAL_PCD_MspInit+0x44>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d113      	bne.n	800b10e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b0e6:	4b0d      	ldr	r3, [pc, #52]	; (800b11c <HAL_PCD_MspInit+0x48>)
 800b0e8:	69db      	ldr	r3, [r3, #28]
 800b0ea:	4a0c      	ldr	r2, [pc, #48]	; (800b11c <HAL_PCD_MspInit+0x48>)
 800b0ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b0f0:	61d3      	str	r3, [r2, #28]
 800b0f2:	4b0a      	ldr	r3, [pc, #40]	; (800b11c <HAL_PCD_MspInit+0x48>)
 800b0f4:	69db      	ldr	r3, [r3, #28]
 800b0f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b0fa:	60fb      	str	r3, [r7, #12]
 800b0fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800b0fe:	2200      	movs	r2, #0
 800b100:	2105      	movs	r1, #5
 800b102:	2014      	movs	r0, #20
 800b104:	f7f5 ffb3 	bl	800106e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b108:	2014      	movs	r0, #20
 800b10a:	f7f5 ffcc 	bl	80010a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b10e:	bf00      	nop
 800b110:	3710      	adds	r7, #16
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
 800b116:	bf00      	nop
 800b118:	40005c00 	.word	0x40005c00
 800b11c:	40021000 	.word	0x40021000

0800b120 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b134:	4619      	mov	r1, r3
 800b136:	4610      	mov	r0, r2
 800b138:	f7fb fe8b 	bl	8006e52 <USBD_LL_SetupStage>
}
 800b13c:	bf00      	nop
 800b13e:	3708      	adds	r7, #8
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b082      	sub	sp, #8
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	460b      	mov	r3, r1
 800b14e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b156:	78fa      	ldrb	r2, [r7, #3]
 800b158:	6879      	ldr	r1, [r7, #4]
 800b15a:	4613      	mov	r3, r2
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	4413      	add	r3, r2
 800b160:	00db      	lsls	r3, r3, #3
 800b162:	440b      	add	r3, r1
 800b164:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b168:	681a      	ldr	r2, [r3, #0]
 800b16a:	78fb      	ldrb	r3, [r7, #3]
 800b16c:	4619      	mov	r1, r3
 800b16e:	f7fb febd 	bl	8006eec <USBD_LL_DataOutStage>
}
 800b172:	bf00      	nop
 800b174:	3708      	adds	r7, #8
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}

0800b17a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b17a:	b580      	push	{r7, lr}
 800b17c:	b082      	sub	sp, #8
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
 800b182:	460b      	mov	r3, r1
 800b184:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b18c:	78fa      	ldrb	r2, [r7, #3]
 800b18e:	6879      	ldr	r1, [r7, #4]
 800b190:	4613      	mov	r3, r2
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	4413      	add	r3, r2
 800b196:	00db      	lsls	r3, r3, #3
 800b198:	440b      	add	r3, r1
 800b19a:	333c      	adds	r3, #60	; 0x3c
 800b19c:	681a      	ldr	r2, [r3, #0]
 800b19e:	78fb      	ldrb	r3, [r7, #3]
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	f7fb ff14 	bl	8006fce <USBD_LL_DataInStage>
}
 800b1a6:	bf00      	nop
 800b1a8:	3708      	adds	r7, #8
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b082      	sub	sp, #8
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f7fc f824 	bl	800720a <USBD_LL_SOF>
}
 800b1c2:	bf00      	nop
 800b1c4:	3708      	adds	r7, #8
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}

0800b1ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1ca:	b580      	push	{r7, lr}
 800b1cc:	b084      	sub	sp, #16
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	2b02      	cmp	r3, #2
 800b1dc:	d001      	beq.n	800b1e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b1de:	f7f5 fccb 	bl	8000b78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b1e8:	7bfa      	ldrb	r2, [r7, #15]
 800b1ea:	4611      	mov	r1, r2
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7fb ffd4 	bl	800719a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f7fb ff8d 	bl	8007118 <USBD_LL_Reset>
}
 800b1fe:	bf00      	nop
 800b200:	3710      	adds	r7, #16
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
	...

0800b208 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b216:	4618      	mov	r0, r3
 800b218:	f7fb ffce 	bl	80071b8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	699b      	ldr	r3, [r3, #24]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d005      	beq.n	800b230 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b224:	4b04      	ldr	r3, [pc, #16]	; (800b238 <HAL_PCD_SuspendCallback+0x30>)
 800b226:	691b      	ldr	r3, [r3, #16]
 800b228:	4a03      	ldr	r2, [pc, #12]	; (800b238 <HAL_PCD_SuspendCallback+0x30>)
 800b22a:	f043 0306 	orr.w	r3, r3, #6
 800b22e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b230:	bf00      	nop
 800b232:	3708      	adds	r7, #8
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}
 800b238:	e000ed00 	.word	0xe000ed00

0800b23c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b24a:	4618      	mov	r0, r3
 800b24c:	f7fb ffc8 	bl	80071e0 <USBD_LL_Resume>
}
 800b250:	bf00      	nop
 800b252:	3708      	adds	r7, #8
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b260:	4a28      	ldr	r2, [pc, #160]	; (800b304 <USBD_LL_Init+0xac>)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	4a26      	ldr	r2, [pc, #152]	; (800b304 <USBD_LL_Init+0xac>)
 800b26c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b270:	4b24      	ldr	r3, [pc, #144]	; (800b304 <USBD_LL_Init+0xac>)
 800b272:	4a25      	ldr	r2, [pc, #148]	; (800b308 <USBD_LL_Init+0xb0>)
 800b274:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b276:	4b23      	ldr	r3, [pc, #140]	; (800b304 <USBD_LL_Init+0xac>)
 800b278:	2208      	movs	r2, #8
 800b27a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b27c:	4b21      	ldr	r3, [pc, #132]	; (800b304 <USBD_LL_Init+0xac>)
 800b27e:	2202      	movs	r2, #2
 800b280:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b282:	4b20      	ldr	r3, [pc, #128]	; (800b304 <USBD_LL_Init+0xac>)
 800b284:	2200      	movs	r2, #0
 800b286:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b288:	4b1e      	ldr	r3, [pc, #120]	; (800b304 <USBD_LL_Init+0xac>)
 800b28a:	2200      	movs	r2, #0
 800b28c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b28e:	4b1d      	ldr	r3, [pc, #116]	; (800b304 <USBD_LL_Init+0xac>)
 800b290:	2200      	movs	r2, #0
 800b292:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b294:	481b      	ldr	r0, [pc, #108]	; (800b304 <USBD_LL_Init+0xac>)
 800b296:	f7f6 f93e 	bl	8001516 <HAL_PCD_Init>
 800b29a:	4603      	mov	r3, r0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d001      	beq.n	800b2a4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b2a0:	f7f5 fc6a 	bl	8000b78 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b2aa:	2318      	movs	r3, #24
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	2100      	movs	r1, #0
 800b2b0:	f7f7 fc80 	bl	8002bb4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b2ba:	2358      	movs	r3, #88	; 0x58
 800b2bc:	2200      	movs	r2, #0
 800b2be:	2180      	movs	r1, #128	; 0x80
 800b2c0:	f7f7 fc78 	bl	8002bb4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b2ca:	23c0      	movs	r3, #192	; 0xc0
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	2181      	movs	r1, #129	; 0x81
 800b2d0:	f7f7 fc70 	bl	8002bb4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b2da:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b2de:	2200      	movs	r2, #0
 800b2e0:	2101      	movs	r1, #1
 800b2e2:	f7f7 fc67 	bl	8002bb4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b2ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	2182      	movs	r1, #130	; 0x82
 800b2f4:	f7f7 fc5e 	bl	8002bb4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b2f8:	2300      	movs	r3, #0
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3708      	adds	r7, #8
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	20003d50 	.word	0x20003d50
 800b308:	40005c00 	.word	0x40005c00

0800b30c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b314:	2300      	movs	r3, #0
 800b316:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b318:	2300      	movs	r3, #0
 800b31a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b322:	4618      	mov	r0, r3
 800b324:	f7f6 fa02 	bl	800172c <HAL_PCD_Start>
 800b328:	4603      	mov	r3, r0
 800b32a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b32c:	7bfb      	ldrb	r3, [r7, #15]
 800b32e:	4618      	mov	r0, r3
 800b330:	f000 f94e 	bl	800b5d0 <USBD_Get_USB_Status>
 800b334:	4603      	mov	r3, r0
 800b336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b338:	7bbb      	ldrb	r3, [r7, #14]
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3710      	adds	r7, #16
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}

0800b342 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b342:	b580      	push	{r7, lr}
 800b344:	b084      	sub	sp, #16
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
 800b34a:	4608      	mov	r0, r1
 800b34c:	4611      	mov	r1, r2
 800b34e:	461a      	mov	r2, r3
 800b350:	4603      	mov	r3, r0
 800b352:	70fb      	strb	r3, [r7, #3]
 800b354:	460b      	mov	r3, r1
 800b356:	70bb      	strb	r3, [r7, #2]
 800b358:	4613      	mov	r3, r2
 800b35a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b35c:	2300      	movs	r3, #0
 800b35e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b360:	2300      	movs	r3, #0
 800b362:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b36a:	78bb      	ldrb	r3, [r7, #2]
 800b36c:	883a      	ldrh	r2, [r7, #0]
 800b36e:	78f9      	ldrb	r1, [r7, #3]
 800b370:	f7f6 fb7c 	bl	8001a6c <HAL_PCD_EP_Open>
 800b374:	4603      	mov	r3, r0
 800b376:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b378:	7bfb      	ldrb	r3, [r7, #15]
 800b37a:	4618      	mov	r0, r3
 800b37c:	f000 f928 	bl	800b5d0 <USBD_Get_USB_Status>
 800b380:	4603      	mov	r3, r0
 800b382:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b384:	7bbb      	ldrb	r3, [r7, #14]
}
 800b386:	4618      	mov	r0, r3
 800b388:	3710      	adds	r7, #16
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}

0800b38e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b38e:	b580      	push	{r7, lr}
 800b390:	b084      	sub	sp, #16
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
 800b396:	460b      	mov	r3, r1
 800b398:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b39a:	2300      	movs	r3, #0
 800b39c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b3a8:	78fa      	ldrb	r2, [r7, #3]
 800b3aa:	4611      	mov	r1, r2
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f7f6 fbc3 	bl	8001b38 <HAL_PCD_EP_Close>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3b6:	7bfb      	ldrb	r3, [r7, #15]
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f000 f909 	bl	800b5d0 <USBD_Get_USB_Status>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3710      	adds	r7, #16
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b3e6:	78fa      	ldrb	r2, [r7, #3]
 800b3e8:	4611      	mov	r1, r2
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7f6 fc83 	bl	8001cf6 <HAL_PCD_EP_SetStall>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3f4:	7bfb      	ldrb	r3, [r7, #15]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f000 f8ea 	bl	800b5d0 <USBD_Get_USB_Status>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b400:	7bbb      	ldrb	r3, [r7, #14]
}
 800b402:	4618      	mov	r0, r3
 800b404:	3710      	adds	r7, #16
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}

0800b40a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b40a:	b580      	push	{r7, lr}
 800b40c:	b084      	sub	sp, #16
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
 800b412:	460b      	mov	r3, r1
 800b414:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b416:	2300      	movs	r3, #0
 800b418:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b41a:	2300      	movs	r3, #0
 800b41c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b424:	78fa      	ldrb	r2, [r7, #3]
 800b426:	4611      	mov	r1, r2
 800b428:	4618      	mov	r0, r3
 800b42a:	f7f6 fcc4 	bl	8001db6 <HAL_PCD_EP_ClrStall>
 800b42e:	4603      	mov	r3, r0
 800b430:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b432:	7bfb      	ldrb	r3, [r7, #15]
 800b434:	4618      	mov	r0, r3
 800b436:	f000 f8cb 	bl	800b5d0 <USBD_Get_USB_Status>
 800b43a:	4603      	mov	r3, r0
 800b43c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b43e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b440:	4618      	mov	r0, r3
 800b442:	3710      	adds	r7, #16
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b448:	b480      	push	{r7}
 800b44a:	b085      	sub	sp, #20
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	460b      	mov	r3, r1
 800b452:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b45a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b45c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b460:	2b00      	cmp	r3, #0
 800b462:	da0c      	bge.n	800b47e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b464:	78fb      	ldrb	r3, [r7, #3]
 800b466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b46a:	68f9      	ldr	r1, [r7, #12]
 800b46c:	1c5a      	adds	r2, r3, #1
 800b46e:	4613      	mov	r3, r2
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	4413      	add	r3, r2
 800b474:	00db      	lsls	r3, r3, #3
 800b476:	440b      	add	r3, r1
 800b478:	3302      	adds	r3, #2
 800b47a:	781b      	ldrb	r3, [r3, #0]
 800b47c:	e00b      	b.n	800b496 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b47e:	78fb      	ldrb	r3, [r7, #3]
 800b480:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b484:	68f9      	ldr	r1, [r7, #12]
 800b486:	4613      	mov	r3, r2
 800b488:	009b      	lsls	r3, r3, #2
 800b48a:	4413      	add	r3, r2
 800b48c:	00db      	lsls	r3, r3, #3
 800b48e:	440b      	add	r3, r1
 800b490:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b494:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b496:	4618      	mov	r0, r3
 800b498:	3714      	adds	r7, #20
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bc80      	pop	{r7}
 800b49e:	4770      	bx	lr

0800b4a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4ba:	78fa      	ldrb	r2, [r7, #3]
 800b4bc:	4611      	mov	r1, r2
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7f6 faaf 	bl	8001a22 <HAL_PCD_SetAddress>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4c8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f000 f880 	bl	800b5d0 <USBD_Get_USB_Status>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3710      	adds	r7, #16
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}

0800b4de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b4de:	b580      	push	{r7, lr}
 800b4e0:	b086      	sub	sp, #24
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	60f8      	str	r0, [r7, #12]
 800b4e6:	607a      	str	r2, [r7, #4]
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	72fb      	strb	r3, [r7, #11]
 800b4ee:	4613      	mov	r3, r2
 800b4f0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b500:	893b      	ldrh	r3, [r7, #8]
 800b502:	7af9      	ldrb	r1, [r7, #11]
 800b504:	687a      	ldr	r2, [r7, #4]
 800b506:	f7f6 fbb3 	bl	8001c70 <HAL_PCD_EP_Transmit>
 800b50a:	4603      	mov	r3, r0
 800b50c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b50e:	7dfb      	ldrb	r3, [r7, #23]
 800b510:	4618      	mov	r0, r3
 800b512:	f000 f85d 	bl	800b5d0 <USBD_Get_USB_Status>
 800b516:	4603      	mov	r3, r0
 800b518:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b51a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3718      	adds	r7, #24
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b086      	sub	sp, #24
 800b528:	af00      	add	r7, sp, #0
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	607a      	str	r2, [r7, #4]
 800b52e:	461a      	mov	r2, r3
 800b530:	460b      	mov	r3, r1
 800b532:	72fb      	strb	r3, [r7, #11]
 800b534:	4613      	mov	r3, r2
 800b536:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b538:	2300      	movs	r3, #0
 800b53a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b53c:	2300      	movs	r3, #0
 800b53e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b546:	893b      	ldrh	r3, [r7, #8]
 800b548:	7af9      	ldrb	r1, [r7, #11]
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	f7f6 fb3c 	bl	8001bc8 <HAL_PCD_EP_Receive>
 800b550:	4603      	mov	r3, r0
 800b552:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b554:	7dfb      	ldrb	r3, [r7, #23]
 800b556:	4618      	mov	r0, r3
 800b558:	f000 f83a 	bl	800b5d0 <USBD_Get_USB_Status>
 800b55c:	4603      	mov	r3, r0
 800b55e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b560:	7dbb      	ldrb	r3, [r7, #22]
}
 800b562:	4618      	mov	r0, r3
 800b564:	3718      	adds	r7, #24
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}

0800b56a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b56a:	b580      	push	{r7, lr}
 800b56c:	b082      	sub	sp, #8
 800b56e:	af00      	add	r7, sp, #0
 800b570:	6078      	str	r0, [r7, #4]
 800b572:	460b      	mov	r3, r1
 800b574:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b57c:	78fa      	ldrb	r2, [r7, #3]
 800b57e:	4611      	mov	r1, r2
 800b580:	4618      	mov	r0, r3
 800b582:	f7f6 fb5e 	bl	8001c42 <HAL_PCD_EP_GetRxCount>
 800b586:	4603      	mov	r3, r0
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3708      	adds	r7, #8
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b590:	b480      	push	{r7}
 800b592:	b083      	sub	sp, #12
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b598:	4b02      	ldr	r3, [pc, #8]	; (800b5a4 <USBD_static_malloc+0x14>)
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	370c      	adds	r7, #12
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bc80      	pop	{r7}
 800b5a2:	4770      	bx	lr
 800b5a4:	200036a8 	.word	0x200036a8

0800b5a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]

}
 800b5b0:	bf00      	nop
 800b5b2:	370c      	adds	r7, #12
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bc80      	pop	{r7}
 800b5b8:	4770      	bx	lr

0800b5ba <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5ba:	b480      	push	{r7}
 800b5bc:	b083      	sub	sp, #12
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b5c6:	bf00      	nop
 800b5c8:	370c      	adds	r7, #12
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bc80      	pop	{r7}
 800b5ce:	4770      	bx	lr

0800b5d0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b085      	sub	sp, #20
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b5de:	79fb      	ldrb	r3, [r7, #7]
 800b5e0:	2b03      	cmp	r3, #3
 800b5e2:	d817      	bhi.n	800b614 <USBD_Get_USB_Status+0x44>
 800b5e4:	a201      	add	r2, pc, #4	; (adr r2, 800b5ec <USBD_Get_USB_Status+0x1c>)
 800b5e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ea:	bf00      	nop
 800b5ec:	0800b5fd 	.word	0x0800b5fd
 800b5f0:	0800b603 	.word	0x0800b603
 800b5f4:	0800b609 	.word	0x0800b609
 800b5f8:	0800b60f 	.word	0x0800b60f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	73fb      	strb	r3, [r7, #15]
    break;
 800b600:	e00b      	b.n	800b61a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b602:	2302      	movs	r3, #2
 800b604:	73fb      	strb	r3, [r7, #15]
    break;
 800b606:	e008      	b.n	800b61a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b608:	2301      	movs	r3, #1
 800b60a:	73fb      	strb	r3, [r7, #15]
    break;
 800b60c:	e005      	b.n	800b61a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b60e:	2302      	movs	r3, #2
 800b610:	73fb      	strb	r3, [r7, #15]
    break;
 800b612:	e002      	b.n	800b61a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b614:	2302      	movs	r3, #2
 800b616:	73fb      	strb	r3, [r7, #15]
    break;
 800b618:	bf00      	nop
  }
  return usb_status;
 800b61a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3714      	adds	r7, #20
 800b620:	46bd      	mov	sp, r7
 800b622:	bc80      	pop	{r7}
 800b624:	4770      	bx	lr
 800b626:	bf00      	nop

0800b628 <MDI_writeSmallDataWithRegister>:
 * @brief Write small data to Motor Driver
 * @param uartChannel -> get uart channel
 * @param data -> data to write
 * @return none
 */
void MDI_writeSmallDataWithRegister(UART_HandleTypeDef *uartChannel, uint8_t data){
 800b628:	b480      	push	{r7}
 800b62a:	b083      	sub	sp, #12
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	460b      	mov	r3, r1
 800b632:	70fb      	strb	r3, [r7, #3]
	while((uartChannel->Instance->SR & USART_SR_TXE)!=USART_SR_TXE);
 800b634:	bf00      	nop
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b640:	2b80      	cmp	r3, #128	; 0x80
 800b642:	d1f8      	bne.n	800b636 <MDI_writeSmallDataWithRegister+0xe>
	uartChannel->Instance->DR=data;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	78fa      	ldrb	r2, [r7, #3]
 800b64a:	605a      	str	r2, [r3, #4]
	while((uartChannel->Instance->SR & USART_SR_TC)!=USART_SR_TC);
 800b64c:	bf00      	nop
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b658:	2b40      	cmp	r3, #64	; 0x40
 800b65a:	d1f8      	bne.n	800b64e <MDI_writeSmallDataWithRegister+0x26>
}
 800b65c:	bf00      	nop
 800b65e:	bf00      	nop
 800b660:	370c      	adds	r7, #12
 800b662:	46bd      	mov	sp, r7
 800b664:	bc80      	pop	{r7}
 800b666:	4770      	bx	lr

0800b668 <MDI_sendDataChannel1Ver2>:
 * @param kd -> get Pid kd value
 * @param factor -> get factor of Pid elements
 * @return none
 */
void MDI_sendDataChannel1Ver2(uint16_t angleVal, uint8_t kp, uint8_t ki,
		uint8_t kd, uint8_t factor) {
 800b668:	b590      	push	{r4, r7, lr}
 800b66a:	b089      	sub	sp, #36	; 0x24
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	4604      	mov	r4, r0
 800b670:	4608      	mov	r0, r1
 800b672:	4611      	mov	r1, r2
 800b674:	461a      	mov	r2, r3
 800b676:	4623      	mov	r3, r4
 800b678:	80fb      	strh	r3, [r7, #6]
 800b67a:	4603      	mov	r3, r0
 800b67c:	717b      	strb	r3, [r7, #5]
 800b67e:	460b      	mov	r3, r1
 800b680:	713b      	strb	r3, [r7, #4]
 800b682:	4613      	mov	r3, r2
 800b684:	70fb      	strb	r3, [r7, #3]
	uint16_t checksumTmp = 0;
 800b686:	2300      	movs	r3, #0
 800b688:	83bb      	strh	r3, [r7, #28]
	uint8_t tmpArr[] = { angleVal >> 8, angleVal & 0xFF };
 800b68a:	88fb      	ldrh	r3, [r7, #6]
 800b68c:	0a1b      	lsrs	r3, r3, #8
 800b68e:	b29b      	uxth	r3, r3
 800b690:	b2db      	uxtb	r3, r3
 800b692:	763b      	strb	r3, [r7, #24]
 800b694:	88fb      	ldrh	r3, [r7, #6]
 800b696:	b2db      	uxtb	r3, r3
 800b698:	767b      	strb	r3, [r7, #25]
	checksumTmp += tmpArr[0];
 800b69a:	7e3b      	ldrb	r3, [r7, #24]
 800b69c:	b29a      	uxth	r2, r3
 800b69e:	8bbb      	ldrh	r3, [r7, #28]
 800b6a0:	4413      	add	r3, r2
 800b6a2:	83bb      	strh	r3, [r7, #28]
	checksumTmp += tmpArr[1];
 800b6a4:	7e7b      	ldrb	r3, [r7, #25]
 800b6a6:	b29a      	uxth	r2, r3
 800b6a8:	8bbb      	ldrh	r3, [r7, #28]
 800b6aa:	4413      	add	r3, r2
 800b6ac:	83bb      	strh	r3, [r7, #28]
	checksumTmp += kp;
 800b6ae:	797b      	ldrb	r3, [r7, #5]
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	8bbb      	ldrh	r3, [r7, #28]
 800b6b4:	4413      	add	r3, r2
 800b6b6:	83bb      	strh	r3, [r7, #28]
	checksumTmp += ki;
 800b6b8:	793b      	ldrb	r3, [r7, #4]
 800b6ba:	b29a      	uxth	r2, r3
 800b6bc:	8bbb      	ldrh	r3, [r7, #28]
 800b6be:	4413      	add	r3, r2
 800b6c0:	83bb      	strh	r3, [r7, #28]
	checksumTmp += kd;
 800b6c2:	78fb      	ldrb	r3, [r7, #3]
 800b6c4:	b29a      	uxth	r2, r3
 800b6c6:	8bbb      	ldrh	r3, [r7, #28]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	83bb      	strh	r3, [r7, #28]
	checksumTmp += factor;
 800b6cc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b6d0:	b29a      	uxth	r2, r3
 800b6d2:	8bbb      	ldrh	r3, [r7, #28]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	83bb      	strh	r3, [r7, #28]
	uint8_t tmp = checksumTmp % 256;
 800b6d8:	8bbb      	ldrh	r3, [r7, #28]
 800b6da:	76fb      	strb	r3, [r7, #27]
	uint8_t tmpComp = ~tmp;
 800b6dc:	7efb      	ldrb	r3, [r7, #27]
 800b6de:	43db      	mvns	r3, r3
 800b6e0:	76bb      	strb	r3, [r7, #26]
	uint8_t sendBuff[10] = { 0XFF, 0XFF, tmpArr[0], tmpArr[1], kp, ki, kd,
 800b6e2:	23ff      	movs	r3, #255	; 0xff
 800b6e4:	733b      	strb	r3, [r7, #12]
 800b6e6:	23ff      	movs	r3, #255	; 0xff
 800b6e8:	737b      	strb	r3, [r7, #13]
 800b6ea:	7e3b      	ldrb	r3, [r7, #24]
 800b6ec:	73bb      	strb	r3, [r7, #14]
 800b6ee:	7e7b      	ldrb	r3, [r7, #25]
 800b6f0:	73fb      	strb	r3, [r7, #15]
 800b6f2:	797b      	ldrb	r3, [r7, #5]
 800b6f4:	743b      	strb	r3, [r7, #16]
 800b6f6:	793b      	ldrb	r3, [r7, #4]
 800b6f8:	747b      	strb	r3, [r7, #17]
 800b6fa:	78fb      	ldrb	r3, [r7, #3]
 800b6fc:	74bb      	strb	r3, [r7, #18]
 800b6fe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b702:	74fb      	strb	r3, [r7, #19]
 800b704:	7efb      	ldrb	r3, [r7, #27]
 800b706:	753b      	strb	r3, [r7, #20]
 800b708:	7ebb      	ldrb	r3, [r7, #26]
 800b70a:	757b      	strb	r3, [r7, #21]
			factor, tmp, tmpComp };
	for (uint8_t counter = 0; counter < 10; counter++) {
 800b70c:	2300      	movs	r3, #0
 800b70e:	77fb      	strb	r3, [r7, #31]
 800b710:	e00f      	b.n	800b732 <MDI_sendDataChannel1Ver2+0xca>
		MDI_writeSmallDataWithRegister(&MDI_channel1TX, sendBuff[counter]);
 800b712:	7ffb      	ldrb	r3, [r7, #31]
 800b714:	f107 0220 	add.w	r2, r7, #32
 800b718:	4413      	add	r3, r2
 800b71a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800b71e:	4619      	mov	r1, r3
 800b720:	4808      	ldr	r0, [pc, #32]	; (800b744 <MDI_sendDataChannel1Ver2+0xdc>)
 800b722:	f7ff ff81 	bl	800b628 <MDI_writeSmallDataWithRegister>
#if SEND_VAL_CHECK==0
		vTaskDelay(1);
 800b726:	2001      	movs	r0, #1
 800b728:	f7fd fda0 	bl	800926c <vTaskDelay>
	for (uint8_t counter = 0; counter < 10; counter++) {
 800b72c:	7ffb      	ldrb	r3, [r7, #31]
 800b72e:	3301      	adds	r3, #1
 800b730:	77fb      	strb	r3, [r7, #31]
 800b732:	7ffb      	ldrb	r3, [r7, #31]
 800b734:	2b09      	cmp	r3, #9
 800b736:	d9ec      	bls.n	800b712 <MDI_sendDataChannel1Ver2+0xaa>
#elif SEND_VAL_CHECK==1
		vTaskDelay(50);
#endif
	}
}
 800b738:	bf00      	nop
 800b73a:	bf00      	nop
 800b73c:	3724      	adds	r7, #36	; 0x24
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd90      	pop	{r4, r7, pc}
 800b742:	bf00      	nop
 800b744:	20003954 	.word	0x20003954

0800b748 <MDI_enableGetDataChannel1>:
uint8_t  getTmpCH1 = 0;
/**
 * @brief set enable for MDI channel 1 receive
 * @return none
 */
void MDI_enableGetDataChannel1(void){
 800b748:	b580      	push	{r7, lr}
 800b74a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&MDI_channel1RX,&getTmpCH1,1);
 800b74c:	2201      	movs	r2, #1
 800b74e:	4903      	ldr	r1, [pc, #12]	; (800b75c <MDI_enableGetDataChannel1+0x14>)
 800b750:	4803      	ldr	r0, [pc, #12]	; (800b760 <MDI_enableGetDataChannel1+0x18>)
 800b752:	f7f8 fa08 	bl	8003b66 <HAL_UART_Receive_IT>
}
 800b756:	bf00      	nop
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop
 800b75c:	200038c8 	.word	0x200038c8
 800b760:	20003954 	.word	0x20003954

0800b764 <MDI_getDataChannel1_IT>:
static uint8_t tmpArr1[10];
/**
 * @brief get to Motor Driver 1 values
 * @return none
 */
void MDI_getDataChannel1_IT(UART_HandleTypeDef *callBackHandle) {
 800b764:	b580      	push	{r7, lr}
 800b766:	b086      	sub	sp, #24
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
	volatile UART_HandleTypeDef *tmpHandle;
	tmpHandle = &MDI_channel1RX;
 800b76c:	4b3b      	ldr	r3, [pc, #236]	; (800b85c <MDI_getDataChannel1_IT+0xf8>)
 800b76e:	613b      	str	r3, [r7, #16]
	if(callBackHandle->Instance == tmpHandle->Instance){
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d16a      	bne.n	800b852 <MDI_getDataChannel1_IT+0xee>
		static uint8_t counter = 0, getTmpBeff = 0;
			if (0xFF == getTmpCH1 && 0xFF == getTmpBeff) {
 800b77c:	4b38      	ldr	r3, [pc, #224]	; (800b860 <MDI_getDataChannel1_IT+0xfc>)
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	2bff      	cmp	r3, #255	; 0xff
 800b782:	d10c      	bne.n	800b79e <MDI_getDataChannel1_IT+0x3a>
 800b784:	4b37      	ldr	r3, [pc, #220]	; (800b864 <MDI_getDataChannel1_IT+0x100>)
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	2bff      	cmp	r3, #255	; 0xff
 800b78a:	d108      	bne.n	800b79e <MDI_getDataChannel1_IT+0x3a>
					tmpArr1[0] = 0xFF;
 800b78c:	4b36      	ldr	r3, [pc, #216]	; (800b868 <MDI_getDataChannel1_IT+0x104>)
 800b78e:	22ff      	movs	r2, #255	; 0xff
 800b790:	701a      	strb	r2, [r3, #0]
					tmpArr1[1] = 0xFF;
 800b792:	4b35      	ldr	r3, [pc, #212]	; (800b868 <MDI_getDataChannel1_IT+0x104>)
 800b794:	22ff      	movs	r2, #255	; 0xff
 800b796:	705a      	strb	r2, [r3, #1]
					counter = 1;
 800b798:	4b34      	ldr	r3, [pc, #208]	; (800b86c <MDI_getDataChannel1_IT+0x108>)
 800b79a:	2201      	movs	r2, #1
 800b79c:	701a      	strb	r2, [r3, #0]
				}
				tmpArr1[counter] = getTmpCH1;
 800b79e:	4b33      	ldr	r3, [pc, #204]	; (800b86c <MDI_getDataChannel1_IT+0x108>)
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	4b2e      	ldr	r3, [pc, #184]	; (800b860 <MDI_getDataChannel1_IT+0xfc>)
 800b7a6:	7819      	ldrb	r1, [r3, #0]
 800b7a8:	4b2f      	ldr	r3, [pc, #188]	; (800b868 <MDI_getDataChannel1_IT+0x104>)
 800b7aa:	5499      	strb	r1, [r3, r2]
				getTmpBeff = getTmpCH1;
 800b7ac:	4b2c      	ldr	r3, [pc, #176]	; (800b860 <MDI_getDataChannel1_IT+0xfc>)
 800b7ae:	781a      	ldrb	r2, [r3, #0]
 800b7b0:	4b2c      	ldr	r3, [pc, #176]	; (800b864 <MDI_getDataChannel1_IT+0x100>)
 800b7b2:	701a      	strb	r2, [r3, #0]
				counter++;
 800b7b4:	4b2d      	ldr	r3, [pc, #180]	; (800b86c <MDI_getDataChannel1_IT+0x108>)
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	b2da      	uxtb	r2, r3
 800b7bc:	4b2b      	ldr	r3, [pc, #172]	; (800b86c <MDI_getDataChannel1_IT+0x108>)
 800b7be:	701a      	strb	r2, [r3, #0]
				if (counter > 9) {
 800b7c0:	4b2a      	ldr	r3, [pc, #168]	; (800b86c <MDI_getDataChannel1_IT+0x108>)
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	2b09      	cmp	r3, #9
 800b7c6:	d93f      	bls.n	800b848 <MDI_getDataChannel1_IT+0xe4>
					counter = 0;
 800b7c8:	4b28      	ldr	r3, [pc, #160]	; (800b86c <MDI_getDataChannel1_IT+0x108>)
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	701a      	strb	r2, [r3, #0]
					uint16_t checksumTmp = 0;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	82fb      	strh	r3, [r7, #22]
					for (uint8_t c = 2; c < 8; c++)
 800b7d2:	2302      	movs	r3, #2
 800b7d4:	757b      	strb	r3, [r7, #21]
 800b7d6:	e009      	b.n	800b7ec <MDI_getDataChannel1_IT+0x88>
						checksumTmp += tmpArr1[c];
 800b7d8:	7d7b      	ldrb	r3, [r7, #21]
 800b7da:	4a23      	ldr	r2, [pc, #140]	; (800b868 <MDI_getDataChannel1_IT+0x104>)
 800b7dc:	5cd3      	ldrb	r3, [r2, r3]
 800b7de:	b29a      	uxth	r2, r3
 800b7e0:	8afb      	ldrh	r3, [r7, #22]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	82fb      	strh	r3, [r7, #22]
					for (uint8_t c = 2; c < 8; c++)
 800b7e6:	7d7b      	ldrb	r3, [r7, #21]
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	757b      	strb	r3, [r7, #21]
 800b7ec:	7d7b      	ldrb	r3, [r7, #21]
 800b7ee:	2b07      	cmp	r3, #7
 800b7f0:	d9f2      	bls.n	800b7d8 <MDI_getDataChannel1_IT+0x74>
					uint8_t tmp = checksumTmp % 256;
 800b7f2:	8afb      	ldrh	r3, [r7, #22]
 800b7f4:	73fb      	strb	r3, [r7, #15]
					uint8_t tmpComp = ~tmp;
 800b7f6:	7bfb      	ldrb	r3, [r7, #15]
 800b7f8:	43db      	mvns	r3, r3
 800b7fa:	73bb      	strb	r3, [r7, #14]
					if (tmp == tmpArr1[8] && tmpComp == tmpArr1[9]) {
 800b7fc:	4b1a      	ldr	r3, [pc, #104]	; (800b868 <MDI_getDataChannel1_IT+0x104>)
 800b7fe:	7a1b      	ldrb	r3, [r3, #8]
 800b800:	7bfa      	ldrb	r2, [r7, #15]
 800b802:	429a      	cmp	r2, r3
 800b804:	d120      	bne.n	800b848 <MDI_getDataChannel1_IT+0xe4>
 800b806:	4b18      	ldr	r3, [pc, #96]	; (800b868 <MDI_getDataChannel1_IT+0x104>)
 800b808:	7a5b      	ldrb	r3, [r3, #9]
 800b80a:	7bba      	ldrb	r2, [r7, #14]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d11b      	bne.n	800b848 <MDI_getDataChannel1_IT+0xe4>
						driver1.angle = ((uint16_t) tmpArr1[2] << 8) | tmpArr1[3];
 800b810:	4b15      	ldr	r3, [pc, #84]	; (800b868 <MDI_getDataChannel1_IT+0x104>)
 800b812:	789b      	ldrb	r3, [r3, #2]
 800b814:	021b      	lsls	r3, r3, #8
 800b816:	b21a      	sxth	r2, r3
 800b818:	4b13      	ldr	r3, [pc, #76]	; (800b868 <MDI_getDataChannel1_IT+0x104>)
 800b81a:	78db      	ldrb	r3, [r3, #3]
 800b81c:	b21b      	sxth	r3, r3
 800b81e:	4313      	orrs	r3, r2
 800b820:	b21b      	sxth	r3, r3
 800b822:	b29a      	uxth	r2, r3
 800b824:	4b12      	ldr	r3, [pc, #72]	; (800b870 <MDI_getDataChannel1_IT+0x10c>)
 800b826:	809a      	strh	r2, [r3, #4]
						driver1.pid_kp = tmpArr1[4];
 800b828:	4b0f      	ldr	r3, [pc, #60]	; (800b868 <MDI_getDataChannel1_IT+0x104>)
 800b82a:	791a      	ldrb	r2, [r3, #4]
 800b82c:	4b10      	ldr	r3, [pc, #64]	; (800b870 <MDI_getDataChannel1_IT+0x10c>)
 800b82e:	709a      	strb	r2, [r3, #2]
						driver1.pid_ki = tmpArr1[5];
 800b830:	4b0d      	ldr	r3, [pc, #52]	; (800b868 <MDI_getDataChannel1_IT+0x104>)
 800b832:	795a      	ldrb	r2, [r3, #5]
 800b834:	4b0e      	ldr	r3, [pc, #56]	; (800b870 <MDI_getDataChannel1_IT+0x10c>)
 800b836:	705a      	strb	r2, [r3, #1]
						driver1.pid_kd = tmpArr1[6];
 800b838:	4b0b      	ldr	r3, [pc, #44]	; (800b868 <MDI_getDataChannel1_IT+0x104>)
 800b83a:	799a      	ldrb	r2, [r3, #6]
 800b83c:	4b0c      	ldr	r3, [pc, #48]	; (800b870 <MDI_getDataChannel1_IT+0x10c>)
 800b83e:	701a      	strb	r2, [r3, #0]
						driver1.factor = tmpArr1[7];
 800b840:	4b09      	ldr	r3, [pc, #36]	; (800b868 <MDI_getDataChannel1_IT+0x104>)
 800b842:	79da      	ldrb	r2, [r3, #7]
 800b844:	4b0a      	ldr	r3, [pc, #40]	; (800b870 <MDI_getDataChannel1_IT+0x10c>)
 800b846:	70da      	strb	r2, [r3, #3]
					}
				}
				HAL_UART_Receive_IT(callBackHandle, &getTmpCH1, 1);
 800b848:	2201      	movs	r2, #1
 800b84a:	4905      	ldr	r1, [pc, #20]	; (800b860 <MDI_getDataChannel1_IT+0xfc>)
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f7f8 f98a 	bl	8003b66 <HAL_UART_Receive_IT>
	}
}
 800b852:	bf00      	nop
 800b854:	3718      	adds	r7, #24
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}
 800b85a:	bf00      	nop
 800b85c:	20003954 	.word	0x20003954
 800b860:	200038c8 	.word	0x200038c8
 800b864:	200038e8 	.word	0x200038e8
 800b868:	200038cc 	.word	0x200038cc
 800b86c:	200038e9 	.word	0x200038e9
 800b870:	20004044 	.word	0x20004044

0800b874 <MDI_sendDataChannel2Ver2>:
 * @param kd -> get Pid kd value
 * @param factor -> get factor of Pid elements
 * @return none
 */
void MDI_sendDataChannel2Ver2(int16_t speed, uint8_t kp, uint8_t ki,uint8_t kd,
		uint8_t soft_k, uint8_t soft_f) {
 800b874:	b590      	push	{r4, r7, lr}
 800b876:	b089      	sub	sp, #36	; 0x24
 800b878:	af00      	add	r7, sp, #0
 800b87a:	4604      	mov	r4, r0
 800b87c:	4608      	mov	r0, r1
 800b87e:	4611      	mov	r1, r2
 800b880:	461a      	mov	r2, r3
 800b882:	4623      	mov	r3, r4
 800b884:	80fb      	strh	r3, [r7, #6]
 800b886:	4603      	mov	r3, r0
 800b888:	717b      	strb	r3, [r7, #5]
 800b88a:	460b      	mov	r3, r1
 800b88c:	713b      	strb	r3, [r7, #4]
 800b88e:	4613      	mov	r3, r2
 800b890:	70fb      	strb	r3, [r7, #3]
	uint16_t checksumTmp = 0;
 800b892:	2300      	movs	r3, #0
 800b894:	83bb      	strh	r3, [r7, #28]
	uint8_t tmpArr[] = { speed >> 8, speed & 0xFF };
 800b896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b89a:	121b      	asrs	r3, r3, #8
 800b89c:	b21b      	sxth	r3, r3
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	763b      	strb	r3, [r7, #24]
 800b8a2:	88fb      	ldrh	r3, [r7, #6]
 800b8a4:	b2db      	uxtb	r3, r3
 800b8a6:	767b      	strb	r3, [r7, #25]
	checksumTmp += tmpArr[0];
 800b8a8:	7e3b      	ldrb	r3, [r7, #24]
 800b8aa:	b29a      	uxth	r2, r3
 800b8ac:	8bbb      	ldrh	r3, [r7, #28]
 800b8ae:	4413      	add	r3, r2
 800b8b0:	83bb      	strh	r3, [r7, #28]
	checksumTmp += tmpArr[1];
 800b8b2:	7e7b      	ldrb	r3, [r7, #25]
 800b8b4:	b29a      	uxth	r2, r3
 800b8b6:	8bbb      	ldrh	r3, [r7, #28]
 800b8b8:	4413      	add	r3, r2
 800b8ba:	83bb      	strh	r3, [r7, #28]
	checksumTmp += kp;
 800b8bc:	797b      	ldrb	r3, [r7, #5]
 800b8be:	b29a      	uxth	r2, r3
 800b8c0:	8bbb      	ldrh	r3, [r7, #28]
 800b8c2:	4413      	add	r3, r2
 800b8c4:	83bb      	strh	r3, [r7, #28]
	checksumTmp += ki;
 800b8c6:	793b      	ldrb	r3, [r7, #4]
 800b8c8:	b29a      	uxth	r2, r3
 800b8ca:	8bbb      	ldrh	r3, [r7, #28]
 800b8cc:	4413      	add	r3, r2
 800b8ce:	83bb      	strh	r3, [r7, #28]
	checksumTmp += kd;
 800b8d0:	78fb      	ldrb	r3, [r7, #3]
 800b8d2:	b29a      	uxth	r2, r3
 800b8d4:	8bbb      	ldrh	r3, [r7, #28]
 800b8d6:	4413      	add	r3, r2
 800b8d8:	83bb      	strh	r3, [r7, #28]
	checksumTmp += soft_k;
 800b8da:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b8de:	b29a      	uxth	r2, r3
 800b8e0:	8bbb      	ldrh	r3, [r7, #28]
 800b8e2:	4413      	add	r3, r2
 800b8e4:	83bb      	strh	r3, [r7, #28]
	checksumTmp += soft_f;
 800b8e6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b8ea:	b29a      	uxth	r2, r3
 800b8ec:	8bbb      	ldrh	r3, [r7, #28]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	83bb      	strh	r3, [r7, #28]
	uint8_t tmp = checksumTmp % 256;
 800b8f2:	8bbb      	ldrh	r3, [r7, #28]
 800b8f4:	76fb      	strb	r3, [r7, #27]
	uint8_t tmpComp = ~tmp;
 800b8f6:	7efb      	ldrb	r3, [r7, #27]
 800b8f8:	43db      	mvns	r3, r3
 800b8fa:	76bb      	strb	r3, [r7, #26]
	uint8_t sendBuff[11] = { 0XFF, 0XFF,kp, tmpArr[0],ki, tmpArr[1], kd,
 800b8fc:	23ff      	movs	r3, #255	; 0xff
 800b8fe:	733b      	strb	r3, [r7, #12]
 800b900:	23ff      	movs	r3, #255	; 0xff
 800b902:	737b      	strb	r3, [r7, #13]
 800b904:	797b      	ldrb	r3, [r7, #5]
 800b906:	73bb      	strb	r3, [r7, #14]
 800b908:	7e3b      	ldrb	r3, [r7, #24]
 800b90a:	73fb      	strb	r3, [r7, #15]
 800b90c:	793b      	ldrb	r3, [r7, #4]
 800b90e:	743b      	strb	r3, [r7, #16]
 800b910:	7e7b      	ldrb	r3, [r7, #25]
 800b912:	747b      	strb	r3, [r7, #17]
 800b914:	78fb      	ldrb	r3, [r7, #3]
 800b916:	74bb      	strb	r3, [r7, #18]
 800b918:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b91c:	74fb      	strb	r3, [r7, #19]
 800b91e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b922:	753b      	strb	r3, [r7, #20]
 800b924:	7efb      	ldrb	r3, [r7, #27]
 800b926:	757b      	strb	r3, [r7, #21]
 800b928:	7ebb      	ldrb	r3, [r7, #26]
 800b92a:	75bb      	strb	r3, [r7, #22]
			soft_k,soft_f, tmp, tmpComp };
	for (uint8_t counter = 0; counter < 11; counter++) {
 800b92c:	2300      	movs	r3, #0
 800b92e:	77fb      	strb	r3, [r7, #31]
 800b930:	e00f      	b.n	800b952 <MDI_sendDataChannel2Ver2+0xde>
		MDI_writeSmallDataWithRegister(&MDI_channel2TX, sendBuff[counter]);
 800b932:	7ffb      	ldrb	r3, [r7, #31]
 800b934:	f107 0220 	add.w	r2, r7, #32
 800b938:	4413      	add	r3, r2
 800b93a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800b93e:	4619      	mov	r1, r3
 800b940:	4808      	ldr	r0, [pc, #32]	; (800b964 <MDI_sendDataChannel2Ver2+0xf0>)
 800b942:	f7ff fe71 	bl	800b628 <MDI_writeSmallDataWithRegister>
	#if SEND_VAL_CHECK==0
		vTaskDelay(1);
 800b946:	2001      	movs	r0, #1
 800b948:	f7fd fc90 	bl	800926c <vTaskDelay>
	for (uint8_t counter = 0; counter < 11; counter++) {
 800b94c:	7ffb      	ldrb	r3, [r7, #31]
 800b94e:	3301      	adds	r3, #1
 800b950:	77fb      	strb	r3, [r7, #31]
 800b952:	7ffb      	ldrb	r3, [r7, #31]
 800b954:	2b0a      	cmp	r3, #10
 800b956:	d9ec      	bls.n	800b932 <MDI_sendDataChannel2Ver2+0xbe>
	#elif SEND_VAL_CHECK==1
		vTaskDelay(50);
	#endif
	}
}
 800b958:	bf00      	nop
 800b95a:	bf00      	nop
 800b95c:	3724      	adds	r7, #36	; 0x24
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd90      	pop	{r4, r7, pc}
 800b962:	bf00      	nop
 800b964:	20003914 	.word	0x20003914

0800b968 <MDI_enableGetDataChannel2>:
/**
 * @brief set enable for MDI channel 2 receive
 * @return none
 */
uint8_t  getTmpCH2 = 0;
void MDI_enableGetDataChannel2(void){
 800b968:	b580      	push	{r7, lr}
 800b96a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&MDI_channel2RX,&getTmpCH2,1);
 800b96c:	2201      	movs	r2, #1
 800b96e:	4903      	ldr	r1, [pc, #12]	; (800b97c <MDI_enableGetDataChannel2+0x14>)
 800b970:	4803      	ldr	r0, [pc, #12]	; (800b980 <MDI_enableGetDataChannel2+0x18>)
 800b972:	f7f8 f8f8 	bl	8003b66 <HAL_UART_Receive_IT>
}
 800b976:	bf00      	nop
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop
 800b97c:	200038d6 	.word	0x200038d6
 800b980:	20003914 	.word	0x20003914

0800b984 <MDI_getDataChannel2_IT>:
/**
 * @brief get to Motor Driver 2 values
 * @return callBackHandle-> get u(s)art handle
 */
static uint8_t tmpArr2[16];
void MDI_getDataChannel2_IT(UART_HandleTypeDef *callBackHandle) {
 800b984:	b580      	push	{r7, lr}
 800b986:	b086      	sub	sp, #24
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
	volatile UART_HandleTypeDef *tmpHandle;
	tmpHandle = &MDI_channel2RX;
 800b98c:	4b44      	ldr	r3, [pc, #272]	; (800baa0 <MDI_getDataChannel2_IT+0x11c>)
 800b98e:	613b      	str	r3, [r7, #16]
	if(callBackHandle->Instance == tmpHandle->Instance){
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d17d      	bne.n	800ba98 <MDI_getDataChannel2_IT+0x114>
		static uint8_t counter = 0, getTmpBeff = 0;
			if (0xFF == getTmpCH2 && 0xFF == getTmpBeff) {
 800b99c:	4b41      	ldr	r3, [pc, #260]	; (800baa4 <MDI_getDataChannel2_IT+0x120>)
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	2bff      	cmp	r3, #255	; 0xff
 800b9a2:	d10c      	bne.n	800b9be <MDI_getDataChannel2_IT+0x3a>
 800b9a4:	4b40      	ldr	r3, [pc, #256]	; (800baa8 <MDI_getDataChannel2_IT+0x124>)
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	2bff      	cmp	r3, #255	; 0xff
 800b9aa:	d108      	bne.n	800b9be <MDI_getDataChannel2_IT+0x3a>
				tmpArr2[0] = 0xFF;
 800b9ac:	4b3f      	ldr	r3, [pc, #252]	; (800baac <MDI_getDataChannel2_IT+0x128>)
 800b9ae:	22ff      	movs	r2, #255	; 0xff
 800b9b0:	701a      	strb	r2, [r3, #0]
				tmpArr2[1] = 0xFF;
 800b9b2:	4b3e      	ldr	r3, [pc, #248]	; (800baac <MDI_getDataChannel2_IT+0x128>)
 800b9b4:	22ff      	movs	r2, #255	; 0xff
 800b9b6:	705a      	strb	r2, [r3, #1]
				counter = 1;
 800b9b8:	4b3d      	ldr	r3, [pc, #244]	; (800bab0 <MDI_getDataChannel2_IT+0x12c>)
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	701a      	strb	r2, [r3, #0]
			}
			tmpArr2[counter] = getTmpCH2;
 800b9be:	4b3c      	ldr	r3, [pc, #240]	; (800bab0 <MDI_getDataChannel2_IT+0x12c>)
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	4b37      	ldr	r3, [pc, #220]	; (800baa4 <MDI_getDataChannel2_IT+0x120>)
 800b9c6:	7819      	ldrb	r1, [r3, #0]
 800b9c8:	4b38      	ldr	r3, [pc, #224]	; (800baac <MDI_getDataChannel2_IT+0x128>)
 800b9ca:	5499      	strb	r1, [r3, r2]
			getTmpBeff = getTmpCH2;
 800b9cc:	4b35      	ldr	r3, [pc, #212]	; (800baa4 <MDI_getDataChannel2_IT+0x120>)
 800b9ce:	781a      	ldrb	r2, [r3, #0]
 800b9d0:	4b35      	ldr	r3, [pc, #212]	; (800baa8 <MDI_getDataChannel2_IT+0x124>)
 800b9d2:	701a      	strb	r2, [r3, #0]
			counter++;
 800b9d4:	4b36      	ldr	r3, [pc, #216]	; (800bab0 <MDI_getDataChannel2_IT+0x12c>)
 800b9d6:	781b      	ldrb	r3, [r3, #0]
 800b9d8:	3301      	adds	r3, #1
 800b9da:	b2da      	uxtb	r2, r3
 800b9dc:	4b34      	ldr	r3, [pc, #208]	; (800bab0 <MDI_getDataChannel2_IT+0x12c>)
 800b9de:	701a      	strb	r2, [r3, #0]
			if (counter > 15) {
 800b9e0:	4b33      	ldr	r3, [pc, #204]	; (800bab0 <MDI_getDataChannel2_IT+0x12c>)
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	2b0f      	cmp	r3, #15
 800b9e6:	d952      	bls.n	800ba8e <MDI_getDataChannel2_IT+0x10a>
				counter = 0;
 800b9e8:	4b31      	ldr	r3, [pc, #196]	; (800bab0 <MDI_getDataChannel2_IT+0x12c>)
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	701a      	strb	r2, [r3, #0]
				uint16_t checksumTmp = 0;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	82fb      	strh	r3, [r7, #22]
				for (uint8_t c = 2; c < 14; c++)
 800b9f2:	2302      	movs	r3, #2
 800b9f4:	757b      	strb	r3, [r7, #21]
 800b9f6:	e009      	b.n	800ba0c <MDI_getDataChannel2_IT+0x88>
					checksumTmp += tmpArr2[c];
 800b9f8:	7d7b      	ldrb	r3, [r7, #21]
 800b9fa:	4a2c      	ldr	r2, [pc, #176]	; (800baac <MDI_getDataChannel2_IT+0x128>)
 800b9fc:	5cd3      	ldrb	r3, [r2, r3]
 800b9fe:	b29a      	uxth	r2, r3
 800ba00:	8afb      	ldrh	r3, [r7, #22]
 800ba02:	4413      	add	r3, r2
 800ba04:	82fb      	strh	r3, [r7, #22]
				for (uint8_t c = 2; c < 14; c++)
 800ba06:	7d7b      	ldrb	r3, [r7, #21]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	757b      	strb	r3, [r7, #21]
 800ba0c:	7d7b      	ldrb	r3, [r7, #21]
 800ba0e:	2b0d      	cmp	r3, #13
 800ba10:	d9f2      	bls.n	800b9f8 <MDI_getDataChannel2_IT+0x74>
				uint8_t tmp = checksumTmp % 256;
 800ba12:	8afb      	ldrh	r3, [r7, #22]
 800ba14:	73fb      	strb	r3, [r7, #15]
				uint8_t tmpComp = ~tmp;
 800ba16:	7bfb      	ldrb	r3, [r7, #15]
 800ba18:	43db      	mvns	r3, r3
 800ba1a:	73bb      	strb	r3, [r7, #14]
				if (tmp == tmpArr2[14] && tmpComp == tmpArr2[15]) {
 800ba1c:	4b23      	ldr	r3, [pc, #140]	; (800baac <MDI_getDataChannel2_IT+0x128>)
 800ba1e:	7b9b      	ldrb	r3, [r3, #14]
 800ba20:	7bfa      	ldrb	r2, [r7, #15]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d133      	bne.n	800ba8e <MDI_getDataChannel2_IT+0x10a>
 800ba26:	4b21      	ldr	r3, [pc, #132]	; (800baac <MDI_getDataChannel2_IT+0x128>)
 800ba28:	7bdb      	ldrb	r3, [r3, #15]
 800ba2a:	7bba      	ldrb	r2, [r7, #14]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d12e      	bne.n	800ba8e <MDI_getDataChannel2_IT+0x10a>
					travelMotor.encoder =(((tmpArr2[7] << 24)) | ((tmpArr2[9]<< 16)) | ((tmpArr2[11]<< 8)) | (tmpArr2[13] & 0xFF));
 800ba30:	4b1e      	ldr	r3, [pc, #120]	; (800baac <MDI_getDataChannel2_IT+0x128>)
 800ba32:	79db      	ldrb	r3, [r3, #7]
 800ba34:	061a      	lsls	r2, r3, #24
 800ba36:	4b1d      	ldr	r3, [pc, #116]	; (800baac <MDI_getDataChannel2_IT+0x128>)
 800ba38:	7a5b      	ldrb	r3, [r3, #9]
 800ba3a:	041b      	lsls	r3, r3, #16
 800ba3c:	431a      	orrs	r2, r3
 800ba3e:	4b1b      	ldr	r3, [pc, #108]	; (800baac <MDI_getDataChannel2_IT+0x128>)
 800ba40:	7adb      	ldrb	r3, [r3, #11]
 800ba42:	021b      	lsls	r3, r3, #8
 800ba44:	4313      	orrs	r3, r2
 800ba46:	4a19      	ldr	r2, [pc, #100]	; (800baac <MDI_getDataChannel2_IT+0x128>)
 800ba48:	7b52      	ldrb	r2, [r2, #13]
 800ba4a:	4313      	orrs	r3, r2
 800ba4c:	4a19      	ldr	r2, [pc, #100]	; (800bab4 <MDI_getDataChannel2_IT+0x130>)
 800ba4e:	6093      	str	r3, [r2, #8]
					travelMotor.speed = ( (tmpArr2[3] << 8) |(tmpArr2[5] & 0xFF));
 800ba50:	4b16      	ldr	r3, [pc, #88]	; (800baac <MDI_getDataChannel2_IT+0x128>)
 800ba52:	78db      	ldrb	r3, [r3, #3]
 800ba54:	021b      	lsls	r3, r3, #8
 800ba56:	b21a      	sxth	r2, r3
 800ba58:	4b14      	ldr	r3, [pc, #80]	; (800baac <MDI_getDataChannel2_IT+0x128>)
 800ba5a:	795b      	ldrb	r3, [r3, #5]
 800ba5c:	b21b      	sxth	r3, r3
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	b21a      	sxth	r2, r3
 800ba62:	4b14      	ldr	r3, [pc, #80]	; (800bab4 <MDI_getDataChannel2_IT+0x130>)
 800ba64:	809a      	strh	r2, [r3, #4]
					travelMotor.pid_kp = tmpArr2[2];
 800ba66:	4b11      	ldr	r3, [pc, #68]	; (800baac <MDI_getDataChannel2_IT+0x128>)
 800ba68:	789a      	ldrb	r2, [r3, #2]
 800ba6a:	4b12      	ldr	r3, [pc, #72]	; (800bab4 <MDI_getDataChannel2_IT+0x130>)
 800ba6c:	701a      	strb	r2, [r3, #0]
					travelMotor.pid_ki = tmpArr2[4];
 800ba6e:	4b0f      	ldr	r3, [pc, #60]	; (800baac <MDI_getDataChannel2_IT+0x128>)
 800ba70:	791a      	ldrb	r2, [r3, #4]
 800ba72:	4b10      	ldr	r3, [pc, #64]	; (800bab4 <MDI_getDataChannel2_IT+0x130>)
 800ba74:	705a      	strb	r2, [r3, #1]
					travelMotor.pid_kd = tmpArr2[6];
 800ba76:	4b0d      	ldr	r3, [pc, #52]	; (800baac <MDI_getDataChannel2_IT+0x128>)
 800ba78:	799a      	ldrb	r2, [r3, #6]
 800ba7a:	4b0e      	ldr	r3, [pc, #56]	; (800bab4 <MDI_getDataChannel2_IT+0x130>)
 800ba7c:	709a      	strb	r2, [r3, #2]
					travelMotor.soft_k = tmpArr2[8];
 800ba7e:	4b0b      	ldr	r3, [pc, #44]	; (800baac <MDI_getDataChannel2_IT+0x128>)
 800ba80:	7a1a      	ldrb	r2, [r3, #8]
 800ba82:	4b0c      	ldr	r3, [pc, #48]	; (800bab4 <MDI_getDataChannel2_IT+0x130>)
 800ba84:	71da      	strb	r2, [r3, #7]
					travelMotor.soft_f = tmpArr2[10];
 800ba86:	4b09      	ldr	r3, [pc, #36]	; (800baac <MDI_getDataChannel2_IT+0x128>)
 800ba88:	7a9a      	ldrb	r2, [r3, #10]
 800ba8a:	4b0a      	ldr	r3, [pc, #40]	; (800bab4 <MDI_getDataChannel2_IT+0x130>)
 800ba8c:	719a      	strb	r2, [r3, #6]
				}
			}
			HAL_UART_Receive_IT(callBackHandle, &getTmpCH2, 1);
 800ba8e:	2201      	movs	r2, #1
 800ba90:	4904      	ldr	r1, [pc, #16]	; (800baa4 <MDI_getDataChannel2_IT+0x120>)
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f7f8 f867 	bl	8003b66 <HAL_UART_Receive_IT>
	}
}
 800ba98:	bf00      	nop
 800ba9a:	3718      	adds	r7, #24
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}
 800baa0:	20003914 	.word	0x20003914
 800baa4:	200038d6 	.word	0x200038d6
 800baa8:	200038ea 	.word	0x200038ea
 800baac:	200038d8 	.word	0x200038d8
 800bab0:	200038eb 	.word	0x200038eb
 800bab4:	20004064 	.word	0x20004064

0800bab8 <getDriver1ReceiveVal>:
}
uint16_t getDriver2angle(void) {
	return driver2.factor;
}

mD_interface getDriver1ReceiveVal(void) {
 800bab8:	b480      	push	{r7}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
	return driver1;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	4a05      	ldr	r2, [pc, #20]	; (800bad8 <getDriver1ReceiveVal+0x20>)
 800bac4:	6811      	ldr	r1, [r2, #0]
 800bac6:	6019      	str	r1, [r3, #0]
 800bac8:	8892      	ldrh	r2, [r2, #4]
 800baca:	809a      	strh	r2, [r3, #4]
}
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	370c      	adds	r7, #12
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bc80      	pop	{r7}
 800bad4:	4770      	bx	lr
 800bad6:	bf00      	nop
 800bad8:	20004044 	.word	0x20004044

0800badc <getDriver2ReceiveVal>:
tMD_interface getDriver2ReceiveVal(void) {
 800badc:	b480      	push	{r7}
 800bade:	b083      	sub	sp, #12
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
	return travelMotor;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	4a04      	ldr	r2, [pc, #16]	; (800baf8 <getDriver2ReceiveVal+0x1c>)
 800bae8:	ca07      	ldmia	r2, {r0, r1, r2}
 800baea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	370c      	adds	r7, #12
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bc80      	pop	{r7}
 800baf6:	4770      	bx	lr
 800baf8:	20004064 	.word	0x20004064

0800bafc <HAL_UART_RxCpltCallback>:
xSemaphoreHandle uart1SemphrHandle=NULL;
xSemaphoreHandle uart2SemphrHandle=NULL;
xSemaphoreHandle uart3SemphrHandle=NULL;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
	MDI_getDataChannel1_IT(huart);
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f7ff fe2d 	bl	800b764 <MDI_getDataChannel1_IT>
	MDI_getDataChannel2_IT(huart);
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f7ff ff3a 	bl	800b984 <MDI_getDataChannel2_IT>

}
 800bb10:	bf00      	nop
 800bb12:	3708      	adds	r7, #8
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <tasks_init>:

void tasks_init(void){
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af02      	add	r7, sp, #8

	 MX_USB_DEVICE_Init();
 800bb1e:	f7ff f8e5 	bl	800acec <MX_USB_DEVICE_Init>
	 * @param usStackDepth-> stack size
	 * @param pvParameters-> function parameters
	 * @param uxPriority -> Priority
	 * @param pxCreatedTask -> handle so id
	 * */
	vSemaphoreCreateBinary(uart1SemphrHandle);
 800bb22:	2203      	movs	r2, #3
 800bb24:	2100      	movs	r1, #0
 800bb26:	2001      	movs	r0, #1
 800bb28:	f7fc fca1 	bl	800846e <xQueueGenericCreate>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	4a4c      	ldr	r2, [pc, #304]	; (800bc60 <tasks_init+0x148>)
 800bb30:	6013      	str	r3, [r2, #0]
 800bb32:	4b4b      	ldr	r3, [pc, #300]	; (800bc60 <tasks_init+0x148>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d006      	beq.n	800bb48 <tasks_init+0x30>
 800bb3a:	4b49      	ldr	r3, [pc, #292]	; (800bc60 <tasks_init+0x148>)
 800bb3c:	6818      	ldr	r0, [r3, #0]
 800bb3e:	2300      	movs	r3, #0
 800bb40:	2200      	movs	r2, #0
 800bb42:	2100      	movs	r1, #0
 800bb44:	f7fc fcf4 	bl	8008530 <xQueueGenericSend>
	vSemaphoreCreateBinary(uart2SemphrHandle);
 800bb48:	2203      	movs	r2, #3
 800bb4a:	2100      	movs	r1, #0
 800bb4c:	2001      	movs	r0, #1
 800bb4e:	f7fc fc8e 	bl	800846e <xQueueGenericCreate>
 800bb52:	4603      	mov	r3, r0
 800bb54:	4a43      	ldr	r2, [pc, #268]	; (800bc64 <tasks_init+0x14c>)
 800bb56:	6013      	str	r3, [r2, #0]
 800bb58:	4b42      	ldr	r3, [pc, #264]	; (800bc64 <tasks_init+0x14c>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d006      	beq.n	800bb6e <tasks_init+0x56>
 800bb60:	4b40      	ldr	r3, [pc, #256]	; (800bc64 <tasks_init+0x14c>)
 800bb62:	6818      	ldr	r0, [r3, #0]
 800bb64:	2300      	movs	r3, #0
 800bb66:	2200      	movs	r2, #0
 800bb68:	2100      	movs	r1, #0
 800bb6a:	f7fc fce1 	bl	8008530 <xQueueGenericSend>
	vSemaphoreCreateBinary(uart3SemphrHandle);
 800bb6e:	2203      	movs	r2, #3
 800bb70:	2100      	movs	r1, #0
 800bb72:	2001      	movs	r0, #1
 800bb74:	f7fc fc7b 	bl	800846e <xQueueGenericCreate>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	4a3b      	ldr	r2, [pc, #236]	; (800bc68 <tasks_init+0x150>)
 800bb7c:	6013      	str	r3, [r2, #0]
 800bb7e:	4b3a      	ldr	r3, [pc, #232]	; (800bc68 <tasks_init+0x150>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d006      	beq.n	800bb94 <tasks_init+0x7c>
 800bb86:	4b38      	ldr	r3, [pc, #224]	; (800bc68 <tasks_init+0x150>)
 800bb88:	6818      	ldr	r0, [r3, #0]
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	2100      	movs	r1, #0
 800bb90:	f7fc fcce 	bl	8008530 <xQueueGenericSend>


	if(uart1SemphrHandle!=NULL && uart2SemphrHandle!=NULL && uart3SemphrHandle!=NULL){
 800bb94:	4b32      	ldr	r3, [pc, #200]	; (800bc60 <tasks_init+0x148>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d05d      	beq.n	800bc58 <tasks_init+0x140>
 800bb9c:	4b31      	ldr	r3, [pc, #196]	; (800bc64 <tasks_init+0x14c>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d059      	beq.n	800bc58 <tasks_init+0x140>
 800bba4:	4b30      	ldr	r3, [pc, #192]	; (800bc68 <tasks_init+0x150>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d055      	beq.n	800bc58 <tasks_init+0x140>


		xTaskCreate(computerValTask, "calc Uart 3val", configMINIMAL_STACK_SIZE, NULL,  55, NULL);
 800bbac:	2300      	movs	r3, #0
 800bbae:	9301      	str	r3, [sp, #4]
 800bbb0:	2337      	movs	r3, #55	; 0x37
 800bbb2:	9300      	str	r3, [sp, #0]
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	2280      	movs	r2, #128	; 0x80
 800bbb8:	492c      	ldr	r1, [pc, #176]	; (800bc6c <tasks_init+0x154>)
 800bbba:	482d      	ldr	r0, [pc, #180]	; (800bc70 <tasks_init+0x158>)
 800bbbc:	f7fd fa1a 	bl	8008ff4 <xTaskCreate>
		xTaskCreate(computerSendTask, "send Uart 3", configMINIMAL_STACK_SIZE, NULL,  55, NULL);
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	9301      	str	r3, [sp, #4]
 800bbc4:	2337      	movs	r3, #55	; 0x37
 800bbc6:	9300      	str	r3, [sp, #0]
 800bbc8:	2300      	movs	r3, #0
 800bbca:	2280      	movs	r2, #128	; 0x80
 800bbcc:	4929      	ldr	r1, [pc, #164]	; (800bc74 <tasks_init+0x15c>)
 800bbce:	482a      	ldr	r0, [pc, #168]	; (800bc78 <tasks_init+0x160>)
 800bbd0:	f7fd fa10 	bl	8008ff4 <xTaskCreate>
		//xTaskCreate(computerGetTask, "get Uart 3", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);

		xTaskCreate(sendDataUart1Task, "send Uart 1", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	9301      	str	r3, [sp, #4]
 800bbd8:	2337      	movs	r3, #55	; 0x37
 800bbda:	9300      	str	r3, [sp, #0]
 800bbdc:	2300      	movs	r3, #0
 800bbde:	2280      	movs	r2, #128	; 0x80
 800bbe0:	4926      	ldr	r1, [pc, #152]	; (800bc7c <tasks_init+0x164>)
 800bbe2:	4827      	ldr	r0, [pc, #156]	; (800bc80 <tasks_init+0x168>)
 800bbe4:	f7fd fa06 	bl	8008ff4 <xTaskCreate>
		xTaskCreate(sendDataUart2Task, "send Uart 2", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 800bbe8:	2300      	movs	r3, #0
 800bbea:	9301      	str	r3, [sp, #4]
 800bbec:	2337      	movs	r3, #55	; 0x37
 800bbee:	9300      	str	r3, [sp, #0]
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	2280      	movs	r2, #128	; 0x80
 800bbf4:	4923      	ldr	r1, [pc, #140]	; (800bc84 <tasks_init+0x16c>)
 800bbf6:	4824      	ldr	r0, [pc, #144]	; (800bc88 <tasks_init+0x170>)
 800bbf8:	f7fd f9fc 	bl	8008ff4 <xTaskCreate>

		xTaskCreate(getDataUart1Task, "get Uart 1", configMINIMAL_STACK_SIZE, NULL,  55, NULL);
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	9301      	str	r3, [sp, #4]
 800bc00:	2337      	movs	r3, #55	; 0x37
 800bc02:	9300      	str	r3, [sp, #0]
 800bc04:	2300      	movs	r3, #0
 800bc06:	2280      	movs	r2, #128	; 0x80
 800bc08:	4920      	ldr	r1, [pc, #128]	; (800bc8c <tasks_init+0x174>)
 800bc0a:	4821      	ldr	r0, [pc, #132]	; (800bc90 <tasks_init+0x178>)
 800bc0c:	f7fd f9f2 	bl	8008ff4 <xTaskCreate>
		xTaskCreate(getDataUart2Task, "get Uart 2", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 800bc10:	2300      	movs	r3, #0
 800bc12:	9301      	str	r3, [sp, #4]
 800bc14:	2337      	movs	r3, #55	; 0x37
 800bc16:	9300      	str	r3, [sp, #0]
 800bc18:	2300      	movs	r3, #0
 800bc1a:	2280      	movs	r2, #128	; 0x80
 800bc1c:	491d      	ldr	r1, [pc, #116]	; (800bc94 <tasks_init+0x17c>)
 800bc1e:	481e      	ldr	r0, [pc, #120]	; (800bc98 <tasks_init+0x180>)
 800bc20:	f7fd f9e8 	bl	8008ff4 <xTaskCreate>

		xTaskCreate(readSwitchsTask, "read switchs", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 800bc24:	2300      	movs	r3, #0
 800bc26:	9301      	str	r3, [sp, #4]
 800bc28:	2337      	movs	r3, #55	; 0x37
 800bc2a:	9300      	str	r3, [sp, #0]
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	2280      	movs	r2, #128	; 0x80
 800bc30:	491a      	ldr	r1, [pc, #104]	; (800bc9c <tasks_init+0x184>)
 800bc32:	481b      	ldr	r0, [pc, #108]	; (800bca0 <tasks_init+0x188>)
 800bc34:	f7fd f9de 	bl	8008ff4 <xTaskCreate>
		xTaskCreate(writeRelaysTask, "write relays", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 800bc38:	2300      	movs	r3, #0
 800bc3a:	9301      	str	r3, [sp, #4]
 800bc3c:	2337      	movs	r3, #55	; 0x37
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	2300      	movs	r3, #0
 800bc42:	2280      	movs	r2, #128	; 0x80
 800bc44:	4917      	ldr	r1, [pc, #92]	; (800bca4 <tasks_init+0x18c>)
 800bc46:	4818      	ldr	r0, [pc, #96]	; (800bca8 <tasks_init+0x190>)
 800bc48:	f7fd f9d4 	bl	8008ff4 <xTaskCreate>


	//	xTaskCreate(ledTestTask, "led task", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);


		driverInit();
 800bc4c:	f000 f9bc 	bl	800bfc8 <driverInit>
		IO_init();
 800bc50:	f7fa fb4a 	bl	80062e8 <IO_init>
		vTaskStartScheduler();
 800bc54:	f7fd fb3e 	bl	80092d4 <vTaskStartScheduler>
	}
}
 800bc58:	bf00      	nop
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	200038ec 	.word	0x200038ec
 800bc64:	200038f0 	.word	0x200038f0
 800bc68:	200038f4 	.word	0x200038f4
 800bc6c:	0800c180 	.word	0x0800c180
 800bc70:	0800bcc9 	.word	0x0800bcc9
 800bc74:	0800c190 	.word	0x0800c190
 800bc78:	0800be55 	.word	0x0800be55
 800bc7c:	0800c19c 	.word	0x0800c19c
 800bc80:	0800be81 	.word	0x0800be81
 800bc84:	0800c1a8 	.word	0x0800c1a8
 800bc88:	0800bedd 	.word	0x0800bedd
 800bc8c:	0800c1b4 	.word	0x0800c1b4
 800bc90:	0800bf69 	.word	0x0800bf69
 800bc94:	0800c1c0 	.word	0x0800c1c0
 800bc98:	0800bf99 	.word	0x0800bf99
 800bc9c:	0800c1cc 	.word	0x0800c1cc
 800bca0:	0800bcad 	.word	0x0800bcad
 800bca4:	0800c1dc 	.word	0x0800c1dc
 800bca8:	0800bcbb 	.word	0x0800bcbb

0800bcac <readSwitchsTask>:

void readSwitchsTask(void *params){
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
	while(1){
		IO_readInputSwitchs();
 800bcb4:	f7fa fb70 	bl	8006398 <IO_readInputSwitchs>
	while(1){
 800bcb8:	e7fc      	b.n	800bcb4 <readSwitchsTask+0x8>

0800bcba <writeRelaysTask>:
	}
}
void writeRelaysTask(void *params){
 800bcba:	b580      	push	{r7, lr}
 800bcbc:	b082      	sub	sp, #8
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
	while(1){
		IO_writeOutputRelay();
 800bcc2:	f7fa fbeb 	bl	800649c <IO_writeOutputRelay>
	while(1){
 800bcc6:	e7fc      	b.n	800bcc2 <writeRelaysTask+0x8>

0800bcc8 <computerValTask>:
		xSemaphoreTake(uart3SemphrHandle, portMAX_DELAY);
		CI_enableGetDataChannel();
		xSemaphoreGive(uart3SemphrHandle);
	}
}
void computerValTask(void *params){
 800bcc8:	b590      	push	{r4, r7, lr}
 800bcca:	b099      	sub	sp, #100	; 0x64
 800bccc:	af02      	add	r7, sp, #8
 800bcce:	6078      	str	r0, [r7, #4]
	while(1){
		llsendComputerVals.drive_speed=(int32_t)(getDriver2ReceiveVal().speed)*10000;
 800bcd0:	f107 0308 	add.w	r3, r7, #8
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f7ff ff01 	bl	800badc <getDriver2ReceiveVal>
 800bcda:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800bcde:	461a      	mov	r2, r3
 800bce0:	f242 7310 	movw	r3, #10000	; 0x2710
 800bce4:	fb03 f302 	mul.w	r3, r3, r2
 800bce8:	4a57      	ldr	r2, [pc, #348]	; (800be48 <computerValTask+0x180>)
 800bcea:	6053      	str	r3, [r2, #4]
			llsendComputerVals.steer_pos =(int32_t)(getDriver1ReceiveVal().angle)*10000;
 800bcec:	f107 0314 	add.w	r3, r7, #20
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f7ff fee1 	bl	800bab8 <getDriver1ReceiveVal>
 800bcf6:	8b3b      	ldrh	r3, [r7, #24]
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	f242 7310 	movw	r3, #10000	; 0x2710
 800bcfe:	fb03 f302 	mul.w	r3, r3, r2
 800bd02:	4a51      	ldr	r2, [pc, #324]	; (800be48 <computerValTask+0x180>)
 800bd04:	6013      	str	r3, [r2, #0]
			if(getDriver2ReceiveVal().encoder<0){
 800bd06:	f107 031c 	add.w	r3, r7, #28
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7ff fee6 	bl	800badc <getDriver2ReceiveVal>
 800bd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	da47      	bge.n	800bda6 <computerValTask+0xde>
				int intToUint =getDriver2ReceiveVal().encoder;
 800bd16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7ff fede 	bl	800badc <getDriver2ReceiveVal>
 800bd20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd22:	653b      	str	r3, [r7, #80]	; 0x50
				intToUint=(~intToUint+1);
 800bd24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd26:	425b      	negs	r3, r3
 800bd28:	653b      	str	r3, [r7, #80]	; 0x50
				uint16_t tmp =(intToUint/800);
 800bd2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd2c:	4a47      	ldr	r2, [pc, #284]	; (800be4c <computerValTask+0x184>)
 800bd2e:	fb82 1203 	smull	r1, r2, r2, r3
 800bd32:	1212      	asrs	r2, r2, #8
 800bd34:	17db      	asrs	r3, r3, #31
 800bd36:	1ad3      	subs	r3, r2, r3
 800bd38:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				uint16_t tmp2=(intToUint%800);
 800bd3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd3e:	4a43      	ldr	r2, [pc, #268]	; (800be4c <computerValTask+0x184>)
 800bd40:	fb82 1203 	smull	r1, r2, r2, r3
 800bd44:	1211      	asrs	r1, r2, #8
 800bd46:	17da      	asrs	r2, r3, #31
 800bd48:	1a8a      	subs	r2, r1, r2
 800bd4a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800bd4e:	fb01 f202 	mul.w	r2, r1, r2
 800bd52:	1a9a      	subs	r2, r3, r2
 800bd54:	4613      	mov	r3, r2
 800bd56:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				llsendComputerVals.drive_pos= -(tmp+valuesMapforFloat(tmp2,0,800,0.0f,1.0f))*10000;
 800bd5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7f4 fab0 	bl	80002c4 <__aeabi_i2f>
 800bd64:	4604      	mov	r4, r0
 800bd66:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800bd6a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bd6e:	9300      	str	r3, [sp, #0]
 800bd70:	f04f 0300 	mov.w	r3, #0
 800bd74:	f44f 7248 	mov.w	r2, #800	; 0x320
 800bd78:	2100      	movs	r1, #0
 800bd7a:	f000 f951 	bl	800c020 <valuesMapforFloat>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	4619      	mov	r1, r3
 800bd82:	4620      	mov	r0, r4
 800bd84:	f7f4 f9ea 	bl	800015c <__addsf3>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bd8e:	4930      	ldr	r1, [pc, #192]	; (800be50 <computerValTask+0x188>)
 800bd90:	4618      	mov	r0, r3
 800bd92:	f7f4 faeb 	bl	800036c <__aeabi_fmul>
 800bd96:	4603      	mov	r3, r0
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7f4 fc37 	bl	800060c <__aeabi_f2iz>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	4a29      	ldr	r2, [pc, #164]	; (800be48 <computerValTask+0x180>)
 800bda2:	6093      	str	r3, [r2, #8]
 800bda4:	e044      	b.n	800be30 <computerValTask+0x168>
			}
			else {
				uint16_t tmp =((getDriver2ReceiveVal().encoder)/800);
 800bda6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7ff fe96 	bl	800badc <getDriver2ReceiveVal>
 800bdb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdb2:	4a26      	ldr	r2, [pc, #152]	; (800be4c <computerValTask+0x184>)
 800bdb4:	fb82 1203 	smull	r1, r2, r2, r3
 800bdb8:	1212      	asrs	r2, r2, #8
 800bdba:	17db      	asrs	r3, r3, #31
 800bdbc:	1ad3      	subs	r3, r2, r3
 800bdbe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				uint16_t tmp2=((getDriver2ReceiveVal().encoder)%800);
 800bdc2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f7ff fe88 	bl	800badc <getDriver2ReceiveVal>
 800bdcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdce:	4a1f      	ldr	r2, [pc, #124]	; (800be4c <computerValTask+0x184>)
 800bdd0:	fb82 1203 	smull	r1, r2, r2, r3
 800bdd4:	1211      	asrs	r1, r2, #8
 800bdd6:	17da      	asrs	r2, r3, #31
 800bdd8:	1a8a      	subs	r2, r1, r2
 800bdda:	f44f 7148 	mov.w	r1, #800	; 0x320
 800bdde:	fb01 f202 	mul.w	r2, r1, r2
 800bde2:	1a9a      	subs	r2, r3, r2
 800bde4:	4613      	mov	r3, r2
 800bde6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				llsendComputerVals.drive_pos= (tmp+valuesMapforFloat(tmp2,0,800,0.0f,1.0f))*10000;
 800bdea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7f4 fa68 	bl	80002c4 <__aeabi_i2f>
 800bdf4:	4604      	mov	r4, r0
 800bdf6:	f8b7 0054 	ldrh.w	r0, [r7, #84]	; 0x54
 800bdfa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bdfe:	9300      	str	r3, [sp, #0]
 800be00:	f04f 0300 	mov.w	r3, #0
 800be04:	f44f 7248 	mov.w	r2, #800	; 0x320
 800be08:	2100      	movs	r1, #0
 800be0a:	f000 f909 	bl	800c020 <valuesMapforFloat>
 800be0e:	4603      	mov	r3, r0
 800be10:	4619      	mov	r1, r3
 800be12:	4620      	mov	r0, r4
 800be14:	f7f4 f9a2 	bl	800015c <__addsf3>
 800be18:	4603      	mov	r3, r0
 800be1a:	490d      	ldr	r1, [pc, #52]	; (800be50 <computerValTask+0x188>)
 800be1c:	4618      	mov	r0, r3
 800be1e:	f7f4 faa5 	bl	800036c <__aeabi_fmul>
 800be22:	4603      	mov	r3, r0
 800be24:	4618      	mov	r0, r3
 800be26:	f7f4 fbf1 	bl	800060c <__aeabi_f2iz>
 800be2a:	4603      	mov	r3, r0
 800be2c:	4a06      	ldr	r2, [pc, #24]	; (800be48 <computerValTask+0x180>)
 800be2e:	6093      	str	r3, [r2, #8]
			}
			llsendComputerVals.switch_vals=IO_inputsBitsPackageToByte(IO_getInputOutputsVal());
 800be30:	f7fa fc98 	bl	8006764 <IO_getInputOutputsVal>
 800be34:	4603      	mov	r3, r0
 800be36:	4618      	mov	r0, r3
 800be38:	f7fa fbda 	bl	80065f0 <IO_inputsBitsPackageToByte>
 800be3c:	4603      	mov	r3, r0
 800be3e:	b2da      	uxtb	r2, r3
 800be40:	4b01      	ldr	r3, [pc, #4]	; (800be48 <computerValTask+0x180>)
 800be42:	731a      	strb	r2, [r3, #12]
	while(1){
 800be44:	e744      	b.n	800bcd0 <computerValTask+0x8>
 800be46:	bf00      	nop
 800be48:	20004098 	.word	0x20004098
 800be4c:	51eb851f 	.word	0x51eb851f
 800be50:	461c4000 	.word	0x461c4000

0800be54 <computerSendTask>:

	}

}

void computerSendTask(void *params){
 800be54:	b590      	push	{r4, r7, lr}
 800be56:	b085      	sub	sp, #20
 800be58:	af02      	add	r7, sp, #8
 800be5a:	6078      	str	r0, [r7, #4]
	while(1){
	CI_sendDataChannel(0x11,llsendComputerVals.steer_pos ,llsendComputerVals.drive_pos,
 800be5c:	4b07      	ldr	r3, [pc, #28]	; (800be7c <computerSendTask+0x28>)
 800be5e:	6819      	ldr	r1, [r3, #0]
 800be60:	4b06      	ldr	r3, [pc, #24]	; (800be7c <computerSendTask+0x28>)
 800be62:	689a      	ldr	r2, [r3, #8]
 800be64:	4b05      	ldr	r3, [pc, #20]	; (800be7c <computerSendTask+0x28>)
 800be66:	6858      	ldr	r0, [r3, #4]
 800be68:	4b04      	ldr	r3, [pc, #16]	; (800be7c <computerSendTask+0x28>)
 800be6a:	7b1b      	ldrb	r3, [r3, #12]
 800be6c:	2432      	movs	r4, #50	; 0x32
 800be6e:	9401      	str	r4, [sp, #4]
 800be70:	9300      	str	r3, [sp, #0]
 800be72:	4603      	mov	r3, r0
 800be74:	2011      	movs	r0, #17
 800be76:	f7f4 fbef 	bl	8000658 <CI_sendDataChannel>
 800be7a:	e7ef      	b.n	800be5c <computerSendTask+0x8>
 800be7c:	20004098 	.word	0x20004098

0800be80 <sendDataUart1Task>:
				llsendComputerVals.drive_speed,llsendComputerVals.switch_vals,50);

	}
}

void sendDataUart1Task(void *params){
 800be80:	b590      	push	{r4, r7, lr}
 800be82:	b08b      	sub	sp, #44	; 0x2c
 800be84:	af02      	add	r7, sp, #8
 800be86:	6078      	str	r0, [r7, #4]

	while(1){
		if(getComputerVals().size)	driveDriver.angle=(uint16_t)((getComputerVals().steer_pos)/10000);
 800be88:	f107 0308 	add.w	r3, r7, #8
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7f4 fcc7 	bl	8000820 <getComputerVals>
 800be92:	893b      	ldrh	r3, [r7, #8]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d00e      	beq.n	800beb6 <sendDataUart1Task+0x36>
 800be98:	f107 0314 	add.w	r3, r7, #20
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7f4 fcbf 	bl	8000820 <getComputerVals>
 800bea2:	69bb      	ldr	r3, [r7, #24]
 800bea4:	4a0b      	ldr	r2, [pc, #44]	; (800bed4 <sendDataUart1Task+0x54>)
 800bea6:	fb82 1203 	smull	r1, r2, r2, r3
 800beaa:	1312      	asrs	r2, r2, #12
 800beac:	17db      	asrs	r3, r3, #31
 800beae:	1ad3      	subs	r3, r2, r3
 800beb0:	b29a      	uxth	r2, r3
 800beb2:	4b09      	ldr	r3, [pc, #36]	; (800bed8 <sendDataUart1Task+0x58>)
 800beb4:	809a      	strh	r2, [r3, #4]
			MDI_sendDataChannel1Ver2(driveDriver.angle,driveDriver.pid_kp,driveDriver.pid_ki,driveDriver.pid_kd,driveDriver.factor);
 800beb6:	4b08      	ldr	r3, [pc, #32]	; (800bed8 <sendDataUart1Task+0x58>)
 800beb8:	8898      	ldrh	r0, [r3, #4]
 800beba:	4b07      	ldr	r3, [pc, #28]	; (800bed8 <sendDataUart1Task+0x58>)
 800bebc:	7899      	ldrb	r1, [r3, #2]
 800bebe:	4b06      	ldr	r3, [pc, #24]	; (800bed8 <sendDataUart1Task+0x58>)
 800bec0:	785a      	ldrb	r2, [r3, #1]
 800bec2:	4b05      	ldr	r3, [pc, #20]	; (800bed8 <sendDataUart1Task+0x58>)
 800bec4:	781c      	ldrb	r4, [r3, #0]
 800bec6:	4b04      	ldr	r3, [pc, #16]	; (800bed8 <sendDataUart1Task+0x58>)
 800bec8:	78db      	ldrb	r3, [r3, #3]
 800beca:	9300      	str	r3, [sp, #0]
 800becc:	4623      	mov	r3, r4
 800bece:	f7ff fbcb 	bl	800b668 <MDI_sendDataChannel1Ver2>
		if(getComputerVals().size)	driveDriver.angle=(uint16_t)((getComputerVals().steer_pos)/10000);
 800bed2:	e7d9      	b.n	800be88 <sendDataUart1Task+0x8>
 800bed4:	68db8bad 	.word	0x68db8bad
 800bed8:	200040a8 	.word	0x200040a8

0800bedc <sendDataUart2Task>:

	}
}
uint8_t messageWait;
void sendDataUart2Task(void *params){
 800bedc:	b5b0      	push	{r4, r5, r7, lr}
 800bede:	b08a      	sub	sp, #40	; 0x28
 800bee0:	af02      	add	r7, sp, #8
 800bee2:	6078      	str	r0, [r7, #4]
	while(1){
		if(getComputerVals().size){	travelDriver.speed=(int16_t)((getComputerVals().drive_speed)/10000); messageWait=0;}
 800bee4:	f107 0308 	add.w	r3, r7, #8
 800bee8:	4618      	mov	r0, r3
 800beea:	f7f4 fc99 	bl	8000820 <getComputerVals>
 800beee:	893b      	ldrh	r3, [r7, #8]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d012      	beq.n	800bf1a <sendDataUart2Task+0x3e>
 800bef4:	f107 0314 	add.w	r3, r7, #20
 800bef8:	4618      	mov	r0, r3
 800befa:	f7f4 fc91 	bl	8000820 <getComputerVals>
 800befe:	69fb      	ldr	r3, [r7, #28]
 800bf00:	4a16      	ldr	r2, [pc, #88]	; (800bf5c <sendDataUart2Task+0x80>)
 800bf02:	fb82 1203 	smull	r1, r2, r2, r3
 800bf06:	1312      	asrs	r2, r2, #12
 800bf08:	17db      	asrs	r3, r3, #31
 800bf0a:	1ad3      	subs	r3, r2, r3
 800bf0c:	b21a      	sxth	r2, r3
 800bf0e:	4b14      	ldr	r3, [pc, #80]	; (800bf60 <sendDataUart2Task+0x84>)
 800bf10:	809a      	strh	r2, [r3, #4]
 800bf12:	4b14      	ldr	r3, [pc, #80]	; (800bf64 <sendDataUart2Task+0x88>)
 800bf14:	2200      	movs	r2, #0
 800bf16:	701a      	strb	r2, [r3, #0]
 800bf18:	e005      	b.n	800bf26 <sendDataUart2Task+0x4a>
		else messageWait++;
 800bf1a:	4b12      	ldr	r3, [pc, #72]	; (800bf64 <sendDataUart2Task+0x88>)
 800bf1c:	781b      	ldrb	r3, [r3, #0]
 800bf1e:	3301      	adds	r3, #1
 800bf20:	b2da      	uxtb	r2, r3
 800bf22:	4b10      	ldr	r3, [pc, #64]	; (800bf64 <sendDataUart2Task+0x88>)
 800bf24:	701a      	strb	r2, [r3, #0]
		if(messageWait>50)travelDriver.speed=0;
 800bf26:	4b0f      	ldr	r3, [pc, #60]	; (800bf64 <sendDataUart2Task+0x88>)
 800bf28:	781b      	ldrb	r3, [r3, #0]
 800bf2a:	2b32      	cmp	r3, #50	; 0x32
 800bf2c:	d902      	bls.n	800bf34 <sendDataUart2Task+0x58>
 800bf2e:	4b0c      	ldr	r3, [pc, #48]	; (800bf60 <sendDataUart2Task+0x84>)
 800bf30:	2200      	movs	r2, #0
 800bf32:	809a      	strh	r2, [r3, #4]
				MDI_sendDataChannel2Ver2(travelDriver.speed,travelDriver.pid_kp,travelDriver.pid_ki,travelDriver.pid_kd,travelDriver.soft_k,travelDriver.soft_f);
 800bf34:	4b0a      	ldr	r3, [pc, #40]	; (800bf60 <sendDataUart2Task+0x84>)
 800bf36:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 800bf3a:	4b09      	ldr	r3, [pc, #36]	; (800bf60 <sendDataUart2Task+0x84>)
 800bf3c:	7819      	ldrb	r1, [r3, #0]
 800bf3e:	4b08      	ldr	r3, [pc, #32]	; (800bf60 <sendDataUart2Task+0x84>)
 800bf40:	785c      	ldrb	r4, [r3, #1]
 800bf42:	4b07      	ldr	r3, [pc, #28]	; (800bf60 <sendDataUart2Task+0x84>)
 800bf44:	789d      	ldrb	r5, [r3, #2]
 800bf46:	4b06      	ldr	r3, [pc, #24]	; (800bf60 <sendDataUart2Task+0x84>)
 800bf48:	79db      	ldrb	r3, [r3, #7]
 800bf4a:	4a05      	ldr	r2, [pc, #20]	; (800bf60 <sendDataUart2Task+0x84>)
 800bf4c:	7992      	ldrb	r2, [r2, #6]
 800bf4e:	9201      	str	r2, [sp, #4]
 800bf50:	9300      	str	r3, [sp, #0]
 800bf52:	462b      	mov	r3, r5
 800bf54:	4622      	mov	r2, r4
 800bf56:	f7ff fc8d 	bl	800b874 <MDI_sendDataChannel2Ver2>
		if(getComputerVals().size){	travelDriver.speed=(int16_t)((getComputerVals().drive_speed)/10000); messageWait=0;}
 800bf5a:	e7c3      	b.n	800bee4 <sendDataUart2Task+0x8>
 800bf5c:	68db8bad 	.word	0x68db8bad
 800bf60:	2000408c 	.word	0x2000408c
 800bf64:	20004088 	.word	0x20004088

0800bf68 <getDataUart1Task>:
	}
}
void getDataUart1Task(void *params){
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b082      	sub	sp, #8
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(uart1SemphrHandle, portMAX_DELAY);
 800bf70:	4b08      	ldr	r3, [pc, #32]	; (800bf94 <getDataUart1Task+0x2c>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f04f 31ff 	mov.w	r1, #4294967295
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7fc fd4f 	bl	8008a1c <xQueueSemaphoreTake>
		MDI_enableGetDataChannel1();
 800bf7e:	f7ff fbe3 	bl	800b748 <MDI_enableGetDataChannel1>
		xSemaphoreGive(uart1SemphrHandle);
 800bf82:	4b04      	ldr	r3, [pc, #16]	; (800bf94 <getDataUart1Task+0x2c>)
 800bf84:	6818      	ldr	r0, [r3, #0]
 800bf86:	2300      	movs	r3, #0
 800bf88:	2200      	movs	r2, #0
 800bf8a:	2100      	movs	r1, #0
 800bf8c:	f7fc fad0 	bl	8008530 <xQueueGenericSend>
		xSemaphoreTake(uart1SemphrHandle, portMAX_DELAY);
 800bf90:	e7ee      	b.n	800bf70 <getDataUart1Task+0x8>
 800bf92:	bf00      	nop
 800bf94:	200038ec 	.word	0x200038ec

0800bf98 <getDataUart2Task>:

	}
}
void getDataUart2Task(void *params){
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b082      	sub	sp, #8
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(uart2SemphrHandle, portMAX_DELAY);
 800bfa0:	4b08      	ldr	r3, [pc, #32]	; (800bfc4 <getDataUart2Task+0x2c>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f04f 31ff 	mov.w	r1, #4294967295
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f7fc fd37 	bl	8008a1c <xQueueSemaphoreTake>
		MDI_enableGetDataChannel2();
 800bfae:	f7ff fcdb 	bl	800b968 <MDI_enableGetDataChannel2>
		xSemaphoreGive(uart2SemphrHandle);
 800bfb2:	4b04      	ldr	r3, [pc, #16]	; (800bfc4 <getDataUart2Task+0x2c>)
 800bfb4:	6818      	ldr	r0, [r3, #0]
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	2200      	movs	r2, #0
 800bfba:	2100      	movs	r1, #0
 800bfbc:	f7fc fab8 	bl	8008530 <xQueueGenericSend>
		xSemaphoreTake(uart2SemphrHandle, portMAX_DELAY);
 800bfc0:	e7ee      	b.n	800bfa0 <getDataUart2Task+0x8>
 800bfc2:	bf00      	nop
 800bfc4:	200038f0 	.word	0x200038f0

0800bfc8 <driverInit>:
	}
}

void driverInit(void){
 800bfc8:	b480      	push	{r7}
 800bfca:	af00      	add	r7, sp, #0
	driveDriver.angle=500;
 800bfcc:	4b12      	ldr	r3, [pc, #72]	; (800c018 <driverInit+0x50>)
 800bfce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800bfd2:	809a      	strh	r2, [r3, #4]
	driveDriver.pid_kp=100;
 800bfd4:	4b10      	ldr	r3, [pc, #64]	; (800c018 <driverInit+0x50>)
 800bfd6:	2264      	movs	r2, #100	; 0x64
 800bfd8:	709a      	strb	r2, [r3, #2]
	driveDriver.pid_ki=1;
 800bfda:	4b0f      	ldr	r3, [pc, #60]	; (800c018 <driverInit+0x50>)
 800bfdc:	2201      	movs	r2, #1
 800bfde:	705a      	strb	r2, [r3, #1]
	driveDriver.pid_kd=200;
 800bfe0:	4b0d      	ldr	r3, [pc, #52]	; (800c018 <driverInit+0x50>)
 800bfe2:	22c8      	movs	r2, #200	; 0xc8
 800bfe4:	701a      	strb	r2, [r3, #0]
	driveDriver.factor=100;
 800bfe6:	4b0c      	ldr	r3, [pc, #48]	; (800c018 <driverInit+0x50>)
 800bfe8:	2264      	movs	r2, #100	; 0x64
 800bfea:	70da      	strb	r2, [r3, #3]

	travelDriver.speed =0;
 800bfec:	4b0b      	ldr	r3, [pc, #44]	; (800c01c <driverInit+0x54>)
 800bfee:	2200      	movs	r2, #0
 800bff0:	809a      	strh	r2, [r3, #4]
	travelDriver.pid_kp=70;
 800bff2:	4b0a      	ldr	r3, [pc, #40]	; (800c01c <driverInit+0x54>)
 800bff4:	2246      	movs	r2, #70	; 0x46
 800bff6:	701a      	strb	r2, [r3, #0]
	travelDriver.pid_ki=1;
 800bff8:	4b08      	ldr	r3, [pc, #32]	; (800c01c <driverInit+0x54>)
 800bffa:	2201      	movs	r2, #1
 800bffc:	705a      	strb	r2, [r3, #1]
	travelDriver.pid_kd=1;
 800bffe:	4b07      	ldr	r3, [pc, #28]	; (800c01c <driverInit+0x54>)
 800c000:	2201      	movs	r2, #1
 800c002:	709a      	strb	r2, [r3, #2]
	travelDriver.soft_k =1;
 800c004:	4b05      	ldr	r3, [pc, #20]	; (800c01c <driverInit+0x54>)
 800c006:	2201      	movs	r2, #1
 800c008:	71da      	strb	r2, [r3, #7]
	travelDriver.soft_f =1;
 800c00a:	4b04      	ldr	r3, [pc, #16]	; (800c01c <driverInit+0x54>)
 800c00c:	2201      	movs	r2, #1
 800c00e:	719a      	strb	r2, [r3, #6]

}
 800c010:	bf00      	nop
 800c012:	46bd      	mov	sp, r7
 800c014:	bc80      	pop	{r7}
 800c016:	4770      	bx	lr
 800c018:	200040a8 	.word	0x200040a8
 800c01c:	2000408c 	.word	0x2000408c

0800c020 <valuesMapforFloat>:
	return (inValue - inMin)*(outMax - outMin) / (inMax - inMin) + outMin;
}
int16_t valuesMapFloat(float inValue, float inMin, float inMax, int16_t outMin, int16_t outMax) {
	return (inValue - inMin)*(outMax - outMin) / (inMax - inMin) + outMin;
}
float valuesMapforFloat(uint16_t inValue, uint16_t inMin, uint16_t inMax, float outMin, float outMax) {
 800c020:	b590      	push	{r4, r7, lr}
 800c022:	b085      	sub	sp, #20
 800c024:	af00      	add	r7, sp, #0
 800c026:	607b      	str	r3, [r7, #4]
 800c028:	4603      	mov	r3, r0
 800c02a:	81fb      	strh	r3, [r7, #14]
 800c02c:	460b      	mov	r3, r1
 800c02e:	81bb      	strh	r3, [r7, #12]
 800c030:	4613      	mov	r3, r2
 800c032:	817b      	strh	r3, [r7, #10]
	return (inValue - inMin)*(outMax - outMin) / (inMax - inMin) + outMin;
 800c034:	89fa      	ldrh	r2, [r7, #14]
 800c036:	89bb      	ldrh	r3, [r7, #12]
 800c038:	1ad3      	subs	r3, r2, r3
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7f4 f942 	bl	80002c4 <__aeabi_i2f>
 800c040:	4604      	mov	r4, r0
 800c042:	6879      	ldr	r1, [r7, #4]
 800c044:	6a38      	ldr	r0, [r7, #32]
 800c046:	f7f4 f887 	bl	8000158 <__aeabi_fsub>
 800c04a:	4603      	mov	r3, r0
 800c04c:	4619      	mov	r1, r3
 800c04e:	4620      	mov	r0, r4
 800c050:	f7f4 f98c 	bl	800036c <__aeabi_fmul>
 800c054:	4603      	mov	r3, r0
 800c056:	461c      	mov	r4, r3
 800c058:	897a      	ldrh	r2, [r7, #10]
 800c05a:	89bb      	ldrh	r3, [r7, #12]
 800c05c:	1ad3      	subs	r3, r2, r3
 800c05e:	4618      	mov	r0, r3
 800c060:	f7f4 f930 	bl	80002c4 <__aeabi_i2f>
 800c064:	4603      	mov	r3, r0
 800c066:	4619      	mov	r1, r3
 800c068:	4620      	mov	r0, r4
 800c06a:	f7f4 fa33 	bl	80004d4 <__aeabi_fdiv>
 800c06e:	4603      	mov	r3, r0
 800c070:	6879      	ldr	r1, [r7, #4]
 800c072:	4618      	mov	r0, r3
 800c074:	f7f4 f872 	bl	800015c <__addsf3>
 800c078:	4603      	mov	r3, r0
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3714      	adds	r7, #20
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd90      	pop	{r4, r7, pc}
	...

0800c084 <__libc_init_array>:
 800c084:	b570      	push	{r4, r5, r6, lr}
 800c086:	2600      	movs	r6, #0
 800c088:	4d0c      	ldr	r5, [pc, #48]	; (800c0bc <__libc_init_array+0x38>)
 800c08a:	4c0d      	ldr	r4, [pc, #52]	; (800c0c0 <__libc_init_array+0x3c>)
 800c08c:	1b64      	subs	r4, r4, r5
 800c08e:	10a4      	asrs	r4, r4, #2
 800c090:	42a6      	cmp	r6, r4
 800c092:	d109      	bne.n	800c0a8 <__libc_init_array+0x24>
 800c094:	f000 f830 	bl	800c0f8 <_init>
 800c098:	2600      	movs	r6, #0
 800c09a:	4d0a      	ldr	r5, [pc, #40]	; (800c0c4 <__libc_init_array+0x40>)
 800c09c:	4c0a      	ldr	r4, [pc, #40]	; (800c0c8 <__libc_init_array+0x44>)
 800c09e:	1b64      	subs	r4, r4, r5
 800c0a0:	10a4      	asrs	r4, r4, #2
 800c0a2:	42a6      	cmp	r6, r4
 800c0a4:	d105      	bne.n	800c0b2 <__libc_init_array+0x2e>
 800c0a6:	bd70      	pop	{r4, r5, r6, pc}
 800c0a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0ac:	4798      	blx	r3
 800c0ae:	3601      	adds	r6, #1
 800c0b0:	e7ee      	b.n	800c090 <__libc_init_array+0xc>
 800c0b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0b6:	4798      	blx	r3
 800c0b8:	3601      	adds	r6, #1
 800c0ba:	e7f2      	b.n	800c0a2 <__libc_init_array+0x1e>
 800c0bc:	0800c228 	.word	0x0800c228
 800c0c0:	0800c228 	.word	0x0800c228
 800c0c4:	0800c228 	.word	0x0800c228
 800c0c8:	0800c22c 	.word	0x0800c22c

0800c0cc <memcpy>:
 800c0cc:	440a      	add	r2, r1
 800c0ce:	4291      	cmp	r1, r2
 800c0d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0d4:	d100      	bne.n	800c0d8 <memcpy+0xc>
 800c0d6:	4770      	bx	lr
 800c0d8:	b510      	push	{r4, lr}
 800c0da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0de:	4291      	cmp	r1, r2
 800c0e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0e4:	d1f9      	bne.n	800c0da <memcpy+0xe>
 800c0e6:	bd10      	pop	{r4, pc}

0800c0e8 <memset>:
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	4402      	add	r2, r0
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d100      	bne.n	800c0f2 <memset+0xa>
 800c0f0:	4770      	bx	lr
 800c0f2:	f803 1b01 	strb.w	r1, [r3], #1
 800c0f6:	e7f9      	b.n	800c0ec <memset+0x4>

0800c0f8 <_init>:
 800c0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0fa:	bf00      	nop
 800c0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0fe:	bc08      	pop	{r3}
 800c100:	469e      	mov	lr, r3
 800c102:	4770      	bx	lr

0800c104 <_fini>:
 800c104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c106:	bf00      	nop
 800c108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c10a:	bc08      	pop	{r3}
 800c10c:	469e      	mov	lr, r3
 800c10e:	4770      	bx	lr
